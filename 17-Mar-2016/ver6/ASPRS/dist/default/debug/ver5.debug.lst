

Microchip Technology PIC PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Mar 08 00:20:28 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text15,local,class=CODE,merge=1,delta=2
    20                           	psect	text17,local,class=CODE,merge=1,delta=2
    21                           	psect	text18,local,class=CODE,merge=1,delta=2
    22                           	psect	text19,local,class=CODE,merge=1,delta=2
    23                           	psect	text20,local,class=CODE,merge=1,delta=2
    24                           	psect	text21,local,class=CODE,merge=1,delta=2
    25                           	psect	text23,local,class=CODE,merge=1,delta=2
    26                           	psect	text24,local,class=CODE,merge=1,delta=2
    27                           	psect	text31,local,class=CODE,merge=1,delta=2
    28                           	psect	text40,local,class=CODE,merge=1,delta=2
    29                           	psect	text43,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	pa_nodes,global,class=CODE,delta=2
    32                           	psect	maintext_split_1,global,class=CODE,split=1,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  0007                     	;# 
    42  0008                     	;# 
    43  0009                     	;# 
    44  000A                     	;# 
    45  000B                     	;# 
    46  000C                     	;# 
    47  000D                     	;# 
    48  000E                     	;# 
    49  000E                     	;# 
    50  000F                     	;# 
    51  0010                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0014                     	;# 
    56  0015                     	;# 
    57  0015                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001B                     	;# 
    65  001C                     	;# 
    66  001D                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  0086                     	;# 
    72  0087                     	;# 
    73  0088                     	;# 
    74  0089                     	;# 
    75  008C                     	;# 
    76  008D                     	;# 
    77  008E                     	;# 
    78  0091                     	;# 
    79  0092                     	;# 
    80  0093                     	;# 
    81  0094                     	;# 
    82  0098                     	;# 
    83  0099                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  009F                     	;# 
    88  010C                     	;# 
    89  010D                     	;# 
    90  010E                     	;# 
    91  010F                     	;# 
    92  018C                     	;# 
    93  018D                     	;# 
    94                           
    95                           	psect	strings
    96  0800                     __pstrings:	
    97  0800                     stringtab:	
    98  0800                     __stringtab:	
    99  0800                     stringcode:	
   100                           ;	String table - string pointers are 1 byte each
   101                           
   102  0800                     stringdir:	
   103  0800  3008               	movlw	high stringdir
   104  0801  008A               	movwf	10
   105  0802  0804               	movf	4,w
   106  0803  0A84               	incf	4,f
   107  0804  0782               	addwf	2,f
   108  0805                     __stringbase:	
   109  0805  3400               	retlw	0
   110  0806                     __end_of__stringtab:	
   111  0806                     _octpowers:	
   112  0806  3401               	retlw	1
   113  0807  3400               	retlw	0
   114  0808  3408               	retlw	8
   115  0809  3400               	retlw	0
   116  080A  3440               	retlw	64
   117  080B  3400               	retlw	0
   118  080C  3400               	retlw	0
   119  080D  3402               	retlw	2
   120  080E  3400               	retlw	0
   121  080F  3410               	retlw	16
   122  0810  3400               	retlw	0
   123  0811  3480               	retlw	128
   124  0812                     __end_of_octpowers:	
   125  0812                     _dpowers:	
   126  0812  3401               	retlw	1
   127  0813  3400               	retlw	0
   128  0814  340A               	retlw	10
   129  0815  3400               	retlw	0
   130  0816  3464               	retlw	100
   131  0817  3400               	retlw	0
   132  0818  34E8               	retlw	232
   133  0819  3403               	retlw	3
   134  081A  3410               	retlw	16
   135  081B  3427               	retlw	39
   136  081C                     __end_of_dpowers:	
   137  081C                     _hexpowers:	
   138  081C  3401               	retlw	1
   139  081D  3400               	retlw	0
   140  081E  3410               	retlw	16
   141  081F  3400               	retlw	0
   142  0820  3400               	retlw	0
   143  0821  3401               	retlw	1
   144  0822  3400               	retlw	0
   145  0823  3410               	retlw	16
   146  0824                     __end_of_hexpowers:	
   147  001F                     _ADCON0	set	31
   148  001E                     _ADRESH	set	30
   149  0005                     _PORTA	set	5
   150  0006                     _PORTB	set	6
   151  0007                     _PORTC	set	7
   152  0008                     _PORTD	set	8
   153  0009                     _PORTE	set	9
   154  001A                     _RCREG	set	26
   155  000F                     _TMR1H	set	15
   156  000E                     _TMR1L	set	14
   157  0019                     _TXREG	set	25
   158  00C3                     _ADDEN	set	195
   159  00F8                     _ADON	set	248
   160  0018                     _CARRY	set	24
   161  00C4                     _CREN	set	196
   162  00C2                     _FERR	set	194
   163  005F                     _GIE	set	95
   164  00FA                     _GO	set	250
   165  005C                     _INTE	set	92
   166  00C1                     _OERR	set	193
   167  005E                     _PEIE	set	94
   168  0032                     _RB2	set	50
   169  0033                     _RB3	set	51
   170  0034                     _RB4	set	52
   171  0035                     _RB5	set	53
   172  005B                     _RBIE	set	91
   173  0038                     _RC0	set	56
   174  0039                     _RC1	set	57
   175  003A                     _RC2	set	58
   176  003B                     _RC3	set	59
   177  003C                     _RC4	set	60
   178  003D                     _RC5	set	61
   179  0065                     _RCIF	set	101
   180  0040                     _RD0	set	64
   181  0041                     _RD1	set	65
   182  0042                     _RD2	set	66
   183  0043                     _RD3	set	67
   184  0044                     _RD4	set	68
   185  0045                     _RD5	set	69
   186  0046                     _RD6	set	70
   187  0047                     _RD7	set	71
   188  00C6                     _RX9	set	198
   189  00C7                     _SPEN	set	199
   190  005D                     _T0IE	set	93
   191  0084                     _T1CKPS0	set	132
   192  0085                     _T1CKPS1	set	133
   193  0083                     _T1OSCEN	set	131
   194  0081                     _TMR1CS	set	129
   195  0060                     _TMR1IF	set	96
   196  0080                     _TMR1ON	set	128
   197  0064                     _TXIF	set	100
   198  009F                     _ADCON1	set	159
   199  009E                     _ADRESL	set	158
   200  0099                     _SPBRG	set	153
   201  0085                     _TRISA	set	133
   202  0086                     _TRISB	set	134
   203  0087                     _TRISC	set	135
   204  0088                     _TRISD	set	136
   205  0089                     _TRISE	set	137
   206  0466                     _ADIE	set	1126
   207  046B                     _BCLIE	set	1131
   208  04C2                     _BRGH	set	1218
   209  0462                     _CCP1IE	set	1122
   210  0468                     _CCP2IE	set	1128
   211  046C                     _EEIE	set	1132
   212  0467                     _PSPIE	set	1127
   213  0465                     _RCIE	set	1125
   214  0463                     _SSPIE	set	1123
   215  04C4                     _SYNC	set	1220
   216  0460                     _TMR1IE	set	1120
   217  0461                     _TMR2IE	set	1121
   218  04C6                     _TX9	set	1222
   219  04C5                     _TXEN	set	1221
   220  0464                     _TXIE	set	1124
   221  010D                     _EEADR	set	269
   222  010C                     _EEDATA	set	268
   223  018C                     _EECON1	set	396
   224  018D                     _EECON2	set	397
   225  0C60                     _RD	set	3168
   226  0C61                     _WR	set	3169
   227  0C62                     _WREN	set	3170
   228  0824                     STR_13:	
   229  0824  3453               	retlw	83	;'S'
   230  0825  3477               	retlw	119	;'w'
   231  0826  3469               	retlw	105	;'i'
   232  0827  3474               	retlw	116	;'t'
   233  0828  3463               	retlw	99	;'c'
   234  0829  3468               	retlw	104	;'h'
   235  082A  3465               	retlw	101	;'e'
   236  082B  3464               	retlw	100	;'d'
   237  082C  3420               	retlw	32	;' '
   238  082D  3474               	retlw	116	;'t'
   239  082E  346F               	retlw	111	;'o'
   240  082F  3420               	retlw	32	;' '
   241  0830  344D               	retlw	77	;'M'
   242  0831  346F               	retlw	111	;'o'
   243  0832  3464               	retlw	100	;'d'
   244  0833  3465               	retlw	101	;'e'
   245  0834  3420               	retlw	32	;' '
   246  0835  343A               	retlw	58	;':'
   247  0836  3420               	retlw	32	;' '
   248  0837  3400               	retlw	0
   249  0838                     STR_4:	
   250  0838  3420               	retlw	32	;' '
   251  0839  3420               	retlw	32	;' '
   252  083A  3420               	retlw	32	;' '
   253  083B  3420               	retlw	32	;' '
   254  083C  3420               	retlw	32	;' '
   255  083D  3420               	retlw	32	;' '
   256  083E  3453               	retlw	83	;'S'
   257  083F  3479               	retlw	121	;'y'
   258  0840  3473               	retlw	115	;'s'
   259  0841  3474               	retlw	116	;'t'
   260  0842  3465               	retlw	101	;'e'
   261  0843  346D               	retlw	109	;'m'
   262  0844  3420               	retlw	32	;' '
   263  0845  3420               	retlw	32	;' '
   264  0846  3420               	retlw	32	;' '
   265  0847  3420               	retlw	32	;' '
   266  0848  3420               	retlw	32	;' '
   267  0849  3400               	retlw	0
   268  084A                     STR_3:	
   269  084A  3420               	retlw	32	;' '
   270  084B  3420               	retlw	32	;' '
   271  084C  3420               	retlw	32	;' '
   272  084D  3420               	retlw	32	;' '
   273  084E  344D               	retlw	77	;'M'
   274  084F  346F               	retlw	111	;'o'
   275  0850  346E               	retlw	110	;'n'
   276  0851  3469               	retlw	105	;'i'
   277  0852  3474               	retlw	116	;'t'
   278  0853  346F               	retlw	111	;'o'
   279  0854  3472               	retlw	114	;'r'
   280  0855  3469               	retlw	105	;'i'
   281  0856  346E               	retlw	110	;'n'
   282  0857  3467               	retlw	103	;'g'
   283  0858  3420               	retlw	32	;' '
   284  0859  3420               	retlw	32	;' '
   285  085A  3420               	retlw	32	;' '
   286  085B  3400               	retlw	0
   287  085C                     STR_2:	
   288  085C  3420               	retlw	32	;' '
   289  085D  3461               	retlw	97	;'a'
   290  085E  346E               	retlw	110	;'n'
   291  085F  3464               	retlw	100	;'d'
   292  0860  3420               	retlw	32	;' '
   293  0861  3448               	retlw	72	;'H'
   294  0862  3465               	retlw	101	;'e'
   295  0863  3461               	retlw	97	;'a'
   296  0864  3472               	retlw	114	;'r'
   297  0865  3474               	retlw	116	;'t'
   298  0866  3420               	retlw	32	;' '
   299  0867  3452               	retlw	82	;'R'
   300  0868  3461               	retlw	97	;'a'
   301  0869  3474               	retlw	116	;'t'
   302  086A  3465               	retlw	101	;'e'
   303  086B  3420               	retlw	32	;' '
   304  086C  3420               	retlw	32	;' '
   305  086D  3400               	retlw	0
   306  086E                     STR_1:	
   307  086E  3442               	retlw	66	;'B'
   308  086F  346F               	retlw	111	;'o'
   309  0870  3464               	retlw	100	;'d'
   310  0871  3479               	retlw	121	;'y'
   311  0872  3420               	retlw	32	;' '
   312  0873  3454               	retlw	84	;'T'
   313  0874  3465               	retlw	101	;'e'
   314  0875  346D               	retlw	109	;'m'
   315  0876  3470               	retlw	112	;'p'
   316  0877  3465               	retlw	101	;'e'
   317  0878  3472               	retlw	114	;'r'
   318  0879  3461               	retlw	97	;'a'
   319  087A  3474               	retlw	116	;'t'
   320  087B  3475               	retlw	117	;'u'
   321  087C  3472               	retlw	114	;'r'
   322  087D  3465               	retlw	101	;'e'
   323  087E  3420               	retlw	32	;' '
   324  087F  3400               	retlw	0
   325  0880                     STR_14:	
   326  0880  3430               	retlw	48	;'0'
   327  0881  3431               	retlw	49	;'1'
   328  0882  3432               	retlw	50	;'2'
   329  0883  3433               	retlw	51	;'3'
   330  0884  3434               	retlw	52	;'4'
   331  0885  3435               	retlw	53	;'5'
   332  0886  3436               	retlw	54	;'6'
   333  0887  3437               	retlw	55	;'7'
   334  0888  3438               	retlw	56	;'8'
   335  0889  3439               	retlw	57	;'9'
   336  088A  3441               	retlw	65	;'A'
   337  088B  3442               	retlw	66	;'B'
   338  088C  3443               	retlw	67	;'C'
   339  088D  3444               	retlw	68	;'D'
   340  088E  3445               	retlw	69	;'E'
   341  088F  3446               	retlw	70	;'F'
   342  0890  3400               	retlw	0
   343  0891                     STR_15:	
   344  0891  3430               	retlw	48	;'0'
   345  0892  3431               	retlw	49	;'1'
   346  0893  3432               	retlw	50	;'2'
   347  0894  3433               	retlw	51	;'3'
   348  0895  3434               	retlw	52	;'4'
   349  0896  3435               	retlw	53	;'5'
   350  0897  3436               	retlw	54	;'6'
   351  0898  3437               	retlw	55	;'7'
   352  0899  3438               	retlw	56	;'8'
   353  089A  3439               	retlw	57	;'9'
   354  089B  3461               	retlw	97	;'a'
   355  089C  3462               	retlw	98	;'b'
   356  089D  3463               	retlw	99	;'c'
   357  089E  3464               	retlw	100	;'d'
   358  089F  3465               	retlw	101	;'e'
   359  08A0  3466               	retlw	102	;'f'
   360  08A1  3400               	retlw	0
   361  08A2                     STR_5:	
   362  08A2  3420               	retlw	32	;' '
   363  08A3  3420               	retlw	32	;' '
   364  08A4  3420               	retlw	32	;' '
   365  08A5  3420               	retlw	32	;' '
   366  08A6  3420               	retlw	32	;' '
   367  08A7  3420               	retlw	32	;' '
   368  08A8  3420               	retlw	32	;' '
   369  08A9  3466               	retlw	102	;'f'
   370  08AA  346F               	retlw	111	;'o'
   371  08AB  3472               	retlw	114	;'r'
   372  08AC  3420               	retlw	32	;' '
   373  08AD  3420               	retlw	32	;' '
   374  08AE  3420               	retlw	32	;' '
   375  08AF  3420               	retlw	32	;' '
   376  08B0  3420               	retlw	32	;' '
   377  08B1  3420               	retlw	32	;' '
   378  08B2  3400               	retlw	0
   379  08B3                     STR_6:	
   380  08B3  3420               	retlw	32	;' '
   381  08B4  3420               	retlw	32	;' '
   382  08B5  3420               	retlw	32	;' '
   383  08B6  3420               	retlw	32	;' '
   384  08B7  3450               	retlw	80	;'P'
   385  08B8  3461               	retlw	97	;'a'
   386  08B9  3474               	retlw	116	;'t'
   387  08BA  3469               	retlw	105	;'i'
   388  08BB  3465               	retlw	101	;'e'
   389  08BC  346E               	retlw	110	;'n'
   390  08BD  3474               	retlw	116	;'t'
   391  08BE  3473               	retlw	115	;'s'
   392  08BF  3420               	retlw	32	;' '
   393  08C0  3420               	retlw	32	;' '
   394  08C1  3420               	retlw	32	;' '
   395  08C2  3420               	retlw	32	;' '
   396  08C3  3400               	retlw	0
   397  08C4                     STR_8:	
   398  08C4  3454               	retlw	84	;'T'
   399  08C5  343A               	retlw	58	;':'
   400  08C6  3420               	retlw	32	;' '
   401  08C7  3420               	retlw	32	;' '
   402  08C8  3438               	retlw	56	;'8'
   403  08C9  3434               	retlw	52	;'4'
   404  08CA  3446               	retlw	70	;'F'
   405  08CB  3420               	retlw	32	;' '
   406  08CC  3420               	retlw	32	;' '
   407  08CD  3420               	retlw	32	;' '
   408  08CE  344C               	retlw	76	;'L'
   409  08CF  346F               	retlw	111	;'o'
   410  08D0  3477               	retlw	119	;'w'
   411  08D1  3420               	retlw	32	;' '
   412  08D2  3420               	retlw	32	;' '
   413  08D3  3420               	retlw	32	;' '
   414  08D4  3400               	retlw	0
   415  08D5                     STR_7:	
   416  08D5  3448               	retlw	72	;'H'
   417  08D6  343A               	retlw	58	;':'
   418  08D7  3420               	retlw	32	;' '
   419  08D8  3420               	retlw	32	;' '
   420  08D9  3436               	retlw	54	;'6'
   421  08DA  3432               	retlw	50	;'2'
   422  08DB  3450               	retlw	80	;'P'
   423  08DC  3450               	retlw	80	;'P'
   424  08DD  344D               	retlw	77	;'M'
   425  08DE  3420               	retlw	32	;' '
   426  08DF  344C               	retlw	76	;'L'
   427  08E0  346F               	retlw	111	;'o'
   428  08E1  3477               	retlw	119	;'w'
   429  08E2  3420               	retlw	32	;' '
   430  08E3  3420               	retlw	32	;' '
   431  08E4  3420               	retlw	32	;' '
   432  08E5  3400               	retlw	0
   433  08E6                     STR_9:	
   434  08E6  342C               	retlw	44	;','
   435  08E7  3420               	retlw	32	;' '
   436  08E8  3400               	retlw	0
   437  08E6                     
   438                           ; #config settings
   439  0000                     
   440                           	psect	cinit
   441  07EB                     start_initialization:	
   442  07EB                     __initialization:	
   443  07EB  304D               	movlw	low __pbssBANK0
   444                           
   445                           ; Clear objects allocated to BITBANK0
   446  07EC  01E6               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   447  07ED  01E7               	clrf	((__pbitbssBANK0/(0+8)+1))& (0+127)
   448                           
   449                           ; Clear objects allocated to BANK0
   450  07EE  1383               	bcf	3,7	;select IRP bank0
   451  07EF  0084               	movwf	4
   452  07F0  3066               	movlw	low (__pbssBANK0+25)
   453  07F1  160A  118A  2000  120A  118A  	fcall	clear_ram0
   454                           
   455                           ; Clear objects allocated to BANK1
   456  07F6  30A0               	movlw	low __pbssBANK1
   457  07F7  0084               	movwf	4
   458  07F8  30B4               	movlw	low (__pbssBANK1+20)
   459  07F9  160A  118A  2000   	fcall	clear_ram0
   460  07FC                     end_of_initialization:	
   461                           ;End of C runtime variable initialization code
   462                           
   463  07FC                     __end_of__initialization:	
   464  07FC  0183               	clrf	3
   465  07FD  120A  118A  2813   	ljmp	_main	;jump to C main() function
   466                           
   467                           	psect	bitbssBANK0
   468  0330                     __pbitbssBANK0:	
   469  0330                     _BlinkDet:	
   470  0330                     	ds	1
   471  0331                     _Nop:	
   472  0331                     	ds	1
   473  0332                     _bit0:	
   474  0332                     	ds	1
   475  0333                     _bit1:	
   476  0333                     	ds	1
   477  0334                     _bit2:	
   478  0334                     	ds	1
   479  0335                     _bit3:	
   480  0335                     	ds	1
   481  0336                     _bit4:	
   482  0336                     	ds	1
   483  0337                     _bit5:	
   484  0337                     	ds	1
   485  0338                     _bit6:	
   486  0338                     	ds	1
   487  0339                     _bit7:	
   488  0339                     	ds	1
   489                           
   490                           	psect	bssBANK0
   491  004D                     __pbssBANK0:	
   492  004D                     _V_Bat2:	
   493  004D                     	ds	3
   494  0050                     _currentMode:	
   495  0050                     	ds	2
   496  0052                     _hour:	
   497  0052                     	ds	2
   498  0054                     _ldr1:	
   499  0054                     	ds	2
   500  0056                     _ldr2:	
   501  0056                     	ds	2
   502  0058                     _minute:	
   503  0058                     	ds	2
   504  005A                     _msecond:	
   505  005A                     	ds	2
   506  005C                     _second:	
   507  005C                     	ds	2
   508  005E                     _j:	
   509  005E                     	ds	1
   510  005F                     _lcd_data:	
   511  005F                     	ds	1
   512  0060                     _state:	
   513  0060                     	ds	1
   514  0061                     _x:	
   515  0061                     	ds	1
   516  0062                     _C_Bat:	
   517  0062                     	ds	2
   518  0064                     _V_Bat:	
   519  0064                     	ds	2
   520                           
   521                           	psect	bssBANK1
   522  00A0                     __pbssBANK1:	
   523  00A0                     _buffer:	
   524  00A0                     	ds	20
   525                           
   526                           	psect	clrtext
   527  1000                     clear_ram0:	
   528                           ;	Called with FSR containing the base address, and
   529                           ;	W with the last address+1
   530                           
   531  1000  0064               	clrwdt	;clear the watchdog before getting into this loop
   532  1001                     clrloop0:	
   533  1001  0180               	clrf	0	;clear RAM location pointed to by FSR
   534  1002  0A84               	incf	4,f	;increment pointer
   535  1003  0604               	xorwf	4,w	;XOR with final address
   536  1004  1903               	btfsc	3,2	;have we reached the end yet?
   537  1005  3400               	retlw	0	;all done for this memory range, return
   538  1006  0604               	xorwf	4,w	;XOR again to restore value
   539  1007  2801               	goto	clrloop0	;do the next byte
   540                           
   541                           	psect	cstackCOMMON
   542  0071                     __pcstackCOMMON:	
   543  0071                     ?_lcd_add:	
   544  0071                     ?_LCDTimeUpdate:	
   545                           ; 0 bytes @ 0x0
   546                           
   547  0071                     ?_a2d_read:	
   548                           ; 0 bytes @ 0x0
   549                           
   550  0071                     ?_CheckMode:	
   551                           ; 0 bytes @ 0x0
   552                           
   553  0071                     ?_Calculate:	
   554                           ; 0 bytes @ 0x0
   555                           
   556  0071                     ?_isdigit:	
   557                           ; 0 bytes @ 0x0
   558                           
   559  0071                     ?_nop:	
   560                           ; 1 bit 
   561                           
   562  0071                     ?_Setup_IOports:	
   563                           ; 0 bytes @ 0x0
   564                           
   565  0071                     ?_lcd_init:	
   566                           ; 0 bytes @ 0x0
   567                           
   568  0071                     ?_putch:	
   569                           ; 0 bytes @ 0x0
   570                           
   571  0071                     ?_clr_display:	
   572                           ; 0 bytes @ 0x0
   573                           
   574  0071                     ?_atod_init:	
   575                           ; 0 bytes @ 0x0
   576                           
   577  0071                     ?_Serial_Init:	
   578                           ; 0 bytes @ 0x0
   579                           
   580  0071                     ?_Serial_Print:	
   581                           ; 0 bytes @ 0x0
   582                           
   583  0071                     ?_Serial_NewLine:	
   584                           ; 1 bit 
   585                           
   586  0071                     ?_enableInterrupt:	
   587                           ; 0 bytes @ 0x0
   588                           
   589  0071                     ?_Timer1_Init:	
   590                           ; 0 bytes @ 0x0
   591                           
   592  0071                     ?_main:	
   593                           ; 0 bytes @ 0x0
   594                           
   595  0071                     ?_isr:	
   596                           ; 0 bytes @ 0x0
   597                           
   598  0071                     ?i1_lcd_add:	
   599                           ; 0 bytes @ 0x0
   600                           
   601  0071                     ??i1_lcd_add:	
   602                           ; 0 bytes @ 0x0
   603                           
   604  0071                     ?i1_LCDTimeUpdate:	
   605                           ; 0 bytes @ 0x0
   606                           
   607  0071                     ?_eeprom_read:	
   608                           ; 0 bytes @ 0x0
   609                           
   610  0071                     ?_CheckKeyPad:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0071                     ?i1___lwdiv:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0071                     ?i1___lwmod:	
   617                           ; 2 bytes @ 0x0
   618                           
   619  0071                     i1___lwdiv@divisor:	
   620                           ; 2 bytes @ 0x0
   621                           
   622  0071                     i1___lwmod@divisor:	
   623                           ; 2 bytes @ 0x0
   624                           
   625                           
   626                           ; 2 bytes @ 0x0
   627  0071                     	ds	1
   628  0072                     ?i1_position:	
   629  0072                     i1position@collum:	
   630                           ; 0 bytes @ 0x1
   631                           
   632                           
   633                           ; 1 bytes @ 0x1
   634  0072                     	ds	1
   635  0073                     ??i1_position:	
   636  0073                     i1___lwdiv@dividend:	
   637                           ; 0 bytes @ 0x2
   638                           
   639  0073                     i1___lwmod@dividend:	
   640                           ; 2 bytes @ 0x2
   641                           
   642                           
   643                           ; 2 bytes @ 0x2
   644  0073                     	ds	2
   645  0075                     ??i1___lwdiv:	
   646  0075                     ??i1___lwmod:	
   647                           ; 0 bytes @ 0x4
   648                           
   649  0075                     i1position@post:	
   650                           ; 0 bytes @ 0x4
   651                           
   652  0075                     i1___lwmod@counter:	
   653                           ; 1 bytes @ 0x4
   654                           
   655  0075                     i1___lwdiv@quotient:	
   656                           ; 1 bytes @ 0x4
   657                           
   658                           
   659                           ; 2 bytes @ 0x4
   660  0075                     	ds	1
   661  0076                     i1position@row:	
   662                           
   663                           ; 1 bytes @ 0x5
   664  0076                     	ds	1
   665  0077                     i1___lwdiv@counter:	
   666                           
   667                           ; 1 bytes @ 0x6
   668  0077                     	ds	1
   669  0078                     ?i1_LCD_print_char:	
   670  0078                     i1LCD_print_char@row:	
   671                           ; 0 bytes @ 0x7
   672                           
   673                           
   674                           ; 2 bytes @ 0x7
   675  0078                     	ds	2
   676  007A                     i1LCD_print_char@column:	
   677                           
   678                           ; 2 bytes @ 0x9
   679  007A                     	ds	2
   680  007C                     i1LCD_print_char@print_value:	
   681                           
   682                           ; 1 bytes @ 0xB
   683  007C                     	ds	1
   684  007D                     ??i1_LCD_print_char:	
   685                           
   686                           ; 0 bytes @ 0xC
   687  007D                     	ds	1
   688  007E                     ??i1_LCDTimeUpdate:	
   689                           
   690                           	psect	cstackBANK0
   691  0020                     __pcstackBANK0:	
   692                           ; 0 bytes @ 0xD
   693                           
   694  0020                     ??_isr:	
   695                           
   696                           ; 0 bytes @ 0x0
   697  0020                     	ds	3
   698  0023                     ??_lcd_add:	
   699  0023                     ?_eeprom_write:	
   700                           ; 0 bytes @ 0x3
   701                           
   702  0023                     ??_eeprom_read:	
   703                           ; 0 bytes @ 0x3
   704                           
   705  0023                     ?_RotateMotorLeft:	
   706                           ; 0 bytes @ 0x3
   707                           
   708  0023                     ?_RotateMotorRight:	
   709                           ; 0 bytes @ 0x3
   710                           
   711  0023                     ??_isdigit:	
   712                           ; 0 bytes @ 0x3
   713                           
   714  0023                     ??_nop:	
   715                           ; 0 bytes @ 0x3
   716                           
   717  0023                     ??_Setup_IOports:	
   718                           ; 0 bytes @ 0x3
   719                           
   720  0023                     ??_lcd_init:	
   721                           ; 0 bytes @ 0x3
   722                           
   723  0023                     ??_atod_init:	
   724                           ; 0 bytes @ 0x3
   725                           
   726  0023                     ??_Serial_Init:	
   727                           ; 0 bytes @ 0x3
   728                           
   729  0023                     ??_Serial_Print:	
   730                           ; 0 bytes @ 0x3
   731                           
   732  0023                     ??_Serial_NewLine:	
   733                           ; 0 bytes @ 0x3
   734                           
   735  0023                     ??_enableInterrupt:	
   736                           ; 0 bytes @ 0x3
   737                           
   738  0023                     ??_Timer1_Init:	
   739                           ; 0 bytes @ 0x3
   740                           
   741  0023                     ?___bmul:	
   742                           ; 0 bytes @ 0x3
   743                           
   744  0023                     ?_RowNo:	
   745                           ; 1 bytes @ 0x3
   746                           
   747  0023                     ?_ColomnNo:	
   748                           ; 2 bytes @ 0x3
   749                           
   750  0023                     ?_read_a2d_value:	
   751                           ; 2 bytes @ 0x3
   752                           
   753  0023                     ?___wmul:	
   754                           ; 2 bytes @ 0x3
   755                           
   756  0023                     ?___awmod:	
   757                           ; 2 bytes @ 0x3
   758                           
   759  0023                     ?___lwdiv:	
   760                           ; 2 bytes @ 0x3
   761                           
   762  0023                     ?___ftpack:	
   763                           ; 2 bytes @ 0x3
   764                           
   765  0023                     ?___ltdiv:	
   766                           ; 3 bytes @ 0x3
   767                           
   768  0023                     ?___ltmod:	
   769                           ; 3 bytes @ 0x3
   770                           
   771  0023                     eeprom_read@addr:	
   772                           ; 3 bytes @ 0x3
   773                           
   774  0023                     eeprom_write@value:	
   775                           ; 1 bytes @ 0x3
   776                           
   777  0023                     ___bmul@multiplicand:	
   778                           ; 1 bytes @ 0x3
   779                           
   780  0023                     _isdigit$559:	
   781                           ; 1 bytes @ 0x3
   782                           
   783  0023                     lcd_init@DelayLCD:	
   784                           ; 1 bytes @ 0x3
   785                           
   786  0023                     ColomnNo@rowNo:	
   787                           ; 2 bytes @ 0x3
   788                           
   789  0023                     RotateMotorLeft@value:	
   790                           ; 2 bytes @ 0x3
   791                           
   792  0023                     RotateMotorRight@value:	
   793                           ; 2 bytes @ 0x3
   794                           
   795  0023                     ___wmul@multiplier:	
   796                           ; 2 bytes @ 0x3
   797                           
   798  0023                     ___awmod@divisor:	
   799                           ; 2 bytes @ 0x3
   800                           
   801  0023                     ___lwdiv@divisor:	
   802                           ; 2 bytes @ 0x3
   803                           
   804  0023                     ___ftpack@arg:	
   805                           ; 2 bytes @ 0x3
   806                           
   807  0023                     ___ltdiv@divisor:	
   808                           ; 3 bytes @ 0x3
   809                           
   810  0023                     ___ltmod@divisor:	
   811                           ; 3 bytes @ 0x3
   812                           
   813                           
   814                           ; 3 bytes @ 0x3
   815  0023                     	ds	1
   816  0024                     ?_position:	
   817  0024                     ??_eeprom_write:	
   818                           ; 0 bytes @ 0x4
   819                           
   820  0024                     ??_putch:	
   821                           ; 0 bytes @ 0x4
   822                           
   823  0024                     ??_clr_display:	
   824                           ; 0 bytes @ 0x4
   825                           
   826  0024                     ??___bmul:	
   827                           ; 0 bytes @ 0x4
   828                           
   829  0024                     position@collum:	
   830                           ; 0 bytes @ 0x4
   831                           
   832  0024                     Serial_Print@a:	
   833                           ; 1 bytes @ 0x4
   834                           
   835  0024                     eeprom_write@addr:	
   836                           ; 1 bytes @ 0x4
   837                           
   838  0024                     ___bmul@product:	
   839                           ; 1 bytes @ 0x4
   840                           
   841  0024                     isdigit@c:	
   842                           ; 1 bytes @ 0x4
   843                           
   844                           
   845                           ; 1 bytes @ 0x4
   846  0024                     	ds	1
   847  0025                     ??_position:	
   848  0025                     ??_RowNo:	
   849                           ; 0 bytes @ 0x5
   850                           
   851  0025                     ??_ColomnNo:	
   852                           ; 0 bytes @ 0x5
   853                           
   854  0025                     ??_RotateMotorLeft:	
   855                           ; 0 bytes @ 0x5
   856                           
   857  0025                     ??_RotateMotorRight:	
   858                           ; 0 bytes @ 0x5
   859                           
   860  0025                     ??_read_a2d_value:	
   861                           ; 0 bytes @ 0x5
   862                           
   863  0025                     putch@print_value:	
   864                           ; 0 bytes @ 0x5
   865                           
   866  0025                     ___bmul@multiplier:	
   867                           ; 1 bytes @ 0x5
   868                           
   869  0025                     RowNo@row:	
   870                           ; 1 bytes @ 0x5
   871                           
   872  0025                     ___wmul@multiplicand:	
   873                           ; 2 bytes @ 0x5
   874                           
   875  0025                     ___awmod@dividend:	
   876                           ; 2 bytes @ 0x5
   877                           
   878  0025                     ___lwdiv@dividend:	
   879                           ; 2 bytes @ 0x5
   880                           
   881                           
   882                           ; 2 bytes @ 0x5
   883  0025                     	ds	1
   884  0026                     read_a2d_value@channel:	
   885  0026                     ___ftpack@exp:	
   886                           ; 1 bytes @ 0x6
   887                           
   888  0026                     ___ltdiv@dividend:	
   889                           ; 1 bytes @ 0x6
   890                           
   891  0026                     ___ltmod@dividend:	
   892                           ; 3 bytes @ 0x6
   893                           
   894                           
   895                           ; 3 bytes @ 0x6
   896  0026                     	ds	1
   897  0027                     ??_CheckKeyPad:	
   898  0027                     ??___wmul:	
   899                           ; 0 bytes @ 0x7
   900                           
   901  0027                     ??___awmod:	
   902                           ; 0 bytes @ 0x7
   903                           
   904  0027                     ??___lwdiv:	
   905                           ; 0 bytes @ 0x7
   906                           
   907  0027                     position@post:	
   908                           ; 0 bytes @ 0x7
   909                           
   910  0027                     CheckKeyPad@charactor:	
   911                           ; 1 bytes @ 0x7
   912                           
   913  0027                     ___awmod@counter:	
   914                           ; 1 bytes @ 0x7
   915                           
   916  0027                     ___ftpack@sign:	
   917                           ; 1 bytes @ 0x7
   918                           
   919  0027                     read_a2d_value@a2d_value:	
   920                           ; 1 bytes @ 0x7
   921                           
   922  0027                     RotateMotorLeft@i:	
   923                           ; 2 bytes @ 0x7
   924                           
   925  0027                     RotateMotorRight@i:	
   926                           ; 2 bytes @ 0x7
   927                           
   928  0027                     ___wmul@product:	
   929                           ; 2 bytes @ 0x7
   930                           
   931  0027                     ___lwdiv@quotient:	
   932                           ; 2 bytes @ 0x7
   933                           
   934                           
   935                           ; 2 bytes @ 0x7
   936  0027                     	ds	1
   937  0028                     ??___ftpack:	
   938  0028                     position@row:	
   939                           ; 0 bytes @ 0x8
   940                           
   941  0028                     ___awmod@sign:	
   942                           ; 1 bytes @ 0x8
   943                           
   944  0028                     CheckKeyPad@colomnNo:	
   945                           ; 1 bytes @ 0x8
   946                           
   947                           
   948                           ; 2 bytes @ 0x8
   949  0028                     	ds	1
   950  0029                     ??_Calculate:	
   951  0029                     ??___ltdiv:	
   952                           ; 0 bytes @ 0x9
   953                           
   954  0029                     ??___ltmod:	
   955                           ; 0 bytes @ 0x9
   956                           
   957  0029                     ?___awdiv:	
   958                           ; 0 bytes @ 0x9
   959                           
   960  0029                     ___ltmod@counter:	
   961                           ; 2 bytes @ 0x9
   962                           
   963  0029                     ___lwdiv@counter:	
   964                           ; 1 bytes @ 0x9
   965                           
   966  0029                     ___awdiv@divisor:	
   967                           ; 1 bytes @ 0x9
   968                           
   969  0029                     ___ltdiv@quotient:	
   970                           ; 2 bytes @ 0x9
   971                           
   972                           
   973                           ; 3 bytes @ 0x9
   974  0029                     	ds	1
   975  002A                     ?___lwmod:	
   976  002A                     CheckKeyPad@rowNo:	
   977                           ; 2 bytes @ 0xA
   978                           
   979  002A                     ___lwmod@divisor:	
   980                           ; 2 bytes @ 0xA
   981                           
   982                           
   983                           ; 2 bytes @ 0xA
   984  002A                     	ds	1
   985  002B                     ?___lwtoft:	
   986  002B                     ___awdiv@dividend:	
   987                           ; 3 bytes @ 0xB
   988                           
   989  002B                     ___lwtoft@c:	
   990                           ; 2 bytes @ 0xB
   991                           
   992                           
   993                           ; 2 bytes @ 0xB
   994  002B                     	ds	1
   995  002C                     ___ltdiv@counter:	
   996  002C                     ___lwmod@dividend:	
   997                           ; 1 bytes @ 0xC
   998                           
   999                           
  1000                           ; 2 bytes @ 0xC
  1001  002C                     	ds	1
  1002  002D                     ??___awdiv:	
  1003  002D                     ___awdiv@counter:	
  1004                           ; 0 bytes @ 0xD
  1005                           
  1006                           
  1007                           ; 1 bytes @ 0xD
  1008  002D                     	ds	1
  1009  002E                     ??___lwmod:	
  1010  002E                     ??___lwtoft:	
  1011                           ; 0 bytes @ 0xE
  1012                           
  1013  002E                     ?___ftmul:	
  1014                           ; 0 bytes @ 0xE
  1015                           
  1016  002E                     ___awdiv@sign:	
  1017                           ; 3 bytes @ 0xE
  1018                           
  1019  002E                     ___lwmod@counter:	
  1020                           ; 1 bytes @ 0xE
  1021                           
  1022  002E                     ___ftmul@f1:	
  1023                           ; 1 bytes @ 0xE
  1024                           
  1025                           
  1026                           ; 3 bytes @ 0xE
  1027  002E                     	ds	1
  1028  002F                     ?_LCD_print_char:	
  1029  002F                     ?_printf:	
  1030                           ; 0 bytes @ 0xF
  1031                           
  1032  002F                     LCD_print_char@row:	
  1033                           ; 2 bytes @ 0xF
  1034                           
  1035  002F                     ___awdiv@quotient:	
  1036                           ; 2 bytes @ 0xF
  1037                           
  1038                           
  1039                           ; 2 bytes @ 0xF
  1040  002F                     	ds	2
  1041  0031                     ??_printf:	
  1042  0031                     ?_Serial_Println_Int:	
  1043                           ; 0 bytes @ 0x11
  1044                           
  1045  0031                     ?_Serial_Print_Int:	
  1046                           ; 1 bit 
  1047                           
  1048  0031                     LCD_print_char@column:	
  1049                           ; 1 bit 
  1050                           
  1051  0031                     Serial_Println_Int@val:	
  1052                           ; 2 bytes @ 0x11
  1053                           
  1054  0031                     Serial_Print_Int@val:	
  1055                           ; 2 bytes @ 0x11
  1056                           
  1057  0031                     ___ftmul@f2:	
  1058                           ; 2 bytes @ 0x11
  1059                           
  1060                           
  1061                           ; 3 bytes @ 0x11
  1062  0031                     	ds	2
  1063  0033                     ??_Serial_Println_Int:	
  1064  0033                     ??_Serial_Print_Int:	
  1065                           ; 0 bytes @ 0x13
  1066                           
  1067  0033                     LCD_print_char@print_value:	
  1068                           ; 0 bytes @ 0x13
  1069                           
  1070                           
  1071                           ; 1 bytes @ 0x13
  1072  0033                     	ds	1
  1073  0034                     ??_CheckMode:	
  1074  0034                     ??_LCD_print_char:	
  1075                           ; 0 bytes @ 0x14
  1076                           
  1077  0034                     ??___ftmul:	
  1078                           ; 0 bytes @ 0x14
  1079                           
  1080  0034                     CheckMode@pressedKey:	
  1081                           ; 0 bytes @ 0x14
  1082                           
  1083  0034                     _printf$348:	
  1084                           ; 1 bytes @ 0x14
  1085                           
  1086                           
  1087                           ; 2 bytes @ 0x14
  1088  0034                     	ds	1
  1089  0035                     ??_LCDTimeUpdate:	
  1090                           
  1091                           ; 0 bytes @ 0x15
  1092  0035                     	ds	1
  1093  0036                     _printf$349:	
  1094                           
  1095                           ; 2 bytes @ 0x16
  1096  0036                     	ds	1
  1097  0037                     ___ftmul@exp:	
  1098                           
  1099                           ; 1 bytes @ 0x17
  1100  0037                     	ds	1
  1101  0038                     printf@cp:	
  1102  0038                     ___ftmul@f3_as_product:	
  1103                           ; 1 bytes @ 0x18
  1104                           
  1105                           
  1106                           ; 3 bytes @ 0x18
  1107  0038                     	ds	1
  1108  0039                     printf@idx:	
  1109                           
  1110                           ; 1 bytes @ 0x19
  1111  0039                     	ds	1
  1112  003A                     _printf$355:	
  1113                           
  1114                           ; 1 bytes @ 0x1A
  1115  003A                     	ds	1
  1116  003B                     ___ftmul@cntr:	
  1117  003B                     printf@len:	
  1118                           ; 1 bytes @ 0x1B
  1119                           
  1120                           
  1121                           ; 2 bytes @ 0x1B
  1122  003B                     	ds	1
  1123  003C                     ___ftmul@sign:	
  1124                           
  1125                           ; 1 bytes @ 0x1C
  1126  003C                     	ds	1
  1127  003D                     ?___fttol:	
  1128  003D                     printf@ap:	
  1129                           ; 4 bytes @ 0x1D
  1130                           
  1131  003D                     ___fttol@f1:	
  1132                           ; 1 bytes @ 0x1D
  1133                           
  1134                           
  1135                           ; 3 bytes @ 0x1D
  1136  003D                     	ds	1
  1137  003E                     printf@val:	
  1138                           
  1139                           ; 2 bytes @ 0x1E
  1140  003E                     	ds	2
  1141  0040                     printf@prec:	
  1142                           
  1143                           ; 1 bytes @ 0x20
  1144  0040                     	ds	1
  1145  0041                     ??___fttol:	
  1146  0041                     printf@f:	
  1147                           ; 0 bytes @ 0x21
  1148                           
  1149                           
  1150                           ; 1 bytes @ 0x21
  1151  0041                     	ds	1
  1152  0042                     printf@width:	
  1153                           
  1154                           ; 2 bytes @ 0x22
  1155  0042                     	ds	2
  1156  0044                     printf@c:	
  1157  0044                     ___fttol@sign1:	
  1158                           ; 1 bytes @ 0x24
  1159                           
  1160                           
  1161                           ; 1 bytes @ 0x24
  1162  0044                     	ds	1
  1163  0045                     printf@flag:	
  1164  0045                     ___fttol@lval:	
  1165                           ; 2 bytes @ 0x25
  1166                           
  1167                           
  1168                           ; 4 bytes @ 0x25
  1169  0045                     	ds	4
  1170  0049                     ___fttol@exp1:	
  1171                           
  1172                           ; 1 bytes @ 0x29
  1173  0049                     	ds	1
  1174  004A                     ??_a2d_read:	
  1175  004A                     ??_main:	
  1176                           ; 0 bytes @ 0x2A
  1177                           
  1178                           
  1179                           ; 0 bytes @ 0x2A
  1180  004A                     	ds	3
  1181                           
  1182                           	psect	maintext
  1183  0013                     __pmaintext:	
  1184 ;;
  1185 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1186 ;;
  1187 ;; *************** function _main *****************
  1188 ;; Defined at:
  1189 ;;		line 66 in file "Automated Solar Panel Orientation Setter.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;		None
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;  abc             2    0        int 
  1194 ;;  pressedKey      1    0        unsigned char 
  1195 ;; Return value:  Size  Location     Type
  1196 ;;		None               void
  1197 ;; Registers used:
  1198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1199 ;; Tracked objects:
  1200 ;;		On entry : B00/0
  1201 ;;		On exit  : 300/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1204 ;;      Params:         0       0       0       0       0
  1205 ;;      Locals:         0       0       0       0       0
  1206 ;;      Temps:          0       3       0       0       0
  1207 ;;      Totals:         0       3       0       0       0
  1208 ;;Total ram usage:        3 bytes
  1209 ;; Hardware stack levels required when called:    9
  1210 ;; This function calls:
  1211 ;;		_Calculate
  1212 ;;		_CheckMode
  1213 ;;		_LCDTimeUpdate
  1214 ;;		_LCD_print_char
  1215 ;;		_Serial_Init
  1216 ;;		_Serial_NewLine
  1217 ;;		_Serial_Print
  1218 ;;		_Serial_Print_Int
  1219 ;;		_Setup_IOports
  1220 ;;		_Timer1_Init
  1221 ;;		___ltdiv
  1222 ;;		___ltmod
  1223 ;;		_a2d_read
  1224 ;;		_atod_init
  1225 ;;		_clr_display
  1226 ;;		_eeprom_read
  1227 ;;		_eeprom_write
  1228 ;;		_enableInterrupt
  1229 ;;		_lcd_init
  1230 ;;		_nop
  1231 ;;		_position
  1232 ;;		_printf
  1233 ;; This function is called by:
  1234 ;;		Startup code after reset
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           
  1239                           ;psect for function _main
  1240  0013                     _main:	
  1241                           
  1242                           ;Automated Solar Panel Orientation Setter.c: 68: char pressedKey;
  1243                           ;Automated Solar Panel Orientation Setter.c: 70: Setup_IOports();
  1244                           
  1245                           ;incstack = 0
  1246 ;; hardware stack exceeded
  1247                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1248  0013  160A  158A  255A  120A  118A  	fcall	_Setup_IOports
  1249                           
  1250                           ;Automated Solar Panel Orientation Setter.c: 73: atod_init();
  1251  0018  160A  158A  251C  120A  118A  	fcall	_atod_init
  1252                           
  1253                           ;Automated Solar Panel Orientation Setter.c: 77: lcd_init();
  1254  001D  120A  158A  2167  120A  118A  	fcall	_lcd_init
  1255                           
  1256                           ;Automated Solar Panel Orientation Setter.c: 78: clr_display();
  1257  0022  120A  118A  2108  120A  118A  	fcall	_clr_display
  1258                           
  1259                           ;Automated Solar Panel Orientation Setter.c: 80: Serial_Init();
  1260  0027  160A  158A  2574  120A  118A  	fcall	_Serial_Init
  1261                           
  1262                           ;Automated Solar Panel Orientation Setter.c: 81: Timer1_Init();
  1263  002C  160A  158A  2522  120A  118A  	fcall	_Timer1_Init
  1264                           
  1265                           ;Automated Solar Panel Orientation Setter.c: 82: enableInterrupt();
  1266  0031  160A  158A  2530  120A  118A  	fcall	_enableInterrupt
  1267                           
  1268                           ;Automated Solar Panel Orientation Setter.c: 86: lcd_init();
  1269  0036  120A  158A  2167  120A  118A  	fcall	_lcd_init
  1270                           
  1271                           ;Automated Solar Panel Orientation Setter.c: 87: clr_display();
  1272  003B  120A  118A  2108  120A  118A  	fcall	_clr_display
  1273                           
  1274                           ;Automated Solar Panel Orientation Setter.c: 89: printf("Body Temperature ");
  1275  0040  3069               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1276  0041  120A  118A  2236  120A  118A  	fcall	_printf
  1277  0046  3002               	movlw	2
  1278                           
  1279                           ;Automated Solar Panel Orientation Setter.c: 90: position(2,1);
  1280  0047  01A4               	clrf	position@collum
  1281  0048  0AA4               	incf	position@collum,f
  1282  0049  120A  118A  26F0  120A  118A  	fcall	_position
  1283                           
  1284                           ;Automated Solar Panel Orientation Setter.c: 91: printf(" and Heart Rate  ");
  1285  004E  3057               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1286  004F  120A  118A  2236  120A  118A  	fcall	_printf
  1287                           
  1288                           ;Automated Solar Panel Orientation Setter.c: 92: _delay((unsigned long)((1000)*(4000000/
      +                          4000.0)));
  1289  0054  3006               	movlw	6
  1290  0055  00CC               	movwf	??_main+2
  1291  0056  3013               	movlw	19
  1292  0057  00CB               	movwf	??_main+1
  1293  0058  30B1               	movlw	177
  1294  0059  00CA               	movwf	??_main
  1295  005A                     u6417:	
  1296  005A  0BCA               	decfsz	??_main,f
  1297  005B  285A               	goto	u6417
  1298  005C  0BCB               	decfsz	??_main+1,f
  1299  005D  285A               	goto	u6417
  1300  005E  0BCC               	decfsz	??_main+2,f
  1301  005F  285A               	goto	u6417
  1302  0060  2861               	nop2
  1303                           
  1304                           ;Automated Solar Panel Orientation Setter.c: 93: position(1,1);
  1305  0061  1283               	bcf	3,5	;RP0=0, select bank0
  1306  0062  1303               	bcf	3,6	;RP1=0, select bank0
  1307  0063  3001               	movlw	1
  1308  0064  01A4               	clrf	position@collum
  1309  0065  0AA4               	incf	position@collum,f
  1310  0066  120A  118A  26F0  120A  118A  	fcall	_position
  1311                           
  1312                           ;Automated Solar Panel Orientation Setter.c: 94: printf("    Monitoring   ");
  1313  006B  3045               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1314  006C  120A  118A  2236  120A  118A  	fcall	_printf
  1315  0071  3002               	movlw	2
  1316                           
  1317                           ;Automated Solar Panel Orientation Setter.c: 95: position(2,1);
  1318  0072  01A4               	clrf	position@collum
  1319  0073  0AA4               	incf	position@collum,f
  1320  0074  120A  118A  26F0  120A  118A  	fcall	_position
  1321                           
  1322                           ;Automated Solar Panel Orientation Setter.c: 96: printf("      System     ");
  1323  0079  3033               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1324  007A  120A  118A  2236  120A  118A  	fcall	_printf
  1325                           
  1326                           ;Automated Solar Panel Orientation Setter.c: 97: _delay((unsigned long)((1000)*(4000000/
      +                          4000.0)));
  1327  007F  3006               	movlw	6
  1328  0080  00CC               	movwf	??_main+2
  1329  0081  3013               	movlw	19
  1330  0082  00CB               	movwf	??_main+1
  1331  0083  30B1               	movlw	177
  1332  0084  00CA               	movwf	??_main
  1333  0085                     u6427:	
  1334  0085  0BCA               	decfsz	??_main,f
  1335  0086  2885               	goto	u6427
  1336  0087  0BCB               	decfsz	??_main+1,f
  1337  0088  2885               	goto	u6427
  1338  0089  0BCC               	decfsz	??_main+2,f
  1339  008A  2885               	goto	u6427
  1340  008B  288C               	nop2
  1341                           
  1342                           ;Automated Solar Panel Orientation Setter.c: 98: position(1,1);
  1343  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1344  008D  1303               	bcf	3,6	;RP1=0, select bank0
  1345  008E  3001               	movlw	1
  1346  008F  01A4               	clrf	position@collum
  1347  0090  0AA4               	incf	position@collum,f
  1348  0091  120A  118A  26F0  120A  118A  	fcall	_position
  1349                           
  1350                           ;Automated Solar Panel Orientation Setter.c: 99: printf("       for      ");
  1351  0096  309D               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1352  0097  120A  118A  2236  120A  118A  	fcall	_printf
  1353  009C  3002               	movlw	2
  1354                           
  1355                           ;Automated Solar Panel Orientation Setter.c: 100: position(2,1);
  1356  009D  01A4               	clrf	position@collum
  1357  009E  0AA4               	incf	position@collum,f
  1358  009F  120A  118A  26F0  120A  118A  	fcall	_position
  1359                           
  1360                           ;Automated Solar Panel Orientation Setter.c: 101: printf("    Patients    ");
  1361  00A4  30AE               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1362  00A5  120A  118A  2236  120A  118A  	fcall	_printf
  1363                           
  1364                           ;Automated Solar Panel Orientation Setter.c: 102: _delay((unsigned long)((1000)*(4000000
      +                          /4000.0)));
  1365  00AA  3006               	movlw	6
  1366  00AB  00CC               	movwf	??_main+2
  1367  00AC  3013               	movlw	19
  1368  00AD  00CB               	movwf	??_main+1
  1369  00AE  30B1               	movlw	177
  1370  00AF  00CA               	movwf	??_main
  1371  00B0                     u6437:	
  1372  00B0  0BCA               	decfsz	??_main,f
  1373  00B1  28B0               	goto	u6437
  1374  00B2  0BCB               	decfsz	??_main+1,f
  1375  00B3  28B0               	goto	u6437
  1376  00B4  0BCC               	decfsz	??_main+2,f
  1377  00B5  28B0               	goto	u6437
  1378  00B6  28B7               	nop2
  1379                           
  1380                           ;Automated Solar Panel Orientation Setter.c: 103: position(1,1);
  1381  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1382  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1383  00B9  3001               	movlw	1
  1384  00BA  01A4               	clrf	position@collum
  1385  00BB  0AA4               	incf	position@collum,f
  1386  00BC  120A  118A  26F0  120A  118A  	fcall	_position
  1387                           
  1388                           ;Automated Solar Panel Orientation Setter.c: 104: printf("H:  62PPM Low   ",HeartRate);
  1389  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1390  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1391  00C3  30D0               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1392  00C4  01AF               	clrf	?_printf
  1393  00C5  01B0               	clrf	?_printf+1
  1394  00C6  120A  118A  2236  120A  118A  	fcall	_printf
  1395  00CB  3002               	movlw	2
  1396                           
  1397                           ;Automated Solar Panel Orientation Setter.c: 105: position(2,1);
  1398  00CC  01A4               	clrf	position@collum
  1399  00CD  0AA4               	incf	position@collum,f
  1400  00CE  120A  118A  26F0  120A  118A  	fcall	_position
  1401                           
  1402                           ;Automated Solar Panel Orientation Setter.c: 106: printf("T:  84F   Low   ",analogReadVa
      +                          l);
  1403  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1404  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1405  00D5  30BF               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1406  00D6  01AF               	clrf	?_printf
  1407  00D7  01B0               	clrf	?_printf+1
  1408  00D8  120A  118A  2236  120A  118A  	fcall	_printf
  1409                           
  1410                           ;Automated Solar Panel Orientation Setter.c: 110: clr_display();
  1411  00DD  120A  118A  2108  120A  118A  	fcall	_clr_display
  1412                           
  1413                           ;Automated Solar Panel Orientation Setter.c: 111: state = 91;
  1414  00E2  305B               	movlw	91
  1415  00E3  00E0               	movwf	_state
  1416                           
  1417                           ;Automated Solar Panel Orientation Setter.c: 114: _delay((unsigned long)((20)*(4000000/4
      +                          000.0)));
  1418  00E4  301A               	movlw	26
  1419  00E5  00CB               	movwf	??_main+1
  1420  00E6  30F8               	movlw	248
  1421  00E7  00CA               	movwf	??_main
  1422  00E8                     u6447:	
  1423  00E8  0BCA               	decfsz	??_main,f
  1424  00E9  28E8               	goto	u6447
  1425  00EA  0BCB               	decfsz	??_main+1,f
  1426  00EB  28E8               	goto	u6447
  1427  00EC  0000               	nop
  1428                           
  1429                           ;Automated Solar Panel Orientation Setter.c: 115: eeprom_write(0x01, 0x2A );
  1430  00ED  302A               	movlw	42
  1431  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  1432  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  1433  00F0  00A3               	movwf	eeprom_write@value
  1434  00F1  3001               	movlw	1
  1435  00F2  160A  158A  2590  120A  118A  	fcall	_eeprom_write
  1436                           
  1437                           ;Automated Solar Panel Orientation Setter.c: 116: int abc = eeprom_read(0x00);
  1438  00F7  3000               	movlw	0
  1439  00F8  120A  158A  20E9  120A  118A  	fcall	_eeprom_read
  1440                           
  1441                           ;Automated Solar Panel Orientation Setter.c: 117: nop();
  1442  00FD  160A  118A  2301  120A  118A  	fcall	_nop
  1443                           
  1444                           ;Automated Solar Panel Orientation Setter.c: 118: LCDTimeUpdate();
  1445  0102  120A  118A  21BE   	fcall	_LCDTimeUpdate
  1446  0105  120A  158A  2FD8   	goto	l4862
  1447                           
  1448                           	psect	text5
  1449  0967                     __ptext5:	
  1450 ;; *************** function _lcd_init *****************
  1451 ;; Defined at:
  1452 ;;		line 60 in file "lcdv2.h"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;		None
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  DelayLCD        2    3[BANK0 ] unsigned int 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;		None               void
  1459 ;; Registers used:
  1460 ;;		wreg, status,2, status,0
  1461 ;; Tracked objects:
  1462 ;;		On entry : 300/100
  1463 ;;		On exit  : 300/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1466 ;;      Params:         0       0       0       0       0
  1467 ;;      Locals:         0       2       0       0       0
  1468 ;;      Temps:          0       0       0       0       0
  1469 ;;      Totals:         0       2       0       0       0
  1470 ;;Total ram usage:        2 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    5
  1473 ;; This function calls:
  1474 ;;		Nothing
  1475 ;; This function is called by:
  1476 ;;		_main
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           
  1481                           ;psect for function _lcd_init
  1482  0967                     _lcd_init:	
  1483                           
  1484                           ;lcdv2.h: 63: RC3 = 0;
  1485                           
  1486                           ;incstack = 0
  1487                           ; Regs used in _lcd_init: [wreg+status,2+status,0]
  1488  0967  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0968  1187               	bcf	7,3	;volatile
  1490                           
  1491                           ;lcdv2.h: 65: unsigned int DelayLCD;
  1492                           ;lcdv2.h: 67: RC2 = 0;
  1493  0969  1107               	bcf	7,2	;volatile
  1494                           
  1495                           ;lcdv2.h: 68: RD1 = 0;
  1496  096A  1088               	bcf	8,1	;volatile
  1497                           
  1498                           ;lcdv2.h: 69: RC0 = 0;
  1499  096B  1007               	bcf	7,0	;volatile
  1500                           
  1501                           ;lcdv2.h: 70: RD0 = 1;
  1502  096C  1408               	bsf	8,0	;volatile
  1503                           
  1504                           ;lcdv2.h: 71: RC1 = 0;
  1505  096D  1087               	bcf	7,1	;volatile
  1506                           
  1507                           ;lcdv2.h: 72: RC3 = 1;
  1508  096E  1587               	bsf	7,3	;volatile
  1509                           
  1510                           ;lcdv2.h: 73: RC3 = 0;
  1511  096F  1187               	bcf	7,3	;volatile
  1512                           
  1513                           ;lcdv2.h: 74: RD1 = 1;
  1514  0970  1488               	bsf	8,1	;volatile
  1515                           
  1516                           ;lcdv2.h: 75: RC0 = 0;
  1517  0971  1007               	bcf	7,0	;volatile
  1518                           
  1519                           ;lcdv2.h: 76: RD0 = 0;
  1520                           
  1521                           ;lcdv2.h: 77: RC1 = 0;
  1522                           
  1523                           ;lcdv2.h: 78: RC3 = 1;
  1524                           
  1525                           ;lcdv2.h: 79: RC3 = 0;
  1526                           
  1527                           ;lcdv2.h: 80: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  1528                           
  1529                           ;lcdv2.h: 83: RC2 = 0;
  1530                           
  1531                           ;lcdv2.h: 84: RD1 = 0;
  1532                           
  1533                           ;lcdv2.h: 85: RC0 = 0;
  1534  0972  21B1  120A  158A   	fcall	PL2	;call to abstracted procedure
  1535                           
  1536                           ;lcdv2.h: 86: RD0 = 1;
  1537  0975  1408               	bsf	8,0	;volatile
  1538                           
  1539                           ;lcdv2.h: 87: RC1 = 0;
  1540  0976  1087               	bcf	7,1	;volatile
  1541                           
  1542                           ;lcdv2.h: 88: RC3 = 1;
  1543  0977  1587               	bsf	7,3	;volatile
  1544                           
  1545                           ;lcdv2.h: 89: RC3 = 0;
  1546  0978  1187               	bcf	7,3	;volatile
  1547                           
  1548                           ;lcdv2.h: 90: RD1 = 1;
  1549  0979  1488               	bsf	8,1	;volatile
  1550                           
  1551                           ;lcdv2.h: 91: RC0 = 0;
  1552  097A  1007               	bcf	7,0	;volatile
  1553                           
  1554                           ;lcdv2.h: 92: RD0 = 0;
  1555                           
  1556                           ;lcdv2.h: 93: RC1 = 0;
  1557                           
  1558                           ;lcdv2.h: 94: RC3 = 1;
  1559                           
  1560                           ;lcdv2.h: 95: RC3 = 0;
  1561                           
  1562                           ;lcdv2.h: 96: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  1563                           
  1564                           ;lcdv2.h: 99: RC2 = 0;
  1565                           
  1566                           ;lcdv2.h: 100: RD1 = 0;
  1567                           
  1568                           ;lcdv2.h: 101: RC0 = 0;
  1569  097B  21B1  120A  158A   	fcall	PL2	;call to abstracted procedure
  1570                           
  1571                           ;lcdv2.h: 102: RD0 = 0;
  1572  097E  1008               	bcf	8,0	;volatile
  1573                           
  1574                           ;lcdv2.h: 103: RC1 = 0;
  1575  097F  1087               	bcf	7,1	;volatile
  1576                           
  1577                           ;lcdv2.h: 104: RC3 = 1;
  1578  0980  1587               	bsf	7,3	;volatile
  1579                           
  1580                           ;lcdv2.h: 105: RC3 = 0;
  1581  0981  1187               	bcf	7,3	;volatile
  1582                           
  1583                           ;lcdv2.h: 106: RD1 = 0;
  1584  0982  1088               	bcf	8,1	;volatile
  1585                           
  1586                           ;lcdv2.h: 107: RC0 = 1;
  1587  0983  1407               	bsf	7,0	;volatile
  1588                           
  1589                           ;lcdv2.h: 108: RD0 = 1;
  1590  0984  1408               	bsf	8,0	;volatile
  1591                           
  1592                           ;lcdv2.h: 109: RC1 = 0;
  1593  0985  1087               	bcf	7,1	;volatile
  1594                           
  1595                           ;lcdv2.h: 110: RC3 = 1;
  1596  0986  1587               	bsf	7,3	;volatile
  1597                           
  1598                           ;lcdv2.h: 111: RC3 = 0;
  1599  0987  1187               	bcf	7,3	;volatile
  1600                           
  1601                           ;lcdv2.h: 112: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  1602  0988  01A3               	clrf	lcd_init@DelayLCD
  1603  0989  01A4               	clrf	lcd_init@DelayLCD+1
  1604  098A                     l4102:	
  1605  098A  21C5  120A  158A   	fcall	PL10	;call to abstracted procedure
  1606  098D  1903               	skipnz
  1607  098E  0223               	subwf	lcd_init@DelayLCD,w
  1608  098F  1C03               	skipc
  1609  0990  298A               	goto	l4102
  1610                           
  1611                           ;lcdv2.h: 115: RC2 = 0;
  1612  0991  1107               	bcf	7,2	;volatile
  1613                           
  1614                           ;lcdv2.h: 116: RD1 = 0;
  1615  0992  1088               	bcf	8,1	;volatile
  1616                           
  1617                           ;lcdv2.h: 117: RC0 = 0;
  1618  0993  1007               	bcf	7,0	;volatile
  1619                           
  1620                           ;lcdv2.h: 118: RD0 = 0;
  1621  0994  1008               	bcf	8,0	;volatile
  1622                           
  1623                           ;lcdv2.h: 119: RC1 = 0;
  1624  0995  1087               	bcf	7,1	;volatile
  1625                           
  1626                           ;lcdv2.h: 120: RC3 = 1;
  1627  0996  1587               	bsf	7,3	;volatile
  1628                           
  1629                           ;lcdv2.h: 121: RC3 = 0;
  1630  0997  1187               	bcf	7,3	;volatile
  1631                           
  1632                           ;lcdv2.h: 122: RD1 = 1;
  1633  0998  1488               	bsf	8,1	;volatile
  1634                           
  1635                           ;lcdv2.h: 123: RC0 = 1;
  1636  0999  1407               	bsf	7,0	;volatile
  1637                           
  1638                           ;lcdv2.h: 124: RD0 = 0;
  1639                           
  1640                           ;lcdv2.h: 125: RC1 = 0;
  1641                           
  1642                           ;lcdv2.h: 126: RC3 = 1;
  1643                           
  1644                           ;lcdv2.h: 127: RC3 = 0;
  1645                           
  1646                           ;lcdv2.h: 128: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  1647                           
  1648                           ;lcdv2.h: 131: RC2 = 0;
  1649                           
  1650                           ;lcdv2.h: 132: RD1 = 0;
  1651                           
  1652                           ;lcdv2.h: 133: RC0 = 0;
  1653  099A  21B1  120A  158A   	fcall	PL2	;call to abstracted procedure
  1654                           
  1655                           ;lcdv2.h: 134: RD0 = 0;
  1656  099D  1008               	bcf	8,0	;volatile
  1657                           
  1658                           ;lcdv2.h: 135: RC1 = 0;
  1659  099E  1087               	bcf	7,1	;volatile
  1660                           
  1661                           ;lcdv2.h: 136: RC3 = 1;
  1662  099F  1587               	bsf	7,3	;volatile
  1663                           
  1664                           ;lcdv2.h: 137: RC3 = 0;
  1665  09A0  1187               	bcf	7,3	;volatile
  1666                           
  1667                           ;lcdv2.h: 138: RD1 = 0;
  1668  09A1  1088               	bcf	8,1	;volatile
  1669                           
  1670                           ;lcdv2.h: 139: RC0 = 0;
  1671  09A2  1007               	bcf	7,0	;volatile
  1672                           
  1673                           ;lcdv2.h: 140: RD0 = 0;
  1674  09A3  1008               	bcf	8,0	;volatile
  1675                           
  1676                           ;lcdv2.h: 141: RC1 = 1;
  1677  09A4  1487               	bsf	7,1	;volatile
  1678                           
  1679                           ;lcdv2.h: 142: RC3 = 1;
  1680  09A5  1587               	bsf	7,3	;volatile
  1681                           
  1682                           ;lcdv2.h: 143: RC3 = 0;
  1683  09A6  1187               	bcf	7,3	;volatile
  1684                           
  1685                           ;lcdv2.h: 144: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  1686  09A7  01A3               	clrf	lcd_init@DelayLCD
  1687  09A8  01A4               	clrf	lcd_init@DelayLCD+1
  1688  09A9                     l4122:	
  1689  09A9  21C5  120A  158A   	fcall	PL10	;call to abstracted procedure
  1690  09AC  1903               	skipnz
  1691  09AD  0223               	subwf	lcd_init@DelayLCD,w
  1692  09AE  1803               	btfsc	3,0
  1693  09AF  0008               	return
  1694  09B0  29A9               	goto	l4122
  1695  09B1                     __end_of_lcd_init:	
  1696  09B1                     PL2:	
  1697  09B1  1008               	bcf	8,0	;volatile
  1698  09B2  1087               	bcf	7,1	;volatile
  1699  09B3  1587               	bsf	7,3	;volatile
  1700  09B4  1187               	bcf	7,3	;volatile
  1701  09B5  01A3               	clrf	lcd_init@DelayLCD
  1702  09B6  01A4               	clrf	lcd_init@DelayLCD+1
  1703  09B7                     l4082:	
  1704  09B7  0AA3               	incf	lcd_init@DelayLCD,f
  1705  09B8  1903               	skipnz
  1706  09B9  0AA4               	incf	lcd_init@DelayLCD+1,f
  1707  09BA  3009               	movlw	9
  1708  09BB  0224               	subwf	lcd_init@DelayLCD+1,w
  1709  09BC  30C4               	movlw	196
  1710  09BD  1903               	skipnz
  1711  09BE  0223               	subwf	lcd_init@DelayLCD,w
  1712  09BF  1C03               	skipc
  1713  09C0  29B7               	goto	l4082
  1714  09C1  1107               	bcf	7,2	;volatile
  1715  09C2  1088               	bcf	8,1	;volatile
  1716  09C3  1007               	bcf	7,0	;volatile
  1717  09C4  0008               	return
  1718  09C5                     __end_ofPL2:	
  1719  09C5                     PL10:	
  1720  09C5  0AA3               	incf	lcd_init@DelayLCD,f
  1721  09C6  1903               	skipnz
  1722  09C7  0AA4               	incf	lcd_init@DelayLCD+1,f
  1723  09C8  3009               	movlw	9
  1724  09C9  0224               	subwf	lcd_init@DelayLCD+1,w
  1725  09CA  34C4               	retlw	196
  1726  09CB                     __end_ofPL10:	
  1727                           
  1728                           	psect	text6
  1729  1D30                     __ptext6:	
  1730 ;; *************** function _enableInterrupt *****************
  1731 ;; Defined at:
  1732 ;;		line 7 in file "interrupts.h"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;		None               void
  1739 ;; Registers used:
  1740 ;;		None
  1741 ;; Tracked objects:
  1742 ;;		On entry : 300/100
  1743 ;;		On exit  : 300/100
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1746 ;;      Params:         0       0       0       0       0
  1747 ;;      Locals:         0       0       0       0       0
  1748 ;;      Temps:          0       0       0       0       0
  1749 ;;      Totals:         0       0       0       0       0
  1750 ;;Total ram usage:        0 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    5
  1753 ;; This function calls:
  1754 ;;		Nothing
  1755 ;; This function is called by:
  1756 ;;		_main
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           
  1761                           ;psect for function _enableInterrupt
  1762  1D30                     _enableInterrupt:	
  1763                           
  1764                           ;interrupts.h: 9: RBIE = 0;
  1765                           
  1766                           ;incstack = 0
  1767                           ; Regs used in _enableInterrupt: []
  1768  1D30  118B               	bcf	11,3	;volatile
  1769                           
  1770                           ;interrupts.h: 10: INTE = 0;
  1771  1D31  120B               	bcf	11,4	;volatile
  1772                           
  1773                           ;interrupts.h: 12: PSPIE = 0;
  1774  1D32  138C               	bcf	12,7	;volatile
  1775                           
  1776                           ;interrupts.h: 13: ADIE = 0;
  1777  1D33  130C               	bcf	12,6	;volatile
  1778                           
  1779                           ;interrupts.h: 15: TXIE = 0;
  1780  1D34  120C               	bcf	12,4	;volatile
  1781                           
  1782                           ;interrupts.h: 16: RCIE = 1;
  1783  1D35  168C               	bsf	12,5	;volatile
  1784                           
  1785                           ;interrupts.h: 18: SSPIE = 0;
  1786  1D36  118C               	bcf	12,3	;volatile
  1787                           
  1788                           ;interrupts.h: 19: CCP1IE = 0;
  1789  1D37  110C               	bcf	12,2	;volatile
  1790                           
  1791                           ;interrupts.h: 21: TMR1IE = 1;
  1792  1D38  140C               	bsf	12,0	;volatile
  1793                           
  1794                           ;interrupts.h: 22: TMR2IE = 0;
  1795  1D39  108C               	bcf	12,1	;volatile
  1796                           
  1797                           ;interrupts.h: 23: T0IE = 0;
  1798  1D3A  128B               	bcf	11,5	;volatile
  1799                           
  1800                           ;interrupts.h: 25: EEIE = 0;
  1801  1D3B  120D               	bcf	13,4	;volatile
  1802                           
  1803                           ;interrupts.h: 26: BCLIE = 0;
  1804  1D3C  118D               	bcf	13,3	;volatile
  1805                           
  1806                           ;interrupts.h: 27: CCP2IE = 0;
  1807  1D3D  100D               	bcf	13,0	;volatile
  1808                           
  1809                           ;interrupts.h: 30: GIE = 1;
  1810  1D3E  178B               	bsf	11,7	;volatile
  1811                           
  1812                           ;interrupts.h: 31: PEIE = 1;
  1813  1D3F  170B               	bsf	11,6	;volatile
  1814  1D40  0008               	return
  1815  1D41                     __end_of_enableInterrupt:	
  1816                           
  1817                           	psect	text7
  1818  1D90                     __ptext7:	
  1819 ;; *************** function _eeprom_write *****************
  1820 ;; Defined at:
  1821 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic\eewrite.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  addr            1    wreg     unsigned char 
  1824 ;;  value           1    3[BANK0 ] unsigned char 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  addr            1    4[BANK0 ] unsigned char 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;		None               void
  1829 ;; Registers used:
  1830 ;;		wreg, status,2, status,0
  1831 ;; Tracked objects:
  1832 ;;		On entry : 300/0
  1833 ;;		On exit  : 300/300
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1836 ;;      Params:         0       1       0       0       0
  1837 ;;      Locals:         0       1       0       0       0
  1838 ;;      Temps:          0       0       0       0       0
  1839 ;;      Totals:         0       2       0       0       0
  1840 ;;Total ram usage:        2 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    5
  1843 ;; This function calls:
  1844 ;;		Nothing
  1845 ;; This function is called by:
  1846 ;;		_main
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           
  1851                           ;psect for function _eeprom_write
  1852  1D90                     _eeprom_write:	
  1853                           
  1854                           ;incstack = 0
  1855                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  1856                           ;eeprom_write@addr stored from wreg
  1857  1D90  00A4               	movwf	eeprom_write@addr
  1858  1D91                     l851:	
  1859  1D91  1683               	bsf	3,5	;RP0=1, select bank3
  1860  1D92  1703               	bsf	3,6	;RP1=1, select bank3
  1861  1D93  188C               	btfsc	12,1	;volsfr
  1862  1D94  2D91               	goto	l851
  1863  1D95  1283               	bcf	3,5	;RP0=0, select bank0
  1864  1D96  1303               	bcf	3,6	;RP1=0, select bank0
  1865  1D97  0824               	movf	eeprom_write@addr,w
  1866  1D98  1703               	bsf	3,6	;RP1=1, select bank2
  1867  1D99  008D               	movwf	13	;volatile
  1868  1D9A  1303               	bcf	3,6	;RP1=0, select bank0
  1869  1D9B  0823               	movf	eeprom_write@value,w
  1870  1D9C  1703               	bsf	3,6	;RP1=1, select bank2
  1871  1D9D  008C               	movwf	12	;volatile
  1872  1D9E  303F               	movlw	63
  1873  1D9F  1683               	bsf	3,5	;RP0=1, select bank3
  1874  1DA0  058C               	andwf	12,f	;volsfr
  1875  1DA1  1003               	bcf	3,0	;volatile
  1876  1DA2  1B8B               	btfsc	11,7	;volatile
  1877  1DA3  1403               	bsf	3,0	;volatile
  1878  1DA4  138B               	bcf	11,7	;volatile
  1879  1DA5  150C               	bsf	12,2	;volsfr
  1880  1DA6  3055               	movlw	85
  1881  1DA7  008D               	movwf	13	;volsfr
  1882  1DA8  30AA               	movlw	170
  1883  1DA9  008D               	movwf	13	;volsfr
  1884  1DAA  148C               	bsf	12,1	;volsfr
  1885  1DAB  110C               	bcf	12,2	;volsfr
  1886  1DAC  1803               	btfsc	3,0	;volatile
  1887  1DAD  178B               	bsf	11,7	;volatile
  1888  1DAE  0008               	return
  1889  1DAF                     __end_of_eeprom_write:	
  1890                           
  1891                           	psect	text8
  1892  08E9                     __ptext8:	
  1893 ;; *************** function _eeprom_read *****************
  1894 ;; Defined at:
  1895 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic\eeread.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  addr            1    wreg     unsigned char 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  addr            1    3[BANK0 ] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      unsigned char 
  1902 ;; Registers used:
  1903 ;;		wreg, status,2, status,0
  1904 ;; Tracked objects:
  1905 ;;		On entry : 300/300
  1906 ;;		On exit  : 300/200
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1909 ;;      Params:         0       0       0       0       0
  1910 ;;      Locals:         0       1       0       0       0
  1911 ;;      Temps:          0       0       0       0       0
  1912 ;;      Totals:         0       1       0       0       0
  1913 ;;Total ram usage:        1 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    5
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           
  1924                           ;psect for function _eeprom_read
  1925  08E9                     _eeprom_read:	
  1926                           
  1927                           ;incstack = 0
  1928                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  1929                           ;eeprom_read@addr stored from wreg
  1930  08E9  1283               	bcf	3,5	;RP0=0, select bank0
  1931  08EA  1303               	bcf	3,6	;RP1=0, select bank0
  1932  08EB  00A3               	movwf	eeprom_read@addr
  1933  08EC  28EF               	goto	l829
  1934  08ED                     u6151:	
  1935  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  1936  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  1937  08EF                     l829:	
  1938  08EF  0064               	clrwdt	;# 
  1939  08F0  1683               	bsf	3,5	;RP0=1, select bank3
  1940  08F1  1703               	bsf	3,6	;RP1=1, select bank3
  1941  08F2  188C               	btfsc	12,1	;volsfr
  1942  08F3  28ED               	goto	u6151
  1943  08F4  1283               	bcf	3,5	;RP0=0, select bank0
  1944  08F5  1303               	bcf	3,6	;RP1=0, select bank0
  1945  08F6  0823               	movf	eeprom_read@addr,w
  1946  08F7  1703               	bsf	3,6	;RP1=1, select bank2
  1947  08F8  008D               	movwf	13	;volatile
  1948  08F9  303F               	movlw	63
  1949  08FA  1683               	bsf	3,5	;RP0=1, select bank3
  1950  08FB  058C               	andwf	12,f	;volsfr
  1951  08FC  140C               	bsf	12,0	;volsfr
  1952  08FD  1003               	clrc
  1953  08FE  180C               	btfsc	12,0	;volsfr
  1954  08FF  1403               	setc
  1955  0900  1803               	skipnc
  1956  0901  3001               	movlw	1
  1957  0902  1283               	bcf	3,5	;RP0=0, select bank2
  1958  0903  080C               	movf	12,w	;volatile
  1959  0904  0008               	return
  1960  0905                     __end_of_eeprom_read:	
  1961                           
  1962                           	psect	text9
  1963  0108                     __ptext9:	
  1964 ;; *************** function _clr_display *****************
  1965 ;; Defined at:
  1966 ;;		line 183 in file "lcdv2.h"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0, pclath, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 300/0
  1977 ;;		On exit  : 300/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1980 ;;      Params:         0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0
  1982 ;;      Temps:          0       2       0       0       0
  1983 ;;      Totals:         0       2       0       0       0
  1984 ;;Total ram usage:        2 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    6
  1987 ;; This function calls:
  1988 ;;		_lcd_add
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           
  1995                           ;psect for function _clr_display
  1996  0108                     _clr_display:	
  1997                           
  1998                           ;lcdv2.h: 185: RC2 = 0;
  1999                           
  2000                           ;incstack = 0
  2001                           ; Regs used in _clr_display: [wreg+status,2+status,0+pclath+cstack]
  2002  0108  1107               	bcf	7,2	;volatile
  2003                           
  2004                           ;lcdv2.h: 186: _delay(20);
  2005  0109  3006               	movlw	6
  2006  010A  00A4               	movwf	??_clr_display
  2007  010B                     u6487:	
  2008  010B  0BA4               	decfsz	??_clr_display,f
  2009  010C  290B               	goto	u6487
  2010  010D  0000               	nop
  2011                           
  2012                           ;lcdv2.h: 187: lcd_data = 0b00000001;
  2013  010E  1283               	bcf	3,5	;RP0=0, select bank0
  2014  010F  1303               	bcf	3,6	;RP1=0, select bank0
  2015  0110  01DF               	clrf	_lcd_data
  2016  0111  0ADF               	incf	_lcd_data,f
  2017                           
  2018                           ;lcdv2.h: 188: lcd_add();
  2019  0112  25E6  120A  118A   	fcall	_lcd_add
  2020                           
  2021                           ;lcdv2.h: 189: _delay((unsigned long)((10)*(4000000/4000.0)));
  2022  0115  300D               	movlw	13
  2023  0116  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0117  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0118  00A5               	movwf	??_clr_display+1
  2026  0119  30FB               	movlw	251
  2027  011A  00A4               	movwf	??_clr_display
  2028  011B                     u6497:	
  2029  011B  0BA4               	decfsz	??_clr_display,f
  2030  011C  291B               	goto	u6497
  2031  011D  0BA5               	decfsz	??_clr_display+1,f
  2032  011E  291B               	goto	u6497
  2033  011F  2920               	nop2
  2034                           
  2035                           ;lcdv2.h: 190: RC2 = 1;
  2036  0120  1283               	bcf	3,5	;RP0=0, select bank0
  2037  0121  1303               	bcf	3,6	;RP1=0, select bank0
  2038  0122  1507               	bsf	7,2	;volatile
  2039  0123  0008               	return
  2040  0124                     __end_of_clr_display:	
  2041  0124                     __ptext11:	
  2042 ;; *************** function _a2d_read *****************
  2043 ;; Defined at:
  2044 ;;		line 549 in file "Automated Solar Panel Orientation Setter.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;		None
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;		None
  2049 ;; Return value:  Size  Location     Type
  2050 ;;		None               void
  2051 ;; Registers used:
  2052 ;;		wreg, status,2, status,0, pclath, cstack
  2053 ;; Tracked objects:
  2054 ;;		On entry : 300/0
  2055 ;;		On exit  : 300/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2058 ;;      Params:         0       0       0       0       0
  2059 ;;      Locals:         0       0       0       0       0
  2060 ;;      Temps:          0       0       0       0       0
  2061 ;;      Totals:         0       0       0       0       0
  2062 ;;Total ram usage:        0 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:    7
  2065 ;; This function calls:
  2066 ;;		___awdiv
  2067 ;;		___ftmul
  2068 ;;		___fttol
  2069 ;;		___lwtoft
  2070 ;;		___wmul
  2071 ;;		_read_a2d_value
  2072 ;; This function is called by:
  2073 ;;		_main
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           
  2078                           ;psect for function _a2d_read
  2079  0124                     _a2d_read:	
  2080                           
  2081                           ;Automated Solar Panel Orientation Setter.c: 550: ldr1 = read_a2d_value(0);
  2082                           
  2083                           ;incstack = 0
  2084                           ; Regs used in _a2d_read: [wreg+status,2+status,0+pclath+cstack]
  2085  0124  3000               	movlw	0
  2086  0125  2199  120A  118A   	fcall	_read_a2d_value
  2087  0128  0824               	movf	?_read_a2d_value+1,w
  2088  0129  00D5               	movwf	_ldr1+1
  2089  012A  0823               	movf	?_read_a2d_value,w
  2090  012B  00D4               	movwf	_ldr1
  2091                           
  2092                           ;Automated Solar Panel Orientation Setter.c: 551: ldr2 = read_a2d_value(1);
  2093  012C  3001               	movlw	1
  2094  012D  2199  120A  118A   	fcall	_read_a2d_value
  2095  0130  0824               	movf	?_read_a2d_value+1,w
  2096  0131  00D7               	movwf	_ldr2+1
  2097  0132  0823               	movf	?_read_a2d_value,w
  2098  0133  00D6               	movwf	_ldr2
  2099                           
  2100                           ;Automated Solar Panel Orientation Setter.c: 552: ldr2 = ldr2 + (int)(ldr2*0.35);
  2101  0134  0857               	movf	_ldr2+1,w
  2102  0135  00AC               	movwf	___lwtoft@c+1
  2103  0136  0856               	movf	_ldr2,w
  2104  0137  00AB               	movwf	___lwtoft@c
  2105  0138  2795  120A  118A   	fcall	___lwtoft
  2106  013B  082B               	movf	?___lwtoft,w
  2107  013C  00B1               	movwf	___ftmul@f2
  2108  013D  082C               	movf	?___lwtoft+1,w
  2109  013E  00B2               	movwf	___ftmul@f2+1
  2110  013F  082D               	movf	?___lwtoft+2,w
  2111  0140  00B3               	movwf	___ftmul@f2+2
  2112  0141  3033               	movlw	51
  2113  0142  00AE               	movwf	___ftmul@f1
  2114  0143  30B3               	movlw	179
  2115  0144  00AF               	movwf	___ftmul@f1+1
  2116  0145  303E               	movlw	62
  2117  0146  00B0               	movwf	___ftmul@f1+2
  2118  0147  2718               	fcall	___ftmul
  2119  0148  082E               	movf	?___ftmul,w
  2120  0149  00BD               	movwf	___fttol@f1
  2121  014A  082F               	movf	?___ftmul+1,w
  2122  014B  00BE               	movwf	___fttol@f1+1
  2123  014C  0830               	movf	?___ftmul+2,w
  2124  014D  00BF               	movwf	___fttol@f1+2
  2125  014E  120A  158A  2105  120A  118A  	fcall	___fttol
  2126  0153  083D               	movf	?___fttol,w
  2127  0154  07D6               	addwf	_ldr2,f
  2128  0155  1803               	skipnc
  2129  0156  0AD7               	incf	_ldr2+1,f
  2130  0157  083E               	movf	?___fttol+1,w
  2131  0158  07D7               	addwf	_ldr2+1,f
  2132                           
  2133                           ;Automated Solar Panel Orientation Setter.c: 553: V_Bat = read_a2d_value(2);
  2134  0159  3002               	movlw	2
  2135  015A  2199  120A  118A   	fcall	_read_a2d_value
  2136  015D  0824               	movf	?_read_a2d_value+1,w
  2137  015E  00E5               	movwf	_V_Bat+1
  2138  015F  0823               	movf	?_read_a2d_value,w
  2139  0160  00E4               	movwf	_V_Bat
  2140                           
  2141                           ;Automated Solar Panel Orientation Setter.c: 554: V_Bat2 = (int)V_Bat*5*11/1023;
  2142  0161  30FF               	movlw	255
  2143  0162  00A9               	movwf	___awdiv@divisor
  2144  0163  3003               	movlw	3
  2145  0164  00AA               	movwf	___awdiv@divisor+1
  2146  0165  0865               	movf	_V_Bat+1,w
  2147  0166  00A4               	movwf	___wmul@multiplier+1
  2148  0167  0864               	movf	_V_Bat,w
  2149  0168  00A3               	movwf	___wmul@multiplier
  2150  0169  3037               	movlw	55
  2151  016A  00A5               	movwf	___wmul@multiplicand
  2152  016B  01A6               	clrf	___wmul@multiplicand+1
  2153  016C  26C9               	fcall	___wmul
  2154  016D  0824               	movf	?___wmul+1,w
  2155  016E  00AC               	movwf	___awdiv@dividend+1
  2156  016F  0823               	movf	?___wmul,w
  2157  0170  00AB               	movwf	___awdiv@dividend
  2158  0171  160A  118A  2751  120A  118A  	fcall	___awdiv
  2159  0176  0829               	movf	?___awdiv,w
  2160  0177  00CD               	movwf	_V_Bat2
  2161  0178  082A               	movf	?___awdiv+1,w
  2162  0179  00CE               	movwf	_V_Bat2+1
  2163  017A  3000               	movlw	0
  2164  017B  1BAA               	btfsc	?___awdiv+1,7
  2165  017C  30FF               	movlw	255
  2166  017D  00CF               	movwf	_V_Bat2+2
  2167                           
  2168                           ;Automated Solar Panel Orientation Setter.c: 555: C_Bat = read_a2d_value(3);
  2169  017E  3003               	movlw	3
  2170  017F  2199  120A  118A   	fcall	_read_a2d_value
  2171  0182  0824               	movf	?_read_a2d_value+1,w
  2172  0183  00E3               	movwf	_C_Bat+1
  2173  0184  0823               	movf	?_read_a2d_value,w
  2174  0185  00E2               	movwf	_C_Bat
  2175                           
  2176                           ;Automated Solar Panel Orientation Setter.c: 556: C_Bat2 = (int)C_Bat*5*11/1023;
  2177  0186  30FF               	movlw	255
  2178  0187  00A9               	movwf	___awdiv@divisor
  2179  0188  3003               	movlw	3
  2180  0189  00AA               	movwf	___awdiv@divisor+1
  2181  018A  0863               	movf	_C_Bat+1,w
  2182  018B  00A4               	movwf	___wmul@multiplier+1
  2183  018C  0862               	movf	_C_Bat,w
  2184  018D  00A3               	movwf	___wmul@multiplier
  2185  018E  3037               	movlw	55
  2186  018F  00A5               	movwf	___wmul@multiplicand
  2187  0190  01A6               	clrf	___wmul@multiplicand+1
  2188  0191  26C9               	fcall	___wmul
  2189  0192  0824               	movf	?___wmul+1,w
  2190  0193  00AC               	movwf	___awdiv@dividend+1
  2191  0194  0823               	movf	?___wmul,w
  2192  0195  00AB               	movwf	___awdiv@dividend
  2193  0196  160A  118A  2F51   	ljmp	l3376
  2194  0199                     __end_of_a2d_read:	
  2195  0199                     __ptext12:	
  2196 ;; *************** function _read_a2d_value *****************
  2197 ;; Defined at:
  2198 ;;		line 13 in file "a2d.h"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  channel         1    wreg     unsigned char 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  channel         1    6[BANK0 ] unsigned char 
  2203 ;;  a2d_value       2    7[BANK0 ] unsigned int 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  2    3[BANK0 ] unsigned int 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0
  2208 ;; Tracked objects:
  2209 ;;		On entry : 300/0
  2210 ;;		On exit  : 300/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2213 ;;      Params:         0       2       0       0       0
  2214 ;;      Locals:         0       3       0       0       0
  2215 ;;      Temps:          0       1       0       0       0
  2216 ;;      Totals:         0       6       0       0       0
  2217 ;;Total ram usage:        6 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:    5
  2220 ;; This function calls:
  2221 ;;		Nothing
  2222 ;; This function is called by:
  2223 ;;		_a2d_read
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           
  2228                           ;psect for function _read_a2d_value
  2229  0199                     _read_a2d_value:	
  2230                           
  2231                           ;incstack = 0
  2232                           ; Regs used in _read_a2d_value: [wreg+status,2+status,0]
  2233                           ;read_a2d_value@channel stored from wreg
  2234  0199  00A6               	movwf	read_a2d_value@channel
  2235                           
  2236                           ;a2d.h: 14: unsigned int a2d_value;
  2237                           ;a2d.h: 15: channel = channel << 3;
  2238  019A  0DA6               	rlf	read_a2d_value@channel,f
  2239  019B  0DA6               	rlf	read_a2d_value@channel,f
  2240  019C  0D26               	rlf	read_a2d_value@channel,w
  2241  019D  39F8               	andlw	248
  2242  019E  00A6               	movwf	read_a2d_value@channel
  2243                           
  2244                           ;a2d.h: 16: ADCON0 = ADCON0 & 0b11000111;
  2245  019F  30C7               	movlw	199
  2246  01A0  059F               	andwf	31,f	;volatile
  2247                           
  2248                           ;a2d.h: 17: ADCON0 = ADCON0 | channel;
  2249  01A1  0826               	movf	read_a2d_value@channel,w
  2250  01A2  049F               	iorwf	31,f	;volatile
  2251                           
  2252                           ;a2d.h: 18: ADON = 1;
  2253  01A3  141F               	bsf	31,0	;volatile
  2254                           
  2255                           ;a2d.h: 19: _delay(50);
  2256  01A4  3010               	movlw	16
  2257  01A5  00A5               	movwf	??_read_a2d_value
  2258  01A6                     u6507:	
  2259  01A6  0BA5               	decfsz	??_read_a2d_value,f
  2260  01A7  29A6               	goto	u6507
  2261  01A8  0000               	nop
  2262                           
  2263                           ;a2d.h: 20: GO = 1;
  2264  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  2265  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  2266  01AB  151F               	bsf	31,2	;volatile
  2267  01AC                     l262:	
  2268                           ;a2d.h: 21: while( GO == 1 );
  2269                           
  2270  01AC  191F               	btfsc	31,2	;volatile
  2271  01AD  29AC               	goto	l262
  2272                           
  2273                           ;a2d.h: 22: a2d_value = ADRESH;
  2274  01AE  081E               	movf	30,w	;volatile
  2275  01AF  00A7               	movwf	read_a2d_value@a2d_value
  2276  01B0  01A8               	clrf	read_a2d_value@a2d_value+1
  2277                           
  2278                           ;a2d.h: 23: a2d_value = a2d_value << 8;
  2279  01B1  00A8               	movwf	read_a2d_value@a2d_value+1
  2280  01B2  01A7               	clrf	read_a2d_value@a2d_value
  2281                           
  2282                           ;a2d.h: 24: a2d_value = a2d_value + ADRESL;
  2283  01B3  1683               	bsf	3,5	;RP0=1, select bank1
  2284  01B4  081E               	movf	30,w	;volatile
  2285  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  2286  01B6  07A7               	addwf	read_a2d_value@a2d_value,f
  2287  01B7  1803               	skipnc
  2288  01B8  0AA8               	incf	read_a2d_value@a2d_value+1,f
  2289                           
  2290                           ;a2d.h: 25: return a2d_value;
  2291  01B9  0828               	movf	read_a2d_value@a2d_value+1,w
  2292  01BA  00A4               	movwf	?_read_a2d_value+1
  2293  01BB  0827               	movf	read_a2d_value@a2d_value,w
  2294  01BC  00A3               	movwf	?_read_a2d_value
  2295  01BD  0008               	return
  2296  01BE                     __end_of_read_a2d_value:	
  2297  01BE                     __ptext25:	
  2298 ;; *************** function _LCDTimeUpdate *****************
  2299 ;; Defined at:
  2300 ;;		line 734 in file "Automated Solar Panel Orientation Setter.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;		None
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;		None
  2305 ;; Return value:  Size  Location     Type
  2306 ;;		None               void
  2307 ;; Registers used:
  2308 ;;		wreg, status,2, status,0, pclath, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 300/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2314 ;;      Params:         0       0       0       0       0
  2315 ;;      Locals:         0       0       0       0       0
  2316 ;;      Temps:          0       0       0       0       0
  2317 ;;      Totals:         0       0       0       0       0
  2318 ;;Total ram usage:        0 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    8
  2321 ;; This function calls:
  2322 ;;		_LCD_print_char
  2323 ;;		___lwdiv
  2324 ;;		___lwmod
  2325 ;; This function is called by:
  2326 ;;		_main
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           
  2331                           ;psect for function _LCDTimeUpdate
  2332  01BE                     _LCDTimeUpdate:	
  2333                           
  2334                           ;incstack = 0
  2335 ;; hardware stack exceeded
  2336                           ; Regs used in _LCDTimeUpdate: [wreg+status,2+status,0+pclath+cstack]
  2337  01BE  300C               	movlw	12
  2338                           
  2339                           ;Automated Solar Panel Orientation Setter.c: 735: LCD_print_char(1,12,hour/10+48);
  2340  01BF  01AF               	clrf	LCD_print_char@row
  2341  01C0  0AAF               	incf	LCD_print_char@row,f
  2342  01C1  01B0               	clrf	LCD_print_char@row+1
  2343  01C2  00B1               	movwf	LCD_print_char@column
  2344  01C3  300A               	movlw	10
  2345  01C4  01B2               	clrf	LCD_print_char@column+1
  2346  01C5  00A3               	movwf	___lwdiv@divisor
  2347  01C6  01A4               	clrf	___lwdiv@divisor+1
  2348  01C7  0853               	movf	_hour+1,w
  2349  01C8  00A6               	movwf	___lwdiv@dividend+1
  2350  01C9  0852               	movf	_hour,w
  2351  01CA  00A5               	movwf	___lwdiv@dividend
  2352  01CB  25AE  120A  118A   	fcall	___lwdiv
  2353  01CE  0823               	movf	?___lwdiv,w
  2354  01CF  3E30               	addlw	48
  2355  01D0  00B3               	movwf	LCD_print_char@print_value
  2356  01D1  221A  120A  118A   	fcall	_LCD_print_char
  2357                           
  2358                           ;Automated Solar Panel Orientation Setter.c: 736: LCD_print_char(1,13,hour%10+48);
  2359  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  2360  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  2361  01D6  300D               	movlw	13
  2362  01D7  01AF               	clrf	LCD_print_char@row
  2363  01D8  0AAF               	incf	LCD_print_char@row,f
  2364  01D9  01B0               	clrf	LCD_print_char@row+1
  2365  01DA  00B1               	movwf	LCD_print_char@column
  2366  01DB  300A               	movlw	10
  2367  01DC  01B2               	clrf	LCD_print_char@column+1
  2368  01DD  00AA               	movwf	___lwmod@divisor
  2369  01DE  01AB               	clrf	___lwmod@divisor+1
  2370  01DF  0853               	movf	_hour+1,w
  2371  01E0  00AD               	movwf	___lwmod@dividend+1
  2372  01E1  0852               	movf	_hour,w
  2373  01E2  00AC               	movwf	___lwmod@dividend
  2374  01E3  26A5  120A  118A   	fcall	___lwmod
  2375  01E6  082A               	movf	?___lwmod,w
  2376  01E7  3E30               	addlw	48
  2377  01E8  00B3               	movwf	LCD_print_char@print_value
  2378  01E9  221A  120A  118A   	fcall	_LCD_print_char
  2379                           
  2380                           ;Automated Solar Panel Orientation Setter.c: 737: LCD_print_char(1,15,minute/10+48);
  2381  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  2382  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  2383  01EE  300F               	movlw	15
  2384  01EF  01AF               	clrf	LCD_print_char@row
  2385  01F0  0AAF               	incf	LCD_print_char@row,f
  2386  01F1  01B0               	clrf	LCD_print_char@row+1
  2387  01F2  00B1               	movwf	LCD_print_char@column
  2388  01F3  300A               	movlw	10
  2389  01F4  01B2               	clrf	LCD_print_char@column+1
  2390  01F5  00A3               	movwf	___lwdiv@divisor
  2391  01F6  01A4               	clrf	___lwdiv@divisor+1
  2392  01F7  0859               	movf	_minute+1,w
  2393  01F8  00A6               	movwf	___lwdiv@dividend+1
  2394  01F9  0858               	movf	_minute,w
  2395  01FA  00A5               	movwf	___lwdiv@dividend
  2396  01FB  25AE  120A  118A   	fcall	___lwdiv
  2397  01FE  0823               	movf	?___lwdiv,w
  2398  01FF  3E30               	addlw	48
  2399  0200  00B3               	movwf	LCD_print_char@print_value
  2400  0201  221A  120A  118A   	fcall	_LCD_print_char
  2401                           
  2402                           ;Automated Solar Panel Orientation Setter.c: 738: LCD_print_char(1,16,minute%10+48);
  2403  0204  1283               	bcf	3,5	;RP0=0, select bank0
  2404  0205  1303               	bcf	3,6	;RP1=0, select bank0
  2405  0206  3010               	movlw	16
  2406  0207  01AF               	clrf	LCD_print_char@row
  2407  0208  0AAF               	incf	LCD_print_char@row,f
  2408  0209  01B0               	clrf	LCD_print_char@row+1
  2409  020A  00B1               	movwf	LCD_print_char@column
  2410  020B  300A               	movlw	10
  2411  020C  01B2               	clrf	LCD_print_char@column+1
  2412  020D  00AA               	movwf	___lwmod@divisor
  2413  020E  01AB               	clrf	___lwmod@divisor+1
  2414  020F  0859               	movf	_minute+1,w
  2415  0210  00AD               	movwf	___lwmod@dividend+1
  2416  0211  0858               	movf	_minute,w
  2417  0212  00AC               	movwf	___lwmod@dividend
  2418  0213  26A5  120A  118A   	fcall	___lwmod
  2419  0216  082A               	movf	?___lwmod,w
  2420  0217  3E30               	addlw	48
  2421  0218  00B3               	movwf	LCD_print_char@print_value
  2422  0219  2A1A               	ljmp	l3490
  2423  021A                     __end_of_LCDTimeUpdate:	
  2424  021A                     __ptext28:	
  2425 ;; *************** function _LCD_print_char *****************
  2426 ;; Defined at:
  2427 ;;		line 174 in file "lcdv2.h"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  row             2   15[BANK0 ] int 
  2430 ;;  column          2   17[BANK0 ] int 
  2431 ;;  print_value     1   19[BANK0 ] unsigned char 
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;		None
  2434 ;; Return value:  Size  Location     Type
  2435 ;;		None               void
  2436 ;; Registers used:
  2437 ;;		wreg, status,2, status,0, pclath, cstack
  2438 ;; Tracked objects:
  2439 ;;		On entry : 300/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2443 ;;      Params:         0       5       0       0       0
  2444 ;;      Locals:         0       0       0       0       0
  2445 ;;      Temps:          0       1       0       0       0
  2446 ;;      Totals:         0       6       0       0       0
  2447 ;;Total ram usage:        6 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    7
  2450 ;; This function calls:
  2451 ;;		_lcd_add
  2452 ;;		_position
  2453 ;; This function is called by:
  2454 ;;		_main
  2455 ;;		_LCDTimeUpdate
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           
  2460                           ;psect for function _LCD_print_char
  2461  021A                     _LCD_print_char:	
  2462  021A                     l3490:	
  2463                           ;incstack = 0
  2464                           ; Regs used in _LCD_print_char: [wreg+status,2+status,0+pclath+cstack]
  2465                           
  2466                           
  2467                           ;lcdv2.h: 175: position(row,column);
  2468  021A  0831               	movf	LCD_print_char@column,w
  2469  021B  00A4               	movwf	position@collum
  2470  021C  082F               	movf	LCD_print_char@row,w
  2471  021D  26F0  120A  118A   	fcall	_position
  2472                           
  2473                           ;lcdv2.h: 176: RC2 = 1;
  2474  0220  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0221  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0222  1507               	bsf	7,2	;volatile
  2477                           
  2478                           ;lcdv2.h: 177: _delay(20);
  2479  0223  3006               	movlw	6
  2480  0224  00B4               	movwf	??_LCD_print_char
  2481  0225                     u6637:	
  2482  0225  0BB4               	decfsz	??_LCD_print_char,f
  2483  0226  2A25               	goto	u6637
  2484  0227  0000               	nop
  2485                           
  2486                           ;lcdv2.h: 178: lcd_data = print_value;
  2487  0228  1283               	bcf	3,5	;RP0=0, select bank0
  2488  0229  1303               	bcf	3,6	;RP1=0, select bank0
  2489  022A  0833               	movf	LCD_print_char@print_value,w
  2490  022B  00DF               	movwf	_lcd_data
  2491                           
  2492                           ;lcdv2.h: 179: lcd_add();
  2493  022C  25E6  120A  118A   	fcall	_lcd_add
  2494                           
  2495                           ;lcdv2.h: 180: _delay(100);
  2496  022F  3021               	movlw	33
  2497  0230  1283               	bcf	3,5	;RP0=0, select bank0
  2498  0231  1303               	bcf	3,6	;RP1=0, select bank0
  2499  0232  00B4               	movwf	??_LCD_print_char
  2500  0233                     u6647:	
  2501  0233  0BB4               	decfsz	??_LCD_print_char,f
  2502  0234  2A33               	goto	u6647
  2503  0235  0008               	return
  2504  0236                     __end_of_LCD_print_char:	
  2505  0236                     __ptext1:	
  2506 ;; *************** function _printf *****************
  2507 ;; Defined at:
  2508 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  f               1    wreg     PTR const unsigned char 
  2511 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(17), 
  2512 ;;		 -> STR_4(18), STR_3(18), STR_2(18), STR_1(18), 
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;  f               1   33[BANK0 ] PTR const unsigned char 
  2515 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(17), 
  2516 ;;		 -> STR_4(18), STR_3(18), STR_2(18), STR_1(18), 
  2517 ;;  idx             1   25[BANK0 ] unsigned char 
  2518 ;;  tmpval          4    0        struct .
  2519 ;;  flag            2   37[BANK0 ] unsigned short 
  2520 ;;  width           2   34[BANK0 ] int 
  2521 ;;  val             2   30[BANK0 ] unsigned int 
  2522 ;;  len             2   27[BANK0 ] unsigned int 
  2523 ;;  c               1   36[BANK0 ] char 
  2524 ;;  prec            1   32[BANK0 ] char 
  2525 ;;  ap              1   29[BANK0 ] PTR void [1]
  2526 ;;		 -> ?_printf(2), 
  2527 ;;  cp              1   24[BANK0 ] PTR const unsigned char 
  2528 ;;		 -> printf@c(1), 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  2   15[BANK0 ] int 
  2531 ;; Registers used:
  2532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 300/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2538 ;;      Params:         0       2       0       0       0
  2539 ;;      Locals:         0      19       0       0       0
  2540 ;;      Temps:          0       3       0       0       0
  2541 ;;      Totals:         0      24       0       0       0
  2542 ;;Total ram usage:       24 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    7
  2545 ;; This function calls:
  2546 ;;		___bmul
  2547 ;;		___lwdiv
  2548 ;;		___lwmod
  2549 ;;		___wmul
  2550 ;;		_isdigit
  2551 ;;		_putch
  2552 ;; This function is called by:
  2553 ;;		_main
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           
  2558                           ;psect for function _printf
  2559  0236                     _printf:	
  2560                           
  2561                           ;incstack = 0
  2562 ;; using string table level
  2563                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2564                           ;printf@f stored from wreg
  2565  0236  1283               	bcf	3,5	;RP0=0, select bank0
  2566  0237  1303               	bcf	3,6	;RP1=0, select bank0
  2567  0238  00C1               	movwf	printf@f
  2568                           
  2569                           ;doprnt.c: 466: va_list ap;
  2570                           ;doprnt.c: 499: signed char c;
  2571                           ;doprnt.c: 501: int width;
  2572                           ;doprnt.c: 506: signed char prec;
  2573                           ;doprnt.c: 508: unsigned short flag;
  2574                           ;doprnt.c: 523: union {
  2575                           ;doprnt.c: 524: unsigned long vd;
  2576                           ;doprnt.c: 525: double integ;
  2577                           ;doprnt.c: 526: } tmpval;
  2578                           ;doprnt.c: 528: unsigned int val;
  2579                           ;doprnt.c: 529: unsigned len;
  2580                           ;doprnt.c: 530: const char * cp;
  2581                           ;doprnt.c: 533: *ap = __va_start();
  2582  0239  302F               	movlw	(low (?_printf| 0))& (0+255)
  2583  023A  00BD               	movwf	printf@ap
  2584  023B                     l4556:	
  2585                           ;doprnt.c: 536: while(c = *f++) {
  2586                           
  2587  023B  1283               	bcf	3,5	;RP0=0, select bank0
  2588  023C  1303               	bcf	3,6	;RP1=0, select bank0
  2589  023D  0841               	movf	printf@f,w
  2590  023E  0AC1               	incf	printf@f,f
  2591  023F  0084               	movwf	4
  2592  0240  120A  158A  2000  120A  118A  	fcall	stringdir
  2593  0245  00C4               	movwf	printf@c
  2594  0246  0844               	movf	printf@c,w
  2595  0247  1903               	btfsc	3,2
  2596  0248  0008               	return
  2597                           
  2598                           ;doprnt.c: 538: if(c != '%')
  2599  0249  3A25               	xorlw	37
  2600  024A  1903               	btfsc	3,2
  2601  024B  2A51               	goto	l4260
  2602                           
  2603                           ;doprnt.c: 540: {
  2604                           ;doprnt.c: 541: (putch(c) );
  2605  024C  0844               	movf	printf@c,w
  2606  024D  2597  120A  118A   	fcall	_putch
  2607                           
  2608                           ;doprnt.c: 542: continue;
  2609  0250  2A3B               	goto	l4556
  2610  0251                     l4260:	
  2611                           
  2612                           ;doprnt.c: 543: }
  2613                           ;doprnt.c: 546: width = 0;
  2614  0251  01C2               	clrf	printf@width
  2615  0252  01C3               	clrf	printf@width+1
  2616                           
  2617                           ;doprnt.c: 548: flag = 0;
  2618  0253  01C5               	clrf	printf@flag
  2619  0254  01C6               	clrf	printf@flag+1
  2620  0255  2A5E               	goto	l4272
  2621  0256                     l691:	
  2622                           ;doprnt.c: 553: case '-':
  2623                           
  2624                           
  2625                           ;doprnt.c: 554: flag |= 0x08;
  2626  0256  15C5               	bsf	printf@flag,3
  2627                           
  2628                           ;doprnt.c: 556: continue;
  2629  0257  2A5D               	goto	l4262
  2630  0258                     l693:	
  2631                           ;doprnt.c: 560: case ' ':
  2632                           
  2633                           
  2634                           ;doprnt.c: 561: flag |= 0x01;
  2635  0258  1445               	bsf	printf@flag,0
  2636  0259  2A5D               	goto	l4262
  2637  025A                     l694:	
  2638                           ;doprnt.c: 573: case '#':
  2639                           
  2640                           
  2641                           ;doprnt.c: 574: flag |= 0x800;
  2642  025A  15C6               	bsf	printf@flag+1,3
  2643  025B  2A5D               	goto	l4262
  2644  025C                     l695:	
  2645                           ;doprnt.c: 579: case '0':
  2646                           
  2647                           
  2648                           ;doprnt.c: 580: flag |= 0x04;
  2649  025C  1545               	bsf	printf@flag,2
  2650  025D                     l4262:	
  2651                           
  2652                           ;doprnt.c: 555: f++;
  2653  025D  0AC1               	incf	printf@f,f
  2654  025E                     l4272:	
  2655  025E  0841               	movf	printf@f,w
  2656  025F  0084               	movwf	4
  2657  0260  120A  158A  2000  120A  118A  	fcall	stringdir
  2658                           
  2659                           ; Switch size 1, requested type "space"
  2660                           ; Number of cases is 4, Range of values is 32 to 48
  2661                           ; switch strategies available:
  2662                           ; Name         Instructions Cycles
  2663                           ; simple_byte           13     7 (average)
  2664                           ; direct_byte           62    11 (fixed)
  2665                           ; jumptable            263     9 (fixed)
  2666                           ;	Chosen strategy is simple_byte
  2667  0265  3A20               	xorlw	32	; case 32
  2668  0266  1903               	skipnz
  2669  0267  2A58               	goto	l693
  2670  0268  3A03               	xorlw	3	; case 35
  2671  0269  1903               	skipnz
  2672  026A  2A5A               	goto	l694
  2673  026B  3A0E               	xorlw	14	; case 45
  2674  026C  1903               	skipnz
  2675  026D  2A56               	goto	l691
  2676  026E  3A1D               	xorlw	29	; case 48
  2677  026F  1903               	skipnz
  2678  0270  2A5C               	goto	l695
  2679  0271  2A72               	goto	l697
  2680  0272                     l697:	
  2681                           
  2682                           ;doprnt.c: 593: if(flag & 0x08)
  2683  0272  1DC5               	btfss	printf@flag,3
  2684  0273  2A75               	goto	l4276
  2685                           
  2686                           ;doprnt.c: 594: flag &= ~0x04;
  2687  0274  1145               	bcf	printf@flag,2
  2688  0275                     l4276:	
  2689                           
  2690                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2691  0275  0841               	movf	printf@f,w
  2692  0276  0084               	movwf	4
  2693  0277  120A  158A  2000  120A  118A  	fcall	stringdir
  2694  027C  25D8  120A  118A   	fcall	_isdigit
  2695  027F  1C03               	btfss	3,0
  2696  0280  2AB0               	goto	l4288
  2697                           
  2698                           ;doprnt.c: 598: width = 0;
  2699  0281  01C2               	clrf	printf@width
  2700  0282  01C3               	clrf	printf@width+1
  2701  0283                     l4280:	
  2702                           
  2703                           ;doprnt.c: 600: width *= 10;
  2704  0283  300A               	movlw	10
  2705  0284  00A3               	movwf	___wmul@multiplier
  2706  0285  01A4               	clrf	___wmul@multiplier+1
  2707  0286  0843               	movf	printf@width+1,w
  2708  0287  00A6               	movwf	___wmul@multiplicand+1
  2709  0288  0842               	movf	printf@width,w
  2710  0289  00A5               	movwf	___wmul@multiplicand
  2711  028A  26C9               	fcall	___wmul
  2712  028B  0824               	movf	?___wmul+1,w
  2713  028C  00C3               	movwf	printf@width+1
  2714  028D  0823               	movf	?___wmul,w
  2715  028E  00C2               	movwf	printf@width
  2716                           
  2717                           ;doprnt.c: 601: width += *f++ - '0';
  2718  028F  0841               	movf	printf@f,w
  2719  0290  0084               	movwf	4
  2720  0291  120A  158A  2000  120A  118A  	fcall	stringdir
  2721  0296  3ED0               	addlw	208
  2722  0297  00B1               	movwf	??_printf
  2723  0298  30FF               	movlw	255
  2724  0299  1803               	skipnc
  2725  029A  3000               	movlw	0
  2726  029B  00B2               	movwf	??_printf+1
  2727  029C  0831               	movf	??_printf,w
  2728  029D  07C2               	addwf	printf@width,f
  2729  029E  1803               	skipnc
  2730  029F  0AC3               	incf	printf@width+1,f
  2731  02A0  0832               	movf	??_printf+1,w
  2732  02A1  07C3               	addwf	printf@width+1,f
  2733  02A2  0AC1               	incf	printf@f,f
  2734                           
  2735                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2736  02A3  0841               	movf	printf@f,w
  2737  02A4  0084               	movwf	4
  2738  02A5  120A  158A  2000  120A  118A  	fcall	stringdir
  2739  02AA  25D8  120A  118A   	fcall	_isdigit
  2740  02AD  1C03               	btfss	3,0
  2741  02AE  2AC5               	goto	l4296
  2742  02AF  2A83               	goto	l4280
  2743  02B0                     l4288:	
  2744  02B0  0841               	movf	printf@f,w
  2745  02B1  0084               	movwf	4
  2746  02B2  120A  158A  2000  120A  118A  	fcall	stringdir
  2747  02B7  3A2A               	xorlw	42
  2748  02B8  1D03               	skipz
  2749  02B9  2AC5               	goto	l4296
  2750                           
  2751                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  2752  02BA  083D               	movf	printf@ap,w
  2753  02BB  0084               	movwf	4
  2754  02BC  1383               	bcf	3,7	;select IRP bank0
  2755  02BD  0800               	movf	0,w
  2756  02BE  00C2               	movwf	printf@width
  2757  02BF  0A84               	incf	4,f
  2758  02C0  0800               	movf	0,w
  2759  02C1  00C3               	movwf	printf@width+1
  2760  02C2  0ABD               	incf	printf@ap,f
  2761  02C3  0ABD               	incf	printf@ap,f
  2762                           
  2763                           ;doprnt.c: 606: f++;
  2764  02C4  0AC1               	incf	printf@f,f
  2765  02C5                     l4296:	
  2766                           
  2767                           ;doprnt.c: 608: }
  2768                           ;doprnt.c: 611: if(*f == '.') {
  2769  02C5  0841               	movf	printf@f,w
  2770  02C6  0084               	movwf	4
  2771  02C7  120A  158A  2000  120A  118A  	fcall	stringdir
  2772  02CC  3A2E               	xorlw	46
  2773  02CD  1D03               	skipz
  2774  02CE  2B04               	goto	l4318
  2775                           
  2776                           ;doprnt.c: 612: flag |= 0x4000;
  2777  02CF  1746               	bsf	printf@flag+1,6
  2778                           
  2779                           ;doprnt.c: 613: f++;
  2780  02D0  0AC1               	incf	printf@f,f
  2781                           
  2782                           ;doprnt.c: 615: if(*f == '*') {
  2783  02D1  0841               	movf	printf@f,w
  2784  02D2  0084               	movwf	4
  2785  02D3  120A  158A  2000  120A  118A  	fcall	stringdir
  2786  02D8  3A2A               	xorlw	42
  2787  02D9  1D03               	skipz
  2788  02DA  2AE4               	goto	l4310
  2789                           
  2790                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  2791  02DB  083D               	movf	printf@ap,w
  2792  02DC  0084               	movwf	4
  2793  02DD  1383               	bcf	3,7	;select IRP bank0
  2794  02DE  0800               	movf	0,w
  2795  02DF  00C0               	movwf	printf@prec
  2796  02E0  0ABD               	incf	printf@ap,f
  2797  02E1  0ABD               	incf	printf@ap,f
  2798                           
  2799                           ;doprnt.c: 617: f++;
  2800  02E2  0AC1               	incf	printf@f,f
  2801                           
  2802                           ;doprnt.c: 618: } else
  2803  02E3  2B7C               	goto	l4364
  2804  02E4                     l4310:	
  2805                           
  2806                           ;doprnt.c: 620: {
  2807                           ;doprnt.c: 621: prec = 0;
  2808  02E4  01C0               	clrf	printf@prec
  2809  02E5                     l4316:	
  2810                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2811                           
  2812  02E5  0841               	movf	printf@f,w
  2813  02E6  0084               	movwf	4
  2814  02E7  120A  158A  2000  120A  118A  	fcall	stringdir
  2815  02EC  25D8  120A  118A   	fcall	_isdigit
  2816                           
  2817                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2818  02EF  0841               	movf	printf@f,w
  2819  02F0  1C03               	btfss	3,0
  2820  02F1  2B7D               	goto	L21
  2821  02F2  0084               	movwf	4
  2822  02F3  120A  158A  2000  120A  118A  	fcall	stringdir
  2823  02F8  00B1               	movwf	??_printf
  2824  02F9  300A               	movlw	10
  2825  02FA  00A3               	movwf	___bmul@multiplicand
  2826  02FB  0840               	movf	printf@prec,w
  2827  02FC  26E2  120A  118A   	fcall	___bmul
  2828  02FF  0731               	addwf	??_printf,w
  2829  0300  3ED0               	addlw	-48
  2830  0301  00C0               	movwf	printf@prec
  2831  0302  0AC1               	incf	printf@f,f
  2832  0303  2AE5               	goto	l4316
  2833  0304                     l4318:	
  2834                           
  2835                           ;doprnt.c: 626: prec = 0;
  2836  0304  01C0               	clrf	printf@prec
  2837  0305  2B7C               	goto	l4364
  2838  0306                     l714:	
  2839                           ;doprnt.c: 689: case 'o':
  2840                           
  2841                           
  2842                           ;doprnt.c: 691: flag |= 0x40;
  2843  0306  1745               	bsf	printf@flag,6
  2844                           
  2845                           ;doprnt.c: 693: break;
  2846  0307  2B9E               	goto	l4366
  2847  0308                     l718:	
  2848                           ;doprnt.c: 712: case 'X':
  2849                           
  2850                           
  2851                           ;doprnt.c: 714: flag |= 0x20;
  2852  0308  16C5               	bsf	printf@flag,5
  2853  0309                     l719:	
  2854                           ;doprnt.c: 718: case 'x':
  2855                           
  2856                           
  2857                           ;doprnt.c: 721: flag |= 0x80;
  2858  0309  17C5               	bsf	printf@flag,7
  2859                           
  2860                           ;doprnt.c: 723: break;
  2861  030A  2B9E               	goto	l4366
  2862  030B                     l4320:	
  2863                           
  2864                           ;doprnt.c: 753: if(prec && prec < len)
  2865  030B  0840               	movf	printf@prec,w
  2866  030C  1903               	btfsc	3,2
  2867  030D  2B20               	goto	l4326
  2868  030E  0840               	movf	printf@prec,w
  2869  030F  00B1               	movwf	??_printf
  2870  0310  01B2               	clrf	??_printf+1
  2871  0311  1BB1               	btfsc	??_printf,7
  2872  0312  03B2               	decf	??_printf+1,f
  2873  0313  083C               	movf	printf@len+1,w
  2874  0314  0232               	subwf	??_printf+1,w
  2875  0315  1D03               	skipz
  2876  0316  2B19               	goto	u5635
  2877  0317  083B               	movf	printf@len,w
  2878  0318  0231               	subwf	??_printf,w
  2879  0319                     u5635:	
  2880  0319  1803               	skipnc
  2881  031A  2B20               	goto	l4326
  2882                           
  2883                           ;doprnt.c: 754: len = prec;
  2884  031B  0840               	movf	printf@prec,w
  2885  031C  00BB               	movwf	printf@len
  2886  031D  01BC               	clrf	printf@len+1
  2887  031E  1BBB               	btfsc	printf@len,7
  2888  031F  03BC               	decf	printf@len+1,f
  2889  0320                     l4326:	
  2890                           
  2891                           ;doprnt.c: 757: if(width > len)
  2892  0320  0843               	movf	printf@width+1,w
  2893  0321  023C               	subwf	printf@len+1,w
  2894  0322  1D03               	skipz
  2895  0323  2B26               	goto	u5645
  2896  0324  0842               	movf	printf@width,w
  2897  0325  023B               	subwf	printf@len,w
  2898  0326                     u5645:	
  2899  0326  1803               	skipnc
  2900  0327  2B2F               	goto	l4330
  2901                           
  2902                           ;doprnt.c: 758: width -= len;
  2903  0328  083B               	movf	printf@len,w
  2904  0329  02C2               	subwf	printf@width,f
  2905  032A  083C               	movf	printf@len+1,w
  2906  032B  1C03               	skipc
  2907  032C  03C3               	decf	printf@width+1,f
  2908  032D  02C3               	subwf	printf@width+1,f
  2909  032E  2B31               	goto	l4332
  2910  032F                     l4330:	
  2911                           
  2912                           ;doprnt.c: 759: else
  2913                           ;doprnt.c: 760: width = 0;
  2914  032F  01C2               	clrf	printf@width
  2915  0330  01C3               	clrf	printf@width+1
  2916  0331                     l4332:	
  2917                           
  2918                           ;doprnt.c: 762: if(!(flag & 0x08))
  2919  0331  1DC5               	btfss	printf@flag,3
  2920  0332  2B38               	goto	l4338
  2921  0333  2B4E               	goto	l4344
  2922  0334                     l4336:	
  2923                           
  2924                           ;doprnt.c: 765: (putch(' ') );
  2925  0334  3020               	movlw	32
  2926  0335  2597  120A  118A   	fcall	_putch
  2927  0338                     l4338:	
  2928  0338  30FF               	movlw	-1
  2929  0339  1283               	bcf	3,5	;RP0=0, select bank0
  2930  033A  1303               	bcf	3,6	;RP1=0, select bank0
  2931  033B  07C2               	addwf	printf@width,f
  2932  033C  1C03               	skipc
  2933  033D  03C3               	decf	printf@width+1,f
  2934  033E  0F42               	incfsz	printf@width,w
  2935  033F  2B34               	goto	l4336
  2936  0340  0A43               	incf	printf@width+1,w
  2937  0341  1903               	btfsc	3,2
  2938  0342  2B4E               	goto	l4344
  2939  0343  2B34               	goto	l4336
  2940  0344                     l4340:	
  2941                           
  2942                           ;doprnt.c: 768: (putch(*cp++) );
  2943  0344  0838               	movf	printf@cp,w
  2944  0345  0084               	movwf	4
  2945  0346  1383               	bcf	3,7	;select IRP bank0
  2946  0347  0800               	movf	0,w
  2947  0348  2597  120A  118A   	fcall	_putch
  2948  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2949  034C  1303               	bcf	3,6	;RP1=0, select bank0
  2950  034D  0AB8               	incf	printf@cp,f
  2951  034E                     l4344:	
  2952  034E  3001               	movlw	1
  2953  034F  02BB               	subwf	printf@len,f
  2954  0350  3000               	movlw	0
  2955  0351  1C03               	skipc
  2956  0352  03BC               	decf	printf@len+1,f
  2957  0353  02BC               	subwf	printf@len+1,f
  2958  0354  0F3B               	incfsz	printf@len,w
  2959  0355  2B44               	goto	l4340
  2960  0356  0A3C               	incf	printf@len+1,w
  2961  0357  1D03               	btfss	3,2
  2962  0358  2B44               	goto	l4340
  2963                           
  2964                           ;doprnt.c: 770: if(flag & 0x08)
  2965  0359  19C5               	btfsc	printf@flag,3
  2966  035A  2B60               	goto	l4350
  2967  035B  2A3B               	goto	l4556
  2968  035C                     l4348:	
  2969                           
  2970                           ;doprnt.c: 772: (putch(' ') );
  2971  035C  3020               	movlw	32
  2972  035D  2597  120A  118A   	fcall	_putch
  2973  0360                     l4350:	
  2974  0360  30FF               	movlw	-1
  2975  0361  1283               	bcf	3,5	;RP0=0, select bank0
  2976  0362  1303               	bcf	3,6	;RP1=0, select bank0
  2977  0363  07C2               	addwf	printf@width,f
  2978  0364  1C03               	skipc
  2979  0365  03C3               	decf	printf@width+1,f
  2980  0366  0F42               	incfsz	printf@width,w
  2981  0367  2B5C               	goto	l4348
  2982  0368  0A43               	incf	printf@width+1,w
  2983  0369  1903               	btfsc	3,2
  2984  036A  2A3B               	goto	l4556
  2985  036B  2B5C               	goto	l4348
  2986  036C                     l4352:	
  2987                           
  2988                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2989  036C  083D               	movf	printf@ap,w
  2990  036D  0084               	movwf	4
  2991  036E  1383               	bcf	3,7	;select IRP bank0
  2992  036F  0800               	movf	0,w
  2993  0370  00C4               	movwf	printf@c
  2994  0371  0ABD               	incf	printf@ap,f
  2995  0372  0ABD               	incf	printf@ap,f
  2996  0373                     l4356:	
  2997                           
  2998                           ;doprnt.c: 805: cp = (char *)&c;
  2999  0373  3044               	movlw	(low (printf@c| 0))& (0+255)
  3000  0374  00B8               	movwf	printf@cp
  3001                           
  3002                           ;doprnt.c: 806: len = 1;
  3003  0375  01BB               	clrf	printf@len
  3004  0376  0ABB               	incf	printf@len,f
  3005  0377  01BC               	clrf	printf@len+1
  3006                           
  3007                           ;doprnt.c: 807: goto dostring;
  3008  0378  2B0B               	goto	l4320
  3009  0379                     l4360:	
  3010                           
  3011                           ;doprnt.c: 818: flag |= 0xC0;
  3012  0379  30C0               	movlw	192
  3013  037A  04C5               	iorwf	printf@flag,f
  3014                           
  3015                           ;doprnt.c: 819: break;
  3016  037B  2B9E               	goto	l4366
  3017  037C                     l4364:	
  3018  037C  0841               	movf	printf@f,w
  3019  037D                     L21:	
  3020  037D  0AC1               	incf	printf@f,f
  3021  037E  0084               	movwf	4
  3022  037F  120A  158A  2000  120A  118A  	fcall	stringdir
  3023  0384  00C4               	movwf	printf@c
  3024                           
  3025                           ; Switch size 1, requested type "space"
  3026                           ; Number of cases is 8, Range of values is 0 to 120
  3027                           ; switch strategies available:
  3028                           ; Name         Instructions Cycles
  3029                           ; simple_byte           25    13 (average)
  3030                           ; jumptable            260     6 (fixed)
  3031                           ;	Chosen strategy is simple_byte
  3032  0385  3A00               	xorlw	0	; case 0
  3033  0386  1903               	skipnz
  3034  0387  2D96               	goto	l816
  3035  0388  3A58               	xorlw	88	; case 88
  3036  0389  1903               	skipnz
  3037  038A  2B08               	goto	l718
  3038  038B  3A3B               	xorlw	59	; case 99
  3039  038C  1903               	skipnz
  3040  038D  2B6C               	goto	l4352
  3041  038E  3A07               	xorlw	7	; case 100
  3042  038F  1903               	skipnz
  3043  0390  2B9E               	goto	l4366
  3044  0391  3A0D               	xorlw	13	; case 105
  3045  0392  1903               	skipnz
  3046  0393  2B9E               	goto	l4366
  3047  0394  3A06               	xorlw	6	; case 111
  3048  0395  1903               	skipnz
  3049  0396  2B06               	goto	l714
  3050  0397  3A1A               	xorlw	26	; case 117
  3051  0398  1903               	skipnz
  3052  0399  2B79               	goto	l4360
  3053  039A  3A0D               	xorlw	13	; case 120
  3054  039B  1903               	skipnz
  3055  039C  2B09               	goto	l719
  3056  039D  2B73               	goto	l4356
  3057  039E                     l4366:	
  3058                           
  3059                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3060  039E  0845               	movf	printf@flag,w
  3061  039F  39C0               	andlw	192
  3062  03A0  1D03               	btfss	3,2
  3063  03A1  2BAF               	goto	l4378
  3064                           
  3065                           ;doprnt.c: 1253: {
  3066                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3067  03A2  27BF  120A  118A   	fcall	PL12	;call to abstracted procedure
  3068                           
  3069                           ;doprnt.c: 1261: if((int)val < 0) {
  3070  03A5  1FBF               	btfss	printf@val+1,7
  3071  03A6  2BB2               	goto	l4382
  3072                           
  3073                           ;doprnt.c: 1262: flag |= 0x03;
  3074  03A7  3003               	movlw	3
  3075  03A8  04C5               	iorwf	printf@flag,f
  3076                           
  3077                           ;doprnt.c: 1263: val = -val;
  3078  03A9  09BE               	comf	printf@val,f
  3079  03AA  09BF               	comf	printf@val+1,f
  3080  03AB  0ABE               	incf	printf@val,f
  3081  03AC  1903               	skipnz
  3082  03AD  0ABF               	incf	printf@val+1,f
  3083  03AE  2BB2               	goto	l4382
  3084  03AF                     l4378:	
  3085                           
  3086                           ;doprnt.c: 1268: else
  3087                           ;doprnt.c: 1273: {
  3088                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3089  03AF  27BF  120A  118A   	fcall	PL12	;call to abstracted procedure
  3090  03B2                     l4382:	
  3091                           
  3092                           ;doprnt.c: 1287: }
  3093                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3094  03B2  0840               	movf	printf@prec,w
  3095  03B3  1D03               	btfss	3,2
  3096  03B4  2C15               	goto	l4426
  3097  03B5  083E               	movf	printf@val,w
  3098  03B6  043F               	iorwf	printf@val+1,w
  3099  03B7  1D03               	btfss	3,2
  3100  03B8  2C15               	goto	l4426
  3101                           
  3102                           ;doprnt.c: 1291: prec++;
  3103  03B9  0AC0               	incf	printf@prec,f
  3104  03BA  2C15               	goto	l4426
  3105  03BB                     l744:	
  3106                           
  3107                           ;doprnt.c: 1302: case 0xC0:
  3108                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3109  03BB  01C4               	clrf	printf@c
  3110  03BC                     L7:	
  3111  03BC  3005               	movlw	5
  3112  03BD  0AC4               	incf	printf@c,f
  3113  03BE  0644               	xorwf	printf@c,w
  3114  03BF  1903               	btfsc	3,2
  3115  03C0  2C23               	goto	l4428
  3116                           
  3117                           ;doprnt.c: 1306: if(val < dpowers[c])
  3118  03C1  1003               	clrc
  3119  03C2  0D44               	rlf	printf@c,w
  3120  03C3  3E0D               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3121  03C4  0084               	movwf	4
  3122  03C5  120A  158A  2000  120A  118A  	fcall	stringdir
  3123  03CA  00B1               	movwf	??_printf
  3124  03CB  120A  158A  2000  120A  118A  	fcall	stringdir
  3125  03D0  00B2               	movwf	??_printf+1
  3126  03D1  023F               	subwf	printf@val+1,w
  3127  03D2  1D03               	skipz
  3128  03D3  2BD6               	goto	u5755
  3129  03D4  0831               	movf	??_printf,w
  3130  03D5  023E               	subwf	printf@val,w
  3131  03D6                     u5755:	
  3132  03D6  1C03               	btfss	3,0
  3133  03D7  2C23               	goto	l4428
  3134  03D8  2BBC               	goto	L7
  3135  03D9                     l749:	
  3136                           ;doprnt.c: 1314: case 0x80:
  3137                           
  3138                           
  3139                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3140  03D9  01C4               	clrf	printf@c
  3141  03DA                     L8:	
  3142  03DA  3004               	movlw	4
  3143  03DB  0AC4               	incf	printf@c,f
  3144  03DC  0644               	xorwf	printf@c,w
  3145  03DD  1903               	btfsc	3,2
  3146  03DE  2C23               	goto	l4428
  3147                           
  3148                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3149  03DF  1003               	clrc
  3150  03E0  0D44               	rlf	printf@c,w
  3151  03E1  3E17               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  3152  03E2  0084               	movwf	4
  3153  03E3  120A  158A  2000  120A  118A  	fcall	stringdir
  3154  03E8  00B1               	movwf	??_printf
  3155  03E9  120A  158A  2000  120A  118A  	fcall	stringdir
  3156  03EE  00B2               	movwf	??_printf+1
  3157  03EF  023F               	subwf	printf@val+1,w
  3158  03F0  1D03               	skipz
  3159  03F1  2BF4               	goto	u5775
  3160  03F2  0831               	movf	??_printf,w
  3161  03F3  023E               	subwf	printf@val,w
  3162  03F4                     u5775:	
  3163  03F4  1C03               	btfss	3,0
  3164  03F5  2C23               	goto	l4428
  3165  03F6  2BDA               	goto	L8
  3166  03F7                     l753:	
  3167                           ;doprnt.c: 1326: case 0x40:
  3168                           
  3169                           
  3170                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  3171  03F7  01C4               	clrf	printf@c
  3172  03F8                     L9:	
  3173  03F8  3006               	movlw	6
  3174  03F9  0AC4               	incf	printf@c,f
  3175  03FA  0644               	xorwf	printf@c,w
  3176  03FB  1903               	btfsc	3,2
  3177  03FC  2C23               	goto	l4428
  3178                           
  3179                           ;doprnt.c: 1329: if(val < octpowers[c])
  3180  03FD  1003               	clrc
  3181  03FE  0D44               	rlf	printf@c,w
  3182  03FF  3E01               	addlw	low ((_octpowers-__stringbase)| (0+32768))
  3183  0400  0084               	movwf	4
  3184  0401  120A  158A  2000  120A  118A  	fcall	stringdir
  3185  0406  00B1               	movwf	??_printf
  3186  0407  120A  158A  2000  120A  118A  	fcall	stringdir
  3187  040C  00B2               	movwf	??_printf+1
  3188  040D  023F               	subwf	printf@val+1,w
  3189  040E  1D03               	skipz
  3190  040F  2C12               	goto	u5795
  3191  0410  0831               	movf	??_printf,w
  3192  0411  023E               	subwf	printf@val,w
  3193  0412                     u5795:	
  3194  0412  1C03               	btfss	3,0
  3195  0413  2C23               	goto	l4428
  3196  0414  2BF8               	goto	L9
  3197  0415                     l4426:	
  3198  0415  0845               	movf	printf@flag,w
  3199  0416  39C0               	andlw	192
  3200                           
  3201                           ; Switch size 1, requested type "space"
  3202                           ; Number of cases is 4, Range of values is 0 to 192
  3203                           ; switch strategies available:
  3204                           ; Name         Instructions Cycles
  3205                           ; simple_byte           13     7 (average)
  3206                           ; jumptable            260     6 (fixed)
  3207                           ;	Chosen strategy is simple_byte
  3208  0417  1903               	skipnz
  3209  0418  2BBB               	goto	l744
  3210  0419  3A40               	xorlw	64	; case 64
  3211  041A  1903               	skipnz
  3212  041B  2BF7               	goto	l753
  3213  041C  3AC0               	xorlw	192	; case 128
  3214  041D  1903               	skipnz
  3215  041E  2BD9               	goto	l749
  3216  041F  3A40               	xorlw	64	; case 192
  3217  0420  1903               	skipnz
  3218  0421  2BBB               	goto	l744
  3219  0422  2C23               	goto	l4428
  3220  0423                     l4428:	
  3221                           
  3222                           ;doprnt.c: 1339: if(c < prec)
  3223  0423  0844               	movf	printf@c,w
  3224  0424  3A80               	xorlw	128
  3225  0425  00B1               	movwf	??_printf
  3226  0426  0840               	movf	printf@prec,w
  3227  0427  3A80               	xorlw	128
  3228  0428  02B1               	subwf	??_printf,f
  3229                           
  3230                           ;doprnt.c: 1340: c = prec;
  3231  0429  0840               	movf	printf@prec,w
  3232  042A  1803               	skipnc
  3233  042B  2C2E               	goto	L22
  3234  042C  00C4               	movwf	printf@c
  3235  042D  2C37               	goto	l4436
  3236  042E                     L22:	
  3237                           ;doprnt.c: 1341: else if(prec < c)
  3238                           
  3239  042E  3A80               	xorlw	128
  3240  042F  00B1               	movwf	??_printf
  3241  0430  0844               	movf	printf@c,w
  3242  0431  3A80               	xorlw	128
  3243  0432  02B1               	subwf	??_printf,f
  3244  0433  1803               	skipnc
  3245  0434  2C37               	goto	l4436
  3246                           
  3247                           ;doprnt.c: 1342: prec = c;
  3248  0435  0844               	movf	printf@c,w
  3249  0436  00C0               	movwf	printf@prec
  3250  0437                     l4436:	
  3251                           
  3252                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3253  0437  0842               	movf	printf@width,w
  3254  0438  0443               	iorwf	printf@width+1,w
  3255  0439  1903               	btfsc	3,2
  3256  043A  2C43               	goto	l4442
  3257  043B  0845               	movf	printf@flag,w
  3258  043C  3903               	andlw	3
  3259  043D  1903               	btfsc	3,2
  3260  043E  2C43               	goto	l4442
  3261                           
  3262                           ;doprnt.c: 1346: width--;
  3263  043F  30FF               	movlw	-1
  3264  0440  07C2               	addwf	printf@width,f
  3265  0441  1C03               	skipc
  3266  0442  03C3               	decf	printf@width+1,f
  3267  0443                     l4442:	
  3268                           
  3269                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3270  0443  1F46               	btfss	printf@flag+1,6
  3271  0444  2C56               	goto	l4450
  3272                           
  3273                           ;doprnt.c: 1349: if(width > prec)
  3274  0445  0840               	movf	printf@prec,w
  3275  0446  27A7  120A  118A   	fcall	PL6	;call to abstracted procedure
  3276  0449  1803               	skipnc
  3277  044A  2C52               	goto	l4448
  3278                           
  3279                           ;doprnt.c: 1350: width -= prec;
  3280  044B  1283               	bcf	3,5	;RP0=0, select bank0
  3281  044C  1303               	bcf	3,6	;RP1=0, select bank0
  3282  044D  0840               	movf	printf@prec,w
  3283  044E  27CA  120A  118A   	fcall	PL18	;call to abstracted procedure
  3284  0451  2C56               	goto	l4450
  3285  0452                     l4448:	
  3286                           
  3287                           ;doprnt.c: 1351: else
  3288                           ;doprnt.c: 1352: width = 0;
  3289  0452  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0453  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0454  01C2               	clrf	printf@width
  3292  0455  01C3               	clrf	printf@width+1
  3293  0456                     l4450:	
  3294                           
  3295                           ;doprnt.c: 1353: }
  3296                           ;doprnt.c: 1357: if((flag & (
  3297                           ;doprnt.c: 1359: 0x04|
  3298                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  3299  0456  30C4               	movlw	196
  3300  0457  27D4  120A  118A   	fcall	PL22	;call to abstracted procedure
  3301  045A  1903               	skipnz
  3302  045B  0632               	xorwf	??_printf+1,w
  3303  045C  1D03               	btfss	3,2
  3304  045D  2C64               	goto	l4456
  3305                           
  3306                           ;doprnt.c: 1362: if(width)
  3307  045E  0842               	movf	printf@width,w
  3308  045F  0443               	iorwf	printf@width+1,w
  3309  0460  1903               	btfsc	3,2
  3310  0461  2C81               	goto	l4464
  3311                           
  3312                           ;doprnt.c: 1363: width--;
  3313  0462  30FF               	movlw	-1
  3314  0463  2C79               	goto	L10
  3315  0464                     l4456:	
  3316                           
  3317                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3318  0464  27B6  120A  118A   	fcall	PL8	;call to abstracted procedure
  3319  0467  1903               	skipnz
  3320  0468  0632               	xorwf	??_printf+1,w
  3321  0469  1D03               	btfss	3,2
  3322  046A  2C81               	goto	l4464
  3323                           
  3324                           ;doprnt.c: 1372: if(width > 2)
  3325  046B  0843               	movf	printf@width+1,w
  3326  046C  3A80               	xorlw	128
  3327  046D  00FF               	movwf	127
  3328  046E  3080               	movlw	128
  3329  046F  027F               	subwf	127,w
  3330  0470  1D03               	skipz
  3331  0471  2C74               	goto	u5895
  3332  0472  3003               	movlw	3
  3333  0473  0242               	subwf	printf@width,w
  3334  0474                     u5895:	
  3335  0474  1C03               	skipc
  3336  0475  2C7D               	goto	l4462
  3337                           
  3338                           ;doprnt.c: 1373: width -= 2;
  3339  0476  30FE               	movlw	-2
  3340  0477  1283               	bcf	3,5	;RP0=0, select bank0
  3341  0478  1303               	bcf	3,6	;RP1=0, select bank0
  3342  0479                     L10:	
  3343  0479  07C2               	addwf	printf@width,f
  3344  047A  1C03               	skipc
  3345  047B  03C3               	decf	printf@width+1,f
  3346  047C  2C81               	goto	l4464
  3347  047D                     l4462:	
  3348                           
  3349                           ;doprnt.c: 1374: else
  3350                           ;doprnt.c: 1375: width = 0;
  3351  047D  1283               	bcf	3,5	;RP0=0, select bank0
  3352  047E  1303               	bcf	3,6	;RP1=0, select bank0
  3353  047F  01C2               	clrf	printf@width
  3354  0480  01C3               	clrf	printf@width+1
  3355  0481                     l4464:	
  3356                           
  3357                           ;doprnt.c: 1376: }
  3358                           ;doprnt.c: 1381: if(width > c)
  3359  0481  0844               	movf	printf@c,w
  3360  0482  27A7  120A  118A   	fcall	PL6	;call to abstracted procedure
  3361  0485  1803               	skipnc
  3362  0486  2C8E               	goto	l4468
  3363                           
  3364                           ;doprnt.c: 1382: width -= c;
  3365  0487  1283               	bcf	3,5	;RP0=0, select bank0
  3366  0488  1303               	bcf	3,6	;RP1=0, select bank0
  3367  0489  0844               	movf	printf@c,w
  3368  048A  27CA  120A  118A   	fcall	PL18	;call to abstracted procedure
  3369  048D  2C92               	goto	l4470
  3370  048E                     l4468:	
  3371                           
  3372                           ;doprnt.c: 1383: else
  3373                           ;doprnt.c: 1384: width = 0;
  3374  048E  1283               	bcf	3,5	;RP0=0, select bank0
  3375  048F  1303               	bcf	3,6	;RP1=0, select bank0
  3376  0490  01C2               	clrf	printf@width
  3377  0491  01C3               	clrf	printf@width+1
  3378  0492                     l4470:	
  3379                           
  3380                           ;doprnt.c: 1387: if(flag & 0x04) {
  3381  0492  1D45               	btfss	printf@flag,2
  3382  0493  2CC7               	goto	l4496
  3383                           
  3384                           ;doprnt.c: 1392: if(flag & 0x03)
  3385  0494  0845               	movf	printf@flag,w
  3386  0495  3903               	andlw	3
  3387  0496  1903               	btfsc	3,2
  3388  0497  2C9A               	goto	l773
  3389                           
  3390                           ;doprnt.c: 1393: (putch('-') );
  3391  0498  302D               	movlw	45
  3392  0499  2CB3               	goto	L11
  3393  049A                     l773:	
  3394                           
  3395                           ;doprnt.c: 1396: else
  3396                           ;doprnt.c: 1399: if(flag & 0x01)
  3397  049A  1C45               	btfss	printf@flag,0
  3398  049B  2C9E               	goto	l4478
  3399                           
  3400                           ;doprnt.c: 1400: (putch(' ') );
  3401  049C  3020               	movlw	32
  3402  049D  2CB3               	goto	L11
  3403  049E                     l4478:	
  3404                           
  3405                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3406  049E  27B6  120A  118A   	fcall	PL8	;call to abstracted procedure
  3407  04A1  1903               	skipnz
  3408  04A2  0632               	xorwf	??_printf+1,w
  3409  04A3  1D03               	btfss	3,2
  3410  04A4  2CB6               	goto	l4490
  3411                           
  3412                           ;doprnt.c: 1404: (putch('0') );
  3413  04A5  3030               	movlw	48
  3414  04A6  2597  120A  118A   	fcall	_putch
  3415                           
  3416                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  3417  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  3418  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  3419  04AB  1AC5               	btfsc	printf@flag,5
  3420  04AC  2CAF               	goto	l4486
  3421  04AD  3078               	movlw	120
  3422  04AE  2CB0               	goto	L12
  3423  04AF                     l4486:	
  3424  04AF  3058               	movlw	88
  3425  04B0                     L12:	
  3426  04B0  00B4               	movwf	_printf$348
  3427  04B1  01B5               	clrf	_printf$348+1
  3428  04B2  0834               	movf	_printf$348,w
  3429  04B3                     L11:	
  3430  04B3  2597  120A  118A   	fcall	_putch
  3431  04B6                     l4490:	
  3432                           
  3433                           ;doprnt.c: 1412: }
  3434                           ;doprnt.c: 1415: if(width)
  3435  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  3436  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  3437  04B8                     L19:	
  3438  04B8  0842               	movf	printf@width,w
  3439  04B9  0443               	iorwf	printf@width+1,w
  3440  04BA  1903               	btfsc	3,2
  3441  04BB  2D7A               	goto	l4548
  3442                           
  3443                           ;doprnt.c: 1417: (putch('0') );
  3444  04BC  3030               	movlw	48
  3445  04BD  2597  120A  118A   	fcall	_putch
  3446                           
  3447                           ;doprnt.c: 1418: while(--width);
  3448  04C0  30FF               	movlw	-1
  3449  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  3450  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  3451  04C3  07C2               	addwf	printf@width,f
  3452  04C4  1C03               	skipc
  3453  04C5  03C3               	decf	printf@width+1,f
  3454  04C6  2CB8               	goto	L19
  3455  04C7                     l4496:	
  3456                           
  3457                           ;doprnt.c: 1422: {
  3458                           ;doprnt.c: 1424: if(width
  3459                           ;doprnt.c: 1426: && !(flag & 0x08)
  3460                           ;doprnt.c: 1428: )
  3461  04C7  0842               	movf	printf@width,w
  3462  04C8  0443               	iorwf	printf@width+1,w
  3463  04C9  1D03               	btfss	3,2
  3464  04CA  19C5               	btfsc	printf@flag,3
  3465  04CB  2CD5               	goto	l4504
  3466  04CC                     l4500:	
  3467                           
  3468                           ;doprnt.c: 1430: (putch(' ') );
  3469  04CC  3020               	movlw	32
  3470  04CD  2597  120A  118A   	fcall	_putch
  3471                           
  3472                           ;doprnt.c: 1431: while(--width);
  3473  04D0  27DC  120A  118A   	fcall	PL24	;call to abstracted procedure
  3474  04D3  1D03               	btfss	3,2
  3475  04D4  2CCC               	goto	l4500
  3476  04D5                     l4504:	
  3477                           
  3478                           ;doprnt.c: 1438: if(flag & 0x03)
  3479  04D5  0845               	movf	printf@flag,w
  3480  04D6  3903               	andlw	3
  3481  04D7  1903               	btfsc	3,2
  3482  04D8  2CDB               	goto	l789
  3483                           
  3484                           ;doprnt.c: 1439: (putch('-') );
  3485  04D9  302D               	movlw	45
  3486  04DA  2CDE               	goto	L13
  3487  04DB                     l789:	
  3488                           
  3489                           ;doprnt.c: 1443: else if(flag & 0x01)
  3490  04DB  1C45               	btfss	printf@flag,0
  3491  04DC  2CE1               	goto	l4510
  3492                           
  3493                           ;doprnt.c: 1444: (putch(' ') );
  3494  04DD  3020               	movlw	32
  3495  04DE                     L13:	
  3496  04DE  2597  120A  118A   	fcall	_putch
  3497  04E1                     l4510:	
  3498                           
  3499                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  3500  04E1  30C0               	movlw	192
  3501  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  3502  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  3503  04E4  27D4  120A  118A   	fcall	PL22	;call to abstracted procedure
  3504  04E7  1903               	skipnz
  3505  04E8  0632               	xorwf	??_printf+1,w
  3506  04E9  1D03               	btfss	3,2
  3507  04EA  2CED               	goto	l4514
  3508                           
  3509                           ;doprnt.c: 1449: (putch('0') );
  3510  04EB  3030               	movlw	48
  3511  04EC  2D77               	goto	L14
  3512  04ED                     l4514:	
  3513                           
  3514                           ;doprnt.c: 1450: else
  3515                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3516  04ED  27B6  120A  118A   	fcall	PL8	;call to abstracted procedure
  3517  04F0  1903               	skipnz
  3518  04F1  0632               	xorwf	??_printf+1,w
  3519  04F2  1D03               	btfss	3,2
  3520  04F3  2D7A               	goto	l4548
  3521                           
  3522                           ;doprnt.c: 1458: (putch('0') );
  3523  04F4  3030               	movlw	48
  3524  04F5  2597  120A  118A   	fcall	_putch
  3525                           
  3526                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  3527  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  3528  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  3529  04FA  1AC5               	btfsc	printf@flag,5
  3530  04FB  2CFE               	goto	l4522
  3531  04FC  3078               	movlw	120
  3532  04FD  2CFF               	goto	L15
  3533  04FE                     l4522:	
  3534  04FE  3058               	movlw	88
  3535  04FF                     L15:	
  3536  04FF  00B6               	movwf	_printf$349
  3537  0500  01B7               	clrf	_printf$349+1
  3538  0501  0836               	movf	_printf$349,w
  3539  0502  2D77               	goto	L14
  3540  0503                     l4526:	
  3541                           ;doprnt.c: 1466: }
  3542                           ;doprnt.c: 1469: }
  3543                           ;doprnt.c: 1474: while(prec--) {
  3544                           
  3545                           
  3546                           ;doprnt.c: 1486: case 0xC0:
  3547                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3548  0503  300A               	movlw	10
  3549  0504  00AA               	movwf	___lwmod@divisor
  3550  0505  01AB               	clrf	___lwmod@divisor+1
  3551  0506  1003               	clrc
  3552  0507  0D40               	rlf	printf@prec,w
  3553  0508  3E0D               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3554  0509  0084               	movwf	4
  3555  050A  120A  158A  2000  120A  118A  	fcall	stringdir
  3556  050F  00A3               	movwf	___lwdiv@divisor
  3557  0510  120A  158A  2000  120A  118A  	fcall	stringdir
  3558  0515  27E5  120A  118A   	fcall	PL40	;call to abstracted procedure
  3559  0518  25AE  120A  118A   	fcall	___lwdiv
  3560  051B  0824               	movf	?___lwdiv+1,w
  3561  051C  00AD               	movwf	___lwmod@dividend+1
  3562  051D  0823               	movf	?___lwdiv,w
  3563  051E  00AC               	movwf	___lwmod@dividend
  3564  051F  26A5  120A  118A   	fcall	___lwmod
  3565  0522  082A               	movf	?___lwmod,w
  3566  0523  2D65               	goto	L20
  3567  0524                     l4528:	
  3568                           ;doprnt.c: 1491: break;
  3569                           
  3570                           
  3571                           ;doprnt.c: 1499: {
  3572                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3573  0524  083F               	movf	printf@val+1,w
  3574  0525  00A6               	movwf	___lwdiv@dividend+1
  3575  0526  083E               	movf	printf@val,w
  3576  0527  00A5               	movwf	___lwdiv@dividend
  3577  0528  1003               	clrc
  3578  0529  0D40               	rlf	printf@prec,w
  3579  052A  3E17               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  3580  052B  0084               	movwf	4
  3581  052C  120A  158A  2000  120A  118A  	fcall	stringdir
  3582  0531  00A3               	movwf	___lwdiv@divisor
  3583  0532  120A  158A  2000  120A  118A  	fcall	stringdir
  3584  0537  00A4               	movwf	___lwdiv@divisor+1
  3585  0538  25AE  120A  118A   	fcall	___lwdiv
  3586  053B  0823               	movf	?___lwdiv,w
  3587  053C  00B9               	movwf	printf@idx
  3588  053D  300F               	movlw	15
  3589  053E  05B9               	andwf	printf@idx,f
  3590                           
  3591                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  3592  053F  1AC5               	btfsc	printf@flag,5
  3593  0540  2D43               	goto	l4536
  3594  0541  308C               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  3595  0542  2D44               	goto	L17
  3596  0543                     l4536:	
  3597  0543  307B               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  3598  0544                     L17:	
  3599  0544  00BA               	movwf	_printf$355
  3600  0545  0839               	movf	printf@idx,w
  3601  0546  073A               	addwf	_printf$355,w
  3602  0547  0084               	movwf	4
  3603  0548  120A  158A  2000  120A  118A  	fcall	stringdir
  3604  054D  2D66               	goto	L18
  3605  054E                     l4540:	
  3606                           ;doprnt.c: 1508: }
  3607                           ;doprnt.c: 1510: break;
  3608                           
  3609                           
  3610                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  3611  054E  1003               	clrc
  3612  054F  0D40               	rlf	printf@prec,w
  3613  0550  3E01               	addlw	low ((_octpowers-__stringbase)| (0+32768))
  3614  0551  0084               	movwf	4
  3615  0552  120A  158A  2000  120A  118A  	fcall	stringdir
  3616  0557  00A3               	movwf	___lwdiv@divisor
  3617  0558  120A  158A  2000  120A  118A  	fcall	stringdir
  3618  055D  27E5  120A  118A   	fcall	PL40	;call to abstracted procedure
  3619  0560  25AE  120A  118A   	fcall	___lwdiv
  3620  0563  0823               	movf	?___lwdiv,w
  3621  0564  3907               	andlw	7
  3622  0565                     L20:	
  3623  0565  3E30               	addlw	48
  3624  0566                     L18:	
  3625  0566  00C4               	movwf	printf@c
  3626                           
  3627                           ;doprnt.c: 1520: break;
  3628  0567  2D76               	goto	l4546
  3629  0568                     l4544:	
  3630  0568  0845               	movf	printf@flag,w
  3631  0569  39C0               	andlw	192
  3632                           
  3633                           ; Switch size 1, requested type "space"
  3634                           ; Number of cases is 4, Range of values is 0 to 192
  3635                           ; switch strategies available:
  3636                           ; Name         Instructions Cycles
  3637                           ; simple_byte           13     7 (average)
  3638                           ; jumptable            260     6 (fixed)
  3639                           ;	Chosen strategy is simple_byte
  3640  056A  1903               	skipnz
  3641  056B  2D03               	goto	l4526
  3642  056C  3A40               	xorlw	64	; case 64
  3643  056D  1903               	skipnz
  3644  056E  2D4E               	goto	l4540
  3645  056F  3AC0               	xorlw	192	; case 128
  3646  0570  1903               	skipnz
  3647  0571  2D24               	goto	l4528
  3648  0572  3A40               	xorlw	64	; case 192
  3649  0573  1903               	skipnz
  3650  0574  2D03               	goto	l4526
  3651  0575  2D76               	goto	l4546
  3652  0576                     l4546:	
  3653                           
  3654                           ;doprnt.c: 1524: (putch(c) );
  3655  0576  0844               	movf	printf@c,w
  3656  0577                     L14:	
  3657  0577  2597  120A  118A   	fcall	_putch
  3658  057A                     l4548:	
  3659  057A  1283               	bcf	3,5	;RP0=0, select bank0
  3660  057B  1303               	bcf	3,6	;RP1=0, select bank0
  3661  057C  03C0               	decf	printf@prec,f
  3662  057D  0F40               	incfsz	printf@prec,w
  3663  057E  2D68               	goto	l4544
  3664                           
  3665                           ;doprnt.c: 1525: }
  3666                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  3667  057F  1DC5               	btfss	printf@flag,3
  3668  0580  2A3B               	goto	l4556
  3669  0581  0843               	movf	printf@width+1,w
  3670  0582  3A80               	xorlw	128
  3671  0583  00FF               	movwf	127
  3672  0584  3080               	movlw	128
  3673  0585  027F               	subwf	127,w
  3674  0586  1D03               	skipz
  3675  0587  2D8A               	goto	u6095
  3676  0588  3001               	movlw	1
  3677  0589  0242               	subwf	printf@width,w
  3678  058A                     u6095:	
  3679  058A  1C03               	skipc
  3680  058B  2A3B               	goto	l4556
  3681  058C                     l4552:	
  3682                           
  3683                           ;doprnt.c: 1530: (putch(' ') );
  3684  058C  3020               	movlw	32
  3685  058D  2597  120A  118A   	fcall	_putch
  3686                           
  3687                           ;doprnt.c: 1531: while(--width);
  3688  0590  27DC  120A  118A   	fcall	PL24	;call to abstracted procedure
  3689  0593  1903               	btfsc	3,2
  3690  0594  2A3B               	goto	l4556
  3691  0595  2D8C               	goto	l4552
  3692  0596                     l816:	
  3693  0596  0008               	return
  3694  0597                     __end_of_printf:	
  3695  0597                     __ptext2:	
  3696 ;; *************** function _putch *****************
  3697 ;; Defined at:
  3698 ;;		line 166 in file "lcdv2.h"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;  print_value     1    wreg     unsigned char 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  print_value     1    5[BANK0 ] unsigned char 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;		None               void
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0, pclath, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3712 ;;      Params:         0       0       0       0       0
  3713 ;;      Locals:         0       1       0       0       0
  3714 ;;      Temps:          0       1       0       0       0
  3715 ;;      Totals:         0       2       0       0       0
  3716 ;;Total ram usage:        2 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    6
  3719 ;; This function calls:
  3720 ;;		_lcd_add
  3721 ;; This function is called by:
  3722 ;;		_printf
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           
  3727                           ;psect for function _putch
  3728  0597                     _putch:	
  3729                           
  3730                           ;incstack = 0
  3731                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  3732                           ;putch@print_value stored from wreg
  3733  0597  1283               	bcf	3,5	;RP0=0, select bank0
  3734  0598  1303               	bcf	3,6	;RP1=0, select bank0
  3735  0599  00A5               	movwf	putch@print_value
  3736                           
  3737                           ;lcdv2.h: 167: RC2 = 1;
  3738  059A  1507               	bsf	7,2	;volatile
  3739                           
  3740                           ;lcdv2.h: 168: _delay(20);
  3741  059B  3006               	movlw	6
  3742  059C  00A4               	movwf	??_putch
  3743  059D                     u6467:	
  3744  059D  0BA4               	decfsz	??_putch,f
  3745  059E  2D9D               	goto	u6467
  3746  059F  0000               	nop
  3747                           
  3748                           ;lcdv2.h: 169: lcd_data = print_value;
  3749  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3750  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  3751  05A2  0825               	movf	putch@print_value,w
  3752  05A3  00DF               	movwf	_lcd_data
  3753                           
  3754                           ;lcdv2.h: 170: lcd_add();
  3755  05A4  25E6  120A  118A   	fcall	_lcd_add
  3756                           
  3757                           ;lcdv2.h: 171: _delay(100);
  3758  05A7  3021               	movlw	33
  3759  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  3760  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  3761  05AA  00A4               	movwf	??_putch
  3762  05AB                     u6477:	
  3763  05AB  0BA4               	decfsz	??_putch,f
  3764  05AC  2DAB               	goto	u6477
  3765  05AD  0008               	return
  3766  05AE                     __end_of_putch:	
  3767  05AE                     __ptext27:	
  3768 ;; *************** function ___lwdiv *****************
  3769 ;; Defined at:
  3770 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  divisor         2    3[BANK0 ] unsigned int 
  3773 ;;  dividend        2    5[BANK0 ] unsigned int 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  quotient        2    7[BANK0 ] unsigned int 
  3776 ;;  counter         1    9[BANK0 ] unsigned char 
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  2    3[BANK0 ] unsigned int 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0
  3781 ;; Tracked objects:
  3782 ;;		On entry : 300/0
  3783 ;;		On exit  : 300/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3786 ;;      Params:         0       4       0       0       0
  3787 ;;      Locals:         0       3       0       0       0
  3788 ;;      Temps:          0       0       0       0       0
  3789 ;;      Totals:         0       7       0       0       0
  3790 ;;Total ram usage:        7 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    5
  3793 ;; This function calls:
  3794 ;;		Nothing
  3795 ;; This function is called by:
  3796 ;;		_LCDTimeUpdate
  3797 ;;		_printf
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           
  3802                           ;psect for function ___lwdiv
  3803  05AE                     ___lwdiv:	
  3804                           
  3805                           ;incstack = 0
  3806                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3807  05AE  01A7               	clrf	___lwdiv@quotient
  3808  05AF  01A8               	clrf	___lwdiv@quotient+1
  3809  05B0  0823               	movf	___lwdiv@divisor,w
  3810  05B1  0424               	iorwf	___lwdiv@divisor+1,w
  3811  05B2  1903               	btfsc	3,2
  3812  05B3  2DD3               	goto	l3976
  3813  05B4  01A9               	clrf	___lwdiv@counter
  3814  05B5                     L29:	
  3815  05B5  0AA9               	incf	___lwdiv@counter,f
  3816  05B6  1BA4               	btfsc	___lwdiv@divisor+1,7
  3817  05B7  2DBC               	goto	l3964
  3818  05B8  1003               	clrc
  3819  05B9  0DA3               	rlf	___lwdiv@divisor,f
  3820  05BA  0DA4               	rlf	___lwdiv@divisor+1,f
  3821  05BB  2DB5               	goto	L29
  3822  05BC                     l3964:	
  3823  05BC  1003               	clrc
  3824  05BD  0DA7               	rlf	___lwdiv@quotient,f
  3825  05BE  0DA8               	rlf	___lwdiv@quotient+1,f
  3826  05BF  0824               	movf	___lwdiv@divisor+1,w
  3827  05C0  0226               	subwf	___lwdiv@dividend+1,w
  3828  05C1  1D03               	skipz
  3829  05C2  2DC5               	goto	u5165
  3830  05C3  0823               	movf	___lwdiv@divisor,w
  3831  05C4  0225               	subwf	___lwdiv@dividend,w
  3832  05C5                     u5165:	
  3833  05C5  1C03               	skipc
  3834  05C6  2DCF               	goto	L30
  3835  05C7  0823               	movf	___lwdiv@divisor,w
  3836  05C8  02A5               	subwf	___lwdiv@dividend,f
  3837  05C9  0824               	movf	___lwdiv@divisor+1,w
  3838  05CA  1C03               	skipc
  3839  05CB  03A6               	decf	___lwdiv@dividend+1,f
  3840  05CC  02A6               	subwf	___lwdiv@dividend+1,f
  3841  05CD  1427               	bsf	___lwdiv@quotient,0
  3842  05CE  1003               	clrc
  3843  05CF                     L30:	
  3844  05CF  0CA4               	rrf	___lwdiv@divisor+1,f
  3845  05D0  0CA3               	rrf	___lwdiv@divisor,f
  3846  05D1  0BA9               	decfsz	___lwdiv@counter,f
  3847  05D2  2DBC               	goto	l3964
  3848  05D3                     l3976:	
  3849  05D3  0828               	movf	___lwdiv@quotient+1,w
  3850  05D4  00A4               	movwf	?___lwdiv+1
  3851  05D5  0827               	movf	___lwdiv@quotient,w
  3852  05D6  00A3               	movwf	?___lwdiv
  3853  05D7  0008               	return
  3854  05D8                     __end_of___lwdiv:	
  3855  05D8                     __ptext3:	
  3856 ;; *************** function _isdigit *****************
  3857 ;; Defined at:
  3858 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  c               1    wreg     unsigned char 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  c               1    4[BANK0 ] unsigned char 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;		None               void
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0
  3867 ;; Tracked objects:
  3868 ;;		On entry : 300/0
  3869 ;;		On exit  : 300/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3872 ;;      Params:         0       0       0       0       0
  3873 ;;      Locals:         0       2       0       0       0
  3874 ;;      Temps:          0       0       0       0       0
  3875 ;;      Totals:         0       2       0       0       0
  3876 ;;Total ram usage:        2 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    5
  3879 ;; This function calls:
  3880 ;;		Nothing
  3881 ;; This function is called by:
  3882 ;;		_printf
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           
  3887                           ;psect for function _isdigit
  3888  05D8                     _isdigit:	
  3889                           
  3890                           ;incstack = 0
  3891                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3892                           ;isdigit@c stored from wreg
  3893  05D8  00A4               	movwf	isdigit@c
  3894  05D9  303A               	movlw	58
  3895  05DA  01A3               	clrf	_isdigit$559
  3896  05DB  0224               	subwf	isdigit@c,w
  3897  05DC  1803               	skipnc
  3898  05DD  2DE4               	goto	l3828
  3899  05DE  3030               	movlw	48
  3900  05DF  0224               	subwf	isdigit@c,w
  3901  05E0  1C03               	skipc
  3902  05E1  2DE4               	goto	l3828
  3903  05E2  01A3               	clrf	_isdigit$559
  3904  05E3  0AA3               	incf	_isdigit$559,f
  3905  05E4                     l3828:	
  3906  05E4  0C23               	rrf	_isdigit$559,w
  3907  05E5  0008               	return
  3908  05E6                     __end_of_isdigit:	
  3909  05E6                     __ptext30:	
  3910 ;; *************** function _lcd_add *****************
  3911 ;; Defined at:
  3912 ;;		line 224 in file "lcdv2.h"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;		None               void
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, status,0
  3921 ;; Tracked objects:
  3922 ;;		On entry : 300/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3926 ;;      Params:         0       0       0       0       0
  3927 ;;      Locals:         0       0       0       0       0
  3928 ;;      Temps:          0       1       0       0       0
  3929 ;;      Totals:         0       1       0       0       0
  3930 ;;Total ram usage:        1 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    5
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_putch
  3937 ;;		_LCD_print_char
  3938 ;;		_clr_display
  3939 ;;		_position
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           
  3944                           ;psect for function _lcd_add
  3945  05E6                     _lcd_add:	
  3946                           
  3947                           ;lcdv2.h: 230: bit0 = lcd_data;
  3948                           
  3949                           ;incstack = 0
  3950                           ; Regs used in _lcd_add: [wreg+status,2+status,0]
  3951  05E6  1166               	bcf	_bit0/(0+8),_bit0& (0+7)
  3952  05E7  185F               	btfsc	_lcd_data,0
  3953  05E8  1566               	bsf	_bit0/(0+8),_bit0& (0+7)
  3954                           
  3955                           ;lcdv2.h: 231: bit1 = lcd_data>>1;
  3956  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  3957  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  3958  05EB  085F               	movf	_lcd_data,w
  3959  05EC  00A3               	movwf	??_lcd_add
  3960  05ED  1003               	clrc
  3961  05EE  0CA3               	rrf	??_lcd_add,f
  3962  05EF  11E6               	bcf	_bit1/(0+8),_bit1& (0+7)
  3963  05F0  1823               	btfsc	??_lcd_add,0
  3964  05F1  15E6               	bsf	_bit1/(0+8),_bit1& (0+7)
  3965                           
  3966                           ;lcdv2.h: 232: bit2 = lcd_data>>2;
  3967  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  3968  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  3969  05F4  085F               	movf	_lcd_data,w
  3970  05F5  00A3               	movwf	??_lcd_add
  3971  05F6  1003               	clrc
  3972  05F7  0CA3               	rrf	??_lcd_add,f
  3973  05F8  1003               	clrc
  3974  05F9  0CA3               	rrf	??_lcd_add,f
  3975  05FA  1266               	bcf	_bit2/(0+8),_bit2& (0+7)
  3976  05FB  1823               	btfsc	??_lcd_add,0
  3977  05FC  1666               	bsf	_bit2/(0+8),_bit2& (0+7)
  3978                           
  3979                           ;lcdv2.h: 233: bit3 = lcd_data>>3;
  3980  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  3981  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  3982  05FF  085F               	movf	_lcd_data,w
  3983  0600  00A3               	movwf	??_lcd_add
  3984  0601  1003               	clrc
  3985  0602  0CA3               	rrf	??_lcd_add,f
  3986  0603  1003               	clrc
  3987  0604  0CA3               	rrf	??_lcd_add,f
  3988  0605  1003               	clrc
  3989  0606  0CA3               	rrf	??_lcd_add,f
  3990  0607  12E6               	bcf	_bit3/(0+8),_bit3& (0+7)
  3991  0608  1823               	btfsc	??_lcd_add,0
  3992  0609  16E6               	bsf	_bit3/(0+8),_bit3& (0+7)
  3993                           
  3994                           ;lcdv2.h: 234: bit4 = lcd_data>>4;
  3995  060A  1283               	bcf	3,5	;RP0=0, select bank0
  3996  060B  1303               	bcf	3,6	;RP1=0, select bank0
  3997  060C  085F               	movf	_lcd_data,w
  3998  060D  00A3               	movwf	??_lcd_add
  3999  060E  3004               	movlw	4
  4000  060F                     u3255:	
  4001  060F  1003               	clrc
  4002  0610  0CA3               	rrf	??_lcd_add,f
  4003  0611  3EFF               	addlw	-1
  4004  0612  1D03               	skipz
  4005  0613  2E0F               	goto	u3255
  4006  0614  1366               	bcf	_bit4/(0+8),_bit4& (0+7)
  4007  0615  1823               	btfsc	??_lcd_add,0
  4008  0616  1766               	bsf	_bit4/(0+8),_bit4& (0+7)
  4009                           
  4010                           ;lcdv2.h: 235: bit5 = lcd_data>>5;
  4011  0617  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0618  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0619  085F               	movf	_lcd_data,w
  4014  061A  00A3               	movwf	??_lcd_add
  4015  061B  3005               	movlw	5
  4016  061C                     u3275:	
  4017  061C  1003               	clrc
  4018  061D  0CA3               	rrf	??_lcd_add,f
  4019  061E  3EFF               	addlw	-1
  4020  061F  1D03               	skipz
  4021  0620  2E1C               	goto	u3275
  4022  0621  13E6               	bcf	_bit5/(0+8),_bit5& (0+7)
  4023  0622  1823               	btfsc	??_lcd_add,0
  4024  0623  17E6               	bsf	_bit5/(0+8),_bit5& (0+7)
  4025                           
  4026                           ;lcdv2.h: 236: bit6 = lcd_data>>6;
  4027  0624  1283               	bcf	3,5	;RP0=0, select bank0
  4028  0625  1303               	bcf	3,6	;RP1=0, select bank0
  4029  0626  085F               	movf	_lcd_data,w
  4030  0627  00A3               	movwf	??_lcd_add
  4031  0628  3006               	movlw	6
  4032  0629                     u3295:	
  4033  0629  1003               	clrc
  4034  062A  0CA3               	rrf	??_lcd_add,f
  4035  062B  3EFF               	addlw	-1
  4036  062C  1D03               	skipz
  4037  062D  2E29               	goto	u3295
  4038  062E  1067               	bcf	_bit6/(0+8),_bit6& (0+7)
  4039  062F  1823               	btfsc	??_lcd_add,0
  4040  0630  1467               	bsf	_bit6/(0+8),_bit6& (0+7)
  4041                           
  4042                           ;lcdv2.h: 237: bit7 = lcd_data>>7;
  4043  0631  1283               	bcf	3,5	;RP0=0, select bank0
  4044  0632  1303               	bcf	3,6	;RP1=0, select bank0
  4045  0633  085F               	movf	_lcd_data,w
  4046  0634  00A3               	movwf	??_lcd_add
  4047  0635  3007               	movlw	7
  4048  0636                     u3315:	
  4049  0636  1003               	clrc
  4050  0637  0CA3               	rrf	??_lcd_add,f
  4051  0638  3EFF               	addlw	-1
  4052  0639  1D03               	skipz
  4053  063A  2E36               	goto	u3315
  4054  063B  10E7               	bcf	_bit7/(0+8),_bit7& (0+7)
  4055  063C  1823               	btfsc	??_lcd_add,0
  4056  063D  14E7               	bsf	_bit7/(0+8),_bit7& (0+7)
  4057                           
  4058                           ;lcdv2.h: 239: RC3 = 0;
  4059  063E  1283               	bcf	3,5	;RP0=0, select bank0
  4060  063F  1303               	bcf	3,6	;RP1=0, select bank0
  4061  0640  1187               	bcf	7,3	;volatile
  4062                           
  4063                           ;lcdv2.h: 240: _delay(1);
  4064  0641  0000               	nop
  4065                           
  4066                           ;lcdv2.h: 241: RC3 = 1;
  4067  0642  1283               	bcf	3,5	;RP0=0, select bank0
  4068  0643  1303               	bcf	3,6	;RP1=0, select bank0
  4069  0644  1587               	bsf	7,3	;volatile
  4070                           
  4071                           ;lcdv2.h: 242: _delay(1);
  4072  0645  0000               	nop
  4073                           
  4074                           ;lcdv2.h: 244: RC1 = bit4;
  4075  0646  1283               	bcf	3,5	;RP0=0, select bank0
  4076  0647  1303               	bcf	3,6	;RP1=0, select bank0
  4077  0648  1F66               	btfss	_bit4/(0+8),_bit4& (0+7)
  4078  0649  2E4E               	goto	u3330
  4079  064A  1283               	bcf	3,5	;RP0=0, select bank0
  4080  064B  1303               	bcf	3,6	;RP1=0, select bank0
  4081  064C  1487               	bsf	7,1	;volatile
  4082  064D  2E51               	goto	l3144
  4083  064E                     u3330:	
  4084  064E  1283               	bcf	3,5	;RP0=0, select bank0
  4085  064F  1303               	bcf	3,6	;RP1=0, select bank0
  4086  0650  1087               	bcf	7,1	;volatile
  4087  0651                     l3144:	
  4088                           
  4089                           ;lcdv2.h: 245: RD0 = bit5;
  4090  0651  1FE6               	btfss	_bit5/(0+8),_bit5& (0+7)
  4091  0652  2E57               	goto	u3350
  4092  0653  1283               	bcf	3,5	;RP0=0, select bank0
  4093  0654  1303               	bcf	3,6	;RP1=0, select bank0
  4094  0655  1408               	bsf	8,0	;volatile
  4095  0656  2E5A               	goto	l3146
  4096  0657                     u3350:	
  4097  0657  1283               	bcf	3,5	;RP0=0, select bank0
  4098  0658  1303               	bcf	3,6	;RP1=0, select bank0
  4099  0659  1008               	bcf	8,0	;volatile
  4100  065A                     l3146:	
  4101                           
  4102                           ;lcdv2.h: 246: RC0 = bit6;
  4103  065A  1C67               	btfss	_bit6/(0+8),_bit6& (0+7)
  4104  065B  2E60               	goto	u3370
  4105  065C  1283               	bcf	3,5	;RP0=0, select bank0
  4106  065D  1303               	bcf	3,6	;RP1=0, select bank0
  4107  065E  1407               	bsf	7,0	;volatile
  4108  065F  2E63               	goto	l3148
  4109  0660                     u3370:	
  4110  0660  1283               	bcf	3,5	;RP0=0, select bank0
  4111  0661  1303               	bcf	3,6	;RP1=0, select bank0
  4112  0662  1007               	bcf	7,0	;volatile
  4113  0663                     l3148:	
  4114                           
  4115                           ;lcdv2.h: 247: RD1 = bit7;
  4116  0663  1CE7               	btfss	_bit7/(0+8),_bit7& (0+7)
  4117  0664  2E69               	goto	u3390
  4118  0665  1283               	bcf	3,5	;RP0=0, select bank0
  4119  0666  1303               	bcf	3,6	;RP1=0, select bank0
  4120  0667  1488               	bsf	8,1	;volatile
  4121  0668  2E6C               	goto	l3150
  4122  0669                     u3390:	
  4123  0669  1283               	bcf	3,5	;RP0=0, select bank0
  4124  066A  1303               	bcf	3,6	;RP1=0, select bank0
  4125  066B  1088               	bcf	8,1	;volatile
  4126  066C                     l3150:	
  4127                           
  4128                           ;lcdv2.h: 249: _delay(1);
  4129  066C  0000               	nop
  4130                           
  4131                           ;lcdv2.h: 250: RC3 = 0;
  4132  066D  1283               	bcf	3,5	;RP0=0, select bank0
  4133  066E  1303               	bcf	3,6	;RP1=0, select bank0
  4134  066F  1187               	bcf	7,3	;volatile
  4135                           
  4136                           ;lcdv2.h: 251: _delay(1);
  4137  0670  0000               	nop
  4138                           
  4139                           ;lcdv2.h: 255: RC3 = 0;
  4140  0671  1283               	bcf	3,5	;RP0=0, select bank0
  4141  0672  1303               	bcf	3,6	;RP1=0, select bank0
  4142  0673  1187               	bcf	7,3	;volatile
  4143                           
  4144                           ;lcdv2.h: 256: _delay(1);
  4145  0674  0000               	nop
  4146                           
  4147                           ;lcdv2.h: 257: RC3 = 1;
  4148  0675  1283               	bcf	3,5	;RP0=0, select bank0
  4149  0676  1303               	bcf	3,6	;RP1=0, select bank0
  4150  0677  1587               	bsf	7,3	;volatile
  4151                           
  4152                           ;lcdv2.h: 258: _delay(1);
  4153  0678  0000               	nop
  4154                           
  4155                           ;lcdv2.h: 260: RC1 = bit0;
  4156  0679  1283               	bcf	3,5	;RP0=0, select bank0
  4157  067A  1303               	bcf	3,6	;RP1=0, select bank0
  4158  067B  1D66               	btfss	_bit0/(0+8),_bit0& (0+7)
  4159  067C  2E81               	goto	u3410
  4160  067D  1283               	bcf	3,5	;RP0=0, select bank0
  4161  067E  1303               	bcf	3,6	;RP1=0, select bank0
  4162  067F  1487               	bsf	7,1	;volatile
  4163  0680  2E84               	goto	l3166
  4164  0681                     u3410:	
  4165  0681  1283               	bcf	3,5	;RP0=0, select bank0
  4166  0682  1303               	bcf	3,6	;RP1=0, select bank0
  4167  0683  1087               	bcf	7,1	;volatile
  4168  0684                     l3166:	
  4169                           
  4170                           ;lcdv2.h: 261: RD0 = bit1;
  4171  0684  1DE6               	btfss	_bit1/(0+8),_bit1& (0+7)
  4172  0685  2E8A               	goto	u3430
  4173  0686  1283               	bcf	3,5	;RP0=0, select bank0
  4174  0687  1303               	bcf	3,6	;RP1=0, select bank0
  4175  0688  1408               	bsf	8,0	;volatile
  4176  0689  2E8D               	goto	l3168
  4177  068A                     u3430:	
  4178  068A  1283               	bcf	3,5	;RP0=0, select bank0
  4179  068B  1303               	bcf	3,6	;RP1=0, select bank0
  4180  068C  1008               	bcf	8,0	;volatile
  4181  068D                     l3168:	
  4182                           
  4183                           ;lcdv2.h: 262: RC0 = bit2;
  4184  068D  1E66               	btfss	_bit2/(0+8),_bit2& (0+7)
  4185  068E  2E93               	goto	u3450
  4186  068F  1283               	bcf	3,5	;RP0=0, select bank0
  4187  0690  1303               	bcf	3,6	;RP1=0, select bank0
  4188  0691  1407               	bsf	7,0	;volatile
  4189  0692  2E96               	goto	l3170
  4190  0693                     u3450:	
  4191  0693  1283               	bcf	3,5	;RP0=0, select bank0
  4192  0694  1303               	bcf	3,6	;RP1=0, select bank0
  4193  0695  1007               	bcf	7,0	;volatile
  4194  0696                     l3170:	
  4195                           
  4196                           ;lcdv2.h: 263: RD1 = bit3;
  4197  0696  1EE6               	btfss	_bit3/(0+8),_bit3& (0+7)
  4198  0697  2E9C               	goto	u3470
  4199  0698  1283               	bcf	3,5	;RP0=0, select bank0
  4200  0699  1303               	bcf	3,6	;RP1=0, select bank0
  4201  069A  1488               	bsf	8,1	;volatile
  4202  069B  2E9F               	goto	l3172
  4203  069C                     u3470:	
  4204  069C  1283               	bcf	3,5	;RP0=0, select bank0
  4205  069D  1303               	bcf	3,6	;RP1=0, select bank0
  4206  069E  1088               	bcf	8,1	;volatile
  4207  069F                     l3172:	
  4208                           
  4209                           ;lcdv2.h: 265: _delay(1);
  4210  069F  0000               	nop
  4211                           
  4212                           ;lcdv2.h: 266: RC3 = 0;
  4213  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  4214  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  4215  06A2  1187               	bcf	7,3	;volatile
  4216                           
  4217                           ;lcdv2.h: 267: _delay(1);
  4218  06A3  0000               	nop
  4219  06A4  0008               	return
  4220  06A5                     __end_of_lcd_add:	
  4221  06A5                     __ptext26:	
  4222 ;; *************** function ___lwmod *****************
  4223 ;; Defined at:
  4224 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;  divisor         2   10[BANK0 ] unsigned int 
  4227 ;;  dividend        2   12[BANK0 ] unsigned int 
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  counter         1   14[BANK0 ] unsigned char 
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  2   10[BANK0 ] unsigned int 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0
  4234 ;; Tracked objects:
  4235 ;;		On entry : 300/0
  4236 ;;		On exit  : 300/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4239 ;;      Params:         0       4       0       0       0
  4240 ;;      Locals:         0       1       0       0       0
  4241 ;;      Temps:          0       0       0       0       0
  4242 ;;      Totals:         0       5       0       0       0
  4243 ;;Total ram usage:        5 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    5
  4246 ;; This function calls:
  4247 ;;		Nothing
  4248 ;; This function is called by:
  4249 ;;		_LCDTimeUpdate
  4250 ;;		_printf
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function ___lwmod
  4256  06A5                     ___lwmod:	
  4257                           
  4258                           ;incstack = 0
  4259                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4260  06A5  082A               	movf	___lwmod@divisor,w
  4261  06A6  042B               	iorwf	___lwmod@divisor+1,w
  4262  06A7  1903               	btfsc	3,2
  4263  06A8  2EC4               	goto	l3996
  4264  06A9  01AE               	clrf	___lwmod@counter
  4265  06AA                     L27:	
  4266  06AA  0AAE               	incf	___lwmod@counter,f
  4267  06AB  1BAB               	btfsc	___lwmod@divisor+1,7
  4268  06AC  2EB1               	goto	l3988
  4269  06AD  1003               	clrc
  4270  06AE  0DAA               	rlf	___lwmod@divisor,f
  4271  06AF  0DAB               	rlf	___lwmod@divisor+1,f
  4272  06B0  2EAA               	goto	L27
  4273  06B1                     l3988:	
  4274  06B1  082B               	movf	___lwmod@divisor+1,w
  4275  06B2  022D               	subwf	___lwmod@dividend+1,w
  4276  06B3  1D03               	skipz
  4277  06B4  2EB7               	goto	u5205
  4278  06B5  082A               	movf	___lwmod@divisor,w
  4279  06B6  022C               	subwf	___lwmod@dividend,w
  4280  06B7                     u5205:	
  4281  06B7  1C03               	skipc
  4282  06B8  2EC0               	goto	L28
  4283  06B9  082A               	movf	___lwmod@divisor,w
  4284  06BA  02AC               	subwf	___lwmod@dividend,f
  4285  06BB  082B               	movf	___lwmod@divisor+1,w
  4286  06BC  1C03               	skipc
  4287  06BD  03AD               	decf	___lwmod@dividend+1,f
  4288  06BE  02AD               	subwf	___lwmod@dividend+1,f
  4289  06BF  1003               	clrc
  4290  06C0                     L28:	
  4291  06C0  0CAB               	rrf	___lwmod@divisor+1,f
  4292  06C1  0CAA               	rrf	___lwmod@divisor,f
  4293  06C2  0BAE               	decfsz	___lwmod@counter,f
  4294  06C3  2EB1               	goto	l3988
  4295  06C4                     l3996:	
  4296  06C4  082D               	movf	___lwmod@dividend+1,w
  4297  06C5  00AB               	movwf	?___lwmod+1
  4298  06C6  082C               	movf	___lwmod@dividend,w
  4299  06C7  00AA               	movwf	?___lwmod
  4300  06C8  0008               	return
  4301  06C9                     __end_of___lwmod:	
  4302  06C9                     __ptext13:	
  4303 ;; *************** function ___wmul *****************
  4304 ;; Defined at:
  4305 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  multiplier      2    3[BANK0 ] unsigned int 
  4308 ;;  multiplicand    2    5[BANK0 ] unsigned int 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  product         2    7[BANK0 ] unsigned int 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  2    3[BANK0 ] unsigned int 
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0
  4315 ;; Tracked objects:
  4316 ;;		On entry : 300/0
  4317 ;;		On exit  : 300/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4320 ;;      Params:         0       4       0       0       0
  4321 ;;      Locals:         0       2       0       0       0
  4322 ;;      Temps:          0       0       0       0       0
  4323 ;;      Totals:         0       6       0       0       0
  4324 ;;Total ram usage:        6 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    5
  4327 ;; This function calls:
  4328 ;;		Nothing
  4329 ;; This function is called by:
  4330 ;;		_a2d_read
  4331 ;;		_printf
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           
  4336                           ;psect for function ___wmul
  4337  06C9                     ___wmul:	
  4338                           
  4339                           ;incstack = 0
  4340                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4341  06C9  01A7               	clrf	___wmul@product
  4342  06CA  01A8               	clrf	___wmul@product+1
  4343  06CB                     l3834:	
  4344  06CB  1C23               	btfss	___wmul@multiplier,0
  4345  06CC  2ED3               	goto	l3838
  4346  06CD  0825               	movf	___wmul@multiplicand,w
  4347  06CE  07A7               	addwf	___wmul@product,f
  4348  06CF  1803               	skipnc
  4349  06D0  0AA8               	incf	___wmul@product+1,f
  4350  06D1  0826               	movf	___wmul@multiplicand+1,w
  4351  06D2  07A8               	addwf	___wmul@product+1,f
  4352  06D3                     l3838:	
  4353  06D3  1003               	clrc
  4354  06D4  0DA5               	rlf	___wmul@multiplicand,f
  4355  06D5  0DA6               	rlf	___wmul@multiplicand+1,f
  4356  06D6  1003               	clrc
  4357  06D7  0CA4               	rrf	___wmul@multiplier+1,f
  4358  06D8  0CA3               	rrf	___wmul@multiplier,f
  4359  06D9  0823               	movf	___wmul@multiplier,w
  4360  06DA  0424               	iorwf	___wmul@multiplier+1,w
  4361  06DB  1D03               	btfss	3,2
  4362  06DC  2ECB               	goto	l3834
  4363  06DD  0828               	movf	___wmul@product+1,w
  4364  06DE  00A4               	movwf	?___wmul+1
  4365  06DF  0827               	movf	___wmul@product,w
  4366  06E0  00A3               	movwf	?___wmul
  4367  06E1  0008               	return
  4368  06E2                     __end_of___wmul:	
  4369  06E2                     __ptext4:	
  4370 ;; *************** function ___bmul *****************
  4371 ;; Defined at:
  4372 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul8.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;  multiplier      1    wreg     unsigned char 
  4375 ;;  multiplicand    1    3[BANK0 ] unsigned char 
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;  multiplier      1    5[BANK0 ] unsigned char 
  4378 ;;  product         1    4[BANK0 ] unsigned char 
  4379 ;; Return value:  Size  Location     Type
  4380 ;;                  1    wreg      unsigned char 
  4381 ;; Registers used:
  4382 ;;		wreg, status,2, status,0
  4383 ;; Tracked objects:
  4384 ;;		On entry : 300/0
  4385 ;;		On exit  : 300/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4388 ;;      Params:         0       1       0       0       0
  4389 ;;      Locals:         0       2       0       0       0
  4390 ;;      Temps:          0       0       0       0       0
  4391 ;;      Totals:         0       3       0       0       0
  4392 ;;Total ram usage:        3 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    5
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_printf
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function ___bmul
  4404  06E2                     ___bmul:	
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4408                           ;___bmul@multiplier stored from wreg
  4409  06E2  00A5               	movwf	___bmul@multiplier
  4410  06E3  01A4               	clrf	___bmul@product
  4411  06E4                     l3850:	
  4412  06E4  0823               	movf	___bmul@multiplicand,w
  4413  06E5  1825               	btfsc	___bmul@multiplier,0
  4414  06E6  07A4               	addwf	___bmul@product,f
  4415  06E7  1003               	clrc
  4416  06E8  0DA3               	rlf	___bmul@multiplicand,f
  4417  06E9  1003               	clrc
  4418  06EA  0CA5               	rrf	___bmul@multiplier,f
  4419  06EB  0825               	movf	___bmul@multiplier,w
  4420  06EC  1D03               	btfss	3,2
  4421  06ED  2EE4               	goto	l3850
  4422  06EE  0824               	movf	___bmul@product,w
  4423  06EF  0008               	return
  4424  06F0                     __end_of___bmul:	
  4425  06F0                     __ptext29:	
  4426 ;; *************** function _position *****************
  4427 ;; Defined at:
  4428 ;;		line 208 in file "lcdv2.h"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  row             1    wreg     unsigned char 
  4431 ;;  collum          1    4[BANK0 ] unsigned char 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  row             1    8[BANK0 ] unsigned char 
  4434 ;;  post            1    7[BANK0 ] unsigned char 
  4435 ;; Return value:  Size  Location     Type
  4436 ;;		None               void
  4437 ;; Registers used:
  4438 ;;		wreg, status,2, status,0, pclath, cstack
  4439 ;; Tracked objects:
  4440 ;;		On entry : 300/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4444 ;;      Params:         0       1       0       0       0
  4445 ;;      Locals:         0       2       0       0       0
  4446 ;;      Temps:          0       2       0       0       0
  4447 ;;      Totals:         0       5       0       0       0
  4448 ;;Total ram usage:        5 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; Hardware stack levels required when called:    6
  4451 ;; This function calls:
  4452 ;;		_lcd_add
  4453 ;; This function is called by:
  4454 ;;		_LCD_print_char
  4455 ;;		_main
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           
  4460                           ;psect for function _position
  4461  06F0                     _position:	
  4462                           
  4463                           ;incstack = 0
  4464                           ; Regs used in _position: [wreg+status,2+status,0+pclath+cstack]
  4465                           ;position@row stored from wreg
  4466  06F0  00A8               	movwf	position@row
  4467                           
  4468                           ;lcdv2.h: 210: char post ;
  4469                           ;lcdv2.h: 211: if( row == 1 ) row = 128;
  4470  06F1  0B28               	decfsz	position@row,w
  4471  06F2  2EF5               	goto	l3230
  4472  06F3  3080               	movlw	128
  4473  06F4  00A8               	movwf	position@row
  4474  06F5                     l3230:	
  4475                           
  4476                           ;lcdv2.h: 212: if( row == 2 ) row = 192;
  4477  06F5  3002               	movlw	2
  4478  06F6  0628               	xorwf	position@row,w
  4479  06F7  1D03               	btfss	3,2
  4480  06F8  2EFB               	goto	l3234
  4481  06F9  30C0               	movlw	192
  4482  06FA  00A8               	movwf	position@row
  4483  06FB                     l3234:	
  4484                           
  4485                           ;lcdv2.h: 213: post = row + collum - 1;
  4486  06FB  0824               	movf	position@collum,w
  4487  06FC  0728               	addwf	position@row,w
  4488  06FD  3EFF               	addlw	255
  4489  06FE  00A7               	movwf	position@post
  4490                           
  4491                           ;lcdv2.h: 214: RC2 = 0;
  4492  06FF  1107               	bcf	7,2	;volatile
  4493                           
  4494                           ;lcdv2.h: 215: _delay(20);
  4495  0700  3006               	movlw	6
  4496  0701  00A5               	movwf	??_position
  4497  0702                     u6657:	
  4498  0702  0BA5               	decfsz	??_position,f
  4499  0703  2F02               	goto	u6657
  4500  0704  0000               	nop
  4501                           
  4502                           ;lcdv2.h: 216: lcd_data = post ;
  4503  0705  1283               	bcf	3,5	;RP0=0, select bank0
  4504  0706  1303               	bcf	3,6	;RP1=0, select bank0
  4505  0707  0827               	movf	position@post,w
  4506  0708  00DF               	movwf	_lcd_data
  4507                           
  4508                           ;lcdv2.h: 217: lcd_add();
  4509  0709  25E6  120A  118A   	fcall	_lcd_add
  4510                           
  4511                           ;lcdv2.h: 218: _delay((unsigned long)((10)*(4000000/4000.0)));
  4512  070C  300D               	movlw	13
  4513  070D  1283               	bcf	3,5	;RP0=0, select bank0
  4514  070E  1303               	bcf	3,6	;RP1=0, select bank0
  4515  070F  00A6               	movwf	??_position+1
  4516  0710  30FB               	movlw	251
  4517  0711  00A5               	movwf	??_position
  4518  0712                     u6667:	
  4519  0712  0BA5               	decfsz	??_position,f
  4520  0713  2F12               	goto	u6667
  4521  0714  0BA6               	decfsz	??_position+1,f
  4522  0715  2F12               	goto	u6667
  4523  0716  2F17               	nop2
  4524  0717  0008               	return
  4525  0718                     __end_of_position:	
  4526  0718                     __ptext16:	
  4527 ;; *************** function ___ftmul *****************
  4528 ;; Defined at:
  4529 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  f1              3   14[BANK0 ] float 
  4532 ;;  f2              3   17[BANK0 ] float 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  f3_as_produc    3   24[BANK0 ] unsigned um
  4535 ;;  sign            1   28[BANK0 ] unsigned char 
  4536 ;;  cntr            1   27[BANK0 ] unsigned char 
  4537 ;;  exp             1   23[BANK0 ] unsigned char 
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  3   14[BANK0 ] float 
  4540 ;; Registers used:
  4541 ;;		wreg, status,2, status,0, pclath, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 300/0
  4544 ;;		On exit  : 300/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4547 ;;      Params:         0       6       0       0       0
  4548 ;;      Locals:         0       6       0       0       0
  4549 ;;      Temps:          0       3       0       0       0
  4550 ;;      Totals:         0      15       0       0       0
  4551 ;;Total ram usage:       15 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    6
  4554 ;; This function calls:
  4555 ;;		___ftpack
  4556 ;; This function is called by:
  4557 ;;		_a2d_read
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           
  4562                           ;psect for function ___ftmul
  4563  0718                     ___ftmul:	
  4564                           
  4565                           ;incstack = 0
  4566                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4567  0718  082E               	movf	___ftmul@f1,w
  4568  0719  00B4               	movwf	??___ftmul
  4569  071A  082F               	movf	___ftmul@f1+1,w
  4570  071B  00B5               	movwf	??___ftmul+1
  4571  071C  0830               	movf	___ftmul@f1+2,w
  4572  071D  00B6               	movwf	??___ftmul+2
  4573  071E  1003               	clrc
  4574  071F  0D35               	rlf	??___ftmul+1,w
  4575  0720  0D36               	rlf	??___ftmul+2,w
  4576  0721  00B7               	movwf	___ftmul@exp
  4577  0722  0837               	movf	___ftmul@exp,w
  4578  0723  1D03               	btfss	3,2
  4579  0724  2F29               	goto	l3866
  4580  0725  01AE               	clrf	?___ftmul
  4581  0726  01AF               	clrf	?___ftmul+1
  4582  0727  01B0               	clrf	?___ftmul+2
  4583  0728  0008               	return
  4584  0729                     l3866:	
  4585  0729  0831               	movf	___ftmul@f2,w
  4586  072A  00B4               	movwf	??___ftmul
  4587  072B  0832               	movf	___ftmul@f2+1,w
  4588  072C  00B5               	movwf	??___ftmul+1
  4589  072D  0833               	movf	___ftmul@f2+2,w
  4590  072E  00B6               	movwf	??___ftmul+2
  4591  072F  1003               	clrc
  4592  0730  0D35               	rlf	??___ftmul+1,w
  4593  0731  0D36               	rlf	??___ftmul+2,w
  4594  0732  00BC               	movwf	___ftmul@sign
  4595  0733  083C               	movf	___ftmul@sign,w
  4596  0734  1D03               	btfss	3,2
  4597  0735  2F3A               	goto	l3870
  4598  0736  01AE               	clrf	?___ftmul
  4599  0737  01AF               	clrf	?___ftmul+1
  4600  0738  01B0               	clrf	?___ftmul+2
  4601  0739  0008               	return
  4602  073A                     l3870:	
  4603  073A  083C               	movf	___ftmul@sign,w
  4604  073B  3E7B               	addlw	123
  4605  073C  07B7               	addwf	___ftmul@exp,f
  4606  073D  0830               	movf	___ftmul@f1+2,w
  4607  073E  00BC               	movwf	___ftmul@sign
  4608  073F  0833               	movf	___ftmul@f2+2,w
  4609  0740  06BC               	xorwf	___ftmul@sign,f
  4610  0741  3080               	movlw	128
  4611  0742  05BC               	andwf	___ftmul@sign,f
  4612  0743  3007               	movlw	7
  4613  0744  17AF               	bsf	___ftmul@f1+1,7
  4614  0745  17B2               	bsf	___ftmul@f2+1,7
  4615  0746  01B3               	clrf	___ftmul@f2+2
  4616  0747  01B8               	clrf	___ftmul@f3_as_product
  4617  0748  01B9               	clrf	___ftmul@f3_as_product+1
  4618  0749  01BA               	clrf	___ftmul@f3_as_product+2
  4619  074A  00BB               	movwf	___ftmul@cntr
  4620  074B                     l3888:	
  4621  074B  1C2E               	btfss	___ftmul@f1,0
  4622  074C  2F5B               	goto	l3892
  4623  074D  0831               	movf	___ftmul@f2,w
  4624  074E  07B8               	addwf	___ftmul@f3_as_product,f
  4625  074F  0832               	movf	___ftmul@f2+1,w
  4626  0750  1103               	clrz
  4627  0751  1803               	skipnc
  4628  0752  0A32               	incf	___ftmul@f2+1,w
  4629  0753  1D03               	btfss	3,2
  4630  0754  07B9               	addwf	___ftmul@f3_as_product+1,f
  4631  0755  0833               	movf	___ftmul@f2+2,w
  4632  0756  1103               	clrz
  4633  0757  1803               	skipnc
  4634  0758  0A33               	incf	___ftmul@f2+2,w
  4635  0759  1D03               	btfss	3,2
  4636  075A  07BA               	addwf	___ftmul@f3_as_product+2,f
  4637  075B                     l3892:	
  4638  075B  1003               	clrc
  4639  075C  0CB0               	rrf	___ftmul@f1+2,f
  4640  075D  0CAF               	rrf	___ftmul@f1+1,f
  4641  075E  0CAE               	rrf	___ftmul@f1,f
  4642  075F  1003               	clrc
  4643  0760  0DB1               	rlf	___ftmul@f2,f
  4644  0761  0DB2               	rlf	___ftmul@f2+1,f
  4645  0762  0DB3               	rlf	___ftmul@f2+2,f
  4646  0763  0BBB               	decfsz	___ftmul@cntr,f
  4647  0764  2F4B               	goto	l3888
  4648  0765  3009               	movlw	9
  4649  0766  00BB               	movwf	___ftmul@cntr
  4650  0767                     l3900:	
  4651  0767  1C2E               	btfss	___ftmul@f1,0
  4652  0768  2F77               	goto	l3904
  4653  0769  0831               	movf	___ftmul@f2,w
  4654  076A  07B8               	addwf	___ftmul@f3_as_product,f
  4655  076B  0832               	movf	___ftmul@f2+1,w
  4656  076C  1103               	clrz
  4657  076D  1803               	skipnc
  4658  076E  0A32               	incf	___ftmul@f2+1,w
  4659  076F  1D03               	btfss	3,2
  4660  0770  07B9               	addwf	___ftmul@f3_as_product+1,f
  4661  0771  0833               	movf	___ftmul@f2+2,w
  4662  0772  1103               	clrz
  4663  0773  1803               	skipnc
  4664  0774  0A33               	incf	___ftmul@f2+2,w
  4665  0775  1D03               	btfss	3,2
  4666  0776  07BA               	addwf	___ftmul@f3_as_product+2,f
  4667  0777                     l3904:	
  4668  0777  1003               	clrc
  4669  0778  0CB0               	rrf	___ftmul@f1+2,f
  4670  0779  0CAF               	rrf	___ftmul@f1+1,f
  4671  077A  0CAE               	rrf	___ftmul@f1,f
  4672  077B  1003               	clrc
  4673  077C  0CBA               	rrf	___ftmul@f3_as_product+2,f
  4674  077D  0CB9               	rrf	___ftmul@f3_as_product+1,f
  4675  077E  0CB8               	rrf	___ftmul@f3_as_product,f
  4676  077F  0BBB               	decfsz	___ftmul@cntr,f
  4677  0780  2F67               	goto	l3900
  4678  0781  0838               	movf	___ftmul@f3_as_product,w
  4679  0782  00A3               	movwf	___ftpack@arg
  4680  0783  0839               	movf	___ftmul@f3_as_product+1,w
  4681  0784  00A4               	movwf	___ftpack@arg+1
  4682  0785  083A               	movf	___ftmul@f3_as_product+2,w
  4683  0786  00A5               	movwf	___ftpack@arg+2
  4684  0787  0837               	movf	___ftmul@exp,w
  4685  0788  00A6               	movwf	___ftpack@exp
  4686  0789  083C               	movf	___ftmul@sign,w
  4687  078A  00A7               	movwf	___ftpack@sign
  4688  078B  160A  118A  2008   	fcall	___ftpack
  4689  078E  0823               	movf	?___ftpack,w
  4690  078F  00AE               	movwf	?___ftmul
  4691  0790  0824               	movf	?___ftpack+1,w
  4692  0791  00AF               	movwf	?___ftmul+1
  4693  0792  0825               	movf	?___ftpack+2,w
  4694  0793  00B0               	movwf	?___ftmul+2
  4695  0794  0008               	return
  4696  0795                     __end_of___ftmul:	
  4697  0795                     __ptext14:	
  4698 ;; *************** function ___lwtoft *****************
  4699 ;; Defined at:
  4700 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  c               2   11[BANK0 ] unsigned int 
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;		None
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  3   11[BANK0 ] float 
  4707 ;; Registers used:
  4708 ;;		wreg, status,2, status,0, pclath, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 300/0
  4711 ;;		On exit  : 300/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4714 ;;      Params:         0       3       0       0       0
  4715 ;;      Locals:         0       0       0       0       0
  4716 ;;      Temps:          0       0       0       0       0
  4717 ;;      Totals:         0       3       0       0       0
  4718 ;;Total ram usage:        3 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    6
  4721 ;; This function calls:
  4722 ;;		___ftpack
  4723 ;; This function is called by:
  4724 ;;		_a2d_read
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           
  4729                           ;psect for function ___lwtoft
  4730  0795                     ___lwtoft:	
  4731                           
  4732                           ;incstack = 0
  4733                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4734  0795  082B               	movf	___lwtoft@c,w
  4735  0796  00A3               	movwf	___ftpack@arg
  4736  0797  082C               	movf	___lwtoft@c+1,w
  4737  0798  00A4               	movwf	___ftpack@arg+1
  4738  0799  308E               	movlw	142
  4739  079A  01A5               	clrf	___ftpack@arg+2
  4740  079B  00A6               	movwf	___ftpack@exp
  4741  079C  01A7               	clrf	___ftpack@sign
  4742  079D  160A  118A  2008   	fcall	___ftpack
  4743  07A0  0823               	movf	?___ftpack,w
  4744  07A1  00AB               	movwf	?___lwtoft
  4745  07A2  0824               	movf	?___ftpack+1,w
  4746  07A3  00AC               	movwf	?___lwtoft+1
  4747  07A4  0825               	movf	?___ftpack+2,w
  4748  07A5  00AD               	movwf	?___lwtoft+2
  4749  07A6  0008               	return
  4750  07A7                     __end_of___lwtoft:	
  4751  07A7                     PL6:	
  4752  07A7  00B1               	movwf	??_printf
  4753  07A8  01B2               	clrf	??_printf+1
  4754  07A9  1BB1               	btfsc	??_printf,7
  4755  07AA  03B2               	decf	??_printf+1,f
  4756  07AB  0832               	movf	??_printf+1,w
  4757  07AC  3A80               	xorlw	128
  4758  07AD  00B3               	movwf	??_printf+2
  4759  07AE  0843               	movf	printf@width+1,w
  4760  07AF  3A80               	xorlw	128
  4761  07B0  0233               	subwf	??_printf+2,w
  4762  07B1  1D03               	skipz
  4763  07B2  0008               	return
  4764  07B3  0842               	movf	printf@width,w
  4765  07B4  0231               	subwf	??_printf,w
  4766  07B5  0008               	return
  4767  07B6                     __end_ofPL6:	
  4768  07B6                     PL8:	
  4769  07B6  30C0               	movlw	192
  4770  07B7  0545               	andwf	printf@flag,w
  4771  07B8  00B1               	movwf	??_printf
  4772  07B9  3008               	movlw	8
  4773  07BA  0546               	andwf	printf@flag+1,w
  4774  07BB  00B2               	movwf	??_printf+1
  4775  07BC  3080               	movlw	128
  4776  07BD  0631               	xorwf	??_printf,w
  4777  07BE  3408               	retlw	8
  4778  07BF                     __end_ofPL8:	
  4779  07BF                     PL12:	
  4780  07BF  083D               	movf	printf@ap,w
  4781  07C0  0084               	movwf	4
  4782  07C1  1383               	bcf	3,7	;select IRP bank0
  4783  07C2  0800               	movf	0,w
  4784  07C3  00BE               	movwf	printf@val
  4785  07C4  0A84               	incf	4,f
  4786  07C5  0800               	movf	0,w
  4787  07C6  00BF               	movwf	printf@val+1
  4788  07C7  0ABD               	incf	printf@ap,f
  4789  07C8  0ABD               	incf	printf@ap,f
  4790  07C9  0008               	return
  4791  07CA                     __end_ofPL12:	
  4792  07CA                     PL18:	
  4793  07CA  00B1               	movwf	??_printf
  4794  07CB  01B2               	clrf	??_printf+1
  4795  07CC  1BB1               	btfsc	??_printf,7
  4796  07CD  03B2               	decf	??_printf+1,f
  4797  07CE  02C2               	subwf	printf@width,f
  4798  07CF  0832               	movf	??_printf+1,w
  4799  07D0  1C03               	skipc
  4800  07D1  03C3               	decf	printf@width+1,f
  4801  07D2  02C3               	subwf	printf@width+1,f
  4802  07D3  0008               	return
  4803  07D4                     __end_ofPL18:	
  4804  07D4                     PL22:	
  4805  07D4  0545               	andwf	printf@flag,w
  4806  07D5  00B1               	movwf	??_printf
  4807  07D6  3008               	movlw	8
  4808  07D7  0546               	andwf	printf@flag+1,w
  4809  07D8  00B2               	movwf	??_printf+1
  4810  07D9  3040               	movlw	64
  4811  07DA  0631               	xorwf	??_printf,w
  4812  07DB  3408               	retlw	8
  4813  07DC                     __end_ofPL22:	
  4814  07DC                     PL24:	
  4815  07DC  30FF               	movlw	-1
  4816  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  4817  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  4818  07DF  07C2               	addwf	printf@width,f
  4819  07E0  1C03               	skipc
  4820  07E1  03C3               	decf	printf@width+1,f
  4821  07E2  0842               	movf	printf@width,w
  4822  07E3  0443               	iorwf	printf@width+1,w
  4823  07E4  0008               	return
  4824  07E5                     __end_ofPL24:	
  4825  07E5                     PL40:	
  4826  07E5  00A4               	movwf	___lwdiv@divisor+1
  4827  07E6  083F               	movf	printf@val+1,w
  4828  07E7  00A6               	movwf	___lwdiv@dividend+1
  4829  07E8  083E               	movf	printf@val,w
  4830  07E9  00A5               	movwf	___lwdiv@dividend
  4831  07EA  0008               	return
  4832  07EB                     __end_ofPL40:	
  4833                           
  4834                           	psect	text10
  4835  1D1C                     __ptext10:	
  4836 ;; *************** function _atod_init *****************
  4837 ;; Defined at:
  4838 ;;		line 8 in file "a2d.h"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;		None
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;		None               void
  4845 ;; Registers used:
  4846 ;;		wreg
  4847 ;; Tracked objects:
  4848 ;;		On entry : B00/0
  4849 ;;		On exit  : B00/100
  4850 ;;		Unchanged: 800/0
  4851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4852 ;;      Params:         0       0       0       0       0
  4853 ;;      Locals:         0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0
  4855 ;;      Totals:         0       0       0       0       0
  4856 ;;Total ram usage:        0 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    5
  4859 ;; This function calls:
  4860 ;;		Nothing
  4861 ;; This function is called by:
  4862 ;;		_main
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _atod_init
  4868  1D1C                     _atod_init:	
  4869                           
  4870                           ;a2d.h: 9: ADCON0 = 0b01000010;
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in _atod_init: [wreg]
  4874  1D1C  3042               	movlw	66
  4875  1D1D  009F               	movwf	31	;volatile
  4876                           
  4877                           ;a2d.h: 10: ADCON1 = 0b10000100;
  4878  1D1E  3084               	movlw	132
  4879  1D1F  1683               	bsf	3,5	;RP0=1, select bank1
  4880  1D20  009F               	movwf	31	;volatile
  4881  1D21  0008               	return
  4882  1D22                     __end_of_atod_init:	
  4883                           
  4884                           	psect	text15
  4885  0905                     __ptext15:	
  4886 ;; *************** function ___fttol *****************
  4887 ;; Defined at:
  4888 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  f1              3   29[BANK0 ] float 
  4891 ;; Auto vars:     Size  Location     Type
  4892 ;;  lval            4   37[BANK0 ] unsigned long 
  4893 ;;  exp1            1   41[BANK0 ] unsigned char 
  4894 ;;  sign1           1   36[BANK0 ] unsigned char 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  4   29[BANK0 ] long 
  4897 ;; Registers used:
  4898 ;;		wreg, status,2, status,0
  4899 ;; Tracked objects:
  4900 ;;		On entry : 300/0
  4901 ;;		On exit  : 300/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4904 ;;      Params:         0       4       0       0       0
  4905 ;;      Locals:         0       6       0       0       0
  4906 ;;      Temps:          0       3       0       0       0
  4907 ;;      Totals:         0      13       0       0       0
  4908 ;;Total ram usage:       13 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    5
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_a2d_read
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           
  4919                           ;psect for function ___fttol
  4920  0905                     ___fttol:	
  4921                           
  4922                           ;incstack = 0
  4923                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4924  0905  2160  120A  158A   	fcall	PL30	;call to abstracted procedure
  4925  0908  1003               	clrc
  4926  0909  0D42               	rlf	??___fttol+1,w
  4927  090A  0D43               	rlf	??___fttol+2,w
  4928  090B  00C9               	movwf	___fttol@exp1
  4929  090C  0849               	movf	___fttol@exp1,w
  4930  090D  1D03               	btfss	3,2
  4931  090E  2914               	goto	l3918
  4932  090F                     l3916:	
  4933  090F  01BD               	clrf	?___fttol
  4934  0910  01BE               	clrf	?___fttol+1
  4935  0911  01BF               	clrf	?___fttol+2
  4936  0912  01C0               	clrf	?___fttol+3
  4937  0913  0008               	return
  4938  0914                     l3918:	
  4939  0914  2160  120A  158A   	fcall	PL30	;call to abstracted procedure
  4940  0917  3017               	movlw	23
  4941  0918                     u5075:	
  4942  0918  1003               	clrc
  4943  0919  0CC3               	rrf	??___fttol+2,f
  4944  091A  0CC2               	rrf	??___fttol+1,f
  4945  091B  0CC1               	rrf	??___fttol,f
  4946  091C  3EFF               	addlw	-1
  4947  091D  1D03               	skipz
  4948  091E  2918               	goto	u5075
  4949  091F  0841               	movf	??___fttol,w
  4950  0920  00C4               	movwf	___fttol@sign1
  4951  0921  17BE               	bsf	___fttol@f1+1,7
  4952  0922  01BF               	clrf	___fttol@f1+2
  4953  0923  083D               	movf	___fttol@f1,w
  4954  0924  00C5               	movwf	___fttol@lval
  4955  0925  083E               	movf	___fttol@f1+1,w
  4956  0926  00C6               	movwf	___fttol@lval+1
  4957  0927  083F               	movf	___fttol@f1+2,w
  4958  0928  00C7               	movwf	___fttol@lval+2
  4959  0929  308E               	movlw	142
  4960  092A  01C8               	clrf	___fttol@lval+3
  4961  092B  02C9               	subwf	___fttol@exp1,f
  4962  092C  1FC9               	btfss	___fttol@exp1,7
  4963  092D  293B               	goto	l3938
  4964  092E  0849               	movf	___fttol@exp1,w
  4965  092F  3A80               	xorlw	128
  4966  0930  3E8F               	addlw	143
  4967  0931  1C03               	btfss	3,0
  4968  0932  290F               	goto	l3916
  4969  0933                     l3934:	
  4970  0933  1003               	clrc
  4971  0934  0CC8               	rrf	___fttol@lval+3,f
  4972  0935  0CC7               	rrf	___fttol@lval+2,f
  4973  0936  0CC6               	rrf	___fttol@lval+1,f
  4974  0937  0CC5               	rrf	___fttol@lval,f
  4975  0938  0FC9               	incfsz	___fttol@exp1,f
  4976  0939  2933               	goto	l3934
  4977  093A  2949               	goto	l3946
  4978  093B                     l3938:	
  4979  093B  3018               	movlw	24
  4980  093C  0249               	subwf	___fttol@exp1,w
  4981  093D  1803               	btfsc	3,0
  4982  093E  290F               	goto	l3916
  4983  093F                     l3944:	
  4984  093F  0849               	movf	___fttol@exp1,w
  4985  0940  1903               	btfsc	3,2
  4986  0941  2949               	goto	l3946
  4987  0942  1003               	clrc
  4988  0943  0DC5               	rlf	___fttol@lval,f
  4989  0944  0DC6               	rlf	___fttol@lval+1,f
  4990  0945  0DC7               	rlf	___fttol@lval+2,f
  4991  0946  0DC8               	rlf	___fttol@lval+3,f
  4992  0947  03C9               	decf	___fttol@exp1,f
  4993  0948  293F               	goto	l3944
  4994  0949                     l3946:	
  4995  0949  0844               	movf	___fttol@sign1,w
  4996  094A  1903               	btfsc	3,2
  4997  094B  2957               	goto	l3950
  4998  094C  09C5               	comf	___fttol@lval,f
  4999  094D  09C6               	comf	___fttol@lval+1,f
  5000  094E  09C7               	comf	___fttol@lval+2,f
  5001  094F  09C8               	comf	___fttol@lval+3,f
  5002  0950  0AC5               	incf	___fttol@lval,f
  5003  0951  1903               	skipnz
  5004  0952  0AC6               	incf	___fttol@lval+1,f
  5005  0953  1903               	skipnz
  5006  0954  0AC7               	incf	___fttol@lval+2,f
  5007  0955  1903               	skipnz
  5008  0956  0AC8               	incf	___fttol@lval+3,f
  5009  0957                     l3950:	
  5010  0957  0848               	movf	___fttol@lval+3,w
  5011  0958  00C0               	movwf	?___fttol+3
  5012  0959  0847               	movf	___fttol@lval+2,w
  5013  095A  00BF               	movwf	?___fttol+2
  5014  095B  0846               	movf	___fttol@lval+1,w
  5015  095C  00BE               	movwf	?___fttol+1
  5016  095D  0845               	movf	___fttol@lval,w
  5017  095E  00BD               	movwf	?___fttol
  5018  095F  0008               	return
  5019  0960                     __end_of___fttol:	
  5020  0960                     PL30:	
  5021  0960  083D               	movf	___fttol@f1,w
  5022  0961  00C1               	movwf	??___fttol
  5023  0962  083E               	movf	___fttol@f1+1,w
  5024  0963  00C2               	movwf	??___fttol+1
  5025  0964  083F               	movf	___fttol@f1+2,w
  5026  0965  00C3               	movwf	??___fttol+2
  5027  0966  0008               	return
  5028  0967                     __end_ofPL30:	
  5029                           
  5030                           	psect	text17
  5031  1008                     __ptext17:	
  5032 ;; *************** function ___ftpack *****************
  5033 ;; Defined at:
  5034 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;  arg             3    3[BANK0 ] unsigned um
  5037 ;;  exp             1    6[BANK0 ] unsigned char 
  5038 ;;  sign            1    7[BANK0 ] unsigned char 
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;		None
  5041 ;; Return value:  Size  Location     Type
  5042 ;;                  3    3[BANK0 ] float 
  5043 ;; Registers used:
  5044 ;;		wreg, status,2, status,0
  5045 ;; Tracked objects:
  5046 ;;		On entry : 300/0
  5047 ;;		On exit  : 300/0
  5048 ;;		Unchanged: 0/0
  5049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5050 ;;      Params:         0       5       0       0       0
  5051 ;;      Locals:         0       0       0       0       0
  5052 ;;      Temps:          0       3       0       0       0
  5053 ;;      Totals:         0       8       0       0       0
  5054 ;;Total ram usage:        8 bytes
  5055 ;; Hardware stack levels used:    1
  5056 ;; Hardware stack levels required when called:    5
  5057 ;; This function calls:
  5058 ;;		Nothing
  5059 ;; This function is called by:
  5060 ;;		___ftmul
  5061 ;;		___lwtoft
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           
  5066                           ;psect for function ___ftpack
  5067  1008                     ___ftpack:	
  5068                           
  5069                           ;incstack = 0
  5070                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5071  1008  0826               	movf	___ftpack@exp,w
  5072  1009  1903               	btfsc	3,2
  5073  100A  2810               	goto	l1097
  5074  100B  0825               	movf	___ftpack@arg+2,w
  5075  100C  0424               	iorwf	___ftpack@arg+1,w
  5076  100D  0423               	iorwf	___ftpack@arg,w
  5077  100E  1D03               	skipz
  5078  100F  2819               	goto	l3358
  5079  1010                     l1097:	
  5080  1010  01A3               	clrf	?___ftpack
  5081  1011  01A4               	clrf	?___ftpack+1
  5082  1012  01A5               	clrf	?___ftpack+2
  5083  1013  0008               	return
  5084  1014                     l3356:	
  5085  1014  0AA6               	incf	___ftpack@exp,f
  5086  1015  1003               	clrc
  5087  1016  0CA5               	rrf	___ftpack@arg+2,f
  5088  1017  0CA4               	rrf	___ftpack@arg+1,f
  5089  1018  0CA3               	rrf	___ftpack@arg,f
  5090  1019                     l3358:	
  5091  1019  30FE               	movlw	254
  5092  101A  0525               	andwf	___ftpack@arg+2,w
  5093  101B  1903               	btfsc	3,2
  5094  101C  2828               	goto	l3362
  5095  101D  2814               	goto	l3356
  5096  101E                     l3360:	
  5097  101E  0AA6               	incf	___ftpack@exp,f
  5098  101F  0AA3               	incf	___ftpack@arg,f
  5099  1020  1903               	skipnz
  5100  1021  0AA4               	incf	___ftpack@arg+1,f
  5101  1022  1903               	skipnz
  5102  1023  0AA5               	incf	___ftpack@arg+2,f
  5103  1024  1003               	clrc
  5104  1025  0CA5               	rrf	___ftpack@arg+2,f
  5105  1026  0CA4               	rrf	___ftpack@arg+1,f
  5106  1027  0CA3               	rrf	___ftpack@arg,f
  5107  1028                     l3362:	
  5108  1028  30FF               	movlw	255
  5109  1029  0525               	andwf	___ftpack@arg+2,w
  5110  102A  1903               	btfsc	3,2
  5111  102B  2836               	goto	l3366
  5112  102C  281E               	goto	l3360
  5113  102D                     l3368:	
  5114  102D  3002               	movlw	2
  5115  102E  0226               	subwf	___ftpack@exp,w
  5116  102F  1C03               	btfss	3,0
  5117  1030  2838               	goto	l1109
  5118  1031  03A6               	decf	___ftpack@exp,f
  5119  1032  1003               	clrc
  5120  1033  0DA3               	rlf	___ftpack@arg,f
  5121  1034  0DA4               	rlf	___ftpack@arg+1,f
  5122  1035  0DA5               	rlf	___ftpack@arg+2,f
  5123  1036                     l3366:	
  5124  1036  1FA4               	btfss	___ftpack@arg+1,7
  5125  1037  282D               	goto	l3368
  5126  1038                     l1109:	
  5127  1038  1C26               	btfss	___ftpack@exp,0
  5128  1039  13A4               	bcf	___ftpack@arg+1,7
  5129  103A  1003               	clrc
  5130  103B  0CA6               	rrf	___ftpack@exp,f
  5131  103C  0826               	movf	___ftpack@exp,w
  5132  103D  00AA               	movwf	??___ftpack+2
  5133  103E  01A9               	clrf	??___ftpack+1
  5134  103F  01A8               	clrf	??___ftpack
  5135  1040  0828               	movf	??___ftpack,w
  5136  1041  04A3               	iorwf	___ftpack@arg,f
  5137  1042  0829               	movf	??___ftpack+1,w
  5138  1043  04A4               	iorwf	___ftpack@arg+1,f
  5139  1044  082A               	movf	??___ftpack+2,w
  5140  1045  04A5               	iorwf	___ftpack@arg+2,f
  5141  1046  0827               	movf	___ftpack@sign,w
  5142  1047  1D03               	btfss	3,2
  5143  1048  17A5               	bsf	___ftpack@arg+2,7
  5144  1049  0008               	return
  5145  104A                     __end_of___ftpack:	
  5146                           
  5147                           	psect	text18
  5148  1DAF                     __ptext18:	
  5149 ;; *************** function ___ltmod *****************
  5150 ;; Defined at:
  5151 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ltmod.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  divisor         3    3[BANK0 ] unsigned um
  5154 ;;  dividend        3    6[BANK0 ] unsigned um
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;  counter         1    9[BANK0 ] unsigned char 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  3    3[BANK0 ] unsigned um
  5159 ;; Registers used:
  5160 ;;		wreg, status,2, status,0
  5161 ;; Tracked objects:
  5162 ;;		On entry : 300/0
  5163 ;;		On exit  : 300/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5166 ;;      Params:         0       6       0       0       0
  5167 ;;      Locals:         0       1       0       0       0
  5168 ;;      Temps:          0       0       0       0       0
  5169 ;;      Totals:         0       7       0       0       0
  5170 ;;Total ram usage:        7 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    5
  5173 ;; This function calls:
  5174 ;;		Nothing
  5175 ;; This function is called by:
  5176 ;;		_main
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           
  5181                           ;psect for function ___ltmod
  5182  1DAF                     ___ltmod:	
  5183                           
  5184                           ;incstack = 0
  5185                           ; Regs used in ___ltmod: [wreg+status,2+status,0]
  5186  1DAF  0825               	movf	___ltmod@divisor+2,w
  5187  1DB0  0424               	iorwf	___ltmod@divisor+1,w
  5188  1DB1  0423               	iorwf	___ltmod@divisor,w
  5189  1DB2  1903               	skipnz
  5190  1DB3  2DD9               	goto	l4732
  5191  1DB4  01A9               	clrf	___ltmod@counter
  5192  1DB5                     L23:	
  5193  1DB5  0AA9               	incf	___ltmod@counter,f
  5194  1DB6  1BA5               	btfsc	___ltmod@divisor+2,7
  5195  1DB7  2DBD               	goto	l4724
  5196  1DB8  1003               	clrc
  5197  1DB9  0DA3               	rlf	___ltmod@divisor,f
  5198  1DBA  0DA4               	rlf	___ltmod@divisor+1,f
  5199  1DBB  0DA5               	rlf	___ltmod@divisor+2,f
  5200  1DBC  2DB5               	goto	L23
  5201  1DBD                     l4724:	
  5202  1DBD  0825               	movf	___ltmod@divisor+2,w
  5203  1DBE  0228               	subwf	___ltmod@dividend+2,w
  5204  1DBF  1D03               	skipz
  5205  1DC0  2DC7               	goto	u6285
  5206  1DC1  0824               	movf	___ltmod@divisor+1,w
  5207  1DC2  0227               	subwf	___ltmod@dividend+1,w
  5208  1DC3  1D03               	skipz
  5209  1DC4  2DC7               	goto	u6285
  5210  1DC5  0823               	movf	___ltmod@divisor,w
  5211  1DC6  0226               	subwf	___ltmod@dividend,w
  5212  1DC7                     u6285:	
  5213  1DC7  1C03               	skipc
  5214  1DC8  2DD4               	goto	L24
  5215  1DC9  0823               	movf	___ltmod@divisor,w
  5216  1DCA  02A6               	subwf	___ltmod@dividend,f
  5217  1DCB  0824               	movf	___ltmod@divisor+1,w
  5218  1DCC  1C03               	skipc
  5219  1DCD  0F24               	incfsz	___ltmod@divisor+1,w
  5220  1DCE  02A7               	subwf	___ltmod@dividend+1,f
  5221  1DCF  0825               	movf	___ltmod@divisor+2,w
  5222  1DD0  1C03               	skipc
  5223  1DD1  0A25               	incf	___ltmod@divisor+2,w
  5224  1DD2  02A8               	subwf	___ltmod@dividend+2,f
  5225  1DD3  1003               	clrc
  5226  1DD4                     L24:	
  5227  1DD4  0CA5               	rrf	___ltmod@divisor+2,f
  5228  1DD5  0CA4               	rrf	___ltmod@divisor+1,f
  5229  1DD6  0CA3               	rrf	___ltmod@divisor,f
  5230  1DD7  0BA9               	decfsz	___ltmod@counter,f
  5231  1DD8  2DBD               	goto	l4724
  5232  1DD9                     l4732:	
  5233  1DD9  0826               	movf	___ltmod@dividend,w
  5234  1DDA  00A3               	movwf	?___ltmod
  5235  1DDB  0827               	movf	___ltmod@dividend+1,w
  5236  1DDC  00A4               	movwf	?___ltmod+1
  5237  1DDD  0828               	movf	___ltmod@dividend+2,w
  5238  1DDE  00A5               	movwf	?___ltmod+2
  5239  1DDF  0008               	return
  5240  1DE0                     __end_of___ltmod:	
  5241                           
  5242                           	psect	text19
  5243  1DE0                     __ptext19:	
  5244 ;; *************** function ___ltdiv *****************
  5245 ;; Defined at:
  5246 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ltdiv.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  divisor         3    3[BANK0 ] unsigned um
  5249 ;;  dividend        3    6[BANK0 ] unsigned um
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;  quotient        3    9[BANK0 ] unsigned um
  5252 ;;  counter         1   12[BANK0 ] unsigned char 
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  3    3[BANK0 ] unsigned um
  5255 ;; Registers used:
  5256 ;;		wreg, status,2, status,0
  5257 ;; Tracked objects:
  5258 ;;		On entry : 300/0
  5259 ;;		On exit  : 300/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5262 ;;      Params:         0       6       0       0       0
  5263 ;;      Locals:         0       4       0       0       0
  5264 ;;      Temps:          0       0       0       0       0
  5265 ;;      Totals:         0      10       0       0       0
  5266 ;;Total ram usage:       10 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:    5
  5269 ;; This function calls:
  5270 ;;		Nothing
  5271 ;; This function is called by:
  5272 ;;		_main
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           
  5277                           ;psect for function ___ltdiv
  5278  1DE0                     ___ltdiv:	
  5279                           
  5280                           ;incstack = 0
  5281                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  5282  1DE0  01A9               	clrf	___ltdiv@quotient
  5283  1DE1  01AA               	clrf	___ltdiv@quotient+1
  5284  1DE2  01AB               	clrf	___ltdiv@quotient+2
  5285  1DE3  0825               	movf	___ltdiv@divisor+2,w
  5286  1DE4  0424               	iorwf	___ltdiv@divisor+1,w
  5287  1DE5  0423               	iorwf	___ltdiv@divisor,w
  5288  1DE6  1903               	skipnz
  5289  1DE7  2E12               	goto	l4712
  5290  1DE8  01AC               	clrf	___ltdiv@counter
  5291  1DE9                     L25:	
  5292  1DE9  0AAC               	incf	___ltdiv@counter,f
  5293  1DEA  1BA5               	btfsc	___ltdiv@divisor+2,7
  5294  1DEB  2DF1               	goto	l4700
  5295  1DEC  1003               	clrc
  5296  1DED  0DA3               	rlf	___ltdiv@divisor,f
  5297  1DEE  0DA4               	rlf	___ltdiv@divisor+1,f
  5298  1DEF  0DA5               	rlf	___ltdiv@divisor+2,f
  5299  1DF0  2DE9               	goto	L25
  5300  1DF1                     l4700:	
  5301  1DF1  1003               	clrc
  5302  1DF2  0DA9               	rlf	___ltdiv@quotient,f
  5303  1DF3  0DAA               	rlf	___ltdiv@quotient+1,f
  5304  1DF4  0DAB               	rlf	___ltdiv@quotient+2,f
  5305  1DF5  0825               	movf	___ltdiv@divisor+2,w
  5306  1DF6  0228               	subwf	___ltdiv@dividend+2,w
  5307  1DF7  1D03               	skipz
  5308  1DF8  2DFF               	goto	u6245
  5309  1DF9  0824               	movf	___ltdiv@divisor+1,w
  5310  1DFA  0227               	subwf	___ltdiv@dividend+1,w
  5311  1DFB  1D03               	skipz
  5312  1DFC  2DFF               	goto	u6245
  5313  1DFD  0823               	movf	___ltdiv@divisor,w
  5314  1DFE  0226               	subwf	___ltdiv@dividend,w
  5315  1DFF                     u6245:	
  5316  1DFF  1C03               	skipc
  5317  1E00  2E0D               	goto	L26
  5318  1E01  0823               	movf	___ltdiv@divisor,w
  5319  1E02  02A6               	subwf	___ltdiv@dividend,f
  5320  1E03  0824               	movf	___ltdiv@divisor+1,w
  5321  1E04  1C03               	skipc
  5322  1E05  0F24               	incfsz	___ltdiv@divisor+1,w
  5323  1E06  02A7               	subwf	___ltdiv@dividend+1,f
  5324  1E07  0825               	movf	___ltdiv@divisor+2,w
  5325  1E08  1C03               	skipc
  5326  1E09  0A25               	incf	___ltdiv@divisor+2,w
  5327  1E0A  02A8               	subwf	___ltdiv@dividend+2,f
  5328  1E0B  1429               	bsf	___ltdiv@quotient,0
  5329  1E0C  1003               	clrc
  5330  1E0D                     L26:	
  5331  1E0D  0CA5               	rrf	___ltdiv@divisor+2,f
  5332  1E0E  0CA4               	rrf	___ltdiv@divisor+1,f
  5333  1E0F  0CA3               	rrf	___ltdiv@divisor,f
  5334  1E10  0BAC               	decfsz	___ltdiv@counter,f
  5335  1E11  2DF1               	goto	l4700
  5336  1E12                     l4712:	
  5337  1E12  0829               	movf	___ltdiv@quotient,w
  5338  1E13  00A3               	movwf	?___ltdiv
  5339  1E14  082A               	movf	___ltdiv@quotient+1,w
  5340  1E15  00A4               	movwf	?___ltdiv+1
  5341  1E16  082B               	movf	___ltdiv@quotient+2,w
  5342  1E17  00A5               	movwf	?___ltdiv+2
  5343  1E18  0008               	return
  5344  1E19                     __end_of___ltdiv:	
  5345                           
  5346                           	psect	text20
  5347  1D22                     __ptext20:	
  5348 ;; *************** function _Timer1_Init *****************
  5349 ;; Defined at:
  5350 ;;		line 4 in file "timer1.h"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;		None
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;		None
  5355 ;; Return value:  Size  Location     Type
  5356 ;;		None               void
  5357 ;; Registers used:
  5358 ;;		wreg
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 300/100
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5364 ;;      Params:         0       0       0       0       0
  5365 ;;      Locals:         0       0       0       0       0
  5366 ;;      Temps:          0       0       0       0       0
  5367 ;;      Totals:         0       0       0       0       0
  5368 ;;Total ram usage:        0 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    5
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_main
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           
  5379                           ;psect for function _Timer1_Init
  5380  1D22                     _Timer1_Init:	
  5381                           
  5382                           ;timer1.h: 6: T1CKPS1 = 0;
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in _Timer1_Init: [wreg]
  5386  1D22  1283               	bcf	3,5	;RP0=0, select bank0
  5387  1D23  1303               	bcf	3,6	;RP1=0, select bank0
  5388  1D24  1290               	bcf	16,5	;volatile
  5389                           
  5390                           ;timer1.h: 7: T1CKPS0 = 1;
  5391  1D25  1610               	bsf	16,4	;volatile
  5392                           
  5393                           ;timer1.h: 8: TMR1CS = 0;
  5394  1D26  1090               	bcf	16,1	;volatile
  5395                           
  5396                           ;timer1.h: 9: TMR1ON = 1;
  5397  1D27  1410               	bsf	16,0	;volatile
  5398                           
  5399                           ;timer1.h: 10: T1OSCEN = 0;
  5400  1D28  1190               	bcf	16,3	;volatile
  5401                           
  5402                           ;timer1.h: 11: TMR1L = 0xB0;
  5403  1D29  30B0               	movlw	176
  5404  1D2A  008E               	movwf	14	;volatile
  5405                           
  5406                           ;timer1.h: 12: TMR1H = 60;
  5407  1D2B  303C               	movlw	60
  5408  1D2C  008F               	movwf	15	;volatile
  5409                           
  5410                           ;timer1.h: 13: TMR1IE = 1;
  5411  1D2D  1683               	bsf	3,5	;RP0=1, select bank1
  5412  1D2E  140C               	bsf	12,0	;volatile
  5413  1D2F  0008               	return
  5414  1D30                     __end_of_Timer1_Init:	
  5415                           
  5416                           	psect	text21
  5417  1D5A                     __ptext21:	
  5418 ;; *************** function _Setup_IOports *****************
  5419 ;; Defined at:
  5420 ;;		line 56 in file "setup.h"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;		None
  5423 ;; Auto vars:     Size  Location     Type
  5424 ;;		None
  5425 ;; Return value:  Size  Location     Type
  5426 ;;		None               void
  5427 ;; Registers used:
  5428 ;;		wreg, status,2
  5429 ;; Tracked objects:
  5430 ;;		On entry : B00/0
  5431 ;;		On exit  : B00/0
  5432 ;;		Unchanged: 800/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5434 ;;      Params:         0       0       0       0       0
  5435 ;;      Locals:         0       0       0       0       0
  5436 ;;      Temps:          0       0       0       0       0
  5437 ;;      Totals:         0       0       0       0       0
  5438 ;;Total ram usage:        0 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    5
  5441 ;; This function calls:
  5442 ;;		Nothing
  5443 ;; This function is called by:
  5444 ;;		_main
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _Setup_IOports
  5450  1D5A                     _Setup_IOports:	
  5451                           
  5452                           ;setup.h: 58: TRISA = 0b11111111;
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _Setup_IOports: [wreg+status,2]
  5456  1D5A  30FF               	movlw	255
  5457  1D5B  1683               	bsf	3,5	;RP0=1, select bank1
  5458  1D5C  0085               	movwf	5	;volatile
  5459                           
  5460                           ;setup.h: 59: PORTA = 0b00000000;
  5461  1D5D  1283               	bcf	3,5	;RP0=0, select bank0
  5462  1D5E  0185               	clrf	5	;volatile
  5463                           
  5464                           ;setup.h: 61: TRISB = 0b11000000;
  5465  1D5F  30C0               	movlw	192
  5466  1D60  1683               	bsf	3,5	;RP0=1, select bank1
  5467  1D61  0086               	movwf	6	;volatile
  5468                           
  5469                           ;setup.h: 62: PORTB = 0b00000000;
  5470  1D62  1283               	bcf	3,5	;RP0=0, select bank0
  5471  1D63  0186               	clrf	6	;volatile
  5472                           
  5473                           ;setup.h: 64: TRISC = 0b10000000;
  5474  1D64  3080               	movlw	128
  5475  1D65  1683               	bsf	3,5	;RP0=1, select bank1
  5476  1D66  0087               	movwf	7	;volatile
  5477                           
  5478                           ;setup.h: 65: PORTC = 0b00000000;
  5479  1D67  1283               	bcf	3,5	;RP0=0, select bank0
  5480  1D68  0187               	clrf	7	;volatile
  5481                           
  5482                           ;setup.h: 67: TRISD = 0b11001100;
  5483  1D69  30CC               	movlw	204
  5484  1D6A  1683               	bsf	3,5	;RP0=1, select bank1
  5485  1D6B  0088               	movwf	8	;volatile
  5486                           
  5487                           ;setup.h: 68: PORTD = 0b00000000;
  5488  1D6C  1283               	bcf	3,5	;RP0=0, select bank0
  5489  1D6D  0188               	clrf	8	;volatile
  5490                           
  5491                           ;setup.h: 70: TRISE = 0b10000000;
  5492  1D6E  3080               	movlw	128
  5493  1D6F  1683               	bsf	3,5	;RP0=1, select bank1
  5494  1D70  0089               	movwf	9	;volatile
  5495                           
  5496                           ;setup.h: 71: PORTE = 0b00000000;
  5497  1D71  1283               	bcf	3,5	;RP0=0, select bank0
  5498  1D72  0189               	clrf	9	;volatile
  5499  1D73  0008               	return
  5500  1D74                     __end_of_Setup_IOports:	
  5501                           
  5502                           	psect	text23
  5503  1D41                     __ptext23:	
  5504 ;; *************** function _Serial_NewLine *****************
  5505 ;; Defined at:
  5506 ;;		line 37 in file "serialv2.h"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;		None
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;		None
  5511 ;; Return value:  Size  Location     Type
  5512 ;;		None               void
  5513 ;; Registers used:
  5514 ;;		wreg
  5515 ;; Tracked objects:
  5516 ;;		On entry : 300/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5520 ;;      Params:         0       0       0       0       0
  5521 ;;      Locals:         0       0       0       0       0
  5522 ;;      Temps:          0       1       0       0       0
  5523 ;;      Totals:         0       1       0       0       0
  5524 ;;Total ram usage:        1 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    5
  5527 ;; This function calls:
  5528 ;;		Nothing
  5529 ;; This function is called by:
  5530 ;;		_main
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           
  5535                           ;psect for function _Serial_NewLine
  5536  1D41                     _Serial_NewLine:	
  5537  1D41                     l280:	
  5538                           ;serialv2.h: 38: while(!TXIF);
  5539                           
  5540                           ;incstack = 0
  5541                           ; Regs used in _Serial_NewLine: [wreg]
  5542                           
  5543  1D41  1E0C               	btfss	12,4	;volatile
  5544  1D42  2D41               	goto	l280
  5545                           
  5546                           ;serialv2.h: 39: TXREG = 13;
  5547  1D43  300D               	movlw	13
  5548  1D44  0099               	movwf	25	;volatile
  5549                           
  5550                           ;serialv2.h: 40: _delay((unsigned long)((1)*(4000000/4000.0)));
  5551  1D45  30F9               	movlw	249
  5552  1D46  00A3               	movwf	??_Serial_NewLine
  5553  1D47                     u6607:	
  5554  1D47  0000               	nop
  5555  1D48  0BA3               	decfsz	??_Serial_NewLine,f
  5556  1D49  2D47               	goto	u6607
  5557  1D4A  2D4B               	nop2	;nop
  5558  1D4B  0000               	nop
  5559  1D4C                     l283:	
  5560                           ;serialv2.h: 41: while(!TXIF);
  5561                           
  5562  1D4C  1283               	bcf	3,5	;RP0=0, select bank0
  5563  1D4D  1303               	bcf	3,6	;RP1=0, select bank0
  5564  1D4E  1E0C               	btfss	12,4	;volatile
  5565  1D4F  2D4C               	goto	l283
  5566                           
  5567                           ;serialv2.h: 42: TXREG = 10;
  5568  1D50  300A               	movlw	10
  5569  1D51  0099               	movwf	25	;volatile
  5570                           
  5571                           ;serialv2.h: 43: _delay((unsigned long)((1)*(4000000/4000.0)));
  5572  1D52  30F9               	movlw	249
  5573  1D53  00A3               	movwf	??_Serial_NewLine
  5574  1D54                     u6617:	
  5575  1D54  0000               	nop
  5576  1D55  0BA3               	decfsz	??_Serial_NewLine,f
  5577  1D56  2D54               	goto	u6617
  5578  1D57  2D58               	nop2	;nop
  5579  1D58  0000               	nop
  5580  1D59  0008               	return
  5581  1D5A                     __end_of_Serial_NewLine:	
  5582                           
  5583                           	psect	text24
  5584  1D74                     __ptext24:	
  5585 ;; *************** function _Serial_Init *****************
  5586 ;; Defined at:
  5587 ;;		line 10 in file "serialv2.h"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;		None
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;		None               void
  5594 ;; Registers used:
  5595 ;;		wreg
  5596 ;; Tracked objects:
  5597 ;;		On entry : 300/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5601 ;;      Params:         0       0       0       0       0
  5602 ;;      Locals:         0       0       0       0       0
  5603 ;;      Temps:          0       3       0       0       0
  5604 ;;      Totals:         0       3       0       0       0
  5605 ;;Total ram usage:        3 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    5
  5608 ;; This function calls:
  5609 ;;		Nothing
  5610 ;; This function is called by:
  5611 ;;		_main
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           
  5616                           ;psect for function _Serial_Init
  5617  1D74                     _Serial_Init:	
  5618                           
  5619                           ;serialv2.h: 13: SPEN = 1;
  5620                           
  5621                           ;incstack = 0
  5622                           ; Regs used in _Serial_Init: [wreg]
  5623  1D74  1798               	bsf	24,7	;volatile
  5624                           
  5625                           ;serialv2.h: 14: RX9 = 0;
  5626  1D75  1318               	bcf	24,6	;volatile
  5627                           
  5628                           ;serialv2.h: 15: CREN = 1;
  5629  1D76  1618               	bsf	24,4	;volatile
  5630                           
  5631                           ;serialv2.h: 16: TX9 = 0;
  5632  1D77  1683               	bsf	3,5	;RP0=1, select bank1
  5633  1D78  1318               	bcf	24,6	;volatile
  5634                           
  5635                           ;serialv2.h: 17: TXEN = 1;
  5636  1D79  1698               	bsf	24,5	;volatile
  5637                           
  5638                           ;serialv2.h: 18: SYNC = 0;
  5639  1D7A  1218               	bcf	24,4	;volatile
  5640                           
  5641                           ;serialv2.h: 19: BRGH = 1;
  5642  1D7B  1518               	bsf	24,2	;volatile
  5643                           
  5644                           ;serialv2.h: 20: SPBRG = 129;
  5645  1D7C  3081               	movlw	129
  5646  1D7D  0099               	movwf	25	;volatile
  5647                           
  5648                           ;serialv2.h: 21: RCIE = 1;
  5649  1D7E  168C               	bsf	12,5	;volatile
  5650                           
  5651                           ;serialv2.h: 22: TXIE = 0;
  5652  1D7F  120C               	bcf	12,4	;volatile
  5653                           
  5654                           ;serialv2.h: 23: ADDEN = 0;
  5655  1D80  1283               	bcf	3,5	;RP0=0, select bank0
  5656  1D81  1198               	bcf	24,3	;volatile
  5657                           
  5658                           ;serialv2.h: 24: _delay((unsigned long)((500)*(4000000/4000.0)));
  5659  1D82  3003               	movlw	3
  5660  1D83  00A5               	movwf	??_Serial_Init+2
  5661  1D84  308A               	movlw	138
  5662  1D85  00A4               	movwf	??_Serial_Init+1
  5663  1D86  3056               	movlw	86
  5664  1D87  00A3               	movwf	??_Serial_Init
  5665  1D88                     u6627:	
  5666  1D88  0BA3               	decfsz	??_Serial_Init,f
  5667  1D89  2D88               	goto	u6627
  5668  1D8A  0BA4               	decfsz	??_Serial_Init+1,f
  5669  1D8B  2D88               	goto	u6627
  5670  1D8C  0BA5               	decfsz	??_Serial_Init+2,f
  5671  1D8D  2D88               	goto	u6627
  5672  1D8E  2D8F               	nop2
  5673  1D8F  0008               	return
  5674  1D90                     __end_of_Serial_Init:	
  5675                           
  5676                           	psect	text31
  5677  1273                     __ptext31:	
  5678 ;; *************** function _CheckMode *****************
  5679 ;; Defined at:
  5680 ;;		line 324 in file "Automated Solar Panel Orientation Setter.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  pressedKey      1   20[BANK0 ] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;		None               void
  5687 ;; Registers used:
  5688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 300/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5694 ;;      Params:         0       0       0       0       0
  5695 ;;      Locals:         0       1       0       0       0
  5696 ;;      Temps:          0       0       0       0       0
  5697 ;;      Totals:         0       1       0       0       0
  5698 ;;Total ram usage:        1 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    7
  5701 ;; This function calls:
  5702 ;;		_CheckKeyPad
  5703 ;;		_Serial_Print
  5704 ;;		_Serial_Println_Int
  5705 ;;		_nop
  5706 ;; This function is called by:
  5707 ;;		_main
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           
  5712                           ;psect for function _CheckMode
  5713  1273                     _CheckMode:	
  5714                           
  5715                           ;Automated Solar Panel Orientation Setter.c: 325: char pressedKey;
  5716                           ;Automated Solar Panel Orientation Setter.c: 326: pressedKey = CheckKeyPad();
  5717                           
  5718                           ;incstack = 0
  5719                           ; Regs used in _CheckMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5720  1273  2306  160A  118A   	fcall	_CheckKeyPad
  5721  1276  00B4               	movwf	CheckMode@pressedKey
  5722                           
  5723                           ;Automated Solar Panel Orientation Setter.c: 328: if( pressedKey=='*' ){
  5724  1277  3A2A               	xorlw	42
  5725  1278  1D03               	btfss	3,2
  5726  1279  0008               	return
  5727                           
  5728                           ;Automated Solar Panel Orientation Setter.c: 329: currentMode++;
  5729  127A  0AD0               	incf	_currentMode,f
  5730  127B  1903               	skipnz
  5731  127C  0AD1               	incf	_currentMode+1,f
  5732                           
  5733                           ;Automated Solar Panel Orientation Setter.c: 330: if (currentMode>3) currentMode = 1;
  5734  127D  3000               	movlw	0
  5735  127E  0251               	subwf	_currentMode+1,w
  5736  127F  3004               	movlw	4
  5737  1280  1903               	skipnz
  5738  1281  0250               	subwf	_currentMode,w
  5739  1282  1C03               	skipc
  5740  1283  2A87               	goto	l4596
  5741  1284  01D0               	clrf	_currentMode
  5742  1285  0AD0               	incf	_currentMode,f
  5743  1286  01D1               	clrf	_currentMode+1
  5744  1287                     l4596:	
  5745                           
  5746                           ;Automated Solar Panel Orientation Setter.c: 331: state = currentMode;
  5747  1287  0850               	movf	_currentMode,w
  5748  1288  00E0               	movwf	_state
  5749                           
  5750                           ;Automated Solar Panel Orientation Setter.c: 333: RC1 = 1;
  5751  1289  1487               	bsf	7,1	;volatile
  5752                           
  5753                           ;Automated Solar Panel Orientation Setter.c: 334: Serial_Print("Switched to Mode : ");
  5754  128A  301F               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  5755  128B  24A6  160A  118A   	fcall	_Serial_Print
  5756                           
  5757                           ;Automated Solar Panel Orientation Setter.c: 335: Serial_Println_Int((int)state);
  5758  128E  0860               	movf	_state,w
  5759  128F  00B1               	movwf	Serial_Println_Int@val
  5760  1290  01B2               	clrf	Serial_Println_Int@val+1
  5761  1291  25E1  160A  118A   	fcall	_Serial_Println_Int
  5762                           
  5763                           ;Automated Solar Panel Orientation Setter.c: 336: RC1 = 0;
  5764  1294  1283               	bcf	3,5	;RP0=0, select bank0
  5765  1295  1303               	bcf	3,6	;RP1=0, select bank0
  5766  1296  1087               	bcf	7,1	;volatile
  5767                           
  5768                           ;Automated Solar Panel Orientation Setter.c: 338: ; nop();nop();nop();nop();nop();nop();
      +                          nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop(
      +                          );nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();no
      +                          p();;
  5769  1297  2301  160A  118A   	fcall	_nop
  5770  129A  2301  160A  118A   	fcall	_nop
  5771  129D  2301  160A  118A   	fcall	_nop
  5772  12A0  2301  160A  118A   	fcall	_nop
  5773  12A3  2301  160A  118A   	fcall	_nop
  5774  12A6  2301  160A  118A   	fcall	_nop
  5775  12A9  2301  160A  118A   	fcall	_nop
  5776  12AC  2301  160A  118A   	fcall	_nop
  5777  12AF  2301  160A  118A   	fcall	_nop
  5778  12B2  2301  160A  118A   	fcall	_nop
  5779  12B5  2301  160A  118A   	fcall	_nop
  5780  12B8  2301  160A  118A   	fcall	_nop
  5781  12BB  2301  160A  118A   	fcall	_nop
  5782  12BE  2301  160A  118A   	fcall	_nop
  5783  12C1  2301  160A  118A   	fcall	_nop
  5784  12C4  2301  160A  118A   	fcall	_nop
  5785  12C7  2301  160A  118A   	fcall	_nop
  5786  12CA  2301  160A  118A   	fcall	_nop
  5787  12CD  2301  160A  118A   	fcall	_nop
  5788  12D0  2301  160A  118A   	fcall	_nop
  5789  12D3  2301  160A  118A   	fcall	_nop
  5790  12D6  2301  160A  118A   	fcall	_nop
  5791  12D9  2301  160A  118A   	fcall	_nop
  5792  12DC  2301  160A  118A   	fcall	_nop
  5793  12DF  2301  160A  118A   	fcall	_nop
  5794  12E2  2301  160A  118A   	fcall	_nop
  5795  12E5  2301  160A  118A   	fcall	_nop
  5796  12E8  2301  160A  118A   	fcall	_nop
  5797  12EB  2301  160A  118A   	fcall	_nop
  5798  12EE  2301  160A  118A   	fcall	_nop
  5799  12F1  2301  160A  118A   	fcall	_nop
  5800  12F4  2301  160A  118A   	fcall	_nop
  5801  12F7  2301  160A  118A   	fcall	_nop
  5802  12FA  2301  160A  118A   	fcall	_nop
  5803  12FD  2301  160A  118A   	fcall	_nop
  5804  1300  2B01               	ljmp	l3480
  5805  1301                     __end_of_CheckMode:	
  5806  1301                     __ptext32:	
  5807 ;; *************** function _nop *****************
  5808 ;; Defined at:
  5809 ;;		line 50 in file "setup.h"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;		None
  5814 ;; Return value:  Size  Location     Type
  5815 ;;		None               void
  5816 ;; Registers used:
  5817 ;;		wreg
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/200
  5820 ;;		On exit  : 300/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5823 ;;      Params:         0       0       0       0       0
  5824 ;;      Locals:         0       0       0       0       0
  5825 ;;      Temps:          0       0       0       0       0
  5826 ;;      Totals:         0       0       0       0       0
  5827 ;;Total ram usage:        0 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    5
  5830 ;; This function calls:
  5831 ;;		Nothing
  5832 ;; This function is called by:
  5833 ;;		_main
  5834 ;;		_CheckMode
  5835 ;; This function uses a non-reentrant model
  5836 ;;
  5837                           
  5838                           
  5839                           ;psect for function _nop
  5840  1301                     _nop:	
  5841  1301                     l3480:	
  5842                           ;incstack = 0
  5843                           ; Regs used in _nop: [wreg]
  5844                           
  5845                           
  5846                           ;setup.h: 51: Nop = !Nop;
  5847  1301  3002               	movlw	(0+1) shl (_Nop& (0+7))
  5848  1302  1283               	bcf	3,5	;RP0=0, select bank0
  5849  1303  1303               	bcf	3,6	;RP1=0, select bank0
  5850  1304  06E6               	xorwf	_Nop/(0+8),f
  5851  1305  0008               	return
  5852  1306                     __end_of_nop:	
  5853  1306                     __ptext37:	
  5854 ;; *************** function _CheckKeyPad *****************
  5855 ;; Defined at:
  5856 ;;		line 355 in file "Automated Solar Panel Orientation Setter.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;		None
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  rowNo           2   10[BANK0 ] int 
  5861 ;;  colomnNo        2    8[BANK0 ] int 
  5862 ;;  charactor       1    7[BANK0 ] unsigned char 
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  1    wreg      unsigned char 
  5865 ;; Registers used:
  5866 ;;		wreg, status,2, status,0, pclath, cstack
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 300/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5872 ;;      Params:         0       0       0       0       0
  5873 ;;      Locals:         0       5       0       0       0
  5874 ;;      Temps:          0       0       0       0       0
  5875 ;;      Totals:         0       5       0       0       0
  5876 ;;Total ram usage:        5 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    6
  5879 ;; This function calls:
  5880 ;;		_ColomnNo
  5881 ;;		_RowNo
  5882 ;; This function is called by:
  5883 ;;		_CheckMode
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           
  5888                           ;psect for function _CheckKeyPad
  5889  1306                     _CheckKeyPad:	
  5890                           
  5891                           ;Automated Solar Panel Orientation Setter.c: 356: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  5892                           
  5893                           ;incstack = 0
  5894                           ; Regs used in _CheckKeyPad: [wreg+status,2+status,0+pclath+cstack]
  5895  1306  1283               	bcf	3,5	;RP0=0, select bank0
  5896  1307  1303               	bcf	3,6	;RP1=0, select bank0
  5897  1308  1207               	bcf	7,4	;volatile
  5898  1309  1288               	bcf	8,5	;volatile
  5899  130A  1287               	bcf	7,5	;volatile
  5900  130B  1208               	bcf	8,4	;volatile
  5901                           
  5902                           ;Automated Solar Panel Orientation Setter.c: 357: char charactor = '$';
  5903  130C  3024               	movlw	36
  5904  130D  00A7               	movwf	CheckKeyPad@charactor
  5905                           
  5906                           ;Automated Solar Panel Orientation Setter.c: 359: int rowNo = RowNo();
  5907  130E  248D  160A  118A   	fcall	_RowNo
  5908  1311  0824               	movf	?_RowNo+1,w
  5909  1312  00AB               	movwf	CheckKeyPad@rowNo+1
  5910  1313  0823               	movf	?_RowNo,w
  5911  1314  00AA               	movwf	CheckKeyPad@rowNo
  5912                           
  5913                           ;Automated Solar Panel Orientation Setter.c: 360: if (rowNo != 0){
  5914  1315  042B               	iorwf	CheckKeyPad@rowNo+1,w
  5915  1316  1903               	btfsc	3,2
  5916  1317  2BE1               	goto	l3736
  5917                           
  5918                           ;Automated Solar Panel Orientation Setter.c: 361: colomnNo = ColomnNo(rowNo);
  5919  1318  082B               	movf	CheckKeyPad@rowNo+1,w
  5920  1319  00A4               	movwf	ColomnNo@rowNo+1
  5921  131A  082A               	movf	CheckKeyPad@rowNo,w
  5922  131B  00A3               	movwf	ColomnNo@rowNo
  5923  131C  2401  160A  118A   	fcall	_ColomnNo
  5924  131F  0824               	movf	?_ColomnNo+1,w
  5925  1320  00A9               	movwf	CheckKeyPad@colomnNo+1
  5926  1321  0823               	movf	?_ColomnNo,w
  5927  1322  00A8               	movwf	CheckKeyPad@colomnNo
  5928                           
  5929                           ;Automated Solar Panel Orientation Setter.c: 362: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  5930  1323  1207               	bcf	7,4	;volatile
  5931  1324  1288               	bcf	8,5	;volatile
  5932  1325  1287               	bcf	7,5	;volatile
  5933  1326  1208               	bcf	8,4	;volatile
  5934                           
  5935                           ;Automated Solar Panel Orientation Setter.c: 363: if(colomnNo==1 && rowNo == 1) characto
      +                          r = '1';
  5936  1327  0328               	decf	CheckKeyPad@colomnNo,w
  5937  1328  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  5938  1329  1D03               	btfss	3,2
  5939  132A  2B31               	goto	l3644
  5940  132B  032A               	decf	CheckKeyPad@rowNo,w
  5941  132C  042B               	iorwf	CheckKeyPad@rowNo+1,w
  5942  132D  1D03               	btfss	3,2
  5943  132E  2B31               	goto	l3644
  5944  132F  3031               	movlw	49
  5945  1330  2BE0               	goto	L35
  5946  1331                     l3644:	
  5947                           
  5948                           ;Automated Solar Panel Orientation Setter.c: 364: else if(colomnNo==1 && rowNo == 2) cha
      +                          ractor = '2';
  5949  1331  0328               	decf	CheckKeyPad@colomnNo,w
  5950  1332  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  5951  1333  1D03               	btfss	3,2
  5952  1334  2B3C               	goto	l3650
  5953  1335  3002               	movlw	2
  5954  1336  062A               	xorwf	CheckKeyPad@rowNo,w
  5955  1337  042B               	iorwf	CheckKeyPad@rowNo+1,w
  5956  1338  1D03               	btfss	3,2
  5957  1339  2B3C               	goto	l3650
  5958  133A  3032               	movlw	50
  5959  133B  2BE0               	goto	L35
  5960  133C                     l3650:	
  5961                           
  5962                           ;Automated Solar Panel Orientation Setter.c: 365: else if(colomnNo==1 && rowNo == 3) cha
      +                          ractor = '3';
  5963  133C  0328               	decf	CheckKeyPad@colomnNo,w
  5964  133D  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  5965  133E  1D03               	btfss	3,2
  5966  133F  2B47               	goto	l3656
  5967  1340  3003               	movlw	3
  5968  1341  062A               	xorwf	CheckKeyPad@rowNo,w
  5969  1342  042B               	iorwf	CheckKeyPad@rowNo+1,w
  5970  1343  1D03               	btfss	3,2
  5971  1344  2B47               	goto	l3656
  5972  1345  3033               	movlw	51
  5973  1346  2BE0               	goto	L35
  5974  1347                     l3656:	
  5975                           
  5976                           ;Automated Solar Panel Orientation Setter.c: 366: else if(colomnNo==1 && rowNo == 4) cha
      +                          ractor = 'A';
  5977  1347  0328               	decf	CheckKeyPad@colomnNo,w
  5978  1348  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  5979  1349  1D03               	btfss	3,2
  5980  134A  2B52               	goto	l3662
  5981  134B  3004               	movlw	4
  5982  134C  062A               	xorwf	CheckKeyPad@rowNo,w
  5983  134D  042B               	iorwf	CheckKeyPad@rowNo+1,w
  5984  134E  1D03               	btfss	3,2
  5985  134F  2B52               	goto	l3662
  5986  1350  3041               	movlw	65
  5987  1351  2BE0               	goto	L35
  5988  1352                     l3662:	
  5989                           
  5990                           ;Automated Solar Panel Orientation Setter.c: 368: else if(colomnNo==2 && rowNo == 1) cha
      +                          ractor = '4';
  5991  1352  3002               	movlw	2
  5992  1353  0628               	xorwf	CheckKeyPad@colomnNo,w
  5993  1354  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  5994  1355  1D03               	btfss	3,2
  5995  1356  2B5D               	goto	l3668
  5996  1357  032A               	decf	CheckKeyPad@rowNo,w
  5997  1358  042B               	iorwf	CheckKeyPad@rowNo+1,w
  5998  1359  1D03               	btfss	3,2
  5999  135A  2B5D               	goto	l3668
  6000  135B  3034               	movlw	52
  6001  135C  2BE0               	goto	L35
  6002  135D                     l3668:	
  6003                           
  6004                           ;Automated Solar Panel Orientation Setter.c: 369: else if(colomnNo==2 && rowNo == 2) cha
      +                          ractor = '5';
  6005  135D  3002               	movlw	2
  6006  135E  0628               	xorwf	CheckKeyPad@colomnNo,w
  6007  135F  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6008  1360  3002               	movlw	2
  6009  1361  1D03               	btfss	3,2
  6010  1362  2B6A               	goto	L36
  6011  1363  062A               	xorwf	CheckKeyPad@rowNo,w
  6012  1364  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6013  1365  1D03               	btfss	3,2
  6014  1366  2B69               	goto	l3674
  6015  1367  3035               	movlw	53
  6016  1368  2BE0               	goto	L35
  6017  1369                     l3674:	
  6018                           
  6019                           ;Automated Solar Panel Orientation Setter.c: 370: else if(colomnNo==2 && rowNo == 3) cha
      +                          ractor = '6';
  6020  1369  3002               	movlw	2
  6021  136A                     L36:	
  6022  136A  0628               	xorwf	CheckKeyPad@colomnNo,w
  6023  136B  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6024  136C  1D03               	btfss	3,2
  6025  136D  2B75               	goto	l3680
  6026  136E  3003               	movlw	3
  6027  136F  062A               	xorwf	CheckKeyPad@rowNo,w
  6028  1370  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6029  1371  1D03               	btfss	3,2
  6030  1372  2B75               	goto	l3680
  6031  1373  3036               	movlw	54
  6032  1374  2BE0               	goto	L35
  6033  1375                     l3680:	
  6034                           
  6035                           ;Automated Solar Panel Orientation Setter.c: 371: else if(colomnNo==2 && rowNo == 4) cha
      +                          ractor = 'B';
  6036  1375  3002               	movlw	2
  6037  1376  0628               	xorwf	CheckKeyPad@colomnNo,w
  6038  1377  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6039  1378  1D03               	btfss	3,2
  6040  1379  2B81               	goto	l3686
  6041  137A  3004               	movlw	4
  6042  137B  062A               	xorwf	CheckKeyPad@rowNo,w
  6043  137C  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6044  137D  1D03               	btfss	3,2
  6045  137E  2B81               	goto	l3686
  6046  137F  3042               	movlw	66
  6047  1380  2BE0               	goto	L35
  6048  1381                     l3686:	
  6049                           
  6050                           ;Automated Solar Panel Orientation Setter.c: 373: else if(colomnNo==3 && rowNo == 1) cha
      +                          ractor = '7';
  6051  1381  3003               	movlw	3
  6052  1382  0628               	xorwf	CheckKeyPad@colomnNo,w
  6053  1383  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6054  1384  1D03               	btfss	3,2
  6055  1385  2B8C               	goto	l3692
  6056  1386  032A               	decf	CheckKeyPad@rowNo,w
  6057  1387  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6058  1388  1D03               	btfss	3,2
  6059  1389  2B8C               	goto	l3692
  6060  138A  3037               	movlw	55
  6061  138B  2BE0               	goto	L35
  6062  138C                     l3692:	
  6063                           
  6064                           ;Automated Solar Panel Orientation Setter.c: 374: else if(colomnNo==3 && rowNo == 2) cha
      +                          ractor = '8';
  6065  138C  3003               	movlw	3
  6066  138D  0628               	xorwf	CheckKeyPad@colomnNo,w
  6067  138E  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6068  138F  1D03               	btfss	3,2
  6069  1390  2B98               	goto	l3698
  6070  1391  3002               	movlw	2
  6071  1392  062A               	xorwf	CheckKeyPad@rowNo,w
  6072  1393  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6073  1394  1D03               	btfss	3,2
  6074  1395  2B98               	goto	l3698
  6075  1396  3038               	movlw	56
  6076  1397  2BE0               	goto	L35
  6077  1398                     l3698:	
  6078                           
  6079                           ;Automated Solar Panel Orientation Setter.c: 375: else if(colomnNo==3 && rowNo == 3) cha
      +                          ractor = '9';
  6080  1398  3003               	movlw	3
  6081  1399  0628               	xorwf	CheckKeyPad@colomnNo,w
  6082  139A  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6083  139B  3003               	movlw	3
  6084  139C  1D03               	btfss	3,2
  6085  139D  2BA5               	goto	L37
  6086  139E  062A               	xorwf	CheckKeyPad@rowNo,w
  6087  139F  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6088  13A0  1D03               	btfss	3,2
  6089  13A1  2BA4               	goto	l3704
  6090  13A2  3039               	movlw	57
  6091  13A3  2BE0               	goto	L35
  6092  13A4                     l3704:	
  6093                           
  6094                           ;Automated Solar Panel Orientation Setter.c: 376: else if(colomnNo==3 && rowNo == 4) cha
      +                          ractor = 'C';
  6095  13A4  3003               	movlw	3
  6096  13A5                     L37:	
  6097  13A5  0628               	xorwf	CheckKeyPad@colomnNo,w
  6098  13A6  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6099  13A7  3004               	movlw	4
  6100  13A8  1D03               	btfss	3,2
  6101  13A9  2BB1               	goto	L38
  6102  13AA  062A               	xorwf	CheckKeyPad@rowNo,w
  6103  13AB  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6104  13AC  1D03               	btfss	3,2
  6105  13AD  2BB0               	goto	l3710
  6106  13AE  3043               	movlw	67
  6107  13AF  2BE0               	goto	L35
  6108  13B0                     l3710:	
  6109                           
  6110                           ;Automated Solar Panel Orientation Setter.c: 378: else if(colomnNo==4 && rowNo == 1) cha
      +                          ractor = '*';
  6111  13B0  3004               	movlw	4
  6112  13B1                     L38:	
  6113  13B1  0628               	xorwf	CheckKeyPad@colomnNo,w
  6114  13B2  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6115  13B3  1D03               	btfss	3,2
  6116  13B4  2BBB               	goto	l3716
  6117  13B5  032A               	decf	CheckKeyPad@rowNo,w
  6118  13B6  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6119  13B7  1D03               	btfss	3,2
  6120  13B8  2BBB               	goto	l3716
  6121  13B9  302A               	movlw	42
  6122  13BA  2BE0               	goto	L35
  6123  13BB                     l3716:	
  6124                           
  6125                           ;Automated Solar Panel Orientation Setter.c: 379: else if(colomnNo==4 && rowNo == 2) cha
      +                          ractor = '0';
  6126  13BB  3004               	movlw	4
  6127  13BC  0628               	xorwf	CheckKeyPad@colomnNo,w
  6128  13BD  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6129  13BE  1D03               	btfss	3,2
  6130  13BF  2BC7               	goto	l3722
  6131  13C0  3002               	movlw	2
  6132  13C1  062A               	xorwf	CheckKeyPad@rowNo,w
  6133  13C2  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6134  13C3  1D03               	btfss	3,2
  6135  13C4  2BC7               	goto	l3722
  6136  13C5  3030               	movlw	48
  6137  13C6  2BE0               	goto	L35
  6138  13C7                     l3722:	
  6139                           
  6140                           ;Automated Solar Panel Orientation Setter.c: 380: else if(colomnNo==4 && rowNo == 3) cha
      +                          ractor = '#';
  6141  13C7  3004               	movlw	4
  6142  13C8  0628               	xorwf	CheckKeyPad@colomnNo,w
  6143  13C9  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6144  13CA  1D03               	btfss	3,2
  6145  13CB  2BD3               	goto	l3728
  6146  13CC  3003               	movlw	3
  6147  13CD  062A               	xorwf	CheckKeyPad@rowNo,w
  6148  13CE  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6149  13CF  1D03               	btfss	3,2
  6150  13D0  2BD3               	goto	l3728
  6151  13D1  3023               	movlw	35
  6152  13D2  2BE0               	goto	L35
  6153  13D3                     l3728:	
  6154                           
  6155                           ;Automated Solar Panel Orientation Setter.c: 381: else if(colomnNo==4 && rowNo == 4) cha
      +                          ractor = 'D';
  6156  13D3  3004               	movlw	4
  6157  13D4  0628               	xorwf	CheckKeyPad@colomnNo,w
  6158  13D5  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6159  13D6  1D03               	btfss	3,2
  6160  13D7  2BDF               	goto	l3734
  6161  13D8  3004               	movlw	4
  6162  13D9  062A               	xorwf	CheckKeyPad@rowNo,w
  6163  13DA  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6164  13DB  1D03               	btfss	3,2
  6165  13DC  2BDF               	goto	l3734
  6166  13DD  3044               	movlw	68
  6167  13DE  2BE0               	goto	L35
  6168  13DF                     l3734:	
  6169                           
  6170                           ;Automated Solar Panel Orientation Setter.c: 383: else charactor = '@';
  6171  13DF  3040               	movlw	64
  6172  13E0                     L35:	
  6173  13E0  00A7               	movwf	CheckKeyPad@charactor
  6174  13E1                     l3736:	
  6175                           
  6176                           ;Automated Solar Panel Orientation Setter.c: 384: }
  6177                           ;Automated Solar Panel Orientation Setter.c: 385: if(rowNo==1) while(RD2==0);
  6178  13E1  032A               	decf	CheckKeyPad@rowNo,w
  6179  13E2  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6180  13E3  1D03               	btfss	3,2
  6181  13E4  2BE8               	goto	l3740
  6182  13E5                     l530:	
  6183  13E5  1908               	btfsc	8,2	;volatile
  6184  13E6  2BFF               	goto	l3752
  6185  13E7  2BE5               	goto	l530
  6186  13E8                     l3740:	
  6187                           
  6188                           ;Automated Solar Panel Orientation Setter.c: 386: else if(rowNo==2) while(RD7==0);
  6189  13E8  3002               	movlw	2
  6190  13E9  062A               	xorwf	CheckKeyPad@rowNo,w
  6191  13EA  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6192  13EB  1D03               	btfss	3,2
  6193  13EC  2BF0               	goto	l3744
  6194  13ED                     l535:	
  6195  13ED  1B88               	btfsc	8,7	;volatile
  6196  13EE  2BFF               	goto	l3752
  6197  13EF  2BED               	goto	l535
  6198  13F0                     l3744:	
  6199                           
  6200                           ;Automated Solar Panel Orientation Setter.c: 387: else if(rowNo==3) while(RD3==0);
  6201  13F0  3003               	movlw	3
  6202  13F1  062A               	xorwf	CheckKeyPad@rowNo,w
  6203  13F2  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6204  13F3  1D03               	btfss	3,2
  6205  13F4  2BF8               	goto	l3748
  6206  13F5                     l540:	
  6207  13F5  1988               	btfsc	8,3	;volatile
  6208  13F6  2BFF               	goto	l3752
  6209  13F7  2BF5               	goto	l540
  6210  13F8                     l3748:	
  6211                           
  6212                           ;Automated Solar Panel Orientation Setter.c: 388: else if(rowNo==4) while(RD6==0);
  6213  13F8  3004               	movlw	4
  6214  13F9  062A               	xorwf	CheckKeyPad@rowNo,w
  6215  13FA  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6216  13FB  1D03               	btfss	3,2
  6217  13FC  2BFF               	goto	l3752
  6218  13FD                     l545:	
  6219  13FD  1F08               	btfss	8,6	;volatile
  6220  13FE  2BFD               	goto	l545
  6221  13FF                     l3752:	
  6222                           
  6223                           ;Automated Solar Panel Orientation Setter.c: 389: return charactor;
  6224  13FF  0827               	movf	CheckKeyPad@charactor,w
  6225  1400  0008               	return
  6226  1401                     __end_of_CheckKeyPad:	
  6227  1401                     __ptext39:	
  6228 ;; *************** function _ColomnNo *****************
  6229 ;; Defined at:
  6230 ;;		line 392 in file "Automated Solar Panel Orientation Setter.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  rowNo           2    3[BANK0 ] int 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;		None
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  2    3[BANK0 ] int 
  6237 ;; Registers used:
  6238 ;;		wreg, status,2, status,0
  6239 ;; Tracked objects:
  6240 ;;		On entry : 300/0
  6241 ;;		On exit  : 300/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6244 ;;      Params:         0       2       0       0       0
  6245 ;;      Locals:         0       0       0       0       0
  6246 ;;      Temps:          0       0       0       0       0
  6247 ;;      Totals:         0       2       0       0       0
  6248 ;;Total ram usage:        2 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    5
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_CheckKeyPad
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           
  6259                           ;psect for function _ColomnNo
  6260  1401                     _ColomnNo:	
  6261                           
  6262                           ;Automated Solar Panel Orientation Setter.c: 393: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6263                           
  6264                           ;incstack = 0
  6265                           ; Regs used in _ColomnNo: [wreg+status,2+status,0]
  6266  1401  1207               	bcf	7,4	;volatile
  6267  1402  1288               	bcf	8,5	;volatile
  6268  1403  1287               	bcf	7,5	;volatile
  6269  1404  1208               	bcf	8,4	;volatile
  6270                           
  6271                           ;Automated Solar Panel Orientation Setter.c: 394: if(rowNo==1){
  6272  1405  0323               	decf	ColomnNo@rowNo,w
  6273  1406  0424               	iorwf	ColomnNo@rowNo+1,w
  6274  1407  1D03               	btfss	3,2
  6275  1408  2C31               	goto	l3288
  6276                           
  6277                           ;Automated Solar Panel Orientation Setter.c: 395: RC4 = 1;
  6278  1409  1607               	bsf	7,4	;volatile
  6279                           
  6280                           ;Automated Solar Panel Orientation Setter.c: 396: _delay(1);
  6281  140A  0000               	nop
  6282                           
  6283                           ;Automated Solar Panel Orientation Setter.c: 397: if(RD2==1){
  6284  140B  1283               	bcf	3,5	;RP0=0, select bank0
  6285  140C  1303               	bcf	3,6	;RP1=0, select bank0
  6286  140D  1D08               	btfss	8,2	;volatile
  6287  140E  2C13               	goto	l552
  6288  140F                     l3272:	
  6289                           
  6290                           ;Automated Solar Panel Orientation Setter.c: 398: return 1;
  6291  140F  01A3               	clrf	?_ColomnNo
  6292  1410  0AA3               	incf	?_ColomnNo,f
  6293  1411  01A4               	clrf	?_ColomnNo+1
  6294  1412  0008               	return
  6295  1413                     l552:	
  6296                           
  6297                           ;Automated Solar Panel Orientation Setter.c: 399: }
  6298                           ;Automated Solar Panel Orientation Setter.c: 400: RD5 = 1;
  6299  1413  1688               	bsf	8,5	;volatile
  6300                           
  6301                           ;Automated Solar Panel Orientation Setter.c: 401: _delay(1);
  6302  1414  0000               	nop
  6303                           
  6304                           ;Automated Solar Panel Orientation Setter.c: 402: if(RD2==1){
  6305  1415  1283               	bcf	3,5	;RP0=0, select bank0
  6306  1416  1303               	bcf	3,6	;RP1=0, select bank0
  6307  1417  1D08               	btfss	8,2	;volatile
  6308  1418  2C1D               	goto	l554
  6309  1419                     l3276:	
  6310                           
  6311                           ;Automated Solar Panel Orientation Setter.c: 403: return 2;
  6312  1419  3002               	movlw	2
  6313  141A  00A3               	movwf	?_ColomnNo
  6314  141B  01A4               	clrf	?_ColomnNo+1
  6315  141C  0008               	return
  6316  141D                     l554:	
  6317                           
  6318                           ;Automated Solar Panel Orientation Setter.c: 404: }
  6319                           ;Automated Solar Panel Orientation Setter.c: 405: RC5 = 1;
  6320  141D  1687               	bsf	7,5	;volatile
  6321                           
  6322                           ;Automated Solar Panel Orientation Setter.c: 406: _delay(1);
  6323  141E  0000               	nop
  6324                           
  6325                           ;Automated Solar Panel Orientation Setter.c: 407: if(RD2==1){
  6326  141F  1283               	bcf	3,5	;RP0=0, select bank0
  6327  1420  1303               	bcf	3,6	;RP1=0, select bank0
  6328  1421  1D08               	btfss	8,2	;volatile
  6329  1422  2C27               	goto	l555
  6330  1423                     l3280:	
  6331                           
  6332                           ;Automated Solar Panel Orientation Setter.c: 408: return 3;
  6333  1423  3003               	movlw	3
  6334  1424  00A3               	movwf	?_ColomnNo
  6335  1425  01A4               	clrf	?_ColomnNo+1
  6336  1426  0008               	return
  6337  1427                     l555:	
  6338                           
  6339                           ;Automated Solar Panel Orientation Setter.c: 409: }
  6340                           ;Automated Solar Panel Orientation Setter.c: 410: RD4 = 1;
  6341  1427  1608               	bsf	8,4	;volatile
  6342                           
  6343                           ;Automated Solar Panel Orientation Setter.c: 411: _delay(1);
  6344  1428  0000               	nop
  6345                           
  6346                           ;Automated Solar Panel Orientation Setter.c: 412: if(RD2==1){
  6347  1429  1283               	bcf	3,5	;RP0=0, select bank0
  6348  142A  1303               	bcf	3,6	;RP1=0, select bank0
  6349  142B  1D08               	btfss	8,2	;volatile
  6350  142C  2C8A               	goto	l3348
  6351  142D                     l3284:	
  6352                           
  6353                           ;Automated Solar Panel Orientation Setter.c: 413: return 4;
  6354  142D  3004               	movlw	4
  6355  142E  00A3               	movwf	?_ColomnNo
  6356  142F  01A4               	clrf	?_ColomnNo+1
  6357  1430  0008               	return
  6358  1431                     l3288:	
  6359                           
  6360                           ;Automated Solar Panel Orientation Setter.c: 416: else if(rowNo==2){
  6361  1431  3002               	movlw	2
  6362  1432  0623               	xorwf	ColomnNo@rowNo,w
  6363  1433  0424               	iorwf	ColomnNo@rowNo+1,w
  6364  1434  1D03               	btfss	3,2
  6365  1435  2C4F               	goto	l3308
  6366                           
  6367                           ;Automated Solar Panel Orientation Setter.c: 417: RC4 = 1;
  6368  1436  1607               	bsf	7,4	;volatile
  6369                           
  6370                           ;Automated Solar Panel Orientation Setter.c: 418: _delay(1);
  6371  1437  0000               	nop
  6372                           
  6373                           ;Automated Solar Panel Orientation Setter.c: 419: if(RD7==1){
  6374  1438  1283               	bcf	3,5	;RP0=0, select bank0
  6375  1439  1303               	bcf	3,6	;RP1=0, select bank0
  6376  143A  1B88               	btfsc	8,7	;volatile
  6377  143B  2C0F               	goto	l3272
  6378                           
  6379                           ;Automated Solar Panel Orientation Setter.c: 421: }
  6380                           ;Automated Solar Panel Orientation Setter.c: 422: RD5 = 1;
  6381  143C  1688               	bsf	8,5	;volatile
  6382                           
  6383                           ;Automated Solar Panel Orientation Setter.c: 423: _delay(1);
  6384  143D  0000               	nop
  6385                           
  6386                           ;Automated Solar Panel Orientation Setter.c: 424: if(RD7==1){
  6387  143E  1283               	bcf	3,5	;RP0=0, select bank0
  6388  143F  1303               	bcf	3,6	;RP1=0, select bank0
  6389  1440  1B88               	btfsc	8,7	;volatile
  6390  1441  2C19               	goto	l3276
  6391                           
  6392                           ;Automated Solar Panel Orientation Setter.c: 426: }
  6393                           ;Automated Solar Panel Orientation Setter.c: 427: RC5 = 1;
  6394  1442  1687               	bsf	7,5	;volatile
  6395                           
  6396                           ;Automated Solar Panel Orientation Setter.c: 428: _delay(1);
  6397  1443  0000               	nop
  6398                           
  6399                           ;Automated Solar Panel Orientation Setter.c: 429: if(RD7==1){
  6400  1444  1283               	bcf	3,5	;RP0=0, select bank0
  6401  1445  1303               	bcf	3,6	;RP1=0, select bank0
  6402  1446  1B88               	btfsc	8,7	;volatile
  6403  1447  2C23               	goto	l3280
  6404                           
  6405                           ;Automated Solar Panel Orientation Setter.c: 431: }
  6406                           ;Automated Solar Panel Orientation Setter.c: 432: RD4 = 1;
  6407  1448  1608               	bsf	8,4	;volatile
  6408                           
  6409                           ;Automated Solar Panel Orientation Setter.c: 433: _delay(1);
  6410  1449  0000               	nop
  6411                           
  6412                           ;Automated Solar Panel Orientation Setter.c: 434: if(RD7==1){
  6413  144A  1283               	bcf	3,5	;RP0=0, select bank0
  6414  144B  1303               	bcf	3,6	;RP1=0, select bank0
  6415  144C  1B88               	btfsc	8,7	;volatile
  6416  144D  2C2D               	goto	l3284
  6417  144E  2C8A               	goto	l3348
  6418  144F                     l3308:	
  6419                           
  6420                           ;Automated Solar Panel Orientation Setter.c: 438: else if(rowNo==3){
  6421  144F  3003               	movlw	3
  6422  1450  0623               	xorwf	ColomnNo@rowNo,w
  6423  1451  0424               	iorwf	ColomnNo@rowNo+1,w
  6424  1452  1D03               	btfss	3,2
  6425  1453  2C6D               	goto	l3328
  6426                           
  6427                           ;Automated Solar Panel Orientation Setter.c: 439: RC4 = 1;
  6428  1454  1607               	bsf	7,4	;volatile
  6429                           
  6430                           ;Automated Solar Panel Orientation Setter.c: 440: _delay(1);
  6431  1455  0000               	nop
  6432                           
  6433                           ;Automated Solar Panel Orientation Setter.c: 441: if(RD3==1){
  6434  1456  1283               	bcf	3,5	;RP0=0, select bank0
  6435  1457  1303               	bcf	3,6	;RP1=0, select bank0
  6436  1458  1988               	btfsc	8,3	;volatile
  6437  1459  2C0F               	goto	l3272
  6438                           
  6439                           ;Automated Solar Panel Orientation Setter.c: 443: }
  6440                           ;Automated Solar Panel Orientation Setter.c: 444: RD5 = 1;
  6441  145A  1688               	bsf	8,5	;volatile
  6442                           
  6443                           ;Automated Solar Panel Orientation Setter.c: 445: _delay(1);
  6444  145B  0000               	nop
  6445                           
  6446                           ;Automated Solar Panel Orientation Setter.c: 446: if(RD3==1){
  6447  145C  1283               	bcf	3,5	;RP0=0, select bank0
  6448  145D  1303               	bcf	3,6	;RP1=0, select bank0
  6449  145E  1988               	btfsc	8,3	;volatile
  6450  145F  2C19               	goto	l3276
  6451                           
  6452                           ;Automated Solar Panel Orientation Setter.c: 448: }
  6453                           ;Automated Solar Panel Orientation Setter.c: 449: RC5 = 1;
  6454  1460  1687               	bsf	7,5	;volatile
  6455                           
  6456                           ;Automated Solar Panel Orientation Setter.c: 450: _delay(1);
  6457  1461  0000               	nop
  6458                           
  6459                           ;Automated Solar Panel Orientation Setter.c: 451: if(RD3==1){
  6460  1462  1283               	bcf	3,5	;RP0=0, select bank0
  6461  1463  1303               	bcf	3,6	;RP1=0, select bank0
  6462  1464  1988               	btfsc	8,3	;volatile
  6463  1465  2C23               	goto	l3280
  6464                           
  6465                           ;Automated Solar Panel Orientation Setter.c: 453: }
  6466                           ;Automated Solar Panel Orientation Setter.c: 454: RD4 = 1;
  6467  1466  1608               	bsf	8,4	;volatile
  6468                           
  6469                           ;Automated Solar Panel Orientation Setter.c: 455: _delay(1);
  6470  1467  0000               	nop
  6471                           
  6472                           ;Automated Solar Panel Orientation Setter.c: 456: if(RD3==1){
  6473  1468  1283               	bcf	3,5	;RP0=0, select bank0
  6474  1469  1303               	bcf	3,6	;RP1=0, select bank0
  6475  146A  1988               	btfsc	8,3	;volatile
  6476  146B  2C2D               	goto	l3284
  6477  146C  2C8A               	goto	l3348
  6478  146D                     l3328:	
  6479                           
  6480                           ;Automated Solar Panel Orientation Setter.c: 460: else if(rowNo==4){
  6481  146D  3004               	movlw	4
  6482  146E  0623               	xorwf	ColomnNo@rowNo,w
  6483  146F  0424               	iorwf	ColomnNo@rowNo+1,w
  6484  1470  1D03               	btfss	3,2
  6485  1471  2C8A               	goto	l3348
  6486                           
  6487                           ;Automated Solar Panel Orientation Setter.c: 461: RC4 = 1;
  6488  1472  1607               	bsf	7,4	;volatile
  6489                           
  6490                           ;Automated Solar Panel Orientation Setter.c: 462: _delay(1);
  6491  1473  0000               	nop
  6492                           
  6493                           ;Automated Solar Panel Orientation Setter.c: 463: if(RD6==1){
  6494  1474  1283               	bcf	3,5	;RP0=0, select bank0
  6495  1475  1303               	bcf	3,6	;RP1=0, select bank0
  6496  1476  1B08               	btfsc	8,6	;volatile
  6497  1477  2C0F               	goto	l3272
  6498                           
  6499                           ;Automated Solar Panel Orientation Setter.c: 465: }
  6500                           ;Automated Solar Panel Orientation Setter.c: 466: RD5 = 1;
  6501  1478  1688               	bsf	8,5	;volatile
  6502                           
  6503                           ;Automated Solar Panel Orientation Setter.c: 467: _delay(1);
  6504  1479  0000               	nop
  6505                           
  6506                           ;Automated Solar Panel Orientation Setter.c: 468: if(RD6==1){
  6507  147A  1283               	bcf	3,5	;RP0=0, select bank0
  6508  147B  1303               	bcf	3,6	;RP1=0, select bank0
  6509  147C  1B08               	btfsc	8,6	;volatile
  6510  147D  2C19               	goto	l3276
  6511                           
  6512                           ;Automated Solar Panel Orientation Setter.c: 470: }
  6513                           ;Automated Solar Panel Orientation Setter.c: 471: RC5 = 1;
  6514  147E  1687               	bsf	7,5	;volatile
  6515                           
  6516                           ;Automated Solar Panel Orientation Setter.c: 472: _delay(1);
  6517  147F  0000               	nop
  6518                           
  6519                           ;Automated Solar Panel Orientation Setter.c: 473: if(RD6==1){
  6520  1480  1283               	bcf	3,5	;RP0=0, select bank0
  6521  1481  1303               	bcf	3,6	;RP1=0, select bank0
  6522  1482  1B08               	btfsc	8,6	;volatile
  6523  1483  2C23               	goto	l3280
  6524                           
  6525                           ;Automated Solar Panel Orientation Setter.c: 475: }
  6526                           ;Automated Solar Panel Orientation Setter.c: 476: RD4 = 1;
  6527  1484  1608               	bsf	8,4	;volatile
  6528                           
  6529                           ;Automated Solar Panel Orientation Setter.c: 477: _delay(1);
  6530  1485  0000               	nop
  6531                           
  6532                           ;Automated Solar Panel Orientation Setter.c: 478: if(RD6==1){
  6533  1486  1283               	bcf	3,5	;RP0=0, select bank0
  6534  1487  1303               	bcf	3,6	;RP1=0, select bank0
  6535  1488  1B08               	btfsc	8,6	;volatile
  6536  1489  2C2D               	goto	l3284
  6537  148A                     l3348:	
  6538                           
  6539                           ;Automated Solar Panel Orientation Setter.c: 480: }
  6540                           ;Automated Solar Panel Orientation Setter.c: 481: }
  6541                           ;Automated Solar Panel Orientation Setter.c: 482: return 0;
  6542  148A  01A3               	clrf	?_ColomnNo
  6543  148B  01A4               	clrf	?_ColomnNo+1
  6544  148C  0008               	return
  6545  148D                     __end_of_ColomnNo:	
  6546  148D                     __ptext38:	
  6547 ;; *************** function _RowNo *****************
  6548 ;; Defined at:
  6549 ;;		line 485 in file "Automated Solar Panel Orientation Setter.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;  row             2    5[BANK0 ] int 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  2    3[BANK0 ] int 
  6556 ;; Registers used:
  6557 ;;		wreg, status,2, status,0
  6558 ;; Tracked objects:
  6559 ;;		On entry : 300/0
  6560 ;;		On exit  : 300/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6563 ;;      Params:         0       2       0       0       0
  6564 ;;      Locals:         0       2       0       0       0
  6565 ;;      Temps:          0       0       0       0       0
  6566 ;;      Totals:         0       4       0       0       0
  6567 ;;Total ram usage:        4 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    5
  6570 ;; This function calls:
  6571 ;;		Nothing
  6572 ;; This function is called by:
  6573 ;;		_CheckKeyPad
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _RowNo
  6579  148D                     _RowNo:	
  6580                           
  6581                           ;Automated Solar Panel Orientation Setter.c: 486: int row;
  6582                           ;Automated Solar Panel Orientation Setter.c: 487: if( RD2!=1){
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in _RowNo: [wreg+status,2+status,0]
  6586  148D  1908               	btfsc	8,2	;volatile
  6587  148E  2C92               	goto	l577
  6588                           
  6589                           ;Automated Solar Panel Orientation Setter.c: 488: row = 1;
  6590  148F  01A5               	clrf	RowNo@row
  6591  1490  0AA5               	incf	RowNo@row,f
  6592  1491  2CA0               	goto	L39
  6593  1492                     l577:	
  6594                           ;Automated Solar Panel Orientation Setter.c: 489: }
  6595                           
  6596                           
  6597                           ;Automated Solar Panel Orientation Setter.c: 490: else if( RD7!=1 ){
  6598  1492  1B88               	btfsc	8,7	;volatile
  6599  1493  2C96               	goto	l579
  6600                           
  6601                           ;Automated Solar Panel Orientation Setter.c: 491: row = 2;
  6602  1494  3002               	movlw	2
  6603  1495  2C9D               	goto	L41
  6604  1496                     l579:	
  6605                           ;Automated Solar Panel Orientation Setter.c: 492: }
  6606                           
  6607                           
  6608                           ;Automated Solar Panel Orientation Setter.c: 493: else if( RD3!=1 ){
  6609  1496  1988               	btfsc	8,3	;volatile
  6610  1497  2C9A               	goto	l581
  6611                           
  6612                           ;Automated Solar Panel Orientation Setter.c: 494: row = 3;
  6613  1498  3003               	movlw	3
  6614  1499  2C9D               	goto	L41
  6615  149A                     l581:	
  6616                           ;Automated Solar Panel Orientation Setter.c: 495: }
  6617                           
  6618                           
  6619                           ;Automated Solar Panel Orientation Setter.c: 496: else if( RD6!=1 ){
  6620  149A  1B08               	btfsc	8,6	;volatile
  6621  149B  2C9F               	goto	l3260
  6622                           
  6623                           ;Automated Solar Panel Orientation Setter.c: 497: row = 4;
  6624  149C  3004               	movlw	4
  6625  149D                     L41:	
  6626  149D  00A5               	movwf	RowNo@row
  6627  149E  2CA0               	goto	L39
  6628  149F                     l3260:	
  6629                           ;Automated Solar Panel Orientation Setter.c: 498: }
  6630                           
  6631                           
  6632                           ;Automated Solar Panel Orientation Setter.c: 499: else{
  6633                           ;Automated Solar Panel Orientation Setter.c: 500: row = 0;
  6634  149F  01A5               	clrf	RowNo@row
  6635  14A0                     L39:	
  6636  14A0  01A6               	clrf	RowNo@row+1
  6637                           
  6638                           ;Automated Solar Panel Orientation Setter.c: 501: }
  6639                           ;Automated Solar Panel Orientation Setter.c: 502: return row;
  6640  14A1  0826               	movf	RowNo@row+1,w
  6641  14A2  00A4               	movwf	?_RowNo+1
  6642  14A3  0825               	movf	RowNo@row,w
  6643  14A4  00A3               	movwf	?_RowNo
  6644  14A5  0008               	return
  6645  14A6                     __end_of_RowNo:	
  6646  14A6                     __ptext36:	
  6647 ;; *************** function _Serial_Print *****************
  6648 ;; Defined at:
  6649 ;;		line 27 in file "serialv2.h"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;  a               1    wreg     PTR const unsigned char 
  6652 ;;		 -> STR_13(20), STR_12(3), STR_11(3), STR_10(3), 
  6653 ;;		 -> STR_9(3), 
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  a               1    4[BANK0 ] PTR const unsigned char 
  6656 ;;		 -> STR_13(20), STR_12(3), STR_11(3), STR_10(3), 
  6657 ;;		 -> STR_9(3), 
  6658 ;; Return value:  Size  Location     Type
  6659 ;;		None               void
  6660 ;; Registers used:
  6661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 300/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6667 ;;      Params:         0       0       0       0       0
  6668 ;;      Locals:         0       1       0       0       0
  6669 ;;      Temps:          0       1       0       0       0
  6670 ;;      Totals:         0       2       0       0       0
  6671 ;;Total ram usage:        2 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    5
  6674 ;; This function calls:
  6675 ;;		Nothing
  6676 ;; This function is called by:
  6677 ;;		_main
  6678 ;;		_CheckMode
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _Serial_Print
  6684  14A6                     _Serial_Print:	
  6685                           
  6686                           ;incstack = 0
  6687                           ; Regs used in _Serial_Print: [wreg-fsr0h+status,2+status,0+pclath]
  6688                           ;Serial_Print@a stored from wreg
  6689  14A6  1283               	bcf	3,5	;RP0=0, select bank0
  6690  14A7  1303               	bcf	3,6	;RP1=0, select bank0
  6691  14A8  00A4               	movwf	Serial_Print@a
  6692  14A9                     l3522:	
  6693                           ;serialv2.h: 28: while( *a!='\0'){
  6694                           
  6695  14A9  0824               	movf	Serial_Print@a,w
  6696  14AA  0084               	movwf	4
  6697  14AB  120A  158A  2000  160A  118A  	fcall	stringdir
  6698  14B0  3A00               	xorlw	0
  6699  14B1  1903               	btfsc	3,2
  6700  14B2  0008               	return
  6701  14B3                     l273:	
  6702  14B3  1E0C               	btfss	12,4	;volatile
  6703  14B4  2CB3               	goto	l273
  6704                           
  6705                           ;serialv2.h: 30: TXREG = *a;
  6706  14B5  0824               	movf	Serial_Print@a,w
  6707  14B6  0084               	movwf	4
  6708  14B7  120A  158A  2000  160A  118A  	fcall	stringdir
  6709  14BC  0099               	movwf	25	;volatile
  6710                           
  6711                           ;serialv2.h: 31: _delay(10);
  6712  14BD  3003               	movlw	3
  6713  14BE  00A3               	movwf	??_Serial_Print
  6714  14BF                     u6787:	
  6715  14BF  0BA3               	decfsz	??_Serial_Print,f
  6716  14C0  2CBF               	goto	u6787
  6717                           
  6718                           ;serialv2.h: 32: a = a+1;
  6719  14C1  1283               	bcf	3,5	;RP0=0, select bank0
  6720  14C2  1303               	bcf	3,6	;RP1=0, select bank0
  6721  14C3  0AA4               	incf	Serial_Print@a,f
  6722  14C4  2CA9               	goto	l3522
  6723  14C5                     __end_of_Serial_Print:	
  6724  14C5                     __ptext22:	
  6725 ;; *************** function _Serial_Print_Int *****************
  6726 ;; Defined at:
  6727 ;;		line 141 in file "serialv2.h"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;  val             2   17[BANK0 ] int 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;		None               void
  6734 ;; Registers used:
  6735 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 300/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6741 ;;      Params:         0       2       0       0       0
  6742 ;;      Locals:         0       0       0       0       0
  6743 ;;      Temps:          0       1       0       0       0
  6744 ;;      Totals:         0       3       0       0       0
  6745 ;;Total ram usage:        3 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    6
  6748 ;; This function calls:
  6749 ;;		___awdiv
  6750 ;;		___awmod
  6751 ;; This function is called by:
  6752 ;;		_main
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           
  6757                           ;psect for function _Serial_Print_Int
  6758  14C5                     _Serial_Print_Int:	
  6759                           
  6760                           ;serialv2.h: 144: if(val < 0){
  6761                           
  6762                           ;incstack = 0
  6763                           ; Regs used in _Serial_Print_Int: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6764  14C5  1FB2               	btfss	Serial_Print_Int@val+1,7
  6765  14C6  2CD6               	goto	l4164
  6766  14C7                     l358:	
  6767  14C7  1E0C               	btfss	12,4	;volatile
  6768  14C8  2CC7               	goto	l358
  6769                           
  6770                           ;serialv2.h: 146: TXREG = '-';
  6771  14C9  302D               	movlw	45
  6772  14CA  0099               	movwf	25	;volatile
  6773                           
  6774                           ;serialv2.h: 147: _delay(10);
  6775  14CB  3003               	movlw	3
  6776  14CC  00B3               	movwf	??_Serial_Print_Int
  6777  14CD                     u6517:	
  6778  14CD  0BB3               	decfsz	??_Serial_Print_Int,f
  6779  14CE  2CCD               	goto	u6517
  6780                           
  6781                           ;serialv2.h: 148: val = -val;
  6782  14CF  1283               	bcf	3,5	;RP0=0, select bank0
  6783  14D0  1303               	bcf	3,6	;RP1=0, select bank0
  6784  14D1  09B1               	comf	Serial_Print_Int@val,f
  6785  14D2  09B2               	comf	Serial_Print_Int@val+1,f
  6786  14D3  0AB1               	incf	Serial_Print_Int@val,f
  6787  14D4  1903               	skipnz
  6788  14D5  0AB2               	incf	Serial_Print_Int@val+1,f
  6789  14D6                     l4164:	
  6790                           
  6791                           ;serialv2.h: 149: }
  6792                           ;serialv2.h: 150: if(val > 9999){
  6793  14D6  0832               	movf	Serial_Print_Int@val+1,w
  6794  14D7  3A80               	xorlw	128
  6795  14D8  00FF               	movwf	127
  6796  14D9  30A7               	movlw	167
  6797  14DA  027F               	subwf	127,w
  6798  14DB  1D03               	skipz
  6799  14DC  2CDF               	goto	u5395
  6800  14DD  3010               	movlw	16
  6801  14DE  0231               	subwf	Serial_Print_Int@val,w
  6802  14DF                     u5395:	
  6803  14DF  1C03               	skipc
  6804  14E0  2D5A               	goto	l4192
  6805  14E1                     l362:	
  6806  14E1  1283               	bcf	3,5	;RP0=0, select bank0
  6807  14E2  1303               	bcf	3,6	;RP1=0, select bank0
  6808  14E3  1E0C               	btfss	12,4	;volatile
  6809  14E4  2CE1               	goto	l362
  6810                           
  6811                           ;serialv2.h: 152: TXREG = val/10000+48;
  6812  14E5  3010               	movlw	16
  6813  14E6  00A9               	movwf	___awdiv@divisor
  6814  14E7  3027               	movlw	39
  6815  14E8  00AA               	movwf	___awdiv@divisor+1
  6816  14E9  0832               	movf	Serial_Print_Int@val+1,w
  6817  14EA  00AC               	movwf	___awdiv@dividend+1
  6818  14EB  0831               	movf	Serial_Print_Int@val,w
  6819  14EC  00AB               	movwf	___awdiv@dividend
  6820  14ED  2751  160A  118A   	fcall	___awdiv
  6821  14F0  0829               	movf	?___awdiv,w
  6822  14F1  3E30               	addlw	48
  6823  14F2  0099               	movwf	25	;volatile
  6824                           
  6825                           ;serialv2.h: 153: _delay(10);
  6826  14F3  3003               	movlw	3
  6827  14F4  00B3               	movwf	??_Serial_Print_Int
  6828  14F5                     u6527:	
  6829  14F5  0BB3               	decfsz	??_Serial_Print_Int,f
  6830  14F6  2CF5               	goto	u6527
  6831                           
  6832                           ;serialv2.h: 154: val = val%10000;
  6833  14F7  3010               	movlw	16
  6834  14F8  1283               	bcf	3,5	;RP0=0, select bank0
  6835  14F9  1303               	bcf	3,6	;RP1=0, select bank0
  6836  14FA  00A3               	movwf	___awmod@divisor
  6837  14FB  3027               	movlw	39
  6838  14FC  00A4               	movwf	___awmod@divisor+1
  6839  14FD  0832               	movf	Serial_Print_Int@val+1,w
  6840  14FE  00A6               	movwf	___awmod@dividend+1
  6841  14FF  0831               	movf	Serial_Print_Int@val,w
  6842  1500  00A5               	movwf	___awmod@dividend
  6843  1501  2796  160A  118A   	fcall	___awmod
  6844  1504  0824               	movf	?___awmod+1,w
  6845  1505  00B2               	movwf	Serial_Print_Int@val+1
  6846  1506  0823               	movf	?___awmod,w
  6847  1507  00B1               	movwf	Serial_Print_Int@val
  6848  1508                     l365:	
  6849                           ;serialv2.h: 156: while(!TXIF);
  6850                           
  6851  1508  1E0C               	btfss	12,4	;volatile
  6852  1509  2D08               	goto	l365
  6853                           
  6854                           ;serialv2.h: 157: TXREG = val/1000+48;
  6855  150A  27EF  160A  118A   	fcall	PL20	;call to abstracted procedure
  6856  150D  2751  160A  118A   	fcall	___awdiv
  6857  1510  0829               	movf	?___awdiv,w
  6858  1511  3E30               	addlw	48
  6859  1512  0099               	movwf	25	;volatile
  6860                           
  6861                           ;serialv2.h: 158: _delay(10);
  6862  1513  3003               	movlw	3
  6863  1514  00B3               	movwf	??_Serial_Print_Int
  6864  1515                     u6537:	
  6865  1515  0BB3               	decfsz	??_Serial_Print_Int,f
  6866  1516  2D15               	goto	u6537
  6867                           
  6868                           ;serialv2.h: 159: val = val%1000;
  6869  1517  27DC  160A  118A   	fcall	PL14	;call to abstracted procedure
  6870  151A  2796  160A  118A   	fcall	___awmod
  6871  151D  0824               	movf	?___awmod+1,w
  6872  151E  00B2               	movwf	Serial_Print_Int@val+1
  6873  151F  0823               	movf	?___awmod,w
  6874  1520  00B1               	movwf	Serial_Print_Int@val
  6875  1521                     l368:	
  6876                           ;serialv2.h: 161: while(!TXIF);
  6877                           
  6878  1521  1E0C               	btfss	12,4	;volatile
  6879  1522  2D21               	goto	l368
  6880                           
  6881                           ;serialv2.h: 162: TXREG = val/100+48;
  6882  1523  27E7  160A  118A   	fcall	PL16	;call to abstracted procedure
  6883  1526  2751  160A  118A   	fcall	___awdiv
  6884  1529  0829               	movf	?___awdiv,w
  6885  152A  3E30               	addlw	48
  6886  152B  0099               	movwf	25	;volatile
  6887                           
  6888                           ;serialv2.h: 163: _delay(10);
  6889  152C  3003               	movlw	3
  6890  152D  00B3               	movwf	??_Serial_Print_Int
  6891  152E                     u6547:	
  6892  152E  0BB3               	decfsz	??_Serial_Print_Int,f
  6893  152F  2D2E               	goto	u6547
  6894                           
  6895                           ;serialv2.h: 164: val = val%100;
  6896  1530  3064               	movlw	100
  6897  1531  27D3  160A  118A   	fcall	PL4	;call to abstracted procedure
  6898  1534  2796  160A  118A   	fcall	___awmod
  6899  1537  0824               	movf	?___awmod+1,w
  6900  1538  00B2               	movwf	Serial_Print_Int@val+1
  6901  1539  0823               	movf	?___awmod,w
  6902  153A  00B1               	movwf	Serial_Print_Int@val
  6903  153B                     l371:	
  6904                           ;serialv2.h: 166: while(!TXIF);
  6905                           
  6906  153B  1E0C               	btfss	12,4	;volatile
  6907  153C  2D3B               	goto	l371
  6908  153D                     l4186:	
  6909                           
  6910                           ;serialv2.h: 167: TXREG = val/10+48;
  6911  153D  300A               	movlw	10
  6912  153E  00A9               	movwf	___awdiv@divisor
  6913  153F  01AA               	clrf	___awdiv@divisor+1
  6914  1540  0832               	movf	Serial_Print_Int@val+1,w
  6915  1541  00AC               	movwf	___awdiv@dividend+1
  6916  1542  0831               	movf	Serial_Print_Int@val,w
  6917  1543  00AB               	movwf	___awdiv@dividend
  6918  1544  2751  160A  118A   	fcall	___awdiv
  6919  1547  0829               	movf	?___awdiv,w
  6920  1548  3E30               	addlw	48
  6921  1549  0099               	movwf	25	;volatile
  6922                           
  6923                           ;serialv2.h: 168: _delay(10);
  6924  154A  3003               	movlw	3
  6925  154B  00B3               	movwf	??_Serial_Print_Int
  6926  154C                     u6557:	
  6927  154C  0BB3               	decfsz	??_Serial_Print_Int,f
  6928  154D  2D4C               	goto	u6557
  6929                           
  6930                           ;serialv2.h: 169: val = val%10;
  6931  154E  300A               	movlw	10
  6932  154F  27D3  160A  118A   	fcall	PL4	;call to abstracted procedure
  6933  1552  2796  160A  118A   	fcall	___awmod
  6934  1555  0824               	movf	?___awmod+1,w
  6935  1556  00B2               	movwf	Serial_Print_Int@val+1
  6936  1557  0823               	movf	?___awmod,w
  6937  1558  00B1               	movwf	Serial_Print_Int@val
  6938                           
  6939                           ;serialv2.h: 170: }
  6940  1559  2DD5               	goto	l398
  6941  155A                     l4192:	
  6942                           
  6943                           ;serialv2.h: 171: else if(val > 999){
  6944  155A  1283               	bcf	3,5	;RP0=0, select bank0
  6945  155B  1303               	bcf	3,6	;RP1=0, select bank0
  6946  155C  0832               	movf	Serial_Print_Int@val+1,w
  6947  155D  3A80               	xorlw	128
  6948  155E  00FF               	movwf	127
  6949  155F  3083               	movlw	131
  6950  1560  027F               	subwf	127,w
  6951  1561  1D03               	skipz
  6952  1562  2D65               	goto	u5445
  6953  1563  30E8               	movlw	232
  6954  1564  0231               	subwf	Serial_Print_Int@val,w
  6955  1565                     u5445:	
  6956  1565  1C03               	skipc
  6957  1566  2D9F               	goto	l4214
  6958  1567                     l376:	
  6959  1567  1283               	bcf	3,5	;RP0=0, select bank0
  6960  1568  1303               	bcf	3,6	;RP1=0, select bank0
  6961  1569  1E0C               	btfss	12,4	;volatile
  6962  156A  2D67               	goto	l376
  6963                           
  6964                           ;serialv2.h: 173: TXREG = val/1000+48;
  6965  156B  27EF  160A  118A   	fcall	PL20	;call to abstracted procedure
  6966  156E  2751  160A  118A   	fcall	___awdiv
  6967  1571  0829               	movf	?___awdiv,w
  6968  1572  3E30               	addlw	48
  6969  1573  0099               	movwf	25	;volatile
  6970                           
  6971                           ;serialv2.h: 174: _delay(10);
  6972  1574  3003               	movlw	3
  6973  1575  00B3               	movwf	??_Serial_Print_Int
  6974  1576                     u6567:	
  6975  1576  0BB3               	decfsz	??_Serial_Print_Int,f
  6976  1577  2D76               	goto	u6567
  6977                           
  6978                           ;serialv2.h: 175: val = val%1000;
  6979  1578  27DC  160A  118A   	fcall	PL14	;call to abstracted procedure
  6980  157B  2796  160A  118A   	fcall	___awmod
  6981  157E  0824               	movf	?___awmod+1,w
  6982  157F  00B2               	movwf	Serial_Print_Int@val+1
  6983  1580  0823               	movf	?___awmod,w
  6984  1581  00B1               	movwf	Serial_Print_Int@val
  6985  1582                     l379:	
  6986                           ;serialv2.h: 177: while(!TXIF);
  6987                           
  6988  1582  1E0C               	btfss	12,4	;volatile
  6989  1583  2D82               	goto	l379
  6990                           
  6991                           ;serialv2.h: 178: TXREG = val/100+48;
  6992  1584  27E7  160A  118A   	fcall	PL16	;call to abstracted procedure
  6993  1587  2751  160A  118A   	fcall	___awdiv
  6994  158A  0829               	movf	?___awdiv,w
  6995  158B  3E30               	addlw	48
  6996  158C  0099               	movwf	25	;volatile
  6997                           
  6998                           ;serialv2.h: 179: _delay(10);
  6999  158D  3003               	movlw	3
  7000  158E  00B3               	movwf	??_Serial_Print_Int
  7001  158F                     u6577:	
  7002  158F  0BB3               	decfsz	??_Serial_Print_Int,f
  7003  1590  2D8F               	goto	u6577
  7004                           
  7005                           ;serialv2.h: 180: val = val%100;
  7006  1591  3064               	movlw	100
  7007  1592  27D3  160A  118A   	fcall	PL4	;call to abstracted procedure
  7008  1595  2796  160A  118A   	fcall	___awmod
  7009  1598  0824               	movf	?___awmod+1,w
  7010  1599  00B2               	movwf	Serial_Print_Int@val+1
  7011  159A  0823               	movf	?___awmod,w
  7012  159B  00B1               	movwf	Serial_Print_Int@val
  7013  159C                     l382:	
  7014                           ;serialv2.h: 182: while(!TXIF);
  7015                           
  7016  159C  1A0C               	btfsc	12,4	;volatile
  7017  159D  2D3D               	goto	l4186
  7018  159E  2D9C               	goto	l382
  7019  159F                     l4214:	
  7020                           
  7021                           ;serialv2.h: 187: else if(val > 99){
  7022  159F  27F8  160A  118A   	fcall	PL26	;call to abstracted procedure
  7023  15A2  1D03               	skipz
  7024  15A3  2DA6               	goto	u5485
  7025  15A4  3064               	movlw	100
  7026  15A5  0231               	subwf	Serial_Print_Int@val,w
  7027  15A6                     u5485:	
  7028  15A6  1C03               	skipc
  7029  15A7  2DC7               	goto	l4230
  7030  15A8                     l387:	
  7031  15A8  1283               	bcf	3,5	;RP0=0, select bank0
  7032  15A9  1303               	bcf	3,6	;RP1=0, select bank0
  7033  15AA  1E0C               	btfss	12,4	;volatile
  7034  15AB  2DA8               	goto	l387
  7035                           
  7036                           ;serialv2.h: 189: TXREG = val/100+48;
  7037  15AC  27E7  160A  118A   	fcall	PL16	;call to abstracted procedure
  7038  15AF  2751  160A  118A   	fcall	___awdiv
  7039  15B2  0829               	movf	?___awdiv,w
  7040  15B3  3E30               	addlw	48
  7041  15B4  0099               	movwf	25	;volatile
  7042                           
  7043                           ;serialv2.h: 190: _delay(10);
  7044  15B5  3003               	movlw	3
  7045  15B6  00B3               	movwf	??_Serial_Print_Int
  7046  15B7                     u6587:	
  7047  15B7  0BB3               	decfsz	??_Serial_Print_Int,f
  7048  15B8  2DB7               	goto	u6587
  7049                           
  7050                           ;serialv2.h: 191: val = val%100;
  7051  15B9  3064               	movlw	100
  7052  15BA  27D3  160A  118A   	fcall	PL4	;call to abstracted procedure
  7053  15BD  2796  160A  118A   	fcall	___awmod
  7054  15C0  0824               	movf	?___awmod+1,w
  7055  15C1  00B2               	movwf	Serial_Print_Int@val+1
  7056  15C2  0823               	movf	?___awmod,w
  7057  15C3  00B1               	movwf	Serial_Print_Int@val
  7058  15C4                     l390:	
  7059                           ;serialv2.h: 193: while(!TXIF);
  7060                           
  7061  15C4  1A0C               	btfsc	12,4	;volatile
  7062  15C5  2D3D               	goto	l4186
  7063  15C6  2DC4               	goto	l390
  7064  15C7                     l4230:	
  7065                           
  7066                           ;serialv2.h: 198: else if(val > 9){
  7067  15C7  27F8  160A  118A   	fcall	PL26	;call to abstracted procedure
  7068  15CA  1D03               	skipz
  7069  15CB  2DCE               	goto	u5515
  7070  15CC  300A               	movlw	10
  7071  15CD  0231               	subwf	Serial_Print_Int@val,w
  7072  15CE                     u5515:	
  7073  15CE  1C03               	skipc
  7074  15CF  2DD5               	goto	l398
  7075  15D0                     l395:	
  7076  15D0  1283               	bcf	3,5	;RP0=0, select bank0
  7077  15D1  1303               	bcf	3,6	;RP1=0, select bank0
  7078  15D2  1A0C               	btfsc	12,4	;volatile
  7079  15D3  2D3D               	goto	l4186
  7080  15D4  2DD0               	goto	l395
  7081  15D5                     l398:	
  7082  15D5  1283               	bcf	3,5	;RP0=0, select bank0
  7083  15D6  1303               	bcf	3,6	;RP1=0, select bank0
  7084  15D7  1E0C               	btfss	12,4	;volatile
  7085  15D8  2DD5               	goto	l398
  7086                           
  7087                           ;serialv2.h: 205: TXREG = val+48;
  7088  15D9  0831               	movf	Serial_Print_Int@val,w
  7089  15DA  3E30               	addlw	48
  7090  15DB  0099               	movwf	25	;volatile
  7091                           
  7092                           ;serialv2.h: 206: _delay(10);
  7093  15DC  3003               	movlw	3
  7094  15DD  00B3               	movwf	??_Serial_Print_Int
  7095  15DE                     u6597:	
  7096  15DE  0BB3               	decfsz	??_Serial_Print_Int,f
  7097  15DF  2DDE               	goto	u6597
  7098  15E0  0008               	return
  7099  15E1                     __end_of_Serial_Print_Int:	
  7100  15E1                     __ptext33:	
  7101 ;; *************** function _Serial_Println_Int *****************
  7102 ;; Defined at:
  7103 ;;		line 58 in file "serialv2.h"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  val             2   17[BANK0 ] int 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;		None
  7108 ;; Return value:  Size  Location     Type
  7109 ;;		None               void
  7110 ;; Registers used:
  7111 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7112 ;; Tracked objects:
  7113 ;;		On entry : 300/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7117 ;;      Params:         0       2       0       0       0
  7118 ;;      Locals:         0       0       0       0       0
  7119 ;;      Temps:          0       1       0       0       0
  7120 ;;      Totals:         0       3       0       0       0
  7121 ;;Total ram usage:        3 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:    6
  7124 ;; This function calls:
  7125 ;;		___awdiv
  7126 ;;		___awmod
  7127 ;; This function is called by:
  7128 ;;		_CheckMode
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           
  7133                           ;psect for function _Serial_Println_Int
  7134  15E1                     _Serial_Println_Int:	
  7135                           
  7136                           ;serialv2.h: 61: if(val < 0){
  7137                           
  7138                           ;incstack = 0
  7139                           ; Regs used in _Serial_Println_Int: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7140  15E1  1FB2               	btfss	Serial_Println_Int@val+1,7
  7141  15E2  2DF2               	goto	l3532
  7142  15E3                     l299:	
  7143  15E3  1E0C               	btfss	12,4	;volatile
  7144  15E4  2DE3               	goto	l299
  7145                           
  7146                           ;serialv2.h: 63: TXREG = '-';
  7147  15E5  302D               	movlw	45
  7148  15E6  0099               	movwf	25	;volatile
  7149                           
  7150                           ;serialv2.h: 64: _delay(10);
  7151  15E7  3003               	movlw	3
  7152  15E8  00B3               	movwf	??_Serial_Println_Int
  7153  15E9                     u6677:	
  7154  15E9  0BB3               	decfsz	??_Serial_Println_Int,f
  7155  15EA  2DE9               	goto	u6677
  7156                           
  7157                           ;serialv2.h: 65: val = -val;
  7158  15EB  1283               	bcf	3,5	;RP0=0, select bank0
  7159  15EC  1303               	bcf	3,6	;RP1=0, select bank0
  7160  15ED  09B1               	comf	Serial_Println_Int@val,f
  7161  15EE  09B2               	comf	Serial_Println_Int@val+1,f
  7162  15EF  0AB1               	incf	Serial_Println_Int@val,f
  7163  15F0  1903               	skipnz
  7164  15F1  0AB2               	incf	Serial_Println_Int@val+1,f
  7165  15F2                     l3532:	
  7166                           
  7167                           ;serialv2.h: 66: }
  7168                           ;serialv2.h: 67: if(val > 9999){
  7169  15F2  0832               	movf	Serial_Println_Int@val+1,w
  7170  15F3  3A80               	xorlw	128
  7171  15F4  00FF               	movwf	127
  7172  15F5  30A7               	movlw	167
  7173  15F6  027F               	subwf	127,w
  7174  15F7  1D03               	skipz
  7175  15F8  2DFB               	goto	u4325
  7176  15F9  3010               	movlw	16
  7177  15FA  0231               	subwf	Serial_Println_Int@val,w
  7178  15FB                     u4325:	
  7179  15FB  1C03               	skipc
  7180  15FC  2E90               	goto	l3560
  7181  15FD                     l303:	
  7182  15FD  1283               	bcf	3,5	;RP0=0, select bank0
  7183  15FE  1303               	bcf	3,6	;RP1=0, select bank0
  7184  15FF  1E0C               	btfss	12,4	;volatile
  7185  1600  2DFD               	goto	l303
  7186                           
  7187                           ;serialv2.h: 69: TXREG = val/10000+48;
  7188  1601  3010               	movlw	16
  7189  1602  00A9               	movwf	___awdiv@divisor
  7190  1603  3027               	movlw	39
  7191  1604  00AA               	movwf	___awdiv@divisor+1
  7192  1605  0832               	movf	Serial_Println_Int@val+1,w
  7193  1606  00AC               	movwf	___awdiv@dividend+1
  7194  1607  0831               	movf	Serial_Println_Int@val,w
  7195  1608  00AB               	movwf	___awdiv@dividend
  7196  1609  2751  160A  118A   	fcall	___awdiv
  7197  160C  0829               	movf	?___awdiv,w
  7198  160D  3E30               	addlw	48
  7199  160E  0099               	movwf	25	;volatile
  7200                           
  7201                           ;serialv2.h: 70: _delay(10);
  7202  160F  3003               	movlw	3
  7203  1610  00B3               	movwf	??_Serial_Println_Int
  7204  1611                     u6687:	
  7205  1611  0BB3               	decfsz	??_Serial_Println_Int,f
  7206  1612  2E11               	goto	u6687
  7207                           
  7208                           ;serialv2.h: 71: val = val%10000;
  7209  1613  3010               	movlw	16
  7210  1614  1283               	bcf	3,5	;RP0=0, select bank0
  7211  1615  1303               	bcf	3,6	;RP1=0, select bank0
  7212  1616  00A3               	movwf	___awmod@divisor
  7213  1617  3027               	movlw	39
  7214  1618  00A4               	movwf	___awmod@divisor+1
  7215  1619  0832               	movf	Serial_Println_Int@val+1,w
  7216  161A  00A6               	movwf	___awmod@dividend+1
  7217  161B  0831               	movf	Serial_Println_Int@val,w
  7218  161C  00A5               	movwf	___awmod@dividend
  7219  161D  2796  160A  118A   	fcall	___awmod
  7220  1620  0824               	movf	?___awmod+1,w
  7221  1621  00B2               	movwf	Serial_Println_Int@val+1
  7222  1622  0823               	movf	?___awmod,w
  7223  1623  00B1               	movwf	Serial_Println_Int@val
  7224  1624                     l306:	
  7225                           ;serialv2.h: 73: while(!TXIF);
  7226                           
  7227  1624  1E0C               	btfss	12,4	;volatile
  7228  1625  2E24               	goto	l306
  7229                           
  7230                           ;serialv2.h: 74: TXREG = val/1000+48;
  7231  1626  30E8               	movlw	232
  7232  1627  00A9               	movwf	___awdiv@divisor
  7233  1628  3003               	movlw	3
  7234  1629  00AA               	movwf	___awdiv@divisor+1
  7235  162A  0832               	movf	Serial_Println_Int@val+1,w
  7236  162B  00AC               	movwf	___awdiv@dividend+1
  7237  162C  0831               	movf	Serial_Println_Int@val,w
  7238  162D  00AB               	movwf	___awdiv@dividend
  7239  162E  2751  160A  118A   	fcall	___awdiv
  7240  1631  0829               	movf	?___awdiv,w
  7241  1632  3E30               	addlw	48
  7242  1633  0099               	movwf	25	;volatile
  7243                           
  7244                           ;serialv2.h: 75: _delay(10);
  7245  1634  3003               	movlw	3
  7246  1635  00B3               	movwf	??_Serial_Println_Int
  7247  1636                     u6697:	
  7248  1636  0BB3               	decfsz	??_Serial_Println_Int,f
  7249  1637  2E36               	goto	u6697
  7250                           
  7251                           ;serialv2.h: 76: val = val%1000;
  7252  1638  30E8               	movlw	232
  7253  1639  1283               	bcf	3,5	;RP0=0, select bank0
  7254  163A  1303               	bcf	3,6	;RP1=0, select bank0
  7255  163B  00A3               	movwf	___awmod@divisor
  7256  163C  3003               	movlw	3
  7257  163D  00A4               	movwf	___awmod@divisor+1
  7258  163E  0832               	movf	Serial_Println_Int@val+1,w
  7259  163F  00A6               	movwf	___awmod@dividend+1
  7260  1640  0831               	movf	Serial_Println_Int@val,w
  7261  1641  00A5               	movwf	___awmod@dividend
  7262  1642  2796  160A  118A   	fcall	___awmod
  7263  1645  0824               	movf	?___awmod+1,w
  7264  1646  00B2               	movwf	Serial_Println_Int@val+1
  7265  1647  0823               	movf	?___awmod,w
  7266  1648  00B1               	movwf	Serial_Println_Int@val
  7267  1649                     l309:	
  7268                           ;serialv2.h: 78: while(!TXIF);
  7269                           
  7270  1649  1E0C               	btfss	12,4	;volatile
  7271  164A  2E49               	goto	l309
  7272                           
  7273                           ;serialv2.h: 79: TXREG = val/100+48;
  7274  164B  3064               	movlw	100
  7275  164C  00A9               	movwf	___awdiv@divisor
  7276  164D  01AA               	clrf	___awdiv@divisor+1
  7277  164E  0832               	movf	Serial_Println_Int@val+1,w
  7278  164F  00AC               	movwf	___awdiv@dividend+1
  7279  1650  0831               	movf	Serial_Println_Int@val,w
  7280  1651  00AB               	movwf	___awdiv@dividend
  7281  1652  2751  160A  118A   	fcall	___awdiv
  7282  1655  0829               	movf	?___awdiv,w
  7283  1656  3E30               	addlw	48
  7284  1657  0099               	movwf	25	;volatile
  7285                           
  7286                           ;serialv2.h: 80: _delay(10);
  7287  1658  3003               	movlw	3
  7288  1659  00B3               	movwf	??_Serial_Println_Int
  7289  165A                     u6707:	
  7290  165A  0BB3               	decfsz	??_Serial_Println_Int,f
  7291  165B  2E5A               	goto	u6707
  7292                           
  7293                           ;serialv2.h: 81: val = val%100;
  7294  165C  3064               	movlw	100
  7295  165D  1283               	bcf	3,5	;RP0=0, select bank0
  7296  165E  1303               	bcf	3,6	;RP1=0, select bank0
  7297  165F  00A3               	movwf	___awmod@divisor
  7298  1660  01A4               	clrf	___awmod@divisor+1
  7299  1661  0832               	movf	Serial_Println_Int@val+1,w
  7300  1662  00A6               	movwf	___awmod@dividend+1
  7301  1663  0831               	movf	Serial_Println_Int@val,w
  7302  1664  00A5               	movwf	___awmod@dividend
  7303  1665  2796  160A  118A   	fcall	___awmod
  7304  1668  0824               	movf	?___awmod+1,w
  7305  1669  00B2               	movwf	Serial_Println_Int@val+1
  7306  166A  0823               	movf	?___awmod,w
  7307  166B  00B1               	movwf	Serial_Println_Int@val
  7308  166C                     l312:	
  7309                           ;serialv2.h: 83: while(!TXIF);
  7310                           
  7311  166C  1E0C               	btfss	12,4	;volatile
  7312  166D  2E6C               	goto	l312
  7313  166E                     l3554:	
  7314                           
  7315                           ;serialv2.h: 84: TXREG = val/10+48;
  7316  166E  300A               	movlw	10
  7317  166F  00A9               	movwf	___awdiv@divisor
  7318  1670  01AA               	clrf	___awdiv@divisor+1
  7319  1671  0832               	movf	Serial_Println_Int@val+1,w
  7320  1672  00AC               	movwf	___awdiv@dividend+1
  7321  1673  0831               	movf	Serial_Println_Int@val,w
  7322  1674  00AB               	movwf	___awdiv@dividend
  7323  1675  2751  160A  118A   	fcall	___awdiv
  7324  1678  0829               	movf	?___awdiv,w
  7325  1679  3E30               	addlw	48
  7326  167A  0099               	movwf	25	;volatile
  7327                           
  7328                           ;serialv2.h: 85: _delay(10);
  7329  167B  3003               	movlw	3
  7330  167C  00B3               	movwf	??_Serial_Println_Int
  7331  167D                     u6717:	
  7332  167D  0BB3               	decfsz	??_Serial_Println_Int,f
  7333  167E  2E7D               	goto	u6717
  7334                           
  7335                           ;serialv2.h: 86: val = val%10;
  7336  167F  300A               	movlw	10
  7337  1680  1283               	bcf	3,5	;RP0=0, select bank0
  7338  1681  1303               	bcf	3,6	;RP1=0, select bank0
  7339  1682  00A3               	movwf	___awmod@divisor
  7340  1683  01A4               	clrf	___awmod@divisor+1
  7341  1684  0832               	movf	Serial_Println_Int@val+1,w
  7342  1685  00A6               	movwf	___awmod@dividend+1
  7343  1686  0831               	movf	Serial_Println_Int@val,w
  7344  1687  00A5               	movwf	___awmod@dividend
  7345  1688  2796  160A  118A   	fcall	___awmod
  7346  168B  0824               	movf	?___awmod+1,w
  7347  168C  00B2               	movwf	Serial_Println_Int@val+1
  7348  168D  0823               	movf	?___awmod,w
  7349  168E  00B1               	movwf	Serial_Println_Int@val
  7350                           
  7351                           ;serialv2.h: 87: }
  7352  168F  2F31               	goto	l339
  7353  1690                     l3560:	
  7354                           
  7355                           ;serialv2.h: 88: else if(val > 999){
  7356  1690  1283               	bcf	3,5	;RP0=0, select bank0
  7357  1691  1303               	bcf	3,6	;RP1=0, select bank0
  7358  1692  0832               	movf	Serial_Println_Int@val+1,w
  7359  1693  3A80               	xorlw	128
  7360  1694  00FF               	movwf	127
  7361  1695  3083               	movlw	131
  7362  1696  027F               	subwf	127,w
  7363  1697  1D03               	skipz
  7364  1698  2E9B               	goto	u4375
  7365  1699  30E8               	movlw	232
  7366  169A  0231               	subwf	Serial_Println_Int@val,w
  7367  169B                     u4375:	
  7368  169B  1C03               	skipc
  7369  169C  2EEA               	goto	l3582
  7370  169D                     l317:	
  7371  169D  1283               	bcf	3,5	;RP0=0, select bank0
  7372  169E  1303               	bcf	3,6	;RP1=0, select bank0
  7373  169F  1E0C               	btfss	12,4	;volatile
  7374  16A0  2E9D               	goto	l317
  7375                           
  7376                           ;serialv2.h: 90: TXREG = val/1000+48;
  7377  16A1  30E8               	movlw	232
  7378  16A2  00A9               	movwf	___awdiv@divisor
  7379  16A3  3003               	movlw	3
  7380  16A4  00AA               	movwf	___awdiv@divisor+1
  7381  16A5  0832               	movf	Serial_Println_Int@val+1,w
  7382  16A6  00AC               	movwf	___awdiv@dividend+1
  7383  16A7  0831               	movf	Serial_Println_Int@val,w
  7384  16A8  00AB               	movwf	___awdiv@dividend
  7385  16A9  2751  160A  118A   	fcall	___awdiv
  7386  16AC  0829               	movf	?___awdiv,w
  7387  16AD  3E30               	addlw	48
  7388  16AE  0099               	movwf	25	;volatile
  7389                           
  7390                           ;serialv2.h: 91: _delay(10);
  7391  16AF  3003               	movlw	3
  7392  16B0  00B3               	movwf	??_Serial_Println_Int
  7393  16B1                     u6727:	
  7394  16B1  0BB3               	decfsz	??_Serial_Println_Int,f
  7395  16B2  2EB1               	goto	u6727
  7396                           
  7397                           ;serialv2.h: 92: val = val%1000;
  7398  16B3  30E8               	movlw	232
  7399  16B4  1283               	bcf	3,5	;RP0=0, select bank0
  7400  16B5  1303               	bcf	3,6	;RP1=0, select bank0
  7401  16B6  00A3               	movwf	___awmod@divisor
  7402  16B7  3003               	movlw	3
  7403  16B8  00A4               	movwf	___awmod@divisor+1
  7404  16B9  0832               	movf	Serial_Println_Int@val+1,w
  7405  16BA  00A6               	movwf	___awmod@dividend+1
  7406  16BB  0831               	movf	Serial_Println_Int@val,w
  7407  16BC  00A5               	movwf	___awmod@dividend
  7408  16BD  2796  160A  118A   	fcall	___awmod
  7409  16C0  0824               	movf	?___awmod+1,w
  7410  16C1  00B2               	movwf	Serial_Println_Int@val+1
  7411  16C2  0823               	movf	?___awmod,w
  7412  16C3  00B1               	movwf	Serial_Println_Int@val
  7413  16C4                     l320:	
  7414                           ;serialv2.h: 94: while(!TXIF);
  7415                           
  7416  16C4  1E0C               	btfss	12,4	;volatile
  7417  16C5  2EC4               	goto	l320
  7418                           
  7419                           ;serialv2.h: 95: TXREG = val/100+48;
  7420  16C6  3064               	movlw	100
  7421  16C7  00A9               	movwf	___awdiv@divisor
  7422  16C8  01AA               	clrf	___awdiv@divisor+1
  7423  16C9  0832               	movf	Serial_Println_Int@val+1,w
  7424  16CA  00AC               	movwf	___awdiv@dividend+1
  7425  16CB  0831               	movf	Serial_Println_Int@val,w
  7426  16CC  00AB               	movwf	___awdiv@dividend
  7427  16CD  2751  160A  118A   	fcall	___awdiv
  7428  16D0  0829               	movf	?___awdiv,w
  7429  16D1  3E30               	addlw	48
  7430  16D2  0099               	movwf	25	;volatile
  7431                           
  7432                           ;serialv2.h: 96: _delay(10);
  7433  16D3  3003               	movlw	3
  7434  16D4  00B3               	movwf	??_Serial_Println_Int
  7435  16D5                     u6737:	
  7436  16D5  0BB3               	decfsz	??_Serial_Println_Int,f
  7437  16D6  2ED5               	goto	u6737
  7438                           
  7439                           ;serialv2.h: 97: val = val%100;
  7440  16D7  3064               	movlw	100
  7441  16D8  1283               	bcf	3,5	;RP0=0, select bank0
  7442  16D9  1303               	bcf	3,6	;RP1=0, select bank0
  7443  16DA  00A3               	movwf	___awmod@divisor
  7444  16DB  01A4               	clrf	___awmod@divisor+1
  7445  16DC  0832               	movf	Serial_Println_Int@val+1,w
  7446  16DD  00A6               	movwf	___awmod@dividend+1
  7447  16DE  0831               	movf	Serial_Println_Int@val,w
  7448  16DF  00A5               	movwf	___awmod@dividend
  7449  16E0  2796  160A  118A   	fcall	___awmod
  7450  16E3  0824               	movf	?___awmod+1,w
  7451  16E4  00B2               	movwf	Serial_Println_Int@val+1
  7452  16E5  0823               	movf	?___awmod,w
  7453  16E6  00B1               	movwf	Serial_Println_Int@val
  7454  16E7                     l323:	
  7455                           ;serialv2.h: 99: while(!TXIF);
  7456                           
  7457  16E7  1A0C               	btfsc	12,4	;volatile
  7458  16E8  2E6E               	goto	l3554
  7459  16E9  2EE7               	goto	l323
  7460  16EA                     l3582:	
  7461                           
  7462                           ;serialv2.h: 104: else if(val > 99){
  7463  16EA  1283               	bcf	3,5	;RP0=0, select bank0
  7464  16EB  1303               	bcf	3,6	;RP1=0, select bank0
  7465  16EC  0832               	movf	Serial_Println_Int@val+1,w
  7466  16ED  3A80               	xorlw	128
  7467  16EE  00FF               	movwf	127
  7468  16EF  3080               	movlw	128
  7469  16F0  027F               	subwf	127,w
  7470  16F1  1D03               	skipz
  7471  16F2  2EF5               	goto	u4415
  7472  16F3  3064               	movlw	100
  7473  16F4  0231               	subwf	Serial_Println_Int@val,w
  7474  16F5                     u4415:	
  7475  16F5  1C03               	skipc
  7476  16F6  2F1F               	goto	l3598
  7477  16F7                     l328:	
  7478  16F7  1283               	bcf	3,5	;RP0=0, select bank0
  7479  16F8  1303               	bcf	3,6	;RP1=0, select bank0
  7480  16F9  1E0C               	btfss	12,4	;volatile
  7481  16FA  2EF7               	goto	l328
  7482                           
  7483                           ;serialv2.h: 106: TXREG = val/100+48;
  7484  16FB  3064               	movlw	100
  7485  16FC  00A9               	movwf	___awdiv@divisor
  7486  16FD  01AA               	clrf	___awdiv@divisor+1
  7487  16FE  0832               	movf	Serial_Println_Int@val+1,w
  7488  16FF  00AC               	movwf	___awdiv@dividend+1
  7489  1700  0831               	movf	Serial_Println_Int@val,w
  7490  1701  00AB               	movwf	___awdiv@dividend
  7491  1702  2751  160A  118A   	fcall	___awdiv
  7492  1705  0829               	movf	?___awdiv,w
  7493  1706  3E30               	addlw	48
  7494  1707  0099               	movwf	25	;volatile
  7495                           
  7496                           ;serialv2.h: 107: _delay(10);
  7497  1708  3003               	movlw	3
  7498  1709  00B3               	movwf	??_Serial_Println_Int
  7499  170A                     u6747:	
  7500  170A  0BB3               	decfsz	??_Serial_Println_Int,f
  7501  170B  2F0A               	goto	u6747
  7502                           
  7503                           ;serialv2.h: 108: val = val%100;
  7504  170C  3064               	movlw	100
  7505  170D  1283               	bcf	3,5	;RP0=0, select bank0
  7506  170E  1303               	bcf	3,6	;RP1=0, select bank0
  7507  170F  00A3               	movwf	___awmod@divisor
  7508  1710  01A4               	clrf	___awmod@divisor+1
  7509  1711  0832               	movf	Serial_Println_Int@val+1,w
  7510  1712  00A6               	movwf	___awmod@dividend+1
  7511  1713  0831               	movf	Serial_Println_Int@val,w
  7512  1714  00A5               	movwf	___awmod@dividend
  7513  1715  2796  160A  118A   	fcall	___awmod
  7514  1718  0824               	movf	?___awmod+1,w
  7515  1719  00B2               	movwf	Serial_Println_Int@val+1
  7516  171A  0823               	movf	?___awmod,w
  7517  171B  00B1               	movwf	Serial_Println_Int@val
  7518  171C                     l331:	
  7519                           ;serialv2.h: 110: while(!TXIF);
  7520                           
  7521  171C  1A0C               	btfsc	12,4	;volatile
  7522  171D  2E6E               	goto	l3554
  7523  171E  2F1C               	goto	l331
  7524  171F                     l3598:	
  7525                           
  7526                           ;serialv2.h: 115: else if(val > 9){
  7527  171F  1283               	bcf	3,5	;RP0=0, select bank0
  7528  1720  1303               	bcf	3,6	;RP1=0, select bank0
  7529  1721  0832               	movf	Serial_Println_Int@val+1,w
  7530  1722  3A80               	xorlw	128
  7531  1723  00FF               	movwf	127
  7532  1724  3080               	movlw	128
  7533  1725  027F               	subwf	127,w
  7534  1726  1D03               	skipz
  7535  1727  2F2A               	goto	u4445
  7536  1728  300A               	movlw	10
  7537  1729  0231               	subwf	Serial_Println_Int@val,w
  7538  172A                     u4445:	
  7539  172A  1C03               	skipc
  7540  172B  2F31               	goto	l339
  7541  172C                     l336:	
  7542  172C  1283               	bcf	3,5	;RP0=0, select bank0
  7543  172D  1303               	bcf	3,6	;RP1=0, select bank0
  7544  172E  1A0C               	btfsc	12,4	;volatile
  7545  172F  2E6E               	goto	l3554
  7546  1730  2F2C               	goto	l336
  7547  1731                     l339:	
  7548  1731  1283               	bcf	3,5	;RP0=0, select bank0
  7549  1732  1303               	bcf	3,6	;RP1=0, select bank0
  7550  1733  1E0C               	btfss	12,4	;volatile
  7551  1734  2F31               	goto	l339
  7552                           
  7553                           ;serialv2.h: 122: TXREG = val+48;
  7554  1735  0831               	movf	Serial_Println_Int@val,w
  7555  1736  3E30               	addlw	48
  7556  1737  0099               	movwf	25	;volatile
  7557                           
  7558                           ;serialv2.h: 123: _delay(10);
  7559  1738  3003               	movlw	3
  7560  1739  00B3               	movwf	??_Serial_Println_Int
  7561  173A                     u6757:	
  7562  173A  0BB3               	decfsz	??_Serial_Println_Int,f
  7563  173B  2F3A               	goto	u6757
  7564  173C                     l342:	
  7565                           ;serialv2.h: 124: while(!TXIF);
  7566                           
  7567  173C  1283               	bcf	3,5	;RP0=0, select bank0
  7568  173D  1303               	bcf	3,6	;RP1=0, select bank0
  7569  173E  1E0C               	btfss	12,4	;volatile
  7570  173F  2F3C               	goto	l342
  7571                           
  7572                           ;serialv2.h: 125: TXREG = 13;
  7573  1740  300D               	movlw	13
  7574  1741  0099               	movwf	25	;volatile
  7575                           
  7576                           ;serialv2.h: 126: _delay(10);
  7577  1742  3003               	movlw	3
  7578  1743  00B3               	movwf	??_Serial_Println_Int
  7579  1744                     u6767:	
  7580  1744  0BB3               	decfsz	??_Serial_Println_Int,f
  7581  1745  2F44               	goto	u6767
  7582  1746                     l345:	
  7583                           ;serialv2.h: 127: while(!TXIF);
  7584                           
  7585  1746  1283               	bcf	3,5	;RP0=0, select bank0
  7586  1747  1303               	bcf	3,6	;RP1=0, select bank0
  7587  1748  1E0C               	btfss	12,4	;volatile
  7588  1749  2F46               	goto	l345
  7589                           
  7590                           ;serialv2.h: 128: TXREG = 10;
  7591  174A  300A               	movlw	10
  7592  174B  0099               	movwf	25	;volatile
  7593                           
  7594                           ;serialv2.h: 129: _delay(10);
  7595  174C  3003               	movlw	3
  7596  174D  00B3               	movwf	??_Serial_Println_Int
  7597  174E                     u6777:	
  7598  174E  0BB3               	decfsz	??_Serial_Println_Int,f
  7599  174F  2F4E               	goto	u6777
  7600  1750  0008               	return
  7601  1751                     __end_of_Serial_Println_Int:	
  7602  1751                     __ptext35:	
  7603 ;; *************** function ___awdiv *****************
  7604 ;; Defined at:
  7605 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  divisor         2    9[BANK0 ] int 
  7608 ;;  dividend        2   11[BANK0 ] int 
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;  quotient        2   15[BANK0 ] int 
  7611 ;;  sign            1   14[BANK0 ] unsigned char 
  7612 ;;  counter         1   13[BANK0 ] unsigned char 
  7613 ;; Return value:  Size  Location     Type
  7614 ;;                  2    9[BANK0 ] int 
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0
  7617 ;; Tracked objects:
  7618 ;;		On entry : 300/0
  7619 ;;		On exit  : 300/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7622 ;;      Params:         0       4       0       0       0
  7623 ;;      Locals:         0       4       0       0       0
  7624 ;;      Temps:          0       0       0       0       0
  7625 ;;      Totals:         0       8       0       0       0
  7626 ;;Total ram usage:        8 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; Hardware stack levels required when called:    5
  7629 ;; This function calls:
  7630 ;;		Nothing
  7631 ;; This function is called by:
  7632 ;;		_Serial_Println_Int
  7633 ;;		_Serial_Print_Int
  7634 ;;		_a2d_read
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           
  7639                           ;psect for function ___awdiv
  7640  1751                     ___awdiv:	
  7641  1751                     l3376:	
  7642                           ;incstack = 0
  7643                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7644                           
  7645  1751  01AE               	clrf	___awdiv@sign
  7646  1752  1FAA               	btfss	___awdiv@divisor+1,7
  7647  1753  2F5B               	goto	l3384
  7648  1754  09A9               	comf	___awdiv@divisor,f
  7649  1755  09AA               	comf	___awdiv@divisor+1,f
  7650  1756  0AA9               	incf	___awdiv@divisor,f
  7651  1757  1903               	skipnz
  7652  1758  0AAA               	incf	___awdiv@divisor+1,f
  7653  1759  01AE               	clrf	___awdiv@sign
  7654  175A  0AAE               	incf	___awdiv@sign,f
  7655  175B                     l3384:	
  7656  175B  1FAC               	btfss	___awdiv@dividend+1,7
  7657  175C  2F64               	goto	l3390
  7658  175D  09AB               	comf	___awdiv@dividend,f
  7659  175E  09AC               	comf	___awdiv@dividend+1,f
  7660  175F  0AAB               	incf	___awdiv@dividend,f
  7661  1760  1903               	skipnz
  7662  1761  0AAC               	incf	___awdiv@dividend+1,f
  7663  1762  3001               	movlw	1
  7664  1763  06AE               	xorwf	___awdiv@sign,f
  7665  1764                     l3390:	
  7666  1764  01AF               	clrf	___awdiv@quotient
  7667  1765  01B0               	clrf	___awdiv@quotient+1
  7668  1766  0829               	movf	___awdiv@divisor,w
  7669  1767  042A               	iorwf	___awdiv@divisor+1,w
  7670  1768  1903               	btfsc	3,2
  7671  1769  2F89               	goto	l3412
  7672  176A  01AD               	clrf	___awdiv@counter
  7673  176B                     L33:	
  7674  176B  0AAD               	incf	___awdiv@counter,f
  7675  176C  1BAA               	btfsc	___awdiv@divisor+1,7
  7676  176D  2F72               	goto	l3400
  7677  176E  1003               	clrc
  7678  176F  0DA9               	rlf	___awdiv@divisor,f
  7679  1770  0DAA               	rlf	___awdiv@divisor+1,f
  7680  1771  2F6B               	goto	L33
  7681  1772                     l3400:	
  7682  1772  1003               	clrc
  7683  1773  0DAF               	rlf	___awdiv@quotient,f
  7684  1774  0DB0               	rlf	___awdiv@quotient+1,f
  7685  1775  082A               	movf	___awdiv@divisor+1,w
  7686  1776  022C               	subwf	___awdiv@dividend+1,w
  7687  1777  1D03               	skipz
  7688  1778  2F7B               	goto	u4155
  7689  1779  0829               	movf	___awdiv@divisor,w
  7690  177A  022B               	subwf	___awdiv@dividend,w
  7691  177B                     u4155:	
  7692  177B  1C03               	skipc
  7693  177C  2F85               	goto	L34
  7694  177D  0829               	movf	___awdiv@divisor,w
  7695  177E  02AB               	subwf	___awdiv@dividend,f
  7696  177F  082A               	movf	___awdiv@divisor+1,w
  7697  1780  1C03               	skipc
  7698  1781  03AC               	decf	___awdiv@dividend+1,f
  7699  1782  02AC               	subwf	___awdiv@dividend+1,f
  7700  1783  142F               	bsf	___awdiv@quotient,0
  7701  1784  1003               	clrc
  7702  1785                     L34:	
  7703  1785  0CAA               	rrf	___awdiv@divisor+1,f
  7704  1786  0CA9               	rrf	___awdiv@divisor,f
  7705  1787  0BAD               	decfsz	___awdiv@counter,f
  7706  1788  2F72               	goto	l3400
  7707  1789                     l3412:	
  7708  1789  082E               	movf	___awdiv@sign,w
  7709  178A  1903               	btfsc	3,2
  7710  178B  2F91               	goto	l3416
  7711  178C  09AF               	comf	___awdiv@quotient,f
  7712  178D  09B0               	comf	___awdiv@quotient+1,f
  7713  178E  0AAF               	incf	___awdiv@quotient,f
  7714  178F  1903               	skipnz
  7715  1790  0AB0               	incf	___awdiv@quotient+1,f
  7716  1791                     l3416:	
  7717  1791  0830               	movf	___awdiv@quotient+1,w
  7718  1792  00AA               	movwf	?___awdiv+1
  7719  1793  082F               	movf	___awdiv@quotient,w
  7720  1794  00A9               	movwf	?___awdiv
  7721  1795  0008               	return
  7722  1796                     __end_of___awdiv:	
  7723  1796                     __ptext34:	
  7724 ;; *************** function ___awmod *****************
  7725 ;; Defined at:
  7726 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  7727 ;; Parameters:    Size  Location     Type
  7728 ;;  divisor         2    3[BANK0 ] int 
  7729 ;;  dividend        2    5[BANK0 ] int 
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;  sign            1    8[BANK0 ] unsigned char 
  7732 ;;  counter         1    7[BANK0 ] unsigned char 
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  2    3[BANK0 ] int 
  7735 ;; Registers used:
  7736 ;;		wreg, status,2, status,0
  7737 ;; Tracked objects:
  7738 ;;		On entry : 300/0
  7739 ;;		On exit  : 300/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7742 ;;      Params:         0       4       0       0       0
  7743 ;;      Locals:         0       2       0       0       0
  7744 ;;      Temps:          0       0       0       0       0
  7745 ;;      Totals:         0       6       0       0       0
  7746 ;;Total ram usage:        6 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; Hardware stack levels required when called:    5
  7749 ;; This function calls:
  7750 ;;		Nothing
  7751 ;; This function is called by:
  7752 ;;		_Serial_Println_Int
  7753 ;;		_Serial_Print_Int
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           
  7758                           ;psect for function ___awmod
  7759  1796                     ___awmod:	
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7763  1796  01A8               	clrf	___awmod@sign
  7764  1797  1FA6               	btfss	___awmod@dividend+1,7
  7765  1798  2FA0               	goto	l3428
  7766  1799  09A5               	comf	___awmod@dividend,f
  7767  179A  09A6               	comf	___awmod@dividend+1,f
  7768  179B  0AA5               	incf	___awmod@dividend,f
  7769  179C  1903               	skipnz
  7770  179D  0AA6               	incf	___awmod@dividend+1,f
  7771  179E  01A8               	clrf	___awmod@sign
  7772  179F  0AA8               	incf	___awmod@sign,f
  7773  17A0                     l3428:	
  7774  17A0  1FA4               	btfss	___awmod@divisor+1,7
  7775  17A1  2FA7               	goto	l3432
  7776  17A2  09A3               	comf	___awmod@divisor,f
  7777  17A3  09A4               	comf	___awmod@divisor+1,f
  7778  17A4  0AA3               	incf	___awmod@divisor,f
  7779  17A5  1903               	skipnz
  7780  17A6  0AA4               	incf	___awmod@divisor+1,f
  7781  17A7                     l3432:	
  7782  17A7  0823               	movf	___awmod@divisor,w
  7783  17A8  0424               	iorwf	___awmod@divisor+1,w
  7784  17A9  1903               	btfsc	3,2
  7785  17AA  2FC6               	goto	l3448
  7786  17AB  01A7               	clrf	___awmod@counter
  7787  17AC                     L31:	
  7788  17AC  0AA7               	incf	___awmod@counter,f
  7789  17AD  1BA4               	btfsc	___awmod@divisor+1,7
  7790  17AE  2FB3               	goto	l3440
  7791  17AF  1003               	clrc
  7792  17B0  0DA3               	rlf	___awmod@divisor,f
  7793  17B1  0DA4               	rlf	___awmod@divisor+1,f
  7794  17B2  2FAC               	goto	L31
  7795  17B3                     l3440:	
  7796  17B3  0824               	movf	___awmod@divisor+1,w
  7797  17B4  0226               	subwf	___awmod@dividend+1,w
  7798  17B5  1D03               	skipz
  7799  17B6  2FB9               	goto	u4225
  7800  17B7  0823               	movf	___awmod@divisor,w
  7801  17B8  0225               	subwf	___awmod@dividend,w
  7802  17B9                     u4225:	
  7803  17B9  1C03               	skipc
  7804  17BA  2FC2               	goto	L32
  7805  17BB  0823               	movf	___awmod@divisor,w
  7806  17BC  02A5               	subwf	___awmod@dividend,f
  7807  17BD  0824               	movf	___awmod@divisor+1,w
  7808  17BE  1C03               	skipc
  7809  17BF  03A6               	decf	___awmod@dividend+1,f
  7810  17C0  02A6               	subwf	___awmod@dividend+1,f
  7811  17C1  1003               	clrc
  7812  17C2                     L32:	
  7813  17C2  0CA4               	rrf	___awmod@divisor+1,f
  7814  17C3  0CA3               	rrf	___awmod@divisor,f
  7815  17C4  0BA7               	decfsz	___awmod@counter,f
  7816  17C5  2FB3               	goto	l3440
  7817  17C6                     l3448:	
  7818  17C6  0828               	movf	___awmod@sign,w
  7819  17C7  1903               	btfsc	3,2
  7820  17C8  2FCE               	goto	l3452
  7821  17C9  09A5               	comf	___awmod@dividend,f
  7822  17CA  09A6               	comf	___awmod@dividend+1,f
  7823  17CB  0AA5               	incf	___awmod@dividend,f
  7824  17CC  1903               	skipnz
  7825  17CD  0AA6               	incf	___awmod@dividend+1,f
  7826  17CE                     l3452:	
  7827  17CE  0826               	movf	___awmod@dividend+1,w
  7828  17CF  00A4               	movwf	?___awmod+1
  7829  17D0  0825               	movf	___awmod@dividend,w
  7830  17D1  00A3               	movwf	?___awmod
  7831  17D2  0008               	return
  7832  17D3                     __end_of___awmod:	
  7833  17D3                     PL4:	
  7834  17D3  1283               	bcf	3,5	;RP0=0, select bank0
  7835  17D4  1303               	bcf	3,6	;RP1=0, select bank0
  7836  17D5  00A3               	movwf	___awmod@divisor
  7837  17D6  01A4               	clrf	___awmod@divisor+1
  7838  17D7  0832               	movf	Serial_Print_Int@val+1,w
  7839  17D8  00A6               	movwf	___awmod@dividend+1
  7840  17D9  0831               	movf	Serial_Print_Int@val,w
  7841  17DA  00A5               	movwf	___awmod@dividend
  7842  17DB  0008               	return
  7843  17DC                     __end_ofPL4:	
  7844  17DC                     PL14:	
  7845  17DC  30E8               	movlw	232
  7846  17DD  1283               	bcf	3,5	;RP0=0, select bank0
  7847  17DE  1303               	bcf	3,6	;RP1=0, select bank0
  7848  17DF  00A3               	movwf	___awmod@divisor
  7849  17E0  3003               	movlw	3
  7850  17E1  00A4               	movwf	___awmod@divisor+1
  7851  17E2  0832               	movf	Serial_Print_Int@val+1,w
  7852  17E3  00A6               	movwf	___awmod@dividend+1
  7853  17E4  0831               	movf	Serial_Print_Int@val,w
  7854  17E5  00A5               	movwf	___awmod@dividend
  7855  17E6  0008               	return
  7856  17E7                     __end_ofPL14:	
  7857  17E7                     PL16:	
  7858  17E7  3064               	movlw	100
  7859  17E8  00A9               	movwf	___awdiv@divisor
  7860  17E9  01AA               	clrf	___awdiv@divisor+1
  7861  17EA  0832               	movf	Serial_Print_Int@val+1,w
  7862  17EB  00AC               	movwf	___awdiv@dividend+1
  7863  17EC  0831               	movf	Serial_Print_Int@val,w
  7864  17ED  00AB               	movwf	___awdiv@dividend
  7865  17EE  0008               	return
  7866  17EF                     __end_ofPL16:	
  7867  17EF                     PL20:	
  7868  17EF  30E8               	movlw	232
  7869  17F0  00A9               	movwf	___awdiv@divisor
  7870  17F1  3003               	movlw	3
  7871  17F2  00AA               	movwf	___awdiv@divisor+1
  7872  17F3  0832               	movf	Serial_Print_Int@val+1,w
  7873  17F4  00AC               	movwf	___awdiv@dividend+1
  7874  17F5  0831               	movf	Serial_Print_Int@val,w
  7875  17F6  00AB               	movwf	___awdiv@dividend
  7876  17F7  0008               	return
  7877  17F8                     __end_ofPL20:	
  7878  17F8                     PL26:	
  7879  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  7880  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  7881  17FA  0832               	movf	Serial_Print_Int@val+1,w
  7882  17FB  3A80               	xorlw	128
  7883  17FC  00FF               	movwf	127
  7884  17FD  3080               	movlw	128
  7885  17FE  027F               	subwf	127,w
  7886  17FF  0008               	return
  7887  1800                     __end_ofPL26:	
  7888                           
  7889                           	psect	text40
  7890  1E19                     __ptext40:	
  7891 ;; *************** function _Calculate *****************
  7892 ;; Defined at:
  7893 ;;		line 559 in file "Automated Solar Panel Orientation Setter.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;		None
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;		None
  7898 ;; Return value:  Size  Location     Type
  7899 ;;		None               void
  7900 ;; Registers used:
  7901 ;;		wreg, status,2, status,0, pclath, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 300/0
  7904 ;;		On exit  : 300/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7907 ;;      Params:         0       0       0       0       0
  7908 ;;      Locals:         0       0       0       0       0
  7909 ;;      Temps:          0       2       0       0       0
  7910 ;;      Totals:         0       2       0       0       0
  7911 ;;Total ram usage:        2 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    6
  7914 ;; This function calls:
  7915 ;;		_RotateMotorLeft
  7916 ;;		_RotateMotorRight
  7917 ;; This function is called by:
  7918 ;;		_main
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           
  7923                           ;psect for function _Calculate
  7924  1E19                     _Calculate:	
  7925                           
  7926                           ;Automated Solar Panel Orientation Setter.c: 565: if(ldr1 > ldr2){
  7927                           
  7928                           ;incstack = 0
  7929                           ; Regs used in _Calculate: [wreg+status,2+status,0+pclath+cstack]
  7930  1E19  0855               	movf	_ldr1+1,w
  7931  1E1A  0257               	subwf	_ldr2+1,w
  7932  1E1B  1D03               	skipz
  7933  1E1C  2E1F               	goto	u6185
  7934  1E1D  0854               	movf	_ldr1,w
  7935  1E1E  0256               	subwf	_ldr2,w
  7936  1E1F                     u6185:	
  7937  1E1F  1803               	skipnc
  7938  1E20  2E34               	goto	l4684
  7939                           
  7940                           ;Automated Solar Panel Orientation Setter.c: 566: if(ldr1 - ldr2 > 25){
  7941  1E21  0856               	movf	_ldr2,w
  7942  1E22  0254               	subwf	_ldr1,w
  7943  1E23  00A9               	movwf	??_Calculate
  7944  1E24  0857               	movf	_ldr2+1,w
  7945  1E25  1C03               	skipc
  7946  1E26  0A57               	incf	_ldr2+1,w
  7947  1E27  0255               	subwf	_ldr1+1,w
  7948  1E28  00AA               	movwf	??_Calculate+1
  7949  1E29  3000               	movlw	0
  7950  1E2A  022A               	subwf	??_Calculate+1,w
  7951  1E2B  301A               	movlw	26
  7952  1E2C  1903               	skipnz
  7953  1E2D  0229               	subwf	??_Calculate,w
  7954  1E2E  1C03               	skipc
  7955  1E2F  0008               	return
  7956                           
  7957                           ;Automated Solar Panel Orientation Setter.c: 567: RotateMotorLeft(1);
  7958  1E30  01A3               	clrf	RotateMotorLeft@value
  7959  1E31  0AA3               	incf	RotateMotorLeft@value,f
  7960  1E32  01A4               	clrf	RotateMotorLeft@value+1
  7961  1E33  2E4F               	ljmp	l3756
  7962  1E34                     l4684:	
  7963                           
  7964                           ;Automated Solar Panel Orientation Setter.c: 570: else if (ldr2 > ldr1){
  7965  1E34  0857               	movf	_ldr2+1,w
  7966  1E35  0255               	subwf	_ldr1+1,w
  7967  1E36  1D03               	skipz
  7968  1E37  2E3A               	goto	u6205
  7969  1E38  0856               	movf	_ldr2,w
  7970  1E39  0254               	subwf	_ldr1,w
  7971  1E3A                     u6205:	
  7972  1E3A  1803               	skipnc
  7973  1E3B  0008               	return
  7974                           
  7975                           ;Automated Solar Panel Orientation Setter.c: 571: if(ldr2 - ldr1 > 25){
  7976  1E3C  0854               	movf	_ldr1,w
  7977  1E3D  0256               	subwf	_ldr2,w
  7978  1E3E  00A9               	movwf	??_Calculate
  7979  1E3F  0855               	movf	_ldr1+1,w
  7980  1E40  1C03               	skipc
  7981  1E41  0A55               	incf	_ldr1+1,w
  7982  1E42  0257               	subwf	_ldr2+1,w
  7983  1E43  00AA               	movwf	??_Calculate+1
  7984  1E44  3000               	movlw	0
  7985  1E45  022A               	subwf	??_Calculate+1,w
  7986  1E46  301A               	movlw	26
  7987  1E47  1903               	skipnz
  7988  1E48  0229               	subwf	??_Calculate,w
  7989  1E49  1C03               	skipc
  7990  1E4A  0008               	return
  7991                           
  7992                           ;Automated Solar Panel Orientation Setter.c: 572: RotateMotorRight(1);
  7993  1E4B  01A3               	clrf	RotateMotorRight@value
  7994  1E4C  0AA3               	incf	RotateMotorRight@value,f
  7995  1E4D  01A4               	clrf	RotateMotorRight@value+1
  7996  1E4E  2E96               	ljmp	l3788
  7997  1E4F                     __end_of_Calculate:	
  7998  1E4F                     __ptext42:	
  7999 ;; *************** function _RotateMotorLeft *****************
  8000 ;; Defined at:
  8001 ;;		line 516 in file "Automated Solar Panel Orientation Setter.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  value           2    3[BANK0 ] int 
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;  i               2    7[BANK0 ] int 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;		None               void
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0
  8010 ;; Tracked objects:
  8011 ;;		On entry : 300/0
  8012 ;;		On exit  : 300/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8015 ;;      Params:         0       2       0       0       0
  8016 ;;      Locals:         0       2       0       0       0
  8017 ;;      Temps:          0       2       0       0       0
  8018 ;;      Totals:         0       6       0       0       0
  8019 ;;Total ram usage:        6 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    5
  8022 ;; This function calls:
  8023 ;;		Nothing
  8024 ;; This function is called by:
  8025 ;;		_Calculate
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           
  8030                           ;psect for function _RotateMotorLeft
  8031  1E4F                     _RotateMotorLeft:	
  8032  1E4F                     l3756:	
  8033                           ;incstack = 0
  8034                           ; Regs used in _RotateMotorLeft: [wreg+status,2+status,0]
  8035                           
  8036                           
  8037                           ;Automated Solar Panel Orientation Setter.c: 518: int i=0;
  8038  1E4F  01A7               	clrf	RotateMotorLeft@i
  8039  1E50  01A8               	clrf	RotateMotorLeft@i+1
  8040                           
  8041                           ;Automated Solar Panel Orientation Setter.c: 519: for(i=0; i<value; i++){
  8042  1E51  01A7               	clrf	RotateMotorLeft@i
  8043  1E52  01A8               	clrf	RotateMotorLeft@i+1
  8044  1E53                     l3786:	
  8045  1E53  0828               	movf	RotateMotorLeft@i+1,w
  8046  1E54  3A80               	xorlw	128
  8047  1E55  00A5               	movwf	??_RotateMotorLeft
  8048  1E56  0824               	movf	RotateMotorLeft@value+1,w
  8049  1E57  3A80               	xorlw	128
  8050  1E58  0225               	subwf	??_RotateMotorLeft,w
  8051  1E59  1D03               	skipz
  8052  1E5A  2E5D               	goto	u4905
  8053  1E5B  0823               	movf	RotateMotorLeft@value,w
  8054  1E5C  0227               	subwf	RotateMotorLeft@i,w
  8055  1E5D                     u4905:	
  8056  1E5D  1803               	btfsc	3,0
  8057  1E5E  2E95               	goto	l595
  8058                           
  8059                           ;Automated Solar Panel Orientation Setter.c: 520: RB2=0; RB3=1; RB4=1; RB5=1;
  8060  1E5F  26EB  160A  158A   	fcall	PL34	;call to abstracted procedure
  8061                           
  8062                           ;Automated Solar Panel Orientation Setter.c: 521: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  8063  1E62  3014               	movlw	20
  8064  1E63  00A6               	movwf	??_RotateMotorLeft+1
  8065  1E64  3079               	movlw	121
  8066  1E65  00A5               	movwf	??_RotateMotorLeft
  8067  1E66                     u6837:	
  8068  1E66  0BA5               	decfsz	??_RotateMotorLeft,f
  8069  1E67  2E66               	goto	u6837
  8070  1E68  0BA6               	decfsz	??_RotateMotorLeft+1,f
  8071  1E69  2E66               	goto	u6837
  8072  1E6A  2E6B               	nop2
  8073                           
  8074                           ;Automated Solar Panel Orientation Setter.c: 522: RB2=1; RB3=0; RB4=1; RB5=1;
  8075  1E6B  26F9  160A  158A   	fcall	PL38	;call to abstracted procedure
  8076                           
  8077                           ;Automated Solar Panel Orientation Setter.c: 523: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  8078  1E6E  3014               	movlw	20
  8079  1E6F  00A6               	movwf	??_RotateMotorLeft+1
  8080  1E70  3079               	movlw	121
  8081  1E71  00A5               	movwf	??_RotateMotorLeft
  8082  1E72                     u6847:	
  8083  1E72  0BA5               	decfsz	??_RotateMotorLeft,f
  8084  1E73  2E72               	goto	u6847
  8085  1E74  0BA6               	decfsz	??_RotateMotorLeft+1,f
  8086  1E75  2E72               	goto	u6847
  8087  1E76  2E77               	nop2
  8088                           
  8089                           ;Automated Solar Panel Orientation Setter.c: 524: RB2=1; RB3=1; RB4=0; RB5=1;
  8090  1E77  26E4  160A  158A   	fcall	PL32	;call to abstracted procedure
  8091                           
  8092                           ;Automated Solar Panel Orientation Setter.c: 525: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  8093  1E7A  3014               	movlw	20
  8094  1E7B  00A6               	movwf	??_RotateMotorLeft+1
  8095  1E7C  3079               	movlw	121
  8096  1E7D  00A5               	movwf	??_RotateMotorLeft
  8097  1E7E                     u6857:	
  8098  1E7E  0BA5               	decfsz	??_RotateMotorLeft,f
  8099  1E7F  2E7E               	goto	u6857
  8100  1E80  0BA6               	decfsz	??_RotateMotorLeft+1,f
  8101  1E81  2E7E               	goto	u6857
  8102  1E82  2E83               	nop2
  8103                           
  8104                           ;Automated Solar Panel Orientation Setter.c: 526: RB2=1; RB3=1; RB4=1; RB5=0;
  8105  1E83  26F2  160A  158A   	fcall	PL36	;call to abstracted procedure
  8106                           
  8107                           ;Automated Solar Panel Orientation Setter.c: 527: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  8108  1E86  3014               	movlw	20
  8109  1E87  00A6               	movwf	??_RotateMotorLeft+1
  8110  1E88  3079               	movlw	121
  8111  1E89  00A5               	movwf	??_RotateMotorLeft
  8112  1E8A                     u6867:	
  8113  1E8A  0BA5               	decfsz	??_RotateMotorLeft,f
  8114  1E8B  2E8A               	goto	u6867
  8115  1E8C  0BA6               	decfsz	??_RotateMotorLeft+1,f
  8116  1E8D  2E8A               	goto	u6867
  8117  1E8E  2E8F               	nop2
  8118  1E8F  1283               	bcf	3,5	;RP0=0, select bank0
  8119  1E90  1303               	bcf	3,6	;RP1=0, select bank0
  8120  1E91  0AA7               	incf	RotateMotorLeft@i,f
  8121  1E92  1903               	skipnz
  8122  1E93  0AA8               	incf	RotateMotorLeft@i+1,f
  8123  1E94  2E53               	goto	l3786
  8124  1E95                     l595:	
  8125                           
  8126                           ;Automated Solar Panel Orientation Setter.c: 528: }
  8127                           ;Automated Solar Panel Orientation Setter.c: 529: RB2=1; RB3=1; RB4=1; RB5=1;
  8128  1E95  2EDD               	ljmp	PL28	;call to abstracted procedure
  8129  1E96                     __end_of_RotateMotorLeft:	
  8130  1E96                     __ptext41:	
  8131 ;; *************** function _RotateMotorRight *****************
  8132 ;; Defined at:
  8133 ;;		line 533 in file "Automated Solar Panel Orientation Setter.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;  value           2    3[BANK0 ] int 
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;  i               2    7[BANK0 ] int 
  8138 ;; Return value:  Size  Location     Type
  8139 ;;		None               void
  8140 ;; Registers used:
  8141 ;;		wreg, status,2, status,0
  8142 ;; Tracked objects:
  8143 ;;		On entry : 300/0
  8144 ;;		On exit  : 300/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8147 ;;      Params:         0       2       0       0       0
  8148 ;;      Locals:         0       2       0       0       0
  8149 ;;      Temps:          0       2       0       0       0
  8150 ;;      Totals:         0       6       0       0       0
  8151 ;;Total ram usage:        6 bytes
  8152 ;; Hardware stack levels used:    1
  8153 ;; Hardware stack levels required when called:    5
  8154 ;; This function calls:
  8155 ;;		Nothing
  8156 ;; This function is called by:
  8157 ;;		_Calculate
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           
  8162                           ;psect for function _RotateMotorRight
  8163  1E96                     _RotateMotorRight:	
  8164  1E96                     l3788:	
  8165                           ;incstack = 0
  8166                           ; Regs used in _RotateMotorRight: [wreg+status,2+status,0]
  8167                           
  8168                           
  8169                           ;Automated Solar Panel Orientation Setter.c: 535: int i=0;
  8170  1E96  01A7               	clrf	RotateMotorRight@i
  8171  1E97  01A8               	clrf	RotateMotorRight@i+1
  8172                           
  8173                           ;Automated Solar Panel Orientation Setter.c: 536: for(i=0; i<value; i++){
  8174  1E98  01A7               	clrf	RotateMotorRight@i
  8175  1E99  01A8               	clrf	RotateMotorRight@i+1
  8176  1E9A                     l3818:	
  8177  1E9A  0828               	movf	RotateMotorRight@i+1,w
  8178  1E9B  3A80               	xorlw	128
  8179  1E9C  00A5               	movwf	??_RotateMotorRight
  8180  1E9D  0824               	movf	RotateMotorRight@value+1,w
  8181  1E9E  3A80               	xorlw	128
  8182  1E9F  0225               	subwf	??_RotateMotorRight,w
  8183  1EA0  1D03               	skipz
  8184  1EA1  2EA4               	goto	u4915
  8185  1EA2  0823               	movf	RotateMotorRight@value,w
  8186  1EA3  0227               	subwf	RotateMotorRight@i,w
  8187  1EA4                     u4915:	
  8188  1EA4  1803               	btfsc	3,0
  8189  1EA5  2EDC               	goto	l601
  8190                           
  8191                           ;Automated Solar Panel Orientation Setter.c: 537: RB2=1; RB3=1; RB4=1; RB5=0;
  8192  1EA6  26F2  160A  158A   	fcall	PL36	;call to abstracted procedure
  8193                           
  8194                           ;Automated Solar Panel Orientation Setter.c: 538: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  8195  1EA9  3014               	movlw	20
  8196  1EAA  00A6               	movwf	??_RotateMotorRight+1
  8197  1EAB  3079               	movlw	121
  8198  1EAC  00A5               	movwf	??_RotateMotorRight
  8199  1EAD                     u6797:	
  8200  1EAD  0BA5               	decfsz	??_RotateMotorRight,f
  8201  1EAE  2EAD               	goto	u6797
  8202  1EAF  0BA6               	decfsz	??_RotateMotorRight+1,f
  8203  1EB0  2EAD               	goto	u6797
  8204  1EB1  2EB2               	nop2
  8205                           
  8206                           ;Automated Solar Panel Orientation Setter.c: 539: RB2=1; RB3=1; RB4=0; RB5=1;
  8207  1EB2  26E4  160A  158A   	fcall	PL32	;call to abstracted procedure
  8208                           
  8209                           ;Automated Solar Panel Orientation Setter.c: 540: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  8210  1EB5  3014               	movlw	20
  8211  1EB6  00A6               	movwf	??_RotateMotorRight+1
  8212  1EB7  3079               	movlw	121
  8213  1EB8  00A5               	movwf	??_RotateMotorRight
  8214  1EB9                     u6807:	
  8215  1EB9  0BA5               	decfsz	??_RotateMotorRight,f
  8216  1EBA  2EB9               	goto	u6807
  8217  1EBB  0BA6               	decfsz	??_RotateMotorRight+1,f
  8218  1EBC  2EB9               	goto	u6807
  8219  1EBD  2EBE               	nop2
  8220                           
  8221                           ;Automated Solar Panel Orientation Setter.c: 541: RB2=1; RB3=0; RB4=1; RB5=1;
  8222  1EBE  26F9  160A  158A   	fcall	PL38	;call to abstracted procedure
  8223                           
  8224                           ;Automated Solar Panel Orientation Setter.c: 542: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  8225  1EC1  3014               	movlw	20
  8226  1EC2  00A6               	movwf	??_RotateMotorRight+1
  8227  1EC3  3079               	movlw	121
  8228  1EC4  00A5               	movwf	??_RotateMotorRight
  8229  1EC5                     u6817:	
  8230  1EC5  0BA5               	decfsz	??_RotateMotorRight,f
  8231  1EC6  2EC5               	goto	u6817
  8232  1EC7  0BA6               	decfsz	??_RotateMotorRight+1,f
  8233  1EC8  2EC5               	goto	u6817
  8234  1EC9  2ECA               	nop2
  8235                           
  8236                           ;Automated Solar Panel Orientation Setter.c: 543: RB2=0; RB3=1; RB4=1; RB5=1;
  8237  1ECA  26EB  160A  158A   	fcall	PL34	;call to abstracted procedure
  8238                           
  8239                           ;Automated Solar Panel Orientation Setter.c: 544: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  8240  1ECD  3014               	movlw	20
  8241  1ECE  00A6               	movwf	??_RotateMotorRight+1
  8242  1ECF  3079               	movlw	121
  8243  1ED0  00A5               	movwf	??_RotateMotorRight
  8244  1ED1                     u6827:	
  8245  1ED1  0BA5               	decfsz	??_RotateMotorRight,f
  8246  1ED2  2ED1               	goto	u6827
  8247  1ED3  0BA6               	decfsz	??_RotateMotorRight+1,f
  8248  1ED4  2ED1               	goto	u6827
  8249  1ED5  2ED6               	nop2
  8250  1ED6  1283               	bcf	3,5	;RP0=0, select bank0
  8251  1ED7  1303               	bcf	3,6	;RP1=0, select bank0
  8252  1ED8  0AA7               	incf	RotateMotorRight@i,f
  8253  1ED9  1903               	skipnz
  8254  1EDA  0AA8               	incf	RotateMotorRight@i+1,f
  8255  1EDB  2E9A               	goto	l3818
  8256  1EDC                     l601:	
  8257                           
  8258                           ;Automated Solar Panel Orientation Setter.c: 545: }
  8259                           ;Automated Solar Panel Orientation Setter.c: 546: RB2=1; RB3=1; RB4=1; RB5=1;
  8260  1EDC  2EDD               	ljmp	PL28	;call to abstracted procedure
  8261  1EDD                     __end_of_RotateMotorRight:	
  8262  1EDD                     PL28:	
  8263  1EDD  1283               	bcf	3,5	;RP0=0, select bank0
  8264  1EDE  1303               	bcf	3,6	;RP1=0, select bank0
  8265  1EDF  1506               	bsf	6,2	;volatile
  8266  1EE0  1586               	bsf	6,3	;volatile
  8267  1EE1  1606               	bsf	6,4	;volatile
  8268  1EE2  1686               	bsf	6,5	;volatile
  8269  1EE3  0008               	return
  8270  1EE4                     __end_ofPL28:	
  8271  1EE4                     PL32:	
  8272  1EE4  1283               	bcf	3,5	;RP0=0, select bank0
  8273  1EE5  1303               	bcf	3,6	;RP1=0, select bank0
  8274  1EE6  1506               	bsf	6,2	;volatile
  8275  1EE7  1586               	bsf	6,3	;volatile
  8276  1EE8  1206               	bcf	6,4	;volatile
  8277  1EE9  1686               	bsf	6,5	;volatile
  8278  1EEA  0008               	return
  8279  1EEB                     __end_ofPL32:	
  8280  1EEB                     PL34:	
  8281  1EEB  1283               	bcf	3,5	;RP0=0, select bank0
  8282  1EEC  1303               	bcf	3,6	;RP1=0, select bank0
  8283  1EED  1106               	bcf	6,2	;volatile
  8284  1EEE  1586               	bsf	6,3	;volatile
  8285  1EEF  1606               	bsf	6,4	;volatile
  8286  1EF0  1686               	bsf	6,5	;volatile
  8287  1EF1  0008               	return
  8288  1EF2                     __end_ofPL34:	
  8289  1EF2                     PL36:	
  8290  1EF2  1283               	bcf	3,5	;RP0=0, select bank0
  8291  1EF3  1303               	bcf	3,6	;RP1=0, select bank0
  8292  1EF4  1506               	bsf	6,2	;volatile
  8293  1EF5  1586               	bsf	6,3	;volatile
  8294  1EF6  1606               	bsf	6,4	;volatile
  8295  1EF7  1286               	bcf	6,5	;volatile
  8296  1EF8  0008               	return
  8297  1EF9                     __end_ofPL36:	
  8298  1EF9                     PL38:	
  8299  1EF9  1283               	bcf	3,5	;RP0=0, select bank0
  8300  1EFA  1303               	bcf	3,6	;RP1=0, select bank0
  8301  1EFB  1506               	bsf	6,2	;volatile
  8302  1EFC  1186               	bcf	6,3	;volatile
  8303  1EFD  1606               	bsf	6,4	;volatile
  8304  1EFE  1686               	bsf	6,5	;volatile
  8305  1EFF  0008               	return
  8306  1F00                     __end_ofPL38:	
  8307                           
  8308                           	psect	text43
  8309  104A                     __ptext43:	
  8310 ;; *************** function _isr *****************
  8311 ;; Defined at:
  8312 ;;		line 578 in file "Automated Solar Panel Orientation Setter.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;		None
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;		None
  8317 ;; Return value:  Size  Location     Type
  8318 ;;		None               void
  8319 ;; Registers used:
  8320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8321 ;; Tracked objects:
  8322 ;;		On entry : 0/0
  8323 ;;		On exit  : 300/0
  8324 ;;		Unchanged: 0/0
  8325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8326 ;;      Params:         0       0       0       0       0
  8327 ;;      Locals:         0       0       0       0       0
  8328 ;;      Temps:          0       3       0       0       0
  8329 ;;      Totals:         0       3       0       0       0
  8330 ;;Total ram usage:        3 bytes
  8331 ;; Hardware stack levels used:    1
  8332 ;; Hardware stack levels required when called:    4
  8333 ;; This function calls:
  8334 ;;		i1_LCDTimeUpdate
  8335 ;;		i1_LCD_print_char
  8336 ;;		i1___lwmod
  8337 ;; This function is called by:
  8338 ;;		Interrupt level 1
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           
  8343                           ;psect for function _isr
  8344  104A                     _isr:	
  8345                           
  8346                           ;Automated Solar Panel Orientation Setter.c: 579: if(TMR1IF==1){
  8347  104A  1C0C               	btfss	12,0	;volatile
  8348  104B  289D               	goto	i1l4906
  8349                           
  8350                           ;Automated Solar Panel Orientation Setter.c: 580: msecond ++;
  8351  104C  0ADA               	incf	_msecond,f
  8352  104D  1903               	skipnz
  8353  104E  0ADB               	incf	_msecond+1,f
  8354                           
  8355                           ;Automated Solar Panel Orientation Setter.c: 581: if(msecond == 50){
  8356  104F  3032               	movlw	50
  8357  1050  065A               	xorwf	_msecond,w
  8358  1051  045B               	iorwf	_msecond+1,w
  8359  1052  1D03               	btfss	3,2
  8360  1053  2898               	goto	i1l617
  8361                           
  8362                           ;Automated Solar Panel Orientation Setter.c: 582: second ++;
  8363  1054  0ADC               	incf	_second,f
  8364  1055  1903               	skipnz
  8365  1056  0ADD               	incf	_second+1,f
  8366                           
  8367                           ;Automated Solar Panel Orientation Setter.c: 585: if(BlinkDet) LCD_print_char(1,14,':');
  8368  1057  1C66               	btfss	_BlinkDet/(0+8),_BlinkDet& (0+7)
  8369  1058  2860               	goto	i1l4876
  8370  1059  300E               	movlw	14
  8371  105A  01F8               	clrf	i1LCD_print_char@row
  8372  105B  0AF8               	incf	i1LCD_print_char@row,f
  8373  105C  01F9               	clrf	i1LCD_print_char@row+1
  8374  105D  00FA               	movwf	i1LCD_print_char@column
  8375  105E  303A               	movlw	58
  8376  105F  2866               	goto	L42
  8377  1060                     i1l4876:	
  8378  1060  300E               	movlw	14
  8379                           
  8380                           ;Automated Solar Panel Orientation Setter.c: 586: else LCD_print_char(1,14,' ');
  8381  1061  01F8               	clrf	i1LCD_print_char@row
  8382  1062  0AF8               	incf	i1LCD_print_char@row,f
  8383  1063  01F9               	clrf	i1LCD_print_char@row+1
  8384  1064  00FA               	movwf	i1LCD_print_char@column
  8385  1065  3020               	movlw	32
  8386  1066                     L42:	
  8387  1066  01FB               	clrf	i1LCD_print_char@column+1
  8388  1067  00FC               	movwf	i1LCD_print_char@print_value
  8389  1068  2126  160A  118A   	fcall	i1_LCD_print_char
  8390                           
  8391                           ;Automated Solar Panel Orientation Setter.c: 587: BlinkDet = !BlinkDet;
  8392  106B  3001               	movlw	(0+1) shl (_BlinkDet& (0+7))
  8393  106C  1283               	bcf	3,5	;RP0=0, select bank0
  8394  106D  1303               	bcf	3,6	;RP1=0, select bank0
  8395  106E  06E6               	xorwf	_BlinkDet/(0+8),f
  8396                           
  8397                           ;Automated Solar Panel Orientation Setter.c: 589: RD6 = !RD6;
  8398  106F  3040               	movlw	64
  8399  1070  0688               	xorwf	8,f
  8400  1071  303C               	movlw	60
  8401                           
  8402                           ;Automated Solar Panel Orientation Setter.c: 590: msecond = 0;
  8403  1072  01DA               	clrf	_msecond
  8404  1073  01DB               	clrf	_msecond+1
  8405                           
  8406                           ;Automated Solar Panel Orientation Setter.c: 591: if( second == 60){
  8407  1074  065C               	xorwf	_second,w
  8408  1075  045D               	iorwf	_second+1,w
  8409  1076  1D03               	btfss	3,2
  8410  1077  2898               	goto	i1l617
  8411                           
  8412                           ;Automated Solar Panel Orientation Setter.c: 592: LCDTimeUpdate();
  8413  1078  20C9  160A  118A   	fcall	i1_LCDTimeUpdate
  8414                           
  8415                           ;Automated Solar Panel Orientation Setter.c: 598: minute ++;
  8416  107B  1283               	bcf	3,5	;RP0=0, select bank0
  8417  107C  1303               	bcf	3,6	;RP1=0, select bank0
  8418  107D  0AD8               	incf	_minute,f
  8419  107E  1903               	skipnz
  8420  107F  0AD9               	incf	_minute+1,f
  8421  1080  301E               	movlw	30
  8422                           
  8423                           ;Automated Solar Panel Orientation Setter.c: 599: second = 0;
  8424  1081  01DC               	clrf	_second
  8425  1082  01DD               	clrf	_second+1
  8426                           
  8427                           ;Automated Solar Panel Orientation Setter.c: 601: x = minute%30 ;
  8428  1083  00F1               	movwf	i1___lwmod@divisor
  8429  1084  01F2               	clrf	i1___lwmod@divisor+1
  8430  1085  0859               	movf	_minute+1,w
  8431  1086  00F4               	movwf	i1___lwmod@dividend+1
  8432  1087  0858               	movf	_minute,w
  8433  1088  00F3               	movwf	i1___lwmod@dividend
  8434  1089  2140  160A  118A   	fcall	i1___lwmod
  8435  108C  0871               	movf	?i1___lwmod,w
  8436  108D  00E1               	movwf	_x
  8437                           
  8438                           ;Automated Solar Panel Orientation Setter.c: 605: }
  8439                           ;Automated Solar Panel Orientation Setter.c: 608: if( minute == 60){
  8440  108E  303C               	movlw	60
  8441  108F  0658               	xorwf	_minute,w
  8442  1090  0459               	iorwf	_minute+1,w
  8443  1091  1D03               	btfss	3,2
  8444  1092  2898               	goto	i1l617
  8445                           
  8446                           ;Automated Solar Panel Orientation Setter.c: 609: minute = 0;
  8447  1093  01D8               	clrf	_minute
  8448  1094  01D9               	clrf	_minute+1
  8449                           
  8450                           ;Automated Solar Panel Orientation Setter.c: 610: hour ++;
  8451  1095  0AD2               	incf	_hour,f
  8452  1096  1903               	skipnz
  8453  1097  0AD3               	incf	_hour+1,f
  8454  1098                     i1l617:	
  8455                           
  8456                           ;Automated Solar Panel Orientation Setter.c: 612: }
  8457                           ;Automated Solar Panel Orientation Setter.c: 613: }
  8458                           ;Automated Solar Panel Orientation Setter.c: 614: }
  8459                           ;Automated Solar Panel Orientation Setter.c: 615: TMR1IF = 0;
  8460  1098  100C               	bcf	12,0	;volatile
  8461                           
  8462                           ;Automated Solar Panel Orientation Setter.c: 616: TMR1L = 0xB0;
  8463  1099  30B0               	movlw	176
  8464  109A  008E               	movwf	14	;volatile
  8465                           
  8466                           ;Automated Solar Panel Orientation Setter.c: 617: TMR1H = 0x3C;
  8467  109B  303C               	movlw	60
  8468  109C  008F               	movwf	15	;volatile
  8469  109D                     i1l4906:	
  8470                           
  8471                           ;Automated Solar Panel Orientation Setter.c: 618: }
  8472                           ;Automated Solar Panel Orientation Setter.c: 619: if( RCIF == 1){
  8473  109D  1E8C               	btfss	12,5	;volatile
  8474  109E  28BA               	goto	i1l4930
  8475                           
  8476                           ;Automated Solar Panel Orientation Setter.c: 620: if ((FERR == 0) && (OERR == 0))
  8477  109F  1D18               	btfss	24,2	;volatile
  8478  10A0  1898               	btfsc	24,1	;volatile
  8479  10A1  28B4               	goto	i1l625
  8480                           
  8481                           ;Automated Solar Panel Orientation Setter.c: 621: {
  8482                           ;Automated Solar Panel Orientation Setter.c: 622: wtmp = RCREG;
  8483  10A2  081A               	movf	26,w	;volatile
  8484                           
  8485                           ;Automated Solar Panel Orientation Setter.c: 623: if( RCREG=='*' || j > 20-1 ){
  8486  10A3  302A               	movlw	42
  8487  10A4  061A               	xorwf	26,w
  8488  10A5  1903               	btfsc	3,2
  8489  10A6  28AB               	goto	i1l4918
  8490  10A7  3014               	movlw	20
  8491  10A8  025E               	subwf	_j,w
  8492  10A9  1C03               	skipc
  8493  10AA  28AC               	goto	i1l4920
  8494  10AB                     i1l4918:	
  8495                           
  8496                           ;Automated Solar Panel Orientation Setter.c: 624: j=0;
  8497  10AB  01DE               	clrf	_j
  8498  10AC                     i1l4920:	
  8499                           
  8500                           ;Automated Solar Panel Orientation Setter.c: 625: }
  8501                           ;Automated Solar Panel Orientation Setter.c: 626: buffer[j] = RCREG;
  8502  10AC  085E               	movf	_j,w
  8503  10AD  3EA0               	addlw	(low (_buffer| 0))& (0+255)
  8504  10AE  0084               	movwf	4
  8505  10AF  081A               	movf	26,w	;volatile
  8506  10B0  1383               	bcf	3,7	;select IRP bank1
  8507  10B1  0080               	movwf	0
  8508                           
  8509                           ;Automated Solar Panel Orientation Setter.c: 627: j ++;
  8510  10B2  0ADE               	incf	_j,f
  8511                           
  8512                           ;Automated Solar Panel Orientation Setter.c: 628: }
  8513  10B3  28B9               	goto	i1l4928
  8514  10B4                     i1l625:	
  8515                           
  8516                           ;Automated Solar Panel Orientation Setter.c: 629: else
  8517                           ;Automated Solar Panel Orientation Setter.c: 630: {
  8518                           ;Automated Solar Panel Orientation Setter.c: 631: CREN = 0;
  8519  10B4  1218               	bcf	24,4	;volatile
  8520                           
  8521                           ;Automated Solar Panel Orientation Setter.c: 632: FERR = 0;
  8522  10B5  1118               	bcf	24,2	;volatile
  8523                           
  8524                           ;Automated Solar Panel Orientation Setter.c: 633: wtmp = RCREG;
  8525  10B6  081A               	movf	26,w	;volatile
  8526                           
  8527                           ;Automated Solar Panel Orientation Setter.c: 634: wtmp = RCREG;
  8528  10B7  081A               	movf	26,w	;volatile
  8529                           
  8530                           ;Automated Solar Panel Orientation Setter.c: 635: CREN = 1;
  8531  10B8  1618               	bsf	24,4	;volatile
  8532  10B9                     i1l4928:	
  8533                           
  8534                           ;Automated Solar Panel Orientation Setter.c: 636: }
  8535                           ;Automated Solar Panel Orientation Setter.c: 637: RCIF = 0;
  8536  10B9  128C               	bcf	12,5	;volatile
  8537  10BA                     i1l4930:	
  8538                           
  8539                           ;Automated Solar Panel Orientation Setter.c: 638: }
  8540                           ;Automated Solar Panel Orientation Setter.c: 639: if(OERR == 1)
  8541  10BA  1C98               	btfss	24,1	;volatile
  8542  10BB  28C0               	goto	i1l631
  8543                           
  8544                           ;Automated Solar Panel Orientation Setter.c: 640: {
  8545                           ;Automated Solar Panel Orientation Setter.c: 641: CREN = 0;
  8546  10BC  1218               	bcf	24,4	;volatile
  8547                           
  8548                           ;Automated Solar Panel Orientation Setter.c: 643: wtmp = RCREG;
  8549  10BD  081A               	movf	26,w	;volatile
  8550                           
  8551                           ;Automated Solar Panel Orientation Setter.c: 644: wtmp = RCREG;
  8552  10BE  081A               	movf	26,w	;volatile
  8553                           
  8554                           ;Automated Solar Panel Orientation Setter.c: 645: CREN = 1;
  8555  10BF  1618               	bsf	24,4	;volatile
  8556  10C0                     i1l631:	
  8557  10C0  0822               	movf	??_isr+2,w
  8558  10C1  008A               	movwf	10
  8559  10C2  0821               	movf	??_isr+1,w
  8560  10C3  0084               	movwf	4
  8561  10C4  0E20               	swapf	??_isr^0,w
  8562  10C5  0083               	movwf	3
  8563  10C6  0EFE               	swapf	126,f
  8564  10C7  0E7E               	swapf	126,w
  8565  10C8  0009               	retfie
  8566  10C9                     __end_of_isr:	
  8567  10C9                     __ptext44:	
  8568 ;; *************** function i1_LCDTimeUpdate *****************
  8569 ;; Defined at:
  8570 ;;		line 734 in file "Automated Solar Panel Orientation Setter.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;		None
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;		None
  8575 ;; Return value:  Size  Location     Type
  8576 ;;		None               void
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0, pclath, cstack
  8579 ;; Tracked objects:
  8580 ;;		On entry : 300/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8584 ;;      Params:         0       0       0       0       0
  8585 ;;      Locals:         0       0       0       0       0
  8586 ;;      Temps:          0       0       0       0       0
  8587 ;;      Totals:         0       0       0       0       0
  8588 ;;Total ram usage:        0 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; Hardware stack levels required when called:    3
  8591 ;; This function calls:
  8592 ;;		i1_LCD_print_char
  8593 ;;		i1___lwdiv
  8594 ;;		i1___lwmod
  8595 ;; This function is called by:
  8596 ;;		_isr
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           
  8601                           ;psect for function i1_LCDTimeUpdate
  8602  10C9                     i1_LCDTimeUpdate:	
  8603                           
  8604                           ;incstack = 0
  8605 ;; hardware stack exceeded
  8606                           ; Regs used in i1_LCDTimeUpdate: [wreg+status,2+status,0+pclath+cstack]
  8607  10C9  300C               	movlw	12
  8608                           
  8609                           ;Automated Solar Panel Orientation Setter.c: 735: LCD_print_char(1,12,hour/10+48);
  8610  10CA  01F8               	clrf	i1LCD_print_char@row
  8611  10CB  0AF8               	incf	i1LCD_print_char@row,f
  8612  10CC  01F9               	clrf	i1LCD_print_char@row+1
  8613  10CD  00FA               	movwf	i1LCD_print_char@column
  8614  10CE  300A               	movlw	10
  8615  10CF  01FB               	clrf	i1LCD_print_char@column+1
  8616  10D0  00F1               	movwf	i1___lwdiv@divisor
  8617  10D1  01F2               	clrf	i1___lwdiv@divisor+1
  8618  10D2  0853               	movf	_hour+1,w
  8619  10D3  00F4               	movwf	i1___lwdiv@dividend+1
  8620  10D4  0852               	movf	_hour,w
  8621  10D5  00F3               	movwf	i1___lwdiv@dividend
  8622  10D6  2164  160A  118A   	fcall	i1___lwdiv
  8623  10D9  0871               	movf	?i1___lwdiv,w
  8624  10DA  3E30               	addlw	48
  8625  10DB  00FC               	movwf	i1LCD_print_char@print_value
  8626  10DC  2126  160A  118A   	fcall	i1_LCD_print_char
  8627  10DF  300D               	movlw	13
  8628                           
  8629                           ;Automated Solar Panel Orientation Setter.c: 736: LCD_print_char(1,13,hour%10+48);
  8630  10E0  01F8               	clrf	i1LCD_print_char@row
  8631  10E1  0AF8               	incf	i1LCD_print_char@row,f
  8632  10E2  01F9               	clrf	i1LCD_print_char@row+1
  8633  10E3  00FA               	movwf	i1LCD_print_char@column
  8634  10E4  300A               	movlw	10
  8635  10E5  01FB               	clrf	i1LCD_print_char@column+1
  8636  10E6  00F1               	movwf	i1___lwmod@divisor
  8637  10E7  01F2               	clrf	i1___lwmod@divisor+1
  8638  10E8  1283               	bcf	3,5	;RP0=0, select bank0
  8639  10E9  1303               	bcf	3,6	;RP1=0, select bank0
  8640  10EA  0853               	movf	_hour+1,w
  8641  10EB  00F4               	movwf	i1___lwmod@dividend+1
  8642  10EC  0852               	movf	_hour,w
  8643  10ED  00F3               	movwf	i1___lwmod@dividend
  8644  10EE  2140  160A  118A   	fcall	i1___lwmod
  8645  10F1  0871               	movf	?i1___lwmod,w
  8646  10F2  3E30               	addlw	48
  8647  10F3  00FC               	movwf	i1LCD_print_char@print_value
  8648  10F4  2126  160A  118A   	fcall	i1_LCD_print_char
  8649  10F7  300F               	movlw	15
  8650                           
  8651                           ;Automated Solar Panel Orientation Setter.c: 737: LCD_print_char(1,15,minute/10+48);
  8652  10F8  01F8               	clrf	i1LCD_print_char@row
  8653  10F9  0AF8               	incf	i1LCD_print_char@row,f
  8654  10FA  01F9               	clrf	i1LCD_print_char@row+1
  8655  10FB  00FA               	movwf	i1LCD_print_char@column
  8656  10FC  300A               	movlw	10
  8657  10FD  01FB               	clrf	i1LCD_print_char@column+1
  8658  10FE  00F1               	movwf	i1___lwdiv@divisor
  8659  10FF  01F2               	clrf	i1___lwdiv@divisor+1
  8660  1100  1283               	bcf	3,5	;RP0=0, select bank0
  8661  1101  1303               	bcf	3,6	;RP1=0, select bank0
  8662  1102  0859               	movf	_minute+1,w
  8663  1103  00F4               	movwf	i1___lwdiv@dividend+1
  8664  1104  0858               	movf	_minute,w
  8665  1105  00F3               	movwf	i1___lwdiv@dividend
  8666  1106  2164  160A  118A   	fcall	i1___lwdiv
  8667  1109  0871               	movf	?i1___lwdiv,w
  8668  110A  3E30               	addlw	48
  8669  110B  00FC               	movwf	i1LCD_print_char@print_value
  8670  110C  2126  160A  118A   	fcall	i1_LCD_print_char
  8671  110F  3010               	movlw	16
  8672                           
  8673                           ;Automated Solar Panel Orientation Setter.c: 738: LCD_print_char(1,16,minute%10+48);
  8674  1110  01F8               	clrf	i1LCD_print_char@row
  8675  1111  0AF8               	incf	i1LCD_print_char@row,f
  8676  1112  01F9               	clrf	i1LCD_print_char@row+1
  8677  1113  00FA               	movwf	i1LCD_print_char@column
  8678  1114  300A               	movlw	10
  8679  1115  01FB               	clrf	i1LCD_print_char@column+1
  8680  1116  00F1               	movwf	i1___lwmod@divisor
  8681  1117  01F2               	clrf	i1___lwmod@divisor+1
  8682  1118  1283               	bcf	3,5	;RP0=0, select bank0
  8683  1119  1303               	bcf	3,6	;RP1=0, select bank0
  8684  111A  0859               	movf	_minute+1,w
  8685  111B  00F4               	movwf	i1___lwmod@dividend+1
  8686  111C  0858               	movf	_minute,w
  8687  111D  00F3               	movwf	i1___lwmod@dividend
  8688  111E  2140  160A  118A   	fcall	i1___lwmod
  8689  1121  0871               	movf	?i1___lwmod,w
  8690  1122  3E30               	addlw	48
  8691  1123  00FC               	movwf	i1LCD_print_char@print_value
  8692  1124  2126               	fcall	i1_LCD_print_char
  8693  1125  0008               	return
  8694  1126                     __end_ofi1_LCDTimeUpdate:	
  8695  1126                     __ptext47:	
  8696 ;; *************** function i1_LCD_print_char *****************
  8697 ;; Defined at:
  8698 ;;		line 174 in file "lcdv2.h"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;  row             2    7[COMMON] int 
  8701 ;;  column          2    9[COMMON] int 
  8702 ;;  print_value     1   11[COMMON] unsigned char 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;		None
  8705 ;; Return value:  Size  Location     Type
  8706 ;;		None               void
  8707 ;; Registers used:
  8708 ;;		wreg, status,2, status,0, pclath, cstack
  8709 ;; Tracked objects:
  8710 ;;		On entry : 300/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8714 ;;      Params:         5       0       0       0       0
  8715 ;;      Locals:         0       0       0       0       0
  8716 ;;      Temps:          1       0       0       0       0
  8717 ;;      Totals:         6       0       0       0       0
  8718 ;;Total ram usage:        6 bytes
  8719 ;; Hardware stack levels used:    1
  8720 ;; Hardware stack levels required when called:    2
  8721 ;; This function calls:
  8722 ;;		i1_lcd_add
  8723 ;;		i1_position
  8724 ;; This function is called by:
  8725 ;;		_isr
  8726 ;;		i1_LCDTimeUpdate
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           
  8731                           ;psect for function i1_LCD_print_char
  8732  1126                     i1_LCD_print_char:	
  8733                           
  8734                           ;lcdv2.h: 175: position(row,column);
  8735                           
  8736                           ;incstack = 0
  8737                           ; Regs used in i1_LCD_print_char: [wreg+status,2+status,0+pclath+cstack]
  8738  1126  087A               	movf	i1LCD_print_char@column,w
  8739  1127  00F2               	movwf	i1position@collum
  8740  1128  0878               	movf	i1LCD_print_char@row,w
  8741  1129  224D  160A  118A   	fcall	i1_position
  8742                           
  8743                           ;lcdv2.h: 176: RC2 = 1;
  8744  112C  1283               	bcf	3,5	;RP0=0, select bank0
  8745  112D  1303               	bcf	3,6	;RP1=0, select bank0
  8746  112E  1507               	bsf	7,2	;volatile
  8747                           
  8748                           ;lcdv2.h: 177: _delay(20);
  8749  112F  3006               	movlw	6
  8750  1130  00FD               	movwf	??i1_LCD_print_char
  8751  1131                     u687_27:	
  8752  1131  0BFD               	decfsz	??i1_LCD_print_char,f
  8753  1132  2931               	goto	u687_27
  8754  1133  0000               	nop
  8755                           
  8756                           ;lcdv2.h: 178: lcd_data = print_value;
  8757  1134  087C               	movf	i1LCD_print_char@print_value,w
  8758  1135  1283               	bcf	3,5	;RP0=0, select bank0
  8759  1136  1303               	bcf	3,6	;RP1=0, select bank0
  8760  1137  00DF               	movwf	_lcd_data
  8761                           
  8762                           ;lcdv2.h: 179: lcd_add();
  8763  1138  218E  160A  118A   	fcall	i1_lcd_add
  8764                           
  8765                           ;lcdv2.h: 180: _delay(100);
  8766  113B  3021               	movlw	33
  8767  113C  00FD               	movwf	??i1_LCD_print_char
  8768  113D                     u688_27:	
  8769  113D  0BFD               	decfsz	??i1_LCD_print_char,f
  8770  113E  293D               	goto	u688_27
  8771  113F  0008               	return
  8772  1140                     __end_ofi1_LCD_print_char:	
  8773  1140                     __ptext45:	
  8774 ;; *************** function i1___lwmod *****************
  8775 ;; Defined at:
  8776 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;  divisor         2    0[COMMON] unsigned int 
  8779 ;;  dividend        2    2[COMMON] unsigned int 
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;  __lwmod         1    4[COMMON] unsigned char 
  8782 ;; Return value:  Size  Location     Type
  8783 ;;                  2    0[COMMON] unsigned int 
  8784 ;; Registers used:
  8785 ;;		wreg, status,2, status,0
  8786 ;; Tracked objects:
  8787 ;;		On entry : 300/0
  8788 ;;		On exit  : 300/0
  8789 ;;		Unchanged: 300/0
  8790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8791 ;;      Params:         4       0       0       0       0
  8792 ;;      Locals:         1       0       0       0       0
  8793 ;;      Temps:          0       0       0       0       0
  8794 ;;      Totals:         5       0       0       0       0
  8795 ;;Total ram usage:        5 bytes
  8796 ;; Hardware stack levels used:    1
  8797 ;; This function calls:
  8798 ;;		Nothing
  8799 ;; This function is called by:
  8800 ;;		_isr
  8801 ;;		i1_LCDTimeUpdate
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           
  8806                           ;psect for function i1___lwmod
  8807  1140                     i1___lwmod:	
  8808                           
  8809                           ;incstack = 0
  8810                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  8811  1140  0871               	movf	i1___lwmod@divisor,w
  8812  1141  0472               	iorwf	i1___lwmod@divisor+1,w
  8813  1142  1903               	btfsc	3,2
  8814  1143  295F               	goto	i1l4056
  8815  1144  01F5               	clrf	i1___lwmod@counter
  8816  1145                     L43:	
  8817  1145  0AF5               	incf	i1___lwmod@counter,f
  8818  1146  1BF2               	btfsc	i1___lwmod@divisor+1,7
  8819  1147  294C               	goto	i1l4048
  8820  1148  1003               	clrc
  8821  1149  0DF1               	rlf	i1___lwmod@divisor,f
  8822  114A  0DF2               	rlf	i1___lwmod@divisor+1,f
  8823  114B  2945               	goto	L43
  8824  114C                     i1l4048:	
  8825  114C  0872               	movf	i1___lwmod@divisor+1,w
  8826  114D  0274               	subwf	i1___lwmod@dividend+1,w
  8827  114E  1D03               	skipz
  8828  114F  2952               	goto	u528_25
  8829  1150  0871               	movf	i1___lwmod@divisor,w
  8830  1151  0273               	subwf	i1___lwmod@dividend,w
  8831  1152                     u528_25:	
  8832  1152  1C03               	skipc
  8833  1153  295B               	goto	L44
  8834  1154  0871               	movf	i1___lwmod@divisor,w
  8835  1155  02F3               	subwf	i1___lwmod@dividend,f
  8836  1156  0872               	movf	i1___lwmod@divisor+1,w
  8837  1157  1C03               	skipc
  8838  1158  03F4               	decf	i1___lwmod@dividend+1,f
  8839  1159  02F4               	subwf	i1___lwmod@dividend+1,f
  8840  115A  1003               	clrc
  8841  115B                     L44:	
  8842  115B  0CF2               	rrf	i1___lwmod@divisor+1,f
  8843  115C  0CF1               	rrf	i1___lwmod@divisor,f
  8844  115D  0BF5               	decfsz	i1___lwmod@counter,f
  8845  115E  294C               	goto	i1l4048
  8846  115F                     i1l4056:	
  8847  115F  0874               	movf	i1___lwmod@dividend+1,w
  8848  1160  00F2               	movwf	?i1___lwmod+1
  8849  1161  0873               	movf	i1___lwmod@dividend,w
  8850  1162  00F1               	movwf	?i1___lwmod
  8851  1163  0008               	return
  8852  1164                     __end_ofi1___lwmod:	
  8853  1164                     __ptext46:	
  8854 ;; *************** function i1___lwdiv *****************
  8855 ;; Defined at:
  8856 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;  divisor         2    0[COMMON] unsigned int 
  8859 ;;  dividend        2    2[COMMON] unsigned int 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  __lwdiv         2    4[COMMON] unsigned int 
  8862 ;;  __lwdiv         1    6[COMMON] unsigned char 
  8863 ;; Return value:  Size  Location     Type
  8864 ;;                  2    0[COMMON] unsigned int 
  8865 ;; Registers used:
  8866 ;;		wreg, status,2, status,0
  8867 ;; Tracked objects:
  8868 ;;		On entry : 300/0
  8869 ;;		On exit  : 300/0
  8870 ;;		Unchanged: 300/0
  8871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8872 ;;      Params:         4       0       0       0       0
  8873 ;;      Locals:         3       0       0       0       0
  8874 ;;      Temps:          0       0       0       0       0
  8875 ;;      Totals:         7       0       0       0       0
  8876 ;;Total ram usage:        7 bytes
  8877 ;; Hardware stack levels used:    1
  8878 ;; This function calls:
  8879 ;;		Nothing
  8880 ;; This function is called by:
  8881 ;;		i1_LCDTimeUpdate
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           
  8886                           ;psect for function i1___lwdiv
  8887  1164                     i1___lwdiv:	
  8888                           
  8889                           ;incstack = 0
  8890                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  8891  1164  01F5               	clrf	i1___lwdiv@quotient
  8892  1165  01F6               	clrf	i1___lwdiv@quotient+1
  8893  1166  0871               	movf	i1___lwdiv@divisor,w
  8894  1167  0472               	iorwf	i1___lwdiv@divisor+1,w
  8895  1168  1903               	btfsc	3,2
  8896  1169  2989               	goto	i1l4036
  8897  116A  01F7               	clrf	i1___lwdiv@counter
  8898  116B                     L45:	
  8899  116B  0AF7               	incf	i1___lwdiv@counter,f
  8900  116C  1BF2               	btfsc	i1___lwdiv@divisor+1,7
  8901  116D  2972               	goto	i1l4024
  8902  116E  1003               	clrc
  8903  116F  0DF1               	rlf	i1___lwdiv@divisor,f
  8904  1170  0DF2               	rlf	i1___lwdiv@divisor+1,f
  8905  1171  296B               	goto	L45
  8906  1172                     i1l4024:	
  8907  1172  1003               	clrc
  8908  1173  0DF5               	rlf	i1___lwdiv@quotient,f
  8909  1174  0DF6               	rlf	i1___lwdiv@quotient+1,f
  8910  1175  0872               	movf	i1___lwdiv@divisor+1,w
  8911  1176  0274               	subwf	i1___lwdiv@dividend+1,w
  8912  1177  1D03               	skipz
  8913  1178  297B               	goto	u524_25
  8914  1179  0871               	movf	i1___lwdiv@divisor,w
  8915  117A  0273               	subwf	i1___lwdiv@dividend,w
  8916  117B                     u524_25:	
  8917  117B  1C03               	skipc
  8918  117C  2985               	goto	L46
  8919  117D  0871               	movf	i1___lwdiv@divisor,w
  8920  117E  02F3               	subwf	i1___lwdiv@dividend,f
  8921  117F  0872               	movf	i1___lwdiv@divisor+1,w
  8922  1180  1C03               	skipc
  8923  1181  03F4               	decf	i1___lwdiv@dividend+1,f
  8924  1182  02F4               	subwf	i1___lwdiv@dividend+1,f
  8925  1183  1475               	bsf	i1___lwdiv@quotient,0
  8926  1184  1003               	clrc
  8927  1185                     L46:	
  8928  1185  0CF2               	rrf	i1___lwdiv@divisor+1,f
  8929  1186  0CF1               	rrf	i1___lwdiv@divisor,f
  8930  1187  0BF7               	decfsz	i1___lwdiv@counter,f
  8931  1188  2972               	goto	i1l4024
  8932  1189                     i1l4036:	
  8933  1189  0876               	movf	i1___lwdiv@quotient+1,w
  8934  118A  00F2               	movwf	?i1___lwdiv+1
  8935  118B  0875               	movf	i1___lwdiv@quotient,w
  8936  118C  00F1               	movwf	?i1___lwdiv
  8937  118D  0008               	return
  8938  118E                     __end_ofi1___lwdiv:	
  8939  118E                     __ptext49:	
  8940 ;; *************** function i1_lcd_add *****************
  8941 ;; Defined at:
  8942 ;;		line 224 in file "lcdv2.h"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;		None               void
  8949 ;; Registers used:
  8950 ;;		wreg, status,2, status,0
  8951 ;; Tracked objects:
  8952 ;;		On entry : 300/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8956 ;;      Params:         0       0       0       0       0
  8957 ;;      Locals:         0       0       0       0       0
  8958 ;;      Temps:          1       0       0       0       0
  8959 ;;      Totals:         1       0       0       0       0
  8960 ;;Total ram usage:        1 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; This function calls:
  8963 ;;		Nothing
  8964 ;; This function is called by:
  8965 ;;		i1_LCD_print_char
  8966 ;;		i1_position
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           
  8971                           ;psect for function i1_lcd_add
  8972  118E                     i1_lcd_add:	
  8973                           
  8974                           ;lcdv2.h: 230: bit0 = lcd_data;
  8975                           
  8976                           ;incstack = 0
  8977                           ; Regs used in i1_lcd_add: [wreg+status,2+status,0]
  8978  118E  1166               	bcf	_bit0/(0+8),_bit0& (0+7)
  8979  118F  185F               	btfsc	_lcd_data,0
  8980  1190  1566               	bsf	_bit0/(0+8),_bit0& (0+7)
  8981                           
  8982                           ;lcdv2.h: 231: bit1 = lcd_data>>1;
  8983  1191  1283               	bcf	3,5	;RP0=0, select bank0
  8984  1192  1303               	bcf	3,6	;RP1=0, select bank0
  8985  1193  085F               	movf	_lcd_data,w
  8986  1194  00F1               	movwf	??i1_lcd_add
  8987  1195  1003               	clrc
  8988  1196  0CF1               	rrf	??i1_lcd_add,f
  8989  1197  11E6               	bcf	_bit1/(0+8),_bit1& (0+7)
  8990  1198  1871               	btfsc	??i1_lcd_add,0
  8991  1199  15E6               	bsf	_bit1/(0+8),_bit1& (0+7)
  8992                           
  8993                           ;lcdv2.h: 232: bit2 = lcd_data>>2;
  8994  119A  1283               	bcf	3,5	;RP0=0, select bank0
  8995  119B  1303               	bcf	3,6	;RP1=0, select bank0
  8996  119C  085F               	movf	_lcd_data,w
  8997  119D  00F1               	movwf	??i1_lcd_add
  8998  119E  1003               	clrc
  8999  119F  0CF1               	rrf	??i1_lcd_add,f
  9000  11A0  1003               	clrc
  9001  11A1  0CF1               	rrf	??i1_lcd_add,f
  9002  11A2  1266               	bcf	_bit2/(0+8),_bit2& (0+7)
  9003  11A3  1871               	btfsc	??i1_lcd_add,0
  9004  11A4  1666               	bsf	_bit2/(0+8),_bit2& (0+7)
  9005                           
  9006                           ;lcdv2.h: 233: bit3 = lcd_data>>3;
  9007  11A5  1283               	bcf	3,5	;RP0=0, select bank0
  9008  11A6  1303               	bcf	3,6	;RP1=0, select bank0
  9009  11A7  085F               	movf	_lcd_data,w
  9010  11A8  00F1               	movwf	??i1_lcd_add
  9011  11A9  1003               	clrc
  9012  11AA  0CF1               	rrf	??i1_lcd_add,f
  9013  11AB  1003               	clrc
  9014  11AC  0CF1               	rrf	??i1_lcd_add,f
  9015  11AD  1003               	clrc
  9016  11AE  0CF1               	rrf	??i1_lcd_add,f
  9017  11AF  12E6               	bcf	_bit3/(0+8),_bit3& (0+7)
  9018  11B0  1871               	btfsc	??i1_lcd_add,0
  9019  11B1  16E6               	bsf	_bit3/(0+8),_bit3& (0+7)
  9020                           
  9021                           ;lcdv2.h: 234: bit4 = lcd_data>>4;
  9022  11B2  1283               	bcf	3,5	;RP0=0, select bank0
  9023  11B3  1303               	bcf	3,6	;RP1=0, select bank0
  9024  11B4  085F               	movf	_lcd_data,w
  9025  11B5  00F1               	movwf	??i1_lcd_add
  9026  11B6  3004               	movlw	4
  9027  11B7                     u353_25:	
  9028  11B7  1003               	clrc
  9029  11B8  0CF1               	rrf	??i1_lcd_add,f
  9030  11B9  3EFF               	addlw	-1
  9031  11BA  1D03               	skipz
  9032  11BB  29B7               	goto	u353_25
  9033  11BC  1366               	bcf	_bit4/(0+8),_bit4& (0+7)
  9034  11BD  1871               	btfsc	??i1_lcd_add,0
  9035  11BE  1766               	bsf	_bit4/(0+8),_bit4& (0+7)
  9036                           
  9037                           ;lcdv2.h: 235: bit5 = lcd_data>>5;
  9038  11BF  1283               	bcf	3,5	;RP0=0, select bank0
  9039  11C0  1303               	bcf	3,6	;RP1=0, select bank0
  9040  11C1  085F               	movf	_lcd_data,w
  9041  11C2  00F1               	movwf	??i1_lcd_add
  9042  11C3  3005               	movlw	5
  9043  11C4                     u355_25:	
  9044  11C4  1003               	clrc
  9045  11C5  0CF1               	rrf	??i1_lcd_add,f
  9046  11C6  3EFF               	addlw	-1
  9047  11C7  1D03               	skipz
  9048  11C8  29C4               	goto	u355_25
  9049  11C9  13E6               	bcf	_bit5/(0+8),_bit5& (0+7)
  9050  11CA  1871               	btfsc	??i1_lcd_add,0
  9051  11CB  17E6               	bsf	_bit5/(0+8),_bit5& (0+7)
  9052                           
  9053                           ;lcdv2.h: 236: bit6 = lcd_data>>6;
  9054  11CC  1283               	bcf	3,5	;RP0=0, select bank0
  9055  11CD  1303               	bcf	3,6	;RP1=0, select bank0
  9056  11CE  085F               	movf	_lcd_data,w
  9057  11CF  00F1               	movwf	??i1_lcd_add
  9058  11D0  3006               	movlw	6
  9059  11D1                     u357_25:	
  9060  11D1  1003               	clrc
  9061  11D2  0CF1               	rrf	??i1_lcd_add,f
  9062  11D3  3EFF               	addlw	-1
  9063  11D4  1D03               	skipz
  9064  11D5  29D1               	goto	u357_25
  9065  11D6  1067               	bcf	_bit6/(0+8),_bit6& (0+7)
  9066  11D7  1871               	btfsc	??i1_lcd_add,0
  9067  11D8  1467               	bsf	_bit6/(0+8),_bit6& (0+7)
  9068                           
  9069                           ;lcdv2.h: 237: bit7 = lcd_data>>7;
  9070  11D9  1283               	bcf	3,5	;RP0=0, select bank0
  9071  11DA  1303               	bcf	3,6	;RP1=0, select bank0
  9072  11DB  085F               	movf	_lcd_data,w
  9073  11DC  00F1               	movwf	??i1_lcd_add
  9074  11DD  3007               	movlw	7
  9075  11DE                     u359_25:	
  9076  11DE  1003               	clrc
  9077  11DF  0CF1               	rrf	??i1_lcd_add,f
  9078  11E0  3EFF               	addlw	-1
  9079  11E1  1D03               	skipz
  9080  11E2  29DE               	goto	u359_25
  9081  11E3  10E7               	bcf	_bit7/(0+8),_bit7& (0+7)
  9082  11E4  1871               	btfsc	??i1_lcd_add,0
  9083  11E5  14E7               	bsf	_bit7/(0+8),_bit7& (0+7)
  9084                           
  9085                           ;lcdv2.h: 239: RC3 = 0;
  9086  11E6  1283               	bcf	3,5	;RP0=0, select bank0
  9087  11E7  1303               	bcf	3,6	;RP1=0, select bank0
  9088  11E8  1187               	bcf	7,3	;volatile
  9089                           
  9090                           ;lcdv2.h: 240: _delay(1);
  9091  11E9  0000               	nop
  9092                           
  9093                           ;lcdv2.h: 241: RC3 = 1;
  9094  11EA  1283               	bcf	3,5	;RP0=0, select bank0
  9095  11EB  1303               	bcf	3,6	;RP1=0, select bank0
  9096  11EC  1587               	bsf	7,3	;volatile
  9097                           
  9098                           ;lcdv2.h: 242: _delay(1);
  9099  11ED  0000               	nop
  9100                           
  9101                           ;lcdv2.h: 244: RC1 = bit4;
  9102  11EE  1283               	bcf	3,5	;RP0=0, select bank0
  9103  11EF  1303               	bcf	3,6	;RP1=0, select bank0
  9104  11F0  1F66               	btfss	_bit4/(0+8),_bit4& (0+7)
  9105  11F1  29F6               	goto	u361_20
  9106  11F2  1283               	bcf	3,5	;RP0=0, select bank0
  9107  11F3  1303               	bcf	3,6	;RP1=0, select bank0
  9108  11F4  1487               	bsf	7,1	;volatile
  9109  11F5  29F9               	goto	i1l3192
  9110  11F6                     u361_20:	
  9111  11F6  1283               	bcf	3,5	;RP0=0, select bank0
  9112  11F7  1303               	bcf	3,6	;RP1=0, select bank0
  9113  11F8  1087               	bcf	7,1	;volatile
  9114  11F9                     i1l3192:	
  9115                           
  9116                           ;lcdv2.h: 245: RD0 = bit5;
  9117  11F9  1FE6               	btfss	_bit5/(0+8),_bit5& (0+7)
  9118  11FA  29FF               	goto	u363_20
  9119  11FB  1283               	bcf	3,5	;RP0=0, select bank0
  9120  11FC  1303               	bcf	3,6	;RP1=0, select bank0
  9121  11FD  1408               	bsf	8,0	;volatile
  9122  11FE  2A02               	goto	i1l3194
  9123  11FF                     u363_20:	
  9124  11FF  1283               	bcf	3,5	;RP0=0, select bank0
  9125  1200  1303               	bcf	3,6	;RP1=0, select bank0
  9126  1201  1008               	bcf	8,0	;volatile
  9127  1202                     i1l3194:	
  9128                           
  9129                           ;lcdv2.h: 246: RC0 = bit6;
  9130  1202  1C67               	btfss	_bit6/(0+8),_bit6& (0+7)
  9131  1203  2A08               	goto	u365_20
  9132  1204  1283               	bcf	3,5	;RP0=0, select bank0
  9133  1205  1303               	bcf	3,6	;RP1=0, select bank0
  9134  1206  1407               	bsf	7,0	;volatile
  9135  1207  2A0B               	goto	i1l3196
  9136  1208                     u365_20:	
  9137  1208  1283               	bcf	3,5	;RP0=0, select bank0
  9138  1209  1303               	bcf	3,6	;RP1=0, select bank0
  9139  120A  1007               	bcf	7,0	;volatile
  9140  120B                     i1l3196:	
  9141                           
  9142                           ;lcdv2.h: 247: RD1 = bit7;
  9143  120B  1CE7               	btfss	_bit7/(0+8),_bit7& (0+7)
  9144  120C  2A11               	goto	u367_20
  9145  120D  1283               	bcf	3,5	;RP0=0, select bank0
  9146  120E  1303               	bcf	3,6	;RP1=0, select bank0
  9147  120F  1488               	bsf	8,1	;volatile
  9148  1210  2A14               	goto	i1l3198
  9149  1211                     u367_20:	
  9150  1211  1283               	bcf	3,5	;RP0=0, select bank0
  9151  1212  1303               	bcf	3,6	;RP1=0, select bank0
  9152  1213  1088               	bcf	8,1	;volatile
  9153  1214                     i1l3198:	
  9154                           
  9155                           ;lcdv2.h: 249: _delay(1);
  9156  1214  0000               	nop
  9157                           
  9158                           ;lcdv2.h: 250: RC3 = 0;
  9159  1215  1283               	bcf	3,5	;RP0=0, select bank0
  9160  1216  1303               	bcf	3,6	;RP1=0, select bank0
  9161  1217  1187               	bcf	7,3	;volatile
  9162                           
  9163                           ;lcdv2.h: 251: _delay(1);
  9164  1218  0000               	nop
  9165                           
  9166                           ;lcdv2.h: 255: RC3 = 0;
  9167  1219  1283               	bcf	3,5	;RP0=0, select bank0
  9168  121A  1303               	bcf	3,6	;RP1=0, select bank0
  9169  121B  1187               	bcf	7,3	;volatile
  9170                           
  9171                           ;lcdv2.h: 256: _delay(1);
  9172  121C  0000               	nop
  9173                           
  9174                           ;lcdv2.h: 257: RC3 = 1;
  9175  121D  1283               	bcf	3,5	;RP0=0, select bank0
  9176  121E  1303               	bcf	3,6	;RP1=0, select bank0
  9177  121F  1587               	bsf	7,3	;volatile
  9178                           
  9179                           ;lcdv2.h: 258: _delay(1);
  9180  1220  0000               	nop
  9181                           
  9182                           ;lcdv2.h: 260: RC1 = bit0;
  9183  1221  1283               	bcf	3,5	;RP0=0, select bank0
  9184  1222  1303               	bcf	3,6	;RP1=0, select bank0
  9185  1223  1D66               	btfss	_bit0/(0+8),_bit0& (0+7)
  9186  1224  2A29               	goto	u369_20
  9187  1225  1283               	bcf	3,5	;RP0=0, select bank0
  9188  1226  1303               	bcf	3,6	;RP1=0, select bank0
  9189  1227  1487               	bsf	7,1	;volatile
  9190  1228  2A2C               	goto	i1l3214
  9191  1229                     u369_20:	
  9192  1229  1283               	bcf	3,5	;RP0=0, select bank0
  9193  122A  1303               	bcf	3,6	;RP1=0, select bank0
  9194  122B  1087               	bcf	7,1	;volatile
  9195  122C                     i1l3214:	
  9196                           
  9197                           ;lcdv2.h: 261: RD0 = bit1;
  9198  122C  1DE6               	btfss	_bit1/(0+8),_bit1& (0+7)
  9199  122D  2A32               	goto	u371_20
  9200  122E  1283               	bcf	3,5	;RP0=0, select bank0
  9201  122F  1303               	bcf	3,6	;RP1=0, select bank0
  9202  1230  1408               	bsf	8,0	;volatile
  9203  1231  2A35               	goto	i1l3216
  9204  1232                     u371_20:	
  9205  1232  1283               	bcf	3,5	;RP0=0, select bank0
  9206  1233  1303               	bcf	3,6	;RP1=0, select bank0
  9207  1234  1008               	bcf	8,0	;volatile
  9208  1235                     i1l3216:	
  9209                           
  9210                           ;lcdv2.h: 262: RC0 = bit2;
  9211  1235  1E66               	btfss	_bit2/(0+8),_bit2& (0+7)
  9212  1236  2A3B               	goto	u373_20
  9213  1237  1283               	bcf	3,5	;RP0=0, select bank0
  9214  1238  1303               	bcf	3,6	;RP1=0, select bank0
  9215  1239  1407               	bsf	7,0	;volatile
  9216  123A  2A3E               	goto	i1l3218
  9217  123B                     u373_20:	
  9218  123B  1283               	bcf	3,5	;RP0=0, select bank0
  9219  123C  1303               	bcf	3,6	;RP1=0, select bank0
  9220  123D  1007               	bcf	7,0	;volatile
  9221  123E                     i1l3218:	
  9222                           
  9223                           ;lcdv2.h: 263: RD1 = bit3;
  9224  123E  1EE6               	btfss	_bit3/(0+8),_bit3& (0+7)
  9225  123F  2A44               	goto	u375_20
  9226  1240  1283               	bcf	3,5	;RP0=0, select bank0
  9227  1241  1303               	bcf	3,6	;RP1=0, select bank0
  9228  1242  1488               	bsf	8,1	;volatile
  9229  1243  2A47               	goto	i1l3220
  9230  1244                     u375_20:	
  9231  1244  1283               	bcf	3,5	;RP0=0, select bank0
  9232  1245  1303               	bcf	3,6	;RP1=0, select bank0
  9233  1246  1088               	bcf	8,1	;volatile
  9234  1247                     i1l3220:	
  9235                           
  9236                           ;lcdv2.h: 265: _delay(1);
  9237  1247  0000               	nop
  9238                           
  9239                           ;lcdv2.h: 266: RC3 = 0;
  9240  1248  1283               	bcf	3,5	;RP0=0, select bank0
  9241  1249  1303               	bcf	3,6	;RP1=0, select bank0
  9242  124A  1187               	bcf	7,3	;volatile
  9243                           
  9244                           ;lcdv2.h: 267: _delay(1);
  9245  124B  0000               	nop
  9246  124C  0008               	return
  9247  124D                     __end_ofi1_lcd_add:	
  9248  007E                     btemp	set	126	;btemp
  9249  007E                     wtemp	set	126
  9250  007E                     wtemp0	set	126
  9251  0080                     wtemp1	set	128
  9252  0082                     wtemp2	set	130
  9253  0084                     wtemp3	set	132
  9254  0086                     wtemp4	set	134
  9255  0088                     wtemp5	set	136
  9256  007F                     wtemp6	set	127
  9257  007E                     ttemp	set	126
  9258  007E                     ttemp0	set	126
  9259  0081                     ttemp1	set	129
  9260  0084                     ttemp2	set	132
  9261  0087                     ttemp3	set	135
  9262  007F                     ttemp4	set	127
  9263  007E                     ltemp	set	126
  9264  007E                     ltemp0	set	126
  9265  0082                     ltemp1	set	130
  9266  0086                     ltemp2	set	134
  9267  0080                     ltemp3	set	128
  9268  124D                     __ptext48:	
  9269 ;; *************** function i1_position *****************
  9270 ;; Defined at:
  9271 ;;		line 208 in file "lcdv2.h"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;  row             1    wreg     unsigned char 
  9274 ;;  collum          1    1[COMMON] unsigned char 
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;  row             1    5[COMMON] unsigned char 
  9277 ;;  position        1    4[COMMON] unsigned char 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;		None               void
  9280 ;; Registers used:
  9281 ;;		wreg, status,2, status,0, pclath, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 300/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9287 ;;      Params:         1       0       0       0       0
  9288 ;;      Locals:         2       0       0       0       0
  9289 ;;      Temps:          2       0       0       0       0
  9290 ;;      Totals:         5       0       0       0       0
  9291 ;;Total ram usage:        5 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    1
  9294 ;; This function calls:
  9295 ;;		i1_lcd_add
  9296 ;; This function is called by:
  9297 ;;		i1_LCD_print_char
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           
  9302                           ;psect for function i1_position
  9303  124D                     i1_position:	
  9304                           
  9305                           ;incstack = 0
  9306                           ; Regs used in i1_position: [wreg+status,2+status,0+pclath+cstack]
  9307                           ;i1position@row stored from wreg
  9308  124D  00F6               	movwf	i1position@row
  9309                           
  9310                           ;lcdv2.h: 210: char post ;
  9311                           ;lcdv2.h: 211: if( row == 1 ) row = 128;
  9312  124E  0B76               	decfsz	i1position@row,w
  9313  124F  2A52               	goto	i1l3460
  9314  1250  3080               	movlw	128
  9315  1251  00F6               	movwf	i1position@row
  9316  1252                     i1l3460:	
  9317                           
  9318                           ;lcdv2.h: 212: if( row == 2 ) row = 192;
  9319  1252  3002               	movlw	2
  9320  1253  0676               	xorwf	i1position@row,w
  9321  1254  1D03               	btfss	3,2
  9322  1255  2A58               	goto	i1l3464
  9323  1256  30C0               	movlw	192
  9324  1257  00F6               	movwf	i1position@row
  9325  1258                     i1l3464:	
  9326                           
  9327                           ;lcdv2.h: 213: post = row + collum - 1;
  9328  1258  0872               	movf	i1position@collum,w
  9329  1259  0776               	addwf	i1position@row,w
  9330  125A  3EFF               	addlw	255
  9331  125B  00F5               	movwf	i1position@post
  9332                           
  9333                           ;lcdv2.h: 214: RC2 = 0;
  9334  125C  1107               	bcf	7,2	;volatile
  9335                           
  9336                           ;lcdv2.h: 215: _delay(20);
  9337  125D  3006               	movlw	6
  9338  125E  00F3               	movwf	??i1_position
  9339  125F                     u689_27:	
  9340  125F  0BF3               	decfsz	??i1_position,f
  9341  1260  2A5F               	goto	u689_27
  9342  1261  0000               	nop
  9343                           
  9344                           ;lcdv2.h: 216: lcd_data = post ;
  9345  1262  0875               	movf	i1position@post,w
  9346  1263  1283               	bcf	3,5	;RP0=0, select bank0
  9347  1264  1303               	bcf	3,6	;RP1=0, select bank0
  9348  1265  00DF               	movwf	_lcd_data
  9349                           
  9350                           ;lcdv2.h: 217: lcd_add();
  9351  1266  218E  160A  118A   	fcall	i1_lcd_add
  9352                           
  9353                           ;lcdv2.h: 218: _delay((unsigned long)((10)*(4000000/4000.0)));
  9354  1269  300D               	movlw	13
  9355  126A  00F4               	movwf	??i1_position+1
  9356  126B  30FB               	movlw	251
  9357  126C  00F3               	movwf	??i1_position
  9358  126D                     u690_27:	
  9359  126D  0BF3               	decfsz	??i1_position,f
  9360  126E  2A6D               	goto	u690_27
  9361  126F  0BF4               	decfsz	??i1_position+1,f
  9362  1270  2A6D               	goto	u690_27
  9363  1271  2A72               	nop2
  9364  1272  0008               	return
  9365  1273                     __end_ofi1_position:	
  9366                           
  9367                           	psect	intentry
  9368  0004                     __pintentry:	
  9369                           ;incstack = 0
  9370 ;; hardware stack exceeded
  9371                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9372                           
  9373  0004                     interrupt_function:	
  9374  007E                     saved_w	set	btemp
  9375  0004  00FE               	movwf	btemp
  9376  0005  0E03               	swapf	3,w
  9377  0006  1283               	bcf	3,5	;RP0=0, select bank0
  9378  0007  1303               	bcf	3,6	;RP1=0, select bank0
  9379  0008  00A0               	movwf	??_isr
  9380  0009  0804               	movf	4,w
  9381  000A  00A1               	movwf	??_isr+1
  9382  000B  080A               	movf	10,w
  9383  000C  00A2               	movwf	??_isr+2
  9384  000D  160A  118A  284A   	ljmp	_isr
  9385                           
  9386                           	psect	maintext_split_1
  9387  09CB                     l4790:	
  9388                           
  9389                           ;Automated Solar Panel Orientation Setter.c: 129: state = 91;
  9390  09CB  305B               	movlw	91
  9391  09CC  2FD7               	goto	L5
  9392  09CD                     l4792:	
  9393                           ;Automated Solar Panel Orientation Setter.c: 130: break;
  9394                           
  9395                           
  9396                           ;Automated Solar Panel Orientation Setter.c: 132: state = 92;
  9397  09CD  305C               	movlw	92
  9398  09CE  2FD7               	goto	L5
  9399  09CF                     l4794:	
  9400                           ;Automated Solar Panel Orientation Setter.c: 133: break;
  9401                           
  9402                           
  9403                           ;Automated Solar Panel Orientation Setter.c: 135: state = 93;
  9404  09CF  305D               	movlw	93
  9405  09D0  2FD7               	goto	L5
  9406  09D1                     l4796:	
  9407                           ;Automated Solar Panel Orientation Setter.c: 136: break;
  9408                           
  9409  09D1  304D               	movlw	77
  9410                           
  9411                           ;Automated Solar Panel Orientation Setter.c: 145: LCD_print_char(1,1,'M');
  9412  09D2  01AF               	clrf	LCD_print_char@row
  9413  09D3  0AAF               	incf	LCD_print_char@row,f
  9414  09D4  01B0               	clrf	LCD_print_char@row+1
  9415  09D5  01B1               	clrf	LCD_print_char@column
  9416  09D6  0AB1               	incf	LCD_print_char@column,f
  9417  09D7  01B2               	clrf	LCD_print_char@column+1
  9418  09D8  00B3               	movwf	LCD_print_char@print_value
  9419  09D9  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9420                           
  9421                           ;Automated Solar Panel Orientation Setter.c: 146: LCD_print_char(1,2,'O');
  9422  09DE  1283               	bcf	3,5	;RP0=0, select bank0
  9423  09DF  1303               	bcf	3,6	;RP1=0, select bank0
  9424  09E0  3002               	movlw	2
  9425  09E1  01AF               	clrf	LCD_print_char@row
  9426  09E2  0AAF               	incf	LCD_print_char@row,f
  9427  09E3  01B0               	clrf	LCD_print_char@row+1
  9428  09E4  00B1               	movwf	LCD_print_char@column
  9429  09E5  304F               	movlw	79
  9430  09E6  01B2               	clrf	LCD_print_char@column+1
  9431  09E7  00B3               	movwf	LCD_print_char@print_value
  9432  09E8  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9433                           
  9434                           ;Automated Solar Panel Orientation Setter.c: 147: LCD_print_char(1,3,'D');
  9435  09ED  1283               	bcf	3,5	;RP0=0, select bank0
  9436  09EE  1303               	bcf	3,6	;RP1=0, select bank0
  9437  09EF  3003               	movlw	3
  9438  09F0  01AF               	clrf	LCD_print_char@row
  9439  09F1  0AAF               	incf	LCD_print_char@row,f
  9440  09F2  01B0               	clrf	LCD_print_char@row+1
  9441  09F3  00B1               	movwf	LCD_print_char@column
  9442  09F4  3044               	movlw	68
  9443  09F5  01B2               	clrf	LCD_print_char@column+1
  9444  09F6  00B3               	movwf	LCD_print_char@print_value
  9445  09F7  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9446                           
  9447                           ;Automated Solar Panel Orientation Setter.c: 148: LCD_print_char(1,4,'E');
  9448  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  9449  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  9450  09FE  3004               	movlw	4
  9451  09FF  01AF               	clrf	LCD_print_char@row
  9452  0A00  0AAF               	incf	LCD_print_char@row,f
  9453  0A01  01B0               	clrf	LCD_print_char@row+1
  9454  0A02  00B1               	movwf	LCD_print_char@column
  9455  0A03  3045               	movlw	69
  9456  0A04  01B2               	clrf	LCD_print_char@column+1
  9457  0A05  00B3               	movwf	LCD_print_char@print_value
  9458  0A06  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9459                           
  9460                           ;Automated Solar Panel Orientation Setter.c: 150: LCD_print_char(1,6,',');
  9461  0A0B  1283               	bcf	3,5	;RP0=0, select bank0
  9462  0A0C  1303               	bcf	3,6	;RP1=0, select bank0
  9463  0A0D  3006               	movlw	6
  9464  0A0E  01AF               	clrf	LCD_print_char@row
  9465  0A0F  0AAF               	incf	LCD_print_char@row,f
  9466  0A10  01B0               	clrf	LCD_print_char@row+1
  9467  0A11  00B1               	movwf	LCD_print_char@column
  9468  0A12  302C               	movlw	44
  9469  0A13  01B2               	clrf	LCD_print_char@column+1
  9470  0A14  00B3               	movwf	LCD_print_char@print_value
  9471  0A15  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9472                           
  9473                           ;Automated Solar Panel Orientation Setter.c: 151: LCD_print_char(1,10,'D');
  9474  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  9475  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  9476  0A1C  300A               	movlw	10
  9477  0A1D  01AF               	clrf	LCD_print_char@row
  9478  0A1E  0AAF               	incf	LCD_print_char@row,f
  9479  0A1F  01B0               	clrf	LCD_print_char@row+1
  9480  0A20  00B1               	movwf	LCD_print_char@column
  9481  0A21  3044               	movlw	68
  9482  0A22  01B2               	clrf	LCD_print_char@column+1
  9483  0A23  00B3               	movwf	LCD_print_char@print_value
  9484  0A24  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9485                           
  9486                           ;Automated Solar Panel Orientation Setter.c: 152: LCD_print_char(1,11,',');
  9487  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  9488  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  9489  0A2B  300B               	movlw	11
  9490  0A2C  01AF               	clrf	LCD_print_char@row
  9491  0A2D  0AAF               	incf	LCD_print_char@row,f
  9492  0A2E  01B0               	clrf	LCD_print_char@row+1
  9493  0A2F  00B1               	movwf	LCD_print_char@column
  9494  0A30  302C               	movlw	44
  9495  0A31  01B2               	clrf	LCD_print_char@column+1
  9496  0A32  00B3               	movwf	LCD_print_char@print_value
  9497  0A33  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9498                           
  9499                           ;Automated Solar Panel Orientation Setter.c: 154: LCD_print_char(2,3,'.');
  9500  0A38  3002               	movlw	2
  9501  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  9502  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  9503  0A3B  00AF               	movwf	LCD_print_char@row
  9504  0A3C  3003               	movlw	3
  9505  0A3D  01B0               	clrf	LCD_print_char@row+1
  9506  0A3E  00B1               	movwf	LCD_print_char@column
  9507  0A3F  302E               	movlw	46
  9508  0A40  01B2               	clrf	LCD_print_char@column+1
  9509  0A41  00B3               	movwf	LCD_print_char@print_value
  9510  0A42  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9511                           
  9512                           ;Automated Solar Panel Orientation Setter.c: 155: LCD_print_char(2,5,'V');
  9513  0A47  3002               	movlw	2
  9514  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  9515  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  9516  0A4A  00AF               	movwf	LCD_print_char@row
  9517  0A4B  3005               	movlw	5
  9518  0A4C  01B0               	clrf	LCD_print_char@row+1
  9519  0A4D  00B1               	movwf	LCD_print_char@column
  9520  0A4E  3056               	movlw	86
  9521  0A4F  01B2               	clrf	LCD_print_char@column+1
  9522  0A50  00B3               	movwf	LCD_print_char@print_value
  9523  0A51  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9524                           
  9525                           ;Automated Solar Panel Orientation Setter.c: 156: LCD_print_char(2,6,',');
  9526  0A56  3002               	movlw	2
  9527  0A57  1283               	bcf	3,5	;RP0=0, select bank0
  9528  0A58  1303               	bcf	3,6	;RP1=0, select bank0
  9529  0A59  00AF               	movwf	LCD_print_char@row
  9530  0A5A  3006               	movlw	6
  9531  0A5B  01B0               	clrf	LCD_print_char@row+1
  9532  0A5C  00B1               	movwf	LCD_print_char@column
  9533  0A5D  302C               	movlw	44
  9534  0A5E  01B2               	clrf	LCD_print_char@column+1
  9535  0A5F  00B3               	movwf	LCD_print_char@print_value
  9536  0A60  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9537                           
  9538                           ;Automated Solar Panel Orientation Setter.c: 157: LCD_print_char(2,8,'.');
  9539  0A65  3002               	movlw	2
  9540  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  9541  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  9542  0A68  00AF               	movwf	LCD_print_char@row
  9543  0A69  3008               	movlw	8
  9544  0A6A  01B0               	clrf	LCD_print_char@row+1
  9545  0A6B  00B1               	movwf	LCD_print_char@column
  9546  0A6C  302E               	movlw	46
  9547  0A6D  01B2               	clrf	LCD_print_char@column+1
  9548  0A6E  00B3               	movwf	LCD_print_char@print_value
  9549  0A6F  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9550                           
  9551                           ;Automated Solar Panel Orientation Setter.c: 158: LCD_print_char(2,10,'A');
  9552  0A74  3002               	movlw	2
  9553  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  9554  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  9555  0A77  00AF               	movwf	LCD_print_char@row
  9556  0A78  300A               	movlw	10
  9557  0A79  01B0               	clrf	LCD_print_char@row+1
  9558  0A7A  00B1               	movwf	LCD_print_char@column
  9559  0A7B  3041               	movlw	65
  9560  0A7C  01B2               	clrf	LCD_print_char@column+1
  9561  0A7D  00B3               	movwf	LCD_print_char@print_value
  9562  0A7E  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9563                           
  9564                           ;Automated Solar Panel Orientation Setter.c: 159: LCD_print_char(2,11,',');
  9565  0A83  3002               	movlw	2
  9566  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  9567  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  9568  0A86  00AF               	movwf	LCD_print_char@row
  9569  0A87  300B               	movlw	11
  9570  0A88  01B0               	clrf	LCD_print_char@row+1
  9571  0A89  00B1               	movwf	LCD_print_char@column
  9572  0A8A  302C               	movlw	44
  9573  0A8B  01B2               	clrf	LCD_print_char@column+1
  9574  0A8C  00B3               	movwf	LCD_print_char@print_value
  9575  0A8D  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9576                           
  9577                           ;Automated Solar Panel Orientation Setter.c: 160: LCD_print_char(2,14,'.');
  9578  0A92  3002               	movlw	2
  9579  0A93  1283               	bcf	3,5	;RP0=0, select bank0
  9580  0A94  1303               	bcf	3,6	;RP1=0, select bank0
  9581  0A95  00AF               	movwf	LCD_print_char@row
  9582  0A96  300E               	movlw	14
  9583  0A97  01B0               	clrf	LCD_print_char@row+1
  9584  0A98  00B1               	movwf	LCD_print_char@column
  9585  0A99  302E               	movlw	46
  9586  0A9A  01B2               	clrf	LCD_print_char@column+1
  9587  0A9B  00B3               	movwf	LCD_print_char@print_value
  9588  0A9C  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9589                           
  9590                           ;Automated Solar Panel Orientation Setter.c: 161: LCD_print_char(2,16,'W');
  9591  0AA1  3002               	movlw	2
  9592  0AA2  1283               	bcf	3,5	;RP0=0, select bank0
  9593  0AA3  1303               	bcf	3,6	;RP1=0, select bank0
  9594  0AA4  00AF               	movwf	LCD_print_char@row
  9595  0AA5  3010               	movlw	16
  9596  0AA6  01B0               	clrf	LCD_print_char@row+1
  9597  0AA7  00B1               	movwf	LCD_print_char@column
  9598  0AA8  3057               	movlw	87
  9599  0AA9  01B2               	clrf	LCD_print_char@column+1
  9600  0AAA  00B3               	movwf	LCD_print_char@print_value
  9601  0AAB  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9602                           
  9603                           ;Automated Solar Panel Orientation Setter.c: 164: LCD_print_char(1,5,'1');
  9604  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  9605  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  9606  0AB2  3005               	movlw	5
  9607  0AB3  01AF               	clrf	LCD_print_char@row
  9608  0AB4  0AAF               	incf	LCD_print_char@row,f
  9609  0AB5  01B0               	clrf	LCD_print_char@row+1
  9610  0AB6  00B1               	movwf	LCD_print_char@column
  9611  0AB7  3031               	movlw	49
  9612  0AB8  01B2               	clrf	LCD_print_char@column+1
  9613  0AB9  00B3               	movwf	LCD_print_char@print_value
  9614  0ABA  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9615                           
  9616                           ;Automated Solar Panel Orientation Setter.c: 166: LCD_print_char(1,7,'0');
  9617  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
  9618  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
  9619  0AC1  3007               	movlw	7
  9620  0AC2  01AF               	clrf	LCD_print_char@row
  9621  0AC3  0AAF               	incf	LCD_print_char@row,f
  9622  0AC4  01B0               	clrf	LCD_print_char@row+1
  9623  0AC5  00B1               	movwf	LCD_print_char@column
  9624  0AC6  3030               	movlw	48
  9625  0AC7  01B2               	clrf	LCD_print_char@column+1
  9626  0AC8  00B3               	movwf	LCD_print_char@print_value
  9627  0AC9  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9628                           
  9629                           ;Automated Solar Panel Orientation Setter.c: 167: LCD_print_char(1,8,'0');
  9630  0ACE  1283               	bcf	3,5	;RP0=0, select bank0
  9631  0ACF  1303               	bcf	3,6	;RP1=0, select bank0
  9632  0AD0  3008               	movlw	8
  9633  0AD1  01AF               	clrf	LCD_print_char@row
  9634  0AD2  0AAF               	incf	LCD_print_char@row,f
  9635  0AD3  01B0               	clrf	LCD_print_char@row+1
  9636  0AD4  00B1               	movwf	LCD_print_char@column
  9637  0AD5  3030               	movlw	48
  9638  0AD6  01B2               	clrf	LCD_print_char@column+1
  9639  0AD7  00B3               	movwf	LCD_print_char@print_value
  9640  0AD8  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9641                           
  9642                           ;Automated Solar Panel Orientation Setter.c: 168: LCD_print_char(1,9,'0');
  9643  0ADD  1283               	bcf	3,5	;RP0=0, select bank0
  9644  0ADE  1303               	bcf	3,6	;RP1=0, select bank0
  9645  0ADF  3009               	movlw	9
  9646  0AE0  01AF               	clrf	LCD_print_char@row
  9647  0AE1  0AAF               	incf	LCD_print_char@row,f
  9648  0AE2  01B0               	clrf	LCD_print_char@row+1
  9649  0AE3  00B1               	movwf	LCD_print_char@column
  9650  0AE4  3030               	movlw	48
  9651  0AE5  01B2               	clrf	LCD_print_char@column+1
  9652  0AE6  00B3               	movwf	LCD_print_char@print_value
  9653  0AE7  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9654                           
  9655                           ;Automated Solar Panel Orientation Setter.c: 170: LCD_print_char(2,1,'0');
  9656  0AEC  3002               	movlw	2
  9657  0AED  1283               	bcf	3,5	;RP0=0, select bank0
  9658  0AEE  1303               	bcf	3,6	;RP1=0, select bank0
  9659  0AEF  00AF               	movwf	LCD_print_char@row
  9660  0AF0  3030               	movlw	48
  9661  0AF1  01B0               	clrf	LCD_print_char@row+1
  9662  0AF2  01B1               	clrf	LCD_print_char@column
  9663  0AF3  0AB1               	incf	LCD_print_char@column,f
  9664  0AF4  01B2               	clrf	LCD_print_char@column+1
  9665  0AF5  00B3               	movwf	LCD_print_char@print_value
  9666  0AF6  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9667                           
  9668                           ;Automated Solar Panel Orientation Setter.c: 171: LCD_print_char(2,2,'0');
  9669  0AFB  3002               	movlw	2
  9670  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  9671  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  9672  0AFE  00AF               	movwf	LCD_print_char@row
  9673  0AFF  01B0               	clrf	LCD_print_char@row+1
  9674  0B00  00B1               	movwf	LCD_print_char@column
  9675  0B01  3030               	movlw	48
  9676  0B02  01B2               	clrf	LCD_print_char@column+1
  9677  0B03  00B3               	movwf	LCD_print_char@print_value
  9678  0B04  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9679                           
  9680                           ;Automated Solar Panel Orientation Setter.c: 172: LCD_print_char(2,4,'0');
  9681  0B09  3002               	movlw	2
  9682  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  9683  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  9684  0B0C  00AF               	movwf	LCD_print_char@row
  9685  0B0D  3004               	movlw	4
  9686  0B0E  01B0               	clrf	LCD_print_char@row+1
  9687  0B0F  00B1               	movwf	LCD_print_char@column
  9688  0B10  3030               	movlw	48
  9689  0B11  01B2               	clrf	LCD_print_char@column+1
  9690  0B12  00B3               	movwf	LCD_print_char@print_value
  9691  0B13  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9692                           
  9693                           ;Automated Solar Panel Orientation Setter.c: 174: LCD_print_char(2,7,'0');
  9694  0B18  3002               	movlw	2
  9695  0B19  1283               	bcf	3,5	;RP0=0, select bank0
  9696  0B1A  1303               	bcf	3,6	;RP1=0, select bank0
  9697  0B1B  00AF               	movwf	LCD_print_char@row
  9698  0B1C  3007               	movlw	7
  9699  0B1D  01B0               	clrf	LCD_print_char@row+1
  9700  0B1E  00B1               	movwf	LCD_print_char@column
  9701  0B1F  3030               	movlw	48
  9702  0B20  01B2               	clrf	LCD_print_char@column+1
  9703  0B21  00B3               	movwf	LCD_print_char@print_value
  9704  0B22  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9705                           
  9706                           ;Automated Solar Panel Orientation Setter.c: 175: LCD_print_char(2,9,'0');
  9707  0B27  3002               	movlw	2
  9708  0B28  1283               	bcf	3,5	;RP0=0, select bank0
  9709  0B29  1303               	bcf	3,6	;RP1=0, select bank0
  9710  0B2A  00AF               	movwf	LCD_print_char@row
  9711  0B2B  3009               	movlw	9
  9712  0B2C  01B0               	clrf	LCD_print_char@row+1
  9713  0B2D  00B1               	movwf	LCD_print_char@column
  9714  0B2E  3030               	movlw	48
  9715  0B2F  01B2               	clrf	LCD_print_char@column+1
  9716  0B30  00B3               	movwf	LCD_print_char@print_value
  9717  0B31  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9718                           
  9719                           ;Automated Solar Panel Orientation Setter.c: 177: LCD_print_char(2,12,'0');
  9720  0B36  3002               	movlw	2
  9721  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  9722  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  9723  0B39  00AF               	movwf	LCD_print_char@row
  9724  0B3A  300C               	movlw	12
  9725  0B3B  01B0               	clrf	LCD_print_char@row+1
  9726  0B3C  00B1               	movwf	LCD_print_char@column
  9727  0B3D  3030               	movlw	48
  9728  0B3E  01B2               	clrf	LCD_print_char@column+1
  9729  0B3F  00B3               	movwf	LCD_print_char@print_value
  9730  0B40  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9731                           
  9732                           ;Automated Solar Panel Orientation Setter.c: 178: LCD_print_char(2,13,'0');
  9733  0B45  3002               	movlw	2
  9734  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  9735  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  9736  0B48  00AF               	movwf	LCD_print_char@row
  9737  0B49  300D               	movlw	13
  9738  0B4A  01B0               	clrf	LCD_print_char@row+1
  9739  0B4B  00B1               	movwf	LCD_print_char@column
  9740  0B4C  3030               	movlw	48
  9741  0B4D  01B2               	clrf	LCD_print_char@column+1
  9742  0B4E  00B3               	movwf	LCD_print_char@print_value
  9743  0B4F  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9744                           
  9745                           ;Automated Solar Panel Orientation Setter.c: 179: LCD_print_char(2,15,'0');
  9746  0B54  3002               	movlw	2
  9747  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  9748  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  9749  0B57  00AF               	movwf	LCD_print_char@row
  9750  0B58  300F               	movlw	15
  9751  0B59  01B0               	clrf	LCD_print_char@row+1
  9752  0B5A  00B1               	movwf	LCD_print_char@column
  9753  0B5B  3030               	movlw	48
  9754  0B5C  01B2               	clrf	LCD_print_char@column+1
  9755  0B5D  00B3               	movwf	LCD_print_char@print_value
  9756  0B5E  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9757                           
  9758                           ;Automated Solar Panel Orientation Setter.c: 182: state = 10;
  9759  0B63  300A               	movlw	10
  9760  0B64  2FD5               	goto	L6
  9761  0B65                     l4800:	
  9762                           ;Automated Solar Panel Orientation Setter.c: 183: break;
  9763                           
  9764                           
  9765                           ;Automated Solar Panel Orientation Setter.c: 186: a2d_read();
  9766  0B65  120A  118A  2124  120A  158A  	fcall	_a2d_read
  9767                           
  9768                           ;Automated Solar Panel Orientation Setter.c: 188: Serial_Print_Int(ldr1);
  9769  0B6A  0855               	movf	_ldr1+1,w
  9770  0B6B  00B2               	movwf	Serial_Print_Int@val+1
  9771  0B6C  0854               	movf	_ldr1,w
  9772  0B6D  00B1               	movwf	Serial_Print_Int@val
  9773  0B6E  160A  118A  24C5  120A  158A  	fcall	_Serial_Print_Int
  9774                           
  9775                           ;Automated Solar Panel Orientation Setter.c: 189: Serial_Print(", ");
  9776  0B73  30E1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  9777  0B74  160A  118A  24A6  120A  158A  	fcall	_Serial_Print
  9778                           
  9779                           ;Automated Solar Panel Orientation Setter.c: 190: Serial_Print_Int(ldr2);
  9780  0B79  0857               	movf	_ldr2+1,w
  9781  0B7A  00B2               	movwf	Serial_Print_Int@val+1
  9782  0B7B  0856               	movf	_ldr2,w
  9783  0B7C  00B1               	movwf	Serial_Print_Int@val
  9784  0B7D  160A  118A  24C5  120A  158A  	fcall	_Serial_Print_Int
  9785                           
  9786                           ;Automated Solar Panel Orientation Setter.c: 191: Serial_Print(", ");
  9787  0B82  30E1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  9788  0B83  160A  118A  24A6  120A  158A  	fcall	_Serial_Print
  9789                           
  9790                           ;Automated Solar Panel Orientation Setter.c: 192: Serial_Print_Int(V_Bat);
  9791  0B88  0865               	movf	_V_Bat+1,w
  9792  0B89  00B2               	movwf	Serial_Print_Int@val+1
  9793  0B8A  0864               	movf	_V_Bat,w
  9794  0B8B  00B1               	movwf	Serial_Print_Int@val
  9795  0B8C  160A  118A  24C5  120A  158A  	fcall	_Serial_Print_Int
  9796                           
  9797                           ;Automated Solar Panel Orientation Setter.c: 193: Serial_Print(", ");
  9798  0B91  30E1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  9799  0B92  160A  118A  24A6  120A  158A  	fcall	_Serial_Print
  9800                           
  9801                           ;Automated Solar Panel Orientation Setter.c: 194: Serial_Print_Int(C_Bat);
  9802  0B97  0863               	movf	_C_Bat+1,w
  9803  0B98  00B2               	movwf	Serial_Print_Int@val+1
  9804  0B99  0862               	movf	_C_Bat,w
  9805  0B9A  00B1               	movwf	Serial_Print_Int@val
  9806  0B9B  160A  118A  24C5  120A  158A  	fcall	_Serial_Print_Int
  9807                           
  9808                           ;Automated Solar Panel Orientation Setter.c: 195: Serial_Print(", ");
  9809  0BA0  30E1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  9810  0BA1  160A  118A  24A6  120A  158A  	fcall	_Serial_Print
  9811                           
  9812                           ;Automated Solar Panel Orientation Setter.c: 196: Serial_NewLine();
  9813  0BA6  160A  158A  2541  120A  158A  	fcall	_Serial_NewLine
  9814                           
  9815                           ;Automated Solar Panel Orientation Setter.c: 197: _delay((unsigned long)((50)*(4000000/4
      +                          000.0)));
  9816  0BAB  3041               	movlw	65
  9817  0BAC  1283               	bcf	3,5	;RP0=0, select bank0
  9818  0BAD  1303               	bcf	3,6	;RP1=0, select bank0
  9819  0BAE  00CB               	movwf	??_main+1
  9820  0BAF  30EE               	movlw	238
  9821  0BB0  00CA               	movwf	??_main
  9822  0BB1                     u6457:	
  9823  0BB1  0BCA               	decfsz	??_main,f
  9824  0BB2  2BB1               	goto	u6457
  9825  0BB3  0BCB               	decfsz	??_main+1,f
  9826  0BB4  2BB1               	goto	u6457
  9827  0BB5  0000               	nop
  9828                           
  9829                           ;Automated Solar Panel Orientation Setter.c: 198: nop();
  9830  0BB6  160A  118A  2301  120A  158A  	fcall	_nop
  9831  0BBB  3007               	movlw	7
  9832                           
  9833                           ;Automated Solar Panel Orientation Setter.c: 201: LCD_print_char(1,7,'0');
  9834  0BBC  01AF               	clrf	LCD_print_char@row
  9835  0BBD  0AAF               	incf	LCD_print_char@row,f
  9836  0BBE  01B0               	clrf	LCD_print_char@row+1
  9837  0BBF  00B1               	movwf	LCD_print_char@column
  9838  0BC0  3030               	movlw	48
  9839  0BC1  01B2               	clrf	LCD_print_char@column+1
  9840  0BC2  00B3               	movwf	LCD_print_char@print_value
  9841  0BC3  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9842                           
  9843                           ;Automated Solar Panel Orientation Setter.c: 202: LCD_print_char(1,8,'0');
  9844  0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  9845  0BC9  1303               	bcf	3,6	;RP1=0, select bank0
  9846  0BCA  3008               	movlw	8
  9847  0BCB  01AF               	clrf	LCD_print_char@row
  9848  0BCC  0AAF               	incf	LCD_print_char@row,f
  9849  0BCD  01B0               	clrf	LCD_print_char@row+1
  9850  0BCE  00B1               	movwf	LCD_print_char@column
  9851  0BCF  3030               	movlw	48
  9852  0BD0  01B2               	clrf	LCD_print_char@column+1
  9853  0BD1  00B3               	movwf	LCD_print_char@print_value
  9854  0BD2  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9855                           
  9856                           ;Automated Solar Panel Orientation Setter.c: 203: LCD_print_char(1,9,'0');
  9857  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  9858  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  9859  0BD9  3009               	movlw	9
  9860  0BDA  01AF               	clrf	LCD_print_char@row
  9861  0BDB  0AAF               	incf	LCD_print_char@row,f
  9862  0BDC  01B0               	clrf	LCD_print_char@row+1
  9863  0BDD  00B1               	movwf	LCD_print_char@column
  9864  0BDE  3030               	movlw	48
  9865  0BDF  01B2               	clrf	LCD_print_char@column+1
  9866  0BE0  00B3               	movwf	LCD_print_char@print_value
  9867  0BE1  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9868                           
  9869                           ;Automated Solar Panel Orientation Setter.c: 205: LCD_print_char(2,1,V_Bat2/10+48);
  9870  0BE6  3002               	movlw	2
  9871  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
  9872  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
  9873  0BE9  00AF               	movwf	LCD_print_char@row
  9874  0BEA  300A               	movlw	10
  9875  0BEB  01B0               	clrf	LCD_print_char@row+1
  9876  0BEC  01B1               	clrf	LCD_print_char@column
  9877  0BED  0AB1               	incf	LCD_print_char@column,f
  9878  0BEE  01B2               	clrf	LCD_print_char@column+1
  9879  0BEF  00A3               	movwf	___ltdiv@divisor
  9880  0BF0  01A4               	clrf	___ltdiv@divisor+1
  9881  0BF1  01A5               	clrf	___ltdiv@divisor+2
  9882  0BF2  084D               	movf	_V_Bat2,w
  9883  0BF3  00A6               	movwf	___ltdiv@dividend
  9884  0BF4  084E               	movf	_V_Bat2+1,w
  9885  0BF5  00A7               	movwf	___ltdiv@dividend+1
  9886  0BF6  084F               	movf	_V_Bat2+2,w
  9887  0BF7  00A8               	movwf	___ltdiv@dividend+2
  9888  0BF8  160A  158A  25E0  120A  158A  	fcall	___ltdiv
  9889  0BFD  0823               	movf	?___ltdiv,w
  9890  0BFE  3E30               	addlw	48
  9891  0BFF  00B3               	movwf	LCD_print_char@print_value
  9892  0C00  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9893                           
  9894                           ;Automated Solar Panel Orientation Setter.c: 206: LCD_print_char(2,2,V_Bat2%10+48);
  9895  0C05  3002               	movlw	2
  9896  0C06  1283               	bcf	3,5	;RP0=0, select bank0
  9897  0C07  1303               	bcf	3,6	;RP1=0, select bank0
  9898  0C08  00AF               	movwf	LCD_print_char@row
  9899  0C09  01B0               	clrf	LCD_print_char@row+1
  9900  0C0A  00B1               	movwf	LCD_print_char@column
  9901  0C0B  300A               	movlw	10
  9902  0C0C  01B2               	clrf	LCD_print_char@column+1
  9903  0C0D  00A3               	movwf	___ltmod@divisor
  9904  0C0E  01A4               	clrf	___ltmod@divisor+1
  9905  0C0F  01A5               	clrf	___ltmod@divisor+2
  9906  0C10  084D               	movf	_V_Bat2,w
  9907  0C11  00A6               	movwf	___ltmod@dividend
  9908  0C12  084E               	movf	_V_Bat2+1,w
  9909  0C13  00A7               	movwf	___ltmod@dividend+1
  9910  0C14  084F               	movf	_V_Bat2+2,w
  9911  0C15  00A8               	movwf	___ltmod@dividend+2
  9912  0C16  160A  158A  25AF  120A  158A  	fcall	___ltmod
  9913  0C1B  0823               	movf	?___ltmod,w
  9914  0C1C  3E30               	addlw	48
  9915  0C1D  00B3               	movwf	LCD_print_char@print_value
  9916  0C1E  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9917                           
  9918                           ;Automated Solar Panel Orientation Setter.c: 207: LCD_print_char(2,4,'0');
  9919  0C23  3002               	movlw	2
  9920  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  9921  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  9922  0C26  00AF               	movwf	LCD_print_char@row
  9923  0C27  3004               	movlw	4
  9924  0C28  01B0               	clrf	LCD_print_char@row+1
  9925  0C29  00B1               	movwf	LCD_print_char@column
  9926  0C2A  3030               	movlw	48
  9927  0C2B  01B2               	clrf	LCD_print_char@column+1
  9928  0C2C  00B3               	movwf	LCD_print_char@print_value
  9929  0C2D  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9930                           
  9931                           ;Automated Solar Panel Orientation Setter.c: 209: LCD_print_char(2,7,'0');
  9932  0C32  3002               	movlw	2
  9933  0C33  1283               	bcf	3,5	;RP0=0, select bank0
  9934  0C34  1303               	bcf	3,6	;RP1=0, select bank0
  9935  0C35  00AF               	movwf	LCD_print_char@row
  9936  0C36  3007               	movlw	7
  9937  0C37  01B0               	clrf	LCD_print_char@row+1
  9938  0C38  00B1               	movwf	LCD_print_char@column
  9939  0C39  3030               	movlw	48
  9940  0C3A  01B2               	clrf	LCD_print_char@column+1
  9941  0C3B  00B3               	movwf	LCD_print_char@print_value
  9942  0C3C  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9943                           
  9944                           ;Automated Solar Panel Orientation Setter.c: 210: LCD_print_char(2,9,'0');
  9945  0C41  3002               	movlw	2
  9946  0C42  1283               	bcf	3,5	;RP0=0, select bank0
  9947  0C43  1303               	bcf	3,6	;RP1=0, select bank0
  9948  0C44  00AF               	movwf	LCD_print_char@row
  9949  0C45  3009               	movlw	9
  9950  0C46  01B0               	clrf	LCD_print_char@row+1
  9951  0C47  00B1               	movwf	LCD_print_char@column
  9952  0C48  3030               	movlw	48
  9953  0C49  01B2               	clrf	LCD_print_char@column+1
  9954  0C4A  00B3               	movwf	LCD_print_char@print_value
  9955  0C4B  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9956                           
  9957                           ;Automated Solar Panel Orientation Setter.c: 212: LCD_print_char(2,12,'0');
  9958  0C50  3002               	movlw	2
  9959  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  9960  0C52  1303               	bcf	3,6	;RP1=0, select bank0
  9961  0C53  00AF               	movwf	LCD_print_char@row
  9962  0C54  300C               	movlw	12
  9963  0C55  01B0               	clrf	LCD_print_char@row+1
  9964  0C56  00B1               	movwf	LCD_print_char@column
  9965  0C57  3030               	movlw	48
  9966  0C58  01B2               	clrf	LCD_print_char@column+1
  9967  0C59  00B3               	movwf	LCD_print_char@print_value
  9968  0C5A  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9969                           
  9970                           ;Automated Solar Panel Orientation Setter.c: 213: LCD_print_char(2,13,'0');
  9971  0C5F  3002               	movlw	2
  9972  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  9973  0C61  1303               	bcf	3,6	;RP1=0, select bank0
  9974  0C62  00AF               	movwf	LCD_print_char@row
  9975  0C63  300D               	movlw	13
  9976  0C64  01B0               	clrf	LCD_print_char@row+1
  9977  0C65  00B1               	movwf	LCD_print_char@column
  9978  0C66  3030               	movlw	48
  9979  0C67  01B2               	clrf	LCD_print_char@column+1
  9980  0C68  00B3               	movwf	LCD_print_char@print_value
  9981  0C69  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9982                           
  9983                           ;Automated Solar Panel Orientation Setter.c: 214: LCD_print_char(2,15,'0');
  9984  0C6E  3002               	movlw	2
  9985  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  9986  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  9987  0C71  00AF               	movwf	LCD_print_char@row
  9988  0C72  300F               	movlw	15
  9989  0C73  01B0               	clrf	LCD_print_char@row+1
  9990  0C74  00B1               	movwf	LCD_print_char@column
  9991  0C75  3030               	movlw	48
  9992  0C76  01B2               	clrf	LCD_print_char@column+1
  9993  0C77  00B3               	movwf	LCD_print_char@print_value
  9994  0C78  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
  9995                           
  9996                           ;Automated Solar Panel Orientation Setter.c: 219: CheckMode();
  9997  0C7D  160A  118A  2273  120A  158A  	fcall	_CheckMode
  9998                           
  9999                           ;Automated Solar Panel Orientation Setter.c: 221: Calculate();
 10000  0C82  160A  158A  2619  120A  158A  	fcall	_Calculate
 10001                           
 10002                           ;Automated Solar Panel Orientation Setter.c: 223: break;
 10003  0C87  2FD8               	goto	l4862
 10004  0C88                     l4848:	
 10005  0C88  304D               	movlw	77
 10006                           
 10007                           ;Automated Solar Panel Orientation Setter.c: 228: LCD_print_char(1,1,'M');
 10008  0C89  01AF               	clrf	LCD_print_char@row
 10009  0C8A  0AAF               	incf	LCD_print_char@row,f
 10010  0C8B  01B0               	clrf	LCD_print_char@row+1
 10011  0C8C  01B1               	clrf	LCD_print_char@column
 10012  0C8D  0AB1               	incf	LCD_print_char@column,f
 10013  0C8E  01B2               	clrf	LCD_print_char@column+1
 10014  0C8F  00B3               	movwf	LCD_print_char@print_value
 10015  0C90  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10016                           
 10017                           ;Automated Solar Panel Orientation Setter.c: 229: LCD_print_char(1,2,'O');
 10018  0C95  1283               	bcf	3,5	;RP0=0, select bank0
 10019  0C96  1303               	bcf	3,6	;RP1=0, select bank0
 10020  0C97  3002               	movlw	2
 10021  0C98  01AF               	clrf	LCD_print_char@row
 10022  0C99  0AAF               	incf	LCD_print_char@row,f
 10023  0C9A  01B0               	clrf	LCD_print_char@row+1
 10024  0C9B  00B1               	movwf	LCD_print_char@column
 10025  0C9C  304F               	movlw	79
 10026  0C9D  01B2               	clrf	LCD_print_char@column+1
 10027  0C9E  00B3               	movwf	LCD_print_char@print_value
 10028  0C9F  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10029                           
 10030                           ;Automated Solar Panel Orientation Setter.c: 230: LCD_print_char(1,3,'D');
 10031  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
 10032  0CA5  1303               	bcf	3,6	;RP1=0, select bank0
 10033  0CA6  3003               	movlw	3
 10034  0CA7  01AF               	clrf	LCD_print_char@row
 10035  0CA8  0AAF               	incf	LCD_print_char@row,f
 10036  0CA9  01B0               	clrf	LCD_print_char@row+1
 10037  0CAA  00B1               	movwf	LCD_print_char@column
 10038  0CAB  3044               	movlw	68
 10039  0CAC  01B2               	clrf	LCD_print_char@column+1
 10040  0CAD  00B3               	movwf	LCD_print_char@print_value
 10041  0CAE  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10042                           
 10043                           ;Automated Solar Panel Orientation Setter.c: 231: LCD_print_char(1,4,'E');
 10044  0CB3  1283               	bcf	3,5	;RP0=0, select bank0
 10045  0CB4  1303               	bcf	3,6	;RP1=0, select bank0
 10046  0CB5  3004               	movlw	4
 10047  0CB6  01AF               	clrf	LCD_print_char@row
 10048  0CB7  0AAF               	incf	LCD_print_char@row,f
 10049  0CB8  01B0               	clrf	LCD_print_char@row+1
 10050  0CB9  00B1               	movwf	LCD_print_char@column
 10051  0CBA  3045               	movlw	69
 10052  0CBB  01B2               	clrf	LCD_print_char@column+1
 10053  0CBC  00B3               	movwf	LCD_print_char@print_value
 10054  0CBD  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10055                           
 10056                           ;Automated Solar Panel Orientation Setter.c: 233: LCD_print_char(1,6,',');
 10057  0CC2  1283               	bcf	3,5	;RP0=0, select bank0
 10058  0CC3  1303               	bcf	3,6	;RP1=0, select bank0
 10059  0CC4  3006               	movlw	6
 10060  0CC5  01AF               	clrf	LCD_print_char@row
 10061  0CC6  0AAF               	incf	LCD_print_char@row,f
 10062  0CC7  01B0               	clrf	LCD_print_char@row+1
 10063  0CC8  00B1               	movwf	LCD_print_char@column
 10064  0CC9  302C               	movlw	44
 10065  0CCA  01B2               	clrf	LCD_print_char@column+1
 10066  0CCB  00B3               	movwf	LCD_print_char@print_value
 10067  0CCC  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10068                           
 10069                           ;Automated Solar Panel Orientation Setter.c: 234: LCD_print_char(1,10,'D');
 10070  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
 10071  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
 10072  0CD3  300A               	movlw	10
 10073  0CD4  01AF               	clrf	LCD_print_char@row
 10074  0CD5  0AAF               	incf	LCD_print_char@row,f
 10075  0CD6  01B0               	clrf	LCD_print_char@row+1
 10076  0CD7  00B1               	movwf	LCD_print_char@column
 10077  0CD8  3044               	movlw	68
 10078  0CD9  01B2               	clrf	LCD_print_char@column+1
 10079  0CDA  00B3               	movwf	LCD_print_char@print_value
 10080  0CDB  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10081                           
 10082                           ;Automated Solar Panel Orientation Setter.c: 235: LCD_print_char(1,11,',');
 10083  0CE0  1283               	bcf	3,5	;RP0=0, select bank0
 10084  0CE1  1303               	bcf	3,6	;RP1=0, select bank0
 10085  0CE2  300B               	movlw	11
 10086  0CE3  01AF               	clrf	LCD_print_char@row
 10087  0CE4  0AAF               	incf	LCD_print_char@row,f
 10088  0CE5  01B0               	clrf	LCD_print_char@row+1
 10089  0CE6  00B1               	movwf	LCD_print_char@column
 10090  0CE7  302C               	movlw	44
 10091  0CE8  01B2               	clrf	LCD_print_char@column+1
 10092  0CE9  00B3               	movwf	LCD_print_char@print_value
 10093  0CEA  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10094                           
 10095                           ;Automated Solar Panel Orientation Setter.c: 237: LCD_print_char(2,3,'.');
 10096  0CEF  3002               	movlw	2
 10097  0CF0  1283               	bcf	3,5	;RP0=0, select bank0
 10098  0CF1  1303               	bcf	3,6	;RP1=0, select bank0
 10099  0CF2  00AF               	movwf	LCD_print_char@row
 10100  0CF3  3003               	movlw	3
 10101  0CF4  01B0               	clrf	LCD_print_char@row+1
 10102  0CF5  00B1               	movwf	LCD_print_char@column
 10103  0CF6  302E               	movlw	46
 10104  0CF7  01B2               	clrf	LCD_print_char@column+1
 10105  0CF8  00B3               	movwf	LCD_print_char@print_value
 10106  0CF9  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10107                           
 10108                           ;Automated Solar Panel Orientation Setter.c: 238: LCD_print_char(2,5,'V');
 10109  0CFE  3002               	movlw	2
 10110  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
 10111  0D00  1303               	bcf	3,6	;RP1=0, select bank0
 10112  0D01  00AF               	movwf	LCD_print_char@row
 10113  0D02  3005               	movlw	5
 10114  0D03  01B0               	clrf	LCD_print_char@row+1
 10115  0D04  00B1               	movwf	LCD_print_char@column
 10116  0D05  3056               	movlw	86
 10117  0D06  01B2               	clrf	LCD_print_char@column+1
 10118  0D07  00B3               	movwf	LCD_print_char@print_value
 10119  0D08  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10120                           
 10121                           ;Automated Solar Panel Orientation Setter.c: 239: LCD_print_char(2,6,',');
 10122  0D0D  3002               	movlw	2
 10123  0D0E  1283               	bcf	3,5	;RP0=0, select bank0
 10124  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
 10125  0D10  00AF               	movwf	LCD_print_char@row
 10126  0D11  3006               	movlw	6
 10127  0D12  01B0               	clrf	LCD_print_char@row+1
 10128  0D13  00B1               	movwf	LCD_print_char@column
 10129  0D14  302C               	movlw	44
 10130  0D15  01B2               	clrf	LCD_print_char@column+1
 10131  0D16  00B3               	movwf	LCD_print_char@print_value
 10132  0D17  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10133                           
 10134                           ;Automated Solar Panel Orientation Setter.c: 240: LCD_print_char(2,8,'.');
 10135  0D1C  3002               	movlw	2
 10136  0D1D  1283               	bcf	3,5	;RP0=0, select bank0
 10137  0D1E  1303               	bcf	3,6	;RP1=0, select bank0
 10138  0D1F  00AF               	movwf	LCD_print_char@row
 10139  0D20  3008               	movlw	8
 10140  0D21  01B0               	clrf	LCD_print_char@row+1
 10141  0D22  00B1               	movwf	LCD_print_char@column
 10142  0D23  302E               	movlw	46
 10143  0D24  01B2               	clrf	LCD_print_char@column+1
 10144  0D25  00B3               	movwf	LCD_print_char@print_value
 10145  0D26  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10146                           
 10147                           ;Automated Solar Panel Orientation Setter.c: 241: LCD_print_char(2,10,'A');
 10148  0D2B  3002               	movlw	2
 10149  0D2C  1283               	bcf	3,5	;RP0=0, select bank0
 10150  0D2D  1303               	bcf	3,6	;RP1=0, select bank0
 10151  0D2E  00AF               	movwf	LCD_print_char@row
 10152  0D2F  300A               	movlw	10
 10153  0D30  01B0               	clrf	LCD_print_char@row+1
 10154  0D31  00B1               	movwf	LCD_print_char@column
 10155  0D32  3041               	movlw	65
 10156  0D33  01B2               	clrf	LCD_print_char@column+1
 10157  0D34  00B3               	movwf	LCD_print_char@print_value
 10158  0D35  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10159                           
 10160                           ;Automated Solar Panel Orientation Setter.c: 242: LCD_print_char(2,11,',');
 10161  0D3A  3002               	movlw	2
 10162  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
 10163  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
 10164  0D3D  00AF               	movwf	LCD_print_char@row
 10165  0D3E  300B               	movlw	11
 10166  0D3F  01B0               	clrf	LCD_print_char@row+1
 10167  0D40  00B1               	movwf	LCD_print_char@column
 10168  0D41  302C               	movlw	44
 10169  0D42  01B2               	clrf	LCD_print_char@column+1
 10170  0D43  00B3               	movwf	LCD_print_char@print_value
 10171  0D44  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10172                           
 10173                           ;Automated Solar Panel Orientation Setter.c: 243: LCD_print_char(2,14,'.');
 10174  0D49  3002               	movlw	2
 10175  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
 10176  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
 10177  0D4C  00AF               	movwf	LCD_print_char@row
 10178  0D4D  300E               	movlw	14
 10179  0D4E  01B0               	clrf	LCD_print_char@row+1
 10180  0D4F  00B1               	movwf	LCD_print_char@column
 10181  0D50  302E               	movlw	46
 10182  0D51  01B2               	clrf	LCD_print_char@column+1
 10183  0D52  00B3               	movwf	LCD_print_char@print_value
 10184  0D53  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10185                           
 10186                           ;Automated Solar Panel Orientation Setter.c: 244: LCD_print_char(2,16,'W');
 10187  0D58  3002               	movlw	2
 10188  0D59  1283               	bcf	3,5	;RP0=0, select bank0
 10189  0D5A  1303               	bcf	3,6	;RP1=0, select bank0
 10190  0D5B  00AF               	movwf	LCD_print_char@row
 10191  0D5C  3010               	movlw	16
 10192  0D5D  01B0               	clrf	LCD_print_char@row+1
 10193  0D5E  00B1               	movwf	LCD_print_char@column
 10194  0D5F  3057               	movlw	87
 10195  0D60  01B2               	clrf	LCD_print_char@column+1
 10196  0D61  00B3               	movwf	LCD_print_char@print_value
 10197  0D62  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10198                           
 10199                           ;Automated Solar Panel Orientation Setter.c: 247: LCD_print_char(1,5,'2');
 10200  0D67  1283               	bcf	3,5	;RP0=0, select bank0
 10201  0D68  1303               	bcf	3,6	;RP1=0, select bank0
 10202  0D69  3005               	movlw	5
 10203  0D6A  01AF               	clrf	LCD_print_char@row
 10204  0D6B  0AAF               	incf	LCD_print_char@row,f
 10205  0D6C  01B0               	clrf	LCD_print_char@row+1
 10206  0D6D  00B1               	movwf	LCD_print_char@column
 10207  0D6E  3032               	movlw	50
 10208  0D6F  01B2               	clrf	LCD_print_char@column+1
 10209  0D70  00B3               	movwf	LCD_print_char@print_value
 10210  0D71  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10211                           
 10212                           ;Automated Solar Panel Orientation Setter.c: 249: LCD_print_char(1,7,'0');
 10213  0D76  1283               	bcf	3,5	;RP0=0, select bank0
 10214  0D77  1303               	bcf	3,6	;RP1=0, select bank0
 10215  0D78  3007               	movlw	7
 10216  0D79  01AF               	clrf	LCD_print_char@row
 10217  0D7A  0AAF               	incf	LCD_print_char@row,f
 10218  0D7B  01B0               	clrf	LCD_print_char@row+1
 10219  0D7C  00B1               	movwf	LCD_print_char@column
 10220  0D7D  3030               	movlw	48
 10221  0D7E  01B2               	clrf	LCD_print_char@column+1
 10222  0D7F  00B3               	movwf	LCD_print_char@print_value
 10223  0D80  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10224                           
 10225                           ;Automated Solar Panel Orientation Setter.c: 250: LCD_print_char(1,8,'0');
 10226  0D85  1283               	bcf	3,5	;RP0=0, select bank0
 10227  0D86  1303               	bcf	3,6	;RP1=0, select bank0
 10228  0D87  3008               	movlw	8
 10229  0D88  01AF               	clrf	LCD_print_char@row
 10230  0D89  0AAF               	incf	LCD_print_char@row,f
 10231  0D8A  01B0               	clrf	LCD_print_char@row+1
 10232  0D8B  00B1               	movwf	LCD_print_char@column
 10233  0D8C  3030               	movlw	48
 10234  0D8D  01B2               	clrf	LCD_print_char@column+1
 10235  0D8E  00B3               	movwf	LCD_print_char@print_value
 10236  0D8F  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10237                           
 10238                           ;Automated Solar Panel Orientation Setter.c: 251: LCD_print_char(1,9,'0');
 10239  0D94  1283               	bcf	3,5	;RP0=0, select bank0
 10240  0D95  1303               	bcf	3,6	;RP1=0, select bank0
 10241  0D96  3009               	movlw	9
 10242  0D97  01AF               	clrf	LCD_print_char@row
 10243  0D98  0AAF               	incf	LCD_print_char@row,f
 10244  0D99  01B0               	clrf	LCD_print_char@row+1
 10245  0D9A  00B1               	movwf	LCD_print_char@column
 10246  0D9B  3030               	movlw	48
 10247  0D9C  01B2               	clrf	LCD_print_char@column+1
 10248  0D9D  00B3               	movwf	LCD_print_char@print_value
 10249  0D9E  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10250                           
 10251                           ;Automated Solar Panel Orientation Setter.c: 253: LCD_print_char(2,1,V_Bat2/10+48);
 10252  0DA3  3002               	movlw	2
 10253  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
 10254  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
 10255  0DA6  00AF               	movwf	LCD_print_char@row
 10256  0DA7  300A               	movlw	10
 10257  0DA8  01B0               	clrf	LCD_print_char@row+1
 10258  0DA9  01B1               	clrf	LCD_print_char@column
 10259  0DAA  0AB1               	incf	LCD_print_char@column,f
 10260  0DAB  01B2               	clrf	LCD_print_char@column+1
 10261  0DAC  00A3               	movwf	___ltdiv@divisor
 10262  0DAD  01A4               	clrf	___ltdiv@divisor+1
 10263  0DAE  01A5               	clrf	___ltdiv@divisor+2
 10264  0DAF  084D               	movf	_V_Bat2,w
 10265  0DB0  00A6               	movwf	___ltdiv@dividend
 10266  0DB1  084E               	movf	_V_Bat2+1,w
 10267  0DB2  00A7               	movwf	___ltdiv@dividend+1
 10268  0DB3  084F               	movf	_V_Bat2+2,w
 10269  0DB4  00A8               	movwf	___ltdiv@dividend+2
 10270  0DB5  160A  158A  25E0  120A  158A  	fcall	___ltdiv
 10271  0DBA  0823               	movf	?___ltdiv,w
 10272  0DBB  3E30               	addlw	48
 10273  0DBC  00B3               	movwf	LCD_print_char@print_value
 10274  0DBD  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10275                           
 10276                           ;Automated Solar Panel Orientation Setter.c: 254: LCD_print_char(2,2,V_Bat2%10+48);
 10277  0DC2  3002               	movlw	2
 10278  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
 10279  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
 10280  0DC5  00AF               	movwf	LCD_print_char@row
 10281  0DC6  01B0               	clrf	LCD_print_char@row+1
 10282  0DC7  00B1               	movwf	LCD_print_char@column
 10283  0DC8  300A               	movlw	10
 10284  0DC9  01B2               	clrf	LCD_print_char@column+1
 10285  0DCA  00A3               	movwf	___ltmod@divisor
 10286  0DCB  01A4               	clrf	___ltmod@divisor+1
 10287  0DCC  01A5               	clrf	___ltmod@divisor+2
 10288  0DCD  084D               	movf	_V_Bat2,w
 10289  0DCE  00A6               	movwf	___ltmod@dividend
 10290  0DCF  084E               	movf	_V_Bat2+1,w
 10291  0DD0  00A7               	movwf	___ltmod@dividend+1
 10292  0DD1  084F               	movf	_V_Bat2+2,w
 10293  0DD2  00A8               	movwf	___ltmod@dividend+2
 10294  0DD3  160A  158A  25AF  120A  158A  	fcall	___ltmod
 10295  0DD8  0823               	movf	?___ltmod,w
 10296  0DD9  3E30               	addlw	48
 10297  0DDA  00B3               	movwf	LCD_print_char@print_value
 10298  0DDB  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10299                           
 10300                           ;Automated Solar Panel Orientation Setter.c: 255: LCD_print_char(2,4,'0');
 10301  0DE0  3002               	movlw	2
 10302  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
 10303  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
 10304  0DE3  00AF               	movwf	LCD_print_char@row
 10305  0DE4  3004               	movlw	4
 10306  0DE5  01B0               	clrf	LCD_print_char@row+1
 10307  0DE6  00B1               	movwf	LCD_print_char@column
 10308  0DE7  3030               	movlw	48
 10309  0DE8  01B2               	clrf	LCD_print_char@column+1
 10310  0DE9  00B3               	movwf	LCD_print_char@print_value
 10311  0DEA  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10312                           
 10313                           ;Automated Solar Panel Orientation Setter.c: 257: LCD_print_char(2,7,'0');
 10314  0DEF  3002               	movlw	2
 10315  0DF0  1283               	bcf	3,5	;RP0=0, select bank0
 10316  0DF1  1303               	bcf	3,6	;RP1=0, select bank0
 10317  0DF2  00AF               	movwf	LCD_print_char@row
 10318  0DF3  3007               	movlw	7
 10319  0DF4  01B0               	clrf	LCD_print_char@row+1
 10320  0DF5  00B1               	movwf	LCD_print_char@column
 10321  0DF6  3030               	movlw	48
 10322  0DF7  01B2               	clrf	LCD_print_char@column+1
 10323  0DF8  00B3               	movwf	LCD_print_char@print_value
 10324  0DF9  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10325                           
 10326                           ;Automated Solar Panel Orientation Setter.c: 258: LCD_print_char(2,9,'0');
 10327  0DFE  3002               	movlw	2
 10328  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
 10329  0E00  1303               	bcf	3,6	;RP1=0, select bank0
 10330  0E01  00AF               	movwf	LCD_print_char@row
 10331  0E02  3009               	movlw	9
 10332  0E03  01B0               	clrf	LCD_print_char@row+1
 10333  0E04  00B1               	movwf	LCD_print_char@column
 10334  0E05  3030               	movlw	48
 10335  0E06  01B2               	clrf	LCD_print_char@column+1
 10336  0E07  00B3               	movwf	LCD_print_char@print_value
 10337  0E08  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10338                           
 10339                           ;Automated Solar Panel Orientation Setter.c: 260: LCD_print_char(2,12,'0');
 10340  0E0D  3002               	movlw	2
 10341  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
 10342  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
 10343  0E10  00AF               	movwf	LCD_print_char@row
 10344  0E11  300C               	movlw	12
 10345  0E12  01B0               	clrf	LCD_print_char@row+1
 10346  0E13  00B1               	movwf	LCD_print_char@column
 10347  0E14  3030               	movlw	48
 10348  0E15  01B2               	clrf	LCD_print_char@column+1
 10349  0E16  00B3               	movwf	LCD_print_char@print_value
 10350  0E17  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10351                           
 10352                           ;Automated Solar Panel Orientation Setter.c: 261: LCD_print_char(2,13,'0');
 10353  0E1C  3002               	movlw	2
 10354  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
 10355  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
 10356  0E1F  00AF               	movwf	LCD_print_char@row
 10357  0E20  300D               	movlw	13
 10358  0E21  01B0               	clrf	LCD_print_char@row+1
 10359  0E22  00B1               	movwf	LCD_print_char@column
 10360  0E23  3030               	movlw	48
 10361  0E24  01B2               	clrf	LCD_print_char@column+1
 10362  0E25  00B3               	movwf	LCD_print_char@print_value
 10363  0E26  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10364                           
 10365                           ;Automated Solar Panel Orientation Setter.c: 262: LCD_print_char(2,15,'0');
 10366  0E2B  3002               	movlw	2
 10367  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
 10368  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
 10369  0E2E  00AF               	movwf	LCD_print_char@row
 10370  0E2F  300F               	movlw	15
 10371  0E30  01B0               	clrf	LCD_print_char@row+1
 10372  0E31  00B1               	movwf	LCD_print_char@column
 10373  0E32  3030               	movlw	48
 10374  0E33  01B2               	clrf	LCD_print_char@column+1
 10375  0E34  00B3               	movwf	LCD_print_char@print_value
 10376  0E35  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10377                           
 10378                           ;Automated Solar Panel Orientation Setter.c: 265: state = 20;
 10379  0E3A  3014               	movlw	20
 10380  0E3B  2FD5               	goto	L6
 10381  0E3C                     l4852:	
 10382                           ;Automated Solar Panel Orientation Setter.c: 266: break;
 10383                           
 10384                           
 10385                           ;Automated Solar Panel Orientation Setter.c: 269: CheckMode();
 10386  0E3C  160A  118A  2273  120A  158A  	fcall	_CheckMode
 10387                           
 10388                           ;Automated Solar Panel Orientation Setter.c: 270: break;
 10389  0E41  2FD8               	goto	l4862
 10390  0E42                     l4854:	
 10391  0E42  304D               	movlw	77
 10392                           
 10393                           ;Automated Solar Panel Orientation Setter.c: 274: LCD_print_char(1,1,'M');
 10394  0E43  01AF               	clrf	LCD_print_char@row
 10395  0E44  0AAF               	incf	LCD_print_char@row,f
 10396  0E45  01B0               	clrf	LCD_print_char@row+1
 10397  0E46  01B1               	clrf	LCD_print_char@column
 10398  0E47  0AB1               	incf	LCD_print_char@column,f
 10399  0E48  01B2               	clrf	LCD_print_char@column+1
 10400  0E49  00B3               	movwf	LCD_print_char@print_value
 10401  0E4A  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10402                           
 10403                           ;Automated Solar Panel Orientation Setter.c: 275: LCD_print_char(1,2,'O');
 10404  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
 10405  0E50  1303               	bcf	3,6	;RP1=0, select bank0
 10406  0E51  3002               	movlw	2
 10407  0E52  01AF               	clrf	LCD_print_char@row
 10408  0E53  0AAF               	incf	LCD_print_char@row,f
 10409  0E54  01B0               	clrf	LCD_print_char@row+1
 10410  0E55  00B1               	movwf	LCD_print_char@column
 10411  0E56  304F               	movlw	79
 10412  0E57  01B2               	clrf	LCD_print_char@column+1
 10413  0E58  00B3               	movwf	LCD_print_char@print_value
 10414  0E59  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10415                           
 10416                           ;Automated Solar Panel Orientation Setter.c: 276: LCD_print_char(1,3,'D');
 10417  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
 10418  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
 10419  0E60  3003               	movlw	3
 10420  0E61  01AF               	clrf	LCD_print_char@row
 10421  0E62  0AAF               	incf	LCD_print_char@row,f
 10422  0E63  01B0               	clrf	LCD_print_char@row+1
 10423  0E64  00B1               	movwf	LCD_print_char@column
 10424  0E65  3044               	movlw	68
 10425  0E66  01B2               	clrf	LCD_print_char@column+1
 10426  0E67  00B3               	movwf	LCD_print_char@print_value
 10427  0E68  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10428                           
 10429                           ;Automated Solar Panel Orientation Setter.c: 277: LCD_print_char(1,4,'E');
 10430  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
 10431  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
 10432  0E6F  3004               	movlw	4
 10433  0E70  01AF               	clrf	LCD_print_char@row
 10434  0E71  0AAF               	incf	LCD_print_char@row,f
 10435  0E72  01B0               	clrf	LCD_print_char@row+1
 10436  0E73  00B1               	movwf	LCD_print_char@column
 10437  0E74  3045               	movlw	69
 10438  0E75  01B2               	clrf	LCD_print_char@column+1
 10439  0E76  00B3               	movwf	LCD_print_char@print_value
 10440  0E77  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10441                           
 10442                           ;Automated Solar Panel Orientation Setter.c: 279: LCD_print_char(1,6,',');
 10443  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
 10444  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
 10445  0E7E  3006               	movlw	6
 10446  0E7F  01AF               	clrf	LCD_print_char@row
 10447  0E80  0AAF               	incf	LCD_print_char@row,f
 10448  0E81  01B0               	clrf	LCD_print_char@row+1
 10449  0E82  00B1               	movwf	LCD_print_char@column
 10450  0E83  302C               	movlw	44
 10451  0E84  01B2               	clrf	LCD_print_char@column+1
 10452  0E85  00B3               	movwf	LCD_print_char@print_value
 10453  0E86  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10454                           
 10455                           ;Automated Solar Panel Orientation Setter.c: 280: LCD_print_char(1,10,'D');
 10456  0E8B  1283               	bcf	3,5	;RP0=0, select bank0
 10457  0E8C  1303               	bcf	3,6	;RP1=0, select bank0
 10458  0E8D  300A               	movlw	10
 10459  0E8E  01AF               	clrf	LCD_print_char@row
 10460  0E8F  0AAF               	incf	LCD_print_char@row,f
 10461  0E90  01B0               	clrf	LCD_print_char@row+1
 10462  0E91  00B1               	movwf	LCD_print_char@column
 10463  0E92  3044               	movlw	68
 10464  0E93  01B2               	clrf	LCD_print_char@column+1
 10465  0E94  00B3               	movwf	LCD_print_char@print_value
 10466  0E95  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10467                           
 10468                           ;Automated Solar Panel Orientation Setter.c: 281: LCD_print_char(1,11,',');
 10469  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
 10470  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
 10471  0E9C  300B               	movlw	11
 10472  0E9D  01AF               	clrf	LCD_print_char@row
 10473  0E9E  0AAF               	incf	LCD_print_char@row,f
 10474  0E9F  01B0               	clrf	LCD_print_char@row+1
 10475  0EA0  00B1               	movwf	LCD_print_char@column
 10476  0EA1  302C               	movlw	44
 10477  0EA2  01B2               	clrf	LCD_print_char@column+1
 10478  0EA3  00B3               	movwf	LCD_print_char@print_value
 10479  0EA4  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10480                           
 10481                           ;Automated Solar Panel Orientation Setter.c: 283: LCD_print_char(2,3,'.');
 10482  0EA9  3002               	movlw	2
 10483  0EAA  1283               	bcf	3,5	;RP0=0, select bank0
 10484  0EAB  1303               	bcf	3,6	;RP1=0, select bank0
 10485  0EAC  00AF               	movwf	LCD_print_char@row
 10486  0EAD  3003               	movlw	3
 10487  0EAE  01B0               	clrf	LCD_print_char@row+1
 10488  0EAF  00B1               	movwf	LCD_print_char@column
 10489  0EB0  302E               	movlw	46
 10490  0EB1  01B2               	clrf	LCD_print_char@column+1
 10491  0EB2  00B3               	movwf	LCD_print_char@print_value
 10492  0EB3  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10493                           
 10494                           ;Automated Solar Panel Orientation Setter.c: 284: LCD_print_char(2,5,'V');
 10495  0EB8  3002               	movlw	2
 10496  0EB9  1283               	bcf	3,5	;RP0=0, select bank0
 10497  0EBA  1303               	bcf	3,6	;RP1=0, select bank0
 10498  0EBB  00AF               	movwf	LCD_print_char@row
 10499  0EBC  3005               	movlw	5
 10500  0EBD  01B0               	clrf	LCD_print_char@row+1
 10501  0EBE  00B1               	movwf	LCD_print_char@column
 10502  0EBF  3056               	movlw	86
 10503  0EC0  01B2               	clrf	LCD_print_char@column+1
 10504  0EC1  00B3               	movwf	LCD_print_char@print_value
 10505  0EC2  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10506                           
 10507                           ;Automated Solar Panel Orientation Setter.c: 285: LCD_print_char(2,6,',');
 10508  0EC7  3002               	movlw	2
 10509  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
 10510  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
 10511  0ECA  00AF               	movwf	LCD_print_char@row
 10512  0ECB  3006               	movlw	6
 10513  0ECC  01B0               	clrf	LCD_print_char@row+1
 10514  0ECD  00B1               	movwf	LCD_print_char@column
 10515  0ECE  302C               	movlw	44
 10516  0ECF  01B2               	clrf	LCD_print_char@column+1
 10517  0ED0  00B3               	movwf	LCD_print_char@print_value
 10518  0ED1  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10519                           
 10520                           ;Automated Solar Panel Orientation Setter.c: 286: LCD_print_char(2,8,'.');
 10521  0ED6  3002               	movlw	2
 10522  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
 10523  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
 10524  0ED9  00AF               	movwf	LCD_print_char@row
 10525  0EDA  3008               	movlw	8
 10526  0EDB  01B0               	clrf	LCD_print_char@row+1
 10527  0EDC  00B1               	movwf	LCD_print_char@column
 10528  0EDD  302E               	movlw	46
 10529  0EDE  01B2               	clrf	LCD_print_char@column+1
 10530  0EDF  00B3               	movwf	LCD_print_char@print_value
 10531  0EE0  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10532                           
 10533                           ;Automated Solar Panel Orientation Setter.c: 287: LCD_print_char(2,10,'A');
 10534  0EE5  3002               	movlw	2
 10535  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
 10536  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
 10537  0EE8  00AF               	movwf	LCD_print_char@row
 10538  0EE9  300A               	movlw	10
 10539  0EEA  01B0               	clrf	LCD_print_char@row+1
 10540  0EEB  00B1               	movwf	LCD_print_char@column
 10541  0EEC  3041               	movlw	65
 10542  0EED  01B2               	clrf	LCD_print_char@column+1
 10543  0EEE  00B3               	movwf	LCD_print_char@print_value
 10544  0EEF  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10545                           
 10546                           ;Automated Solar Panel Orientation Setter.c: 288: LCD_print_char(2,11,',');
 10547  0EF4  3002               	movlw	2
 10548  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
 10549  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
 10550  0EF7  00AF               	movwf	LCD_print_char@row
 10551  0EF8  300B               	movlw	11
 10552  0EF9  01B0               	clrf	LCD_print_char@row+1
 10553  0EFA  00B1               	movwf	LCD_print_char@column
 10554  0EFB  302C               	movlw	44
 10555  0EFC  01B2               	clrf	LCD_print_char@column+1
 10556  0EFD  00B3               	movwf	LCD_print_char@print_value
 10557  0EFE  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10558                           
 10559                           ;Automated Solar Panel Orientation Setter.c: 289: LCD_print_char(2,14,'.');
 10560  0F03  3002               	movlw	2
 10561  0F04  1283               	bcf	3,5	;RP0=0, select bank0
 10562  0F05  1303               	bcf	3,6	;RP1=0, select bank0
 10563  0F06  00AF               	movwf	LCD_print_char@row
 10564  0F07  300E               	movlw	14
 10565  0F08  01B0               	clrf	LCD_print_char@row+1
 10566  0F09  00B1               	movwf	LCD_print_char@column
 10567  0F0A  302E               	movlw	46
 10568  0F0B  01B2               	clrf	LCD_print_char@column+1
 10569  0F0C  00B3               	movwf	LCD_print_char@print_value
 10570  0F0D  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10571                           
 10572                           ;Automated Solar Panel Orientation Setter.c: 290: LCD_print_char(2,16,'W');
 10573  0F12  3002               	movlw	2
 10574  0F13  1283               	bcf	3,5	;RP0=0, select bank0
 10575  0F14  1303               	bcf	3,6	;RP1=0, select bank0
 10576  0F15  00AF               	movwf	LCD_print_char@row
 10577  0F16  3010               	movlw	16
 10578  0F17  01B0               	clrf	LCD_print_char@row+1
 10579  0F18  00B1               	movwf	LCD_print_char@column
 10580  0F19  3057               	movlw	87
 10581  0F1A  01B2               	clrf	LCD_print_char@column+1
 10582  0F1B  00B3               	movwf	LCD_print_char@print_value
 10583  0F1C  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10584                           
 10585                           ;Automated Solar Panel Orientation Setter.c: 293: LCD_print_char(1,5,'3');
 10586  0F21  1283               	bcf	3,5	;RP0=0, select bank0
 10587  0F22  1303               	bcf	3,6	;RP1=0, select bank0
 10588  0F23  3005               	movlw	5
 10589  0F24  01AF               	clrf	LCD_print_char@row
 10590  0F25  0AAF               	incf	LCD_print_char@row,f
 10591  0F26  01B0               	clrf	LCD_print_char@row+1
 10592  0F27  00B1               	movwf	LCD_print_char@column
 10593  0F28  3033               	movlw	51
 10594  0F29  01B2               	clrf	LCD_print_char@column+1
 10595  0F2A  00B3               	movwf	LCD_print_char@print_value
 10596  0F2B  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10597                           
 10598                           ;Automated Solar Panel Orientation Setter.c: 295: LCD_print_char(1,7,'0');
 10599  0F30  1283               	bcf	3,5	;RP0=0, select bank0
 10600  0F31  1303               	bcf	3,6	;RP1=0, select bank0
 10601  0F32  3007               	movlw	7
 10602  0F33  01AF               	clrf	LCD_print_char@row
 10603  0F34  0AAF               	incf	LCD_print_char@row,f
 10604  0F35  01B0               	clrf	LCD_print_char@row+1
 10605  0F36  00B1               	movwf	LCD_print_char@column
 10606  0F37  3030               	movlw	48
 10607  0F38  01B2               	clrf	LCD_print_char@column+1
 10608  0F39  00B3               	movwf	LCD_print_char@print_value
 10609  0F3A  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10610                           
 10611                           ;Automated Solar Panel Orientation Setter.c: 296: LCD_print_char(1,8,'0');
 10612  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
 10613  0F40  1303               	bcf	3,6	;RP1=0, select bank0
 10614  0F41  3008               	movlw	8
 10615  0F42  01AF               	clrf	LCD_print_char@row
 10616  0F43  0AAF               	incf	LCD_print_char@row,f
 10617  0F44  01B0               	clrf	LCD_print_char@row+1
 10618  0F45  00B1               	movwf	LCD_print_char@column
 10619  0F46  3030               	movlw	48
 10620  0F47  01B2               	clrf	LCD_print_char@column+1
 10621  0F48  00B3               	movwf	LCD_print_char@print_value
 10622  0F49  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10623                           
 10624                           ;Automated Solar Panel Orientation Setter.c: 297: LCD_print_char(1,9,'0');
 10625  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
 10626  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
 10627  0F50  3009               	movlw	9
 10628  0F51  01AF               	clrf	LCD_print_char@row
 10629  0F52  0AAF               	incf	LCD_print_char@row,f
 10630  0F53  01B0               	clrf	LCD_print_char@row+1
 10631  0F54  00B1               	movwf	LCD_print_char@column
 10632  0F55  3030               	movlw	48
 10633  0F56  01B2               	clrf	LCD_print_char@column+1
 10634  0F57  00B3               	movwf	LCD_print_char@print_value
 10635  0F58  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10636                           
 10637                           ;Automated Solar Panel Orientation Setter.c: 299: LCD_print_char(2,1,'0');
 10638  0F5D  3002               	movlw	2
 10639  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
 10640  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
 10641  0F60  00AF               	movwf	LCD_print_char@row
 10642  0F61  3030               	movlw	48
 10643  0F62  01B0               	clrf	LCD_print_char@row+1
 10644  0F63  01B1               	clrf	LCD_print_char@column
 10645  0F64  0AB1               	incf	LCD_print_char@column,f
 10646  0F65  01B2               	clrf	LCD_print_char@column+1
 10647  0F66  00B3               	movwf	LCD_print_char@print_value
 10648  0F67  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10649                           
 10650                           ;Automated Solar Panel Orientation Setter.c: 300: LCD_print_char(2,2,'0');
 10651  0F6C  3002               	movlw	2
 10652  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
 10653  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
 10654  0F6F  00AF               	movwf	LCD_print_char@row
 10655  0F70  01B0               	clrf	LCD_print_char@row+1
 10656  0F71  00B1               	movwf	LCD_print_char@column
 10657  0F72  3030               	movlw	48
 10658  0F73  01B2               	clrf	LCD_print_char@column+1
 10659  0F74  00B3               	movwf	LCD_print_char@print_value
 10660  0F75  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10661                           
 10662                           ;Automated Solar Panel Orientation Setter.c: 301: LCD_print_char(2,4,'0');
 10663  0F7A  3002               	movlw	2
 10664  0F7B  1283               	bcf	3,5	;RP0=0, select bank0
 10665  0F7C  1303               	bcf	3,6	;RP1=0, select bank0
 10666  0F7D  00AF               	movwf	LCD_print_char@row
 10667  0F7E  3004               	movlw	4
 10668  0F7F  01B0               	clrf	LCD_print_char@row+1
 10669  0F80  00B1               	movwf	LCD_print_char@column
 10670  0F81  3030               	movlw	48
 10671  0F82  01B2               	clrf	LCD_print_char@column+1
 10672  0F83  00B3               	movwf	LCD_print_char@print_value
 10673  0F84  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10674                           
 10675                           ;Automated Solar Panel Orientation Setter.c: 303: LCD_print_char(2,7,'0');
 10676  0F89  3002               	movlw	2
 10677  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
 10678  0F8B  1303               	bcf	3,6	;RP1=0, select bank0
 10679  0F8C  00AF               	movwf	LCD_print_char@row
 10680  0F8D  3007               	movlw	7
 10681  0F8E  01B0               	clrf	LCD_print_char@row+1
 10682  0F8F  00B1               	movwf	LCD_print_char@column
 10683  0F90  3030               	movlw	48
 10684  0F91  01B2               	clrf	LCD_print_char@column+1
 10685  0F92  00B3               	movwf	LCD_print_char@print_value
 10686  0F93  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10687                           
 10688                           ;Automated Solar Panel Orientation Setter.c: 304: LCD_print_char(2,9,'0');
 10689  0F98  3002               	movlw	2
 10690  0F99  1283               	bcf	3,5	;RP0=0, select bank0
 10691  0F9A  1303               	bcf	3,6	;RP1=0, select bank0
 10692  0F9B  00AF               	movwf	LCD_print_char@row
 10693  0F9C  3009               	movlw	9
 10694  0F9D  01B0               	clrf	LCD_print_char@row+1
 10695  0F9E  00B1               	movwf	LCD_print_char@column
 10696  0F9F  3030               	movlw	48
 10697  0FA0  01B2               	clrf	LCD_print_char@column+1
 10698  0FA1  00B3               	movwf	LCD_print_char@print_value
 10699  0FA2  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10700                           
 10701                           ;Automated Solar Panel Orientation Setter.c: 306: LCD_print_char(2,12,'0');
 10702  0FA7  3002               	movlw	2
 10703  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
 10704  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
 10705  0FAA  00AF               	movwf	LCD_print_char@row
 10706  0FAB  300C               	movlw	12
 10707  0FAC  01B0               	clrf	LCD_print_char@row+1
 10708  0FAD  00B1               	movwf	LCD_print_char@column
 10709  0FAE  3030               	movlw	48
 10710  0FAF  01B2               	clrf	LCD_print_char@column+1
 10711  0FB0  00B3               	movwf	LCD_print_char@print_value
 10712  0FB1  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10713                           
 10714                           ;Automated Solar Panel Orientation Setter.c: 307: LCD_print_char(2,13,'0');
 10715  0FB6  3002               	movlw	2
 10716  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
 10717  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
 10718  0FB9  00AF               	movwf	LCD_print_char@row
 10719  0FBA  300D               	movlw	13
 10720  0FBB  01B0               	clrf	LCD_print_char@row+1
 10721  0FBC  00B1               	movwf	LCD_print_char@column
 10722  0FBD  3030               	movlw	48
 10723  0FBE  01B2               	clrf	LCD_print_char@column+1
 10724  0FBF  00B3               	movwf	LCD_print_char@print_value
 10725  0FC0  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10726                           
 10727                           ;Automated Solar Panel Orientation Setter.c: 308: LCD_print_char(2,15,'0');
 10728  0FC5  3002               	movlw	2
 10729  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
 10730  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
 10731  0FC8  00AF               	movwf	LCD_print_char@row
 10732  0FC9  300F               	movlw	15
 10733  0FCA  01B0               	clrf	LCD_print_char@row+1
 10734  0FCB  00B1               	movwf	LCD_print_char@column
 10735  0FCC  3030               	movlw	48
 10736  0FCD  01B2               	clrf	LCD_print_char@column+1
 10737  0FCE  00B3               	movwf	LCD_print_char@print_value
 10738  0FCF  120A  118A  221A  120A  158A  	fcall	_LCD_print_char
 10739                           
 10740                           ;Automated Solar Panel Orientation Setter.c: 311: state = 30;
 10741  0FD4  301E               	movlw	30
 10742  0FD5                     L6:	
 10743  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
 10744  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
 10745  0FD7                     L5:	
 10746  0FD7  00E0               	movwf	_state
 10747  0FD8                     l469:	
 10748                           ;Automated Solar Panel Orientation Setter.c: 312: break;
 10749                           
 10750  0FD8                     l4862:	
 10751  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
 10752  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
 10753  0FDA  0860               	movf	_state,w
 10754                           
 10755                           ; Switch size 1, requested type "space"
 10756                           ; Number of cases is 11, Range of values is 0 to 93
 10757                           ; switch strategies available:
 10758                           ; Name         Instructions Cycles
 10759                           ; simple_byte           34    18 (average)
 10760                           ; jumptable            260     6 (fixed)
 10761                           ;	Chosen strategy is simple_byte
 10762  0FDB  3A00               	xorlw	0	; case 0
 10763  0FDC  1903               	skipnz
 10764  0FDD  2FD8               	goto	l469
 10765  0FDE  3A01               	xorlw	1	; case 1
 10766  0FDF  1903               	skipnz
 10767  0FE0  29CB               	goto	l4790
 10768  0FE1  3A03               	xorlw	3	; case 2
 10769  0FE2  1903               	skipnz
 10770  0FE3  29CD               	goto	l4792
 10771  0FE4  3A01               	xorlw	1	; case 3
 10772  0FE5  1903               	skipnz
 10773  0FE6  29CF               	goto	l4794
 10774  0FE7  3A09               	xorlw	9	; case 10
 10775  0FE8  1903               	skipnz
 10776  0FE9  2B65               	goto	l4800
 10777  0FEA  3A1E               	xorlw	30	; case 20
 10778  0FEB  1903               	skipnz
 10779  0FEC  2E3C               	goto	l4852
 10780  0FED  3A0A               	xorlw	10	; case 30
 10781  0FEE  1903               	skipnz
 10782  0FEF  2E3C               	goto	l4852
 10783  0FF0  3A44               	xorlw	68	; case 90
 10784  0FF1  1903               	skipnz
 10785  0FF2  2FD8               	goto	l469
 10786  0FF3  3A01               	xorlw	1	; case 91
 10787  0FF4  1903               	skipnz
 10788  0FF5  29D1               	goto	l4796
 10789  0FF6  3A07               	xorlw	7	; case 92
 10790  0FF7  1903               	skipnz
 10791  0FF8  2C88               	goto	l4848
 10792  0FF9  3A01               	xorlw	1	; case 93
 10793  0FFA  1903               	skipnz
 10794  0FFB  2E42               	goto	l4854
 10795  0FFC  2FD8               	goto	l4862
 10796  0FFD  120A  118A  2810   	ljmp	start
 10797  1000                     __end_of_main:	


Data Sizes:
    Strings     197
    Constant    30
    Data        0
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     45      72
    BANK1            80      0      20
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf$355	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_15(CODE[17]), STR_14(CODE[17]), 

    printf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[18]), STR_3(CODE[18]), STR_2(CODE[18]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Serial_Print@a	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_13(CODE[20]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_LCD_print_char
    i1_LCDTimeUpdate->i1_LCD_print_char
    i1_LCD_print_char->i1___lwdiv
    i1_position->i1_lcd_add

Critical Paths under _main in BANK0

    _printf->___lwmod
    _putch->_lcd_add
    _clr_display->_lcd_add
    _a2d_read->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _Serial_Print_Int->___awdiv
    _LCDTimeUpdate->_LCD_print_char
    ___lwmod->___lwdiv
    _LCD_print_char->___lwmod
    _position->_lcd_add
    _CheckMode->_Serial_Println_Int
    _Serial_Println_Int->___awdiv
    ___awdiv->___wmul
    _CheckKeyPad->_RowNo
    _Calculate->_RotateMotorLeft
    _Calculate->_RotateMotorRight

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   59810
                                             42 BANK0      3     3      0
                          _Calculate
                          _CheckMode
                      _LCDTimeUpdate
                     _LCD_print_char
                        _Serial_Init
                     _Serial_NewLine
                       _Serial_Print
                   _Serial_Print_Int
                      _Setup_IOports
                        _Timer1_Init
                            ___ltdiv
                            ___ltmod
                           _a2d_read
                          _atod_init
                        _clr_display
                        _eeprom_read
                       _eeprom_write
                    _enableInterrupt
                           _lcd_init
                                _nop
                           _position
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              28    26      2    4449
                                             15 BANK0     24    22      2
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      22
                                              4 BANK0      2     2      0
                            _lcd_add
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     145
                                              3 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     230
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _enableInterrupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         2     1      1      97
                                              3 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          1     1      0      22
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _clr_display                                          2     2      0       0
                                              4 BANK0      2     2      0
                            _lcd_add
 ---------------------------------------------------------------------------------
 (1) _atod_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _a2d_read                                             0     0      0    7162
                            ___awdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                             ___wmul
                     _read_a2d_value
 ---------------------------------------------------------------------------------
 (2) _read_a2d_value                                       6     4      2      48
                                              3 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     410
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    1704
                                             11 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     305
                                             29 BANK0     13     9      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2063
                                             14 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1629
                                              3 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) ___ltmod                                              7     1      6     371
                                              3 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) ___ltdiv                                             10     4      6     374
                                              3 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup_IOports                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Serial_Print_Int                                     3     1      2    5865
                                             17 BANK0      3     1      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Serial_NewLine                                       1     1      0       0
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serial_Init                                          3     3      0       0
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCDTimeUpdate                                        0     0      0   17254
                     _LCD_print_char
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     531
                                             10 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     692
                                              3 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCD_print_char                                       6     1      5   16031
                                             15 BANK0      6     1      5
                            ___ltdiv (ARG)
                            ___ltmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                            _lcd_add
                           _position
 ---------------------------------------------------------------------------------
 (1) _position                                             5     4      1     539
                                              4 BANK0      5     4      1
                            _lcd_add
 ---------------------------------------------------------------------------------
 (3) _lcd_add                                              1     1      0       0
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckMode                                            1     1      0    6956
                                             20 BANK0      1     1      0
                        _CheckKeyPad
                       _Serial_Print
                 _Serial_Println_Int
                                _nop
 ---------------------------------------------------------------------------------
 (1) _nop                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Serial_Println_Int                                   3     1      2    5706
                                             17 BANK0      3     1      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2416
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2632
                                              9 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Serial_Print                                         2     2      0     180
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyPad                                          5     5      0    1047
                                              7 BANK0      5     5      0
                           _ColomnNo
                              _RowNo
 ---------------------------------------------------------------------------------
 (3) _RowNo                                                4     2      2      27
                                              3 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _ColomnNo                                             2     0      2     141
                                              3 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Calculate                                            2     2      0     280
                                              9 BANK0      2     2      0
                    _RotateMotorLeft
                   _RotateMotorRight
 ---------------------------------------------------------------------------------
 (2) _RotateMotorRight                                     6     4      2     140
                                              3 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _RotateMotorLeft                                      6     4      2     140
                                              3 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  3     3      0    2246
                                              0 BANK0      3     3      0
                    i1_LCDTimeUpdate
                   i1_LCD_print_char
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (6) i1_LCDTimeUpdate                                      0     0      0    1256
                   i1_LCD_print_char
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (6) i1___lwmod                                            5     1      4     315
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (7) i1___lwdiv                                            7     3      4     266
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (6) i1_LCD_print_char                                     6     1      5     675
                                              7 COMMON     6     1      5
                          i1___lwdiv (ARG)
                          i1___lwmod (ARG)
                          i1_lcd_add
                         i1_position
 ---------------------------------------------------------------------------------
 (7) i1_position                                           5     4      1     141
                                              1 COMMON     5     4      1
                          i1_lcd_add
 ---------------------------------------------------------------------------------
 (8) i1_lcd_add                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Calculate
     _RotateMotorLeft
     _RotateMotorRight
   _CheckMode
     _CheckKeyPad
       _ColomnNo
       _RowNo
     _Serial_Print
     _Serial_Println_Int
       ___awdiv
         ___wmul (ARG)
       ___awmod
     _nop
   _LCDTimeUpdate
     _LCD_print_char
       ___ltdiv (ARG)
       ___ltmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       _lcd_add (ARG)
       _position (ARG)
         _lcd_add
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _LCD_print_char
     ___ltdiv (ARG)
     ___ltmod (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     _lcd_add (ARG)
     _position (ARG)
       _lcd_add
   _Serial_Init
   _Serial_NewLine
   _Serial_Print
   _Serial_Print_Int
     ___awdiv
       ___wmul (ARG)
     ___awmod
   _Setup_IOports
   _Timer1_Init
   ___ltdiv
   ___ltmod
   _a2d_read
     ___awdiv
       ___wmul (ARG)
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     ___wmul
     _read_a2d_value
   _atod_init
   _clr_display
     _lcd_add
   _eeprom_read
   _eeprom_write
   _enableInterrupt
   _lcd_init
   _nop
   _position
     _lcd_add
   _printf
     ___bmul
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcd_add

 _isr (ROOT)
   i1_LCDTimeUpdate
     i1_LCD_print_char
       i1___lwdiv (ARG)
       i1___lwmod (ARG)
       i1_lcd_add (ARG)
       i1_position (ARG)
         i1_lcd_add
     i1___lwdiv
     i1___lwmod
   i1_LCD_print_char
     i1___lwdiv (ARG)
     i1___lwmod (ARG)
     i1_lcd_add (ARG)
     i1_position (ARG)
       i1_lcd_add
   i1___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            D      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               D      D       D       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      69       3        0.0%
BITBANK0            50      0       2       4        2.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2D      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      14       7       25.0%
BITBANK3            55      0       0       8        0.0%
BANK3               55      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      69      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Mar 08 00:20:28 2016

          ?_Serial_Print_Int 0031                            _j 005E                            _x 0061  
                          pc 0002               ___bmul@product 0024                           PL2 09B1  
                         PL4 17D3                           PL6 07A7                           PL8 07B6  
                         _GO 00FA                           _RD 0C60                           _WR 0C61  
               ___awdiv@sign 002E                           fsr 0004           ??_Serial_Print_Int 0033  
        ___wmul@multiplicand 0025                          PL10 09C5                          PL20 17EF  
                        PL12 07BF                          PL30 0960                          PL22 07D4  
                        PL14 17DC                          PL40 07E5                          PL32 1EE4  
                        PL24 07DC                          PL16 17E7                          PL34 1EEB  
                        PL26 17F8                          PL18 07CA                          PL36 1EF2  
                        PL28 1EDD                          PL38 1EF9                          l303 15FD  
                        l320 16C4                          l312 166C                          l306 1624  
         _Serial_Println_Int 15E1                          l331 171C                          l323 16E7  
                        l317 169D                          l309 1649                          l342 173C  
                        l262 01AC                          l336 172C                          l328 16F7  
                        l280 1D41                          l601 1EDC                          l273 14B3  
                        l345 1746                          l530 13E5                          l362 14E1  
                        l339 1731                          l283 1D4C                          l371 153B  
                        l540 13F5                          l365 1508                          l390 15C4  
                        l382 159C                          l358 14C7                          l535 13ED  
                        l552 1413                          l376 1567                          l368 1521  
                        l545 13FD                          l554 141D                          l714 0306  
                        l555 1427                          l299 15E3                          l395 15D0  
                        l387 15A8                          l379 1582                          l581 149A  
                        l469 0FD8                          l398 15D5                          l718 0308  
                        l719 0309                          l744 03BB                          l816 0596  
                        l577 1492                          l753 03F7                          l595 1E95  
                        l579 1496                          l851 1D91                          l691 0256  
                        l829 08EF                          l773 049A                          l749 03D9  
                        l693 0258                          l694 025A                          l695 025C  
                        l697 0272                          l789 04DB                          _GIE 005F  
                        _RC0 0038                          _RB2 0032                          _RC1 0039  
                        _RB3 0033                          _RD0 0040                          _RC2 003A  
                        _RB4 0034                          _RD1 0041                          _RC3 003B  
                        _RB5 0035                          _RD2 0042                          _RC4 003C  
                        _RD3 0043                          _RC5 003D                          _RD4 0044  
                        _RD5 0045                          _RD6 0046                          _RD7 0047  
                        _RX9 00C6                          _TX9 04C6                _LCDTimeUpdate 01BE  
                        _Nop 0331                          _isr 104A                          _nop 1301  
                        fsr0 0004                          indf 0000                 ___awmod@sign 0028  
               __CFG_FOSC$HS 0000          ?_Serial_Println_Int 0031                         l1109 1038  
                       l1097 1010                         l3150 066C                         l3230 06F5  
                       l4102 098A                         l3400 1772                         l3144 0651  
                       l3170 0696                         l3146 065A                         l3234 06FB  
                       l4122 09A9                         l3308 144F                         l3260 149F  
                       l3412 1789                         l3172 069F                         l3148 0663  
                       l3166 0684                         l4230 15C7                         l4214 159F  
                       l4310 02E4                         l3328 146D                         l3280 1423  
                       l3272 140F                         l3416 1791                         l3440 17B3  
                       l3432 17A7                         l3168 068D                         l3360 101E  
                       l4320 030B                         l3522 14A9                         l3362 1028  
                       l4082 09B7                         l4330 032F                         l3284 142D  
                       l3348 148A                         l3276 1419                         l3452 17CE  
                       l3428 17A0                         l3532 15F2                         l4164 14D6  
                       l3356 1014                         l4500 04CC                         l4340 0344  
                       l4332 0331                         l4316 02E5                         l4260 0251  
                       l3710 13B0                         l3390 1764                         l3366 1036  
                       l3358 1019                         l4510 04E1                         l4350 0360  
                       l4326 0320                         l4318 0304                         l4262 025D  
                       l3288 1431                         l3704 13A4                         l3384 175B  
                       l3376 1751                         l3448 17C6                         l3560 1690  
                       l3480 1301                         l4192 155A                         l3368 102D  
                       l4504 04D5                         l4360 0379                         l4352 036C  
                       l4336 0334                         l4344 034E                         l4280 0283  
                       l4272 025E                         l3722 13C7                         l3650 133C  
                       l3554 166E                         l3490 021A                         l4186 153D  
                       l4522 04FE                         l4514 04ED                         l4450 0456  
                       l4442 0443                         l4426 0415                         l4338 0338  
                       l3740 13E8                         l3716 13BB                         l3644 1331  
                       l4700 1DF1                         l3900 0767                         l4540 054E  
                       l4436 0437                         l4428 0423                         l4356 0373  
                       l4348 035C                         l4364 037C                         l4276 0275  
                       l3734 13DF                         l3662 1352                         l3582 16EA  
                       l4526 0503                         l4470 0492                         l4462 047D  
                       l4382 03B2                         l4366 039E                         l3744 13F0  
                       l3752 13FF                         l3728 13D3                         l3680 1375  
                       l3656 1347                         l3736 13E1                         l4712 1E12  
                       l3904 0777                         l4552 058C                         l4544 0568  
                       l4536 0543                         l4528 0524                         l4464 0481  
                       l4456 0464                         l4448 0452                         l4296 02C5  
                       l4288 02B0                         l4800 0B65                         l3818 1E9A  
                       l3674 1369                         l3834 06CB                         l3850 06E4  
                       l4546 0576                         l4490 04B6                         l4378 03AF  
                       l3756 1E4F                         l3748 13F8                         l3692 138C  
                       l3668 135D                         l4724 1DBD                         l4732 1DD9  
                       l3916 090F                         l3828 05E4                         l4548 057A  
                       l4468 048E                         l4556 023B                         l3686 1381  
                       l3598 171F                         l3870 073A                         l3950 0957  
                       l3934 0933                         l3918 0914                         l3838 06D3  
                       l4486 04AF                         l4478 049E                         l3944 093F  
                       l4496 04C7                         l3786 1E53                         l3698 1398  
                       l3866 0729                         l3946 0949                         l3938 093B  
                       l3788 1E96                         l4684 1E34                         l4596 1287  
                       l3964 05BC                         l3892 075B                         l4852 0E3C  
                       l4854 0E42                         l4790 09CB                         l4862 0FD8  
                       _ADIE 0466                         l3976 05D3                         l3888 074B  
                       l4848 0C88                         l4792 09CD                         l4794 09CF  
                       l3988 06B1                         l3996 06C4                         l4796 09D1  
                       ?_isr 0071                         ?_nop 0071                         _ADON 00F8  
                       _EEIE 046C                         STR_1 086E                         STR_2 085C  
                       STR_3 084A                         STR_4 0838                         STR_5 08A2  
                       STR_6 08B3                         STR_7 08D5                         STR_8 08C4  
                       STR_9 08E6                         _BRGH 04C2                         _T0IE 005D  
                       _CREN 00C4                         _FERR 00C2                         u3410 0681  
                       u3330 064E                         u3315 0636                         u3430 068A  
                       u3350 0657                         u3255 060F                         u4225 17B9  
                       u3450 0693                         u3370 0660                         u4155 177B  
                       u3275 061C                         u4325 15FB                         u5205 06B7  
                       u3470 069C                         u3390 0669                         u4415 16F5  
                       u3295 0629                         u5075 0918                         _PEIE 005E  
                       u6205 1E3A                         u4445 172A                         u5165 05C5  
                       _INTE 005C                         u4375 169B                         u6151 08ED  
                       _RBIE 005B                         u5515 15CE                         _RCIE 0465  
                       _RCIF 0065                         u5445 1565                         u6245 1DFF  
                       u6095 058A                         u4905 1E5D                         u6185 1E1F  
                       u6417 005A                         u4915 1EA4                         u5395 14DF  
                       u6507 01A6                         u5635 0319                         u6427 0085  
                       u5485 15A6                         u6517 14CD                         u6285 1DC7  
                       u5645 0326                         u6437 00B0                         u6607 1D47  
                       u6527 14F5                         u6447 00E8                         u6617 1D54  
                       u6537 1515                         u6457 0BB1                         _OERR 00C1  
                       u6707 165A                         u6627 1D88                         u6547 152E  
                       u6467 059D                         u5755 03D6                         u6717 167D  
                       u6637 0225                         u6557 154C                         u6477 05AB  
                       u6807 1EB9                         u6727 16B1                         u6647 0233  
                       u6567 1576                         u6487 010B                         u5775 03F4  
                       u6817 1EC5                         u6737 16D5                         u6657 0702  
                       u6577 158F                         u6497 011B                         u6827 1ED1  
                       u6747 170A                         u6667 0712                         u6587 15B7  
                       u5795 0412                         u6837 1E66                         u6757 173A  
                       u6677 15E9                         u6597 15DE                         u6847 1E72  
                       u6767 1744                         u6687 1611                         u5895 0474  
                       u6857 1E7E                         u6777 174E                         u6697 1636  
                       u6867 1E8A                         u6787 14BF                         u6797 1EAD  
                       _SPEN 00C7                         _TXIE 0464                         _WREN 0C62  
                       _TXEN 04C5                         _TXIF 0064                         _SYNC 04C4  
             ??_eeprom_write 0024                         _bit0 0332                         _bit1 0333  
                       _bit2 0334                         _bit3 0335                         _bit4 0336  
                       _bit5 0337                         _bit6 0338                         _bit7 0339  
                       _ldr1 0054                         _ldr2 0056                         _main 0013  
               ___ftpack@arg 0023                         _hour 0052                 ___ftpack@exp 0026  
                       btemp 007E                         ltemp 007E              _enableInterrupt 1D30  
   __size_of_RotateMotorLeft 0047                         start 0010                         ttemp 007E  
                       wtemp 007E            ___bmul@multiplier 0025                   i1_position 124D  
               ___ftmul@cntr 003B                 ___ftmul@sign 003C         ??_Serial_Println_Int 0033  
                _CheckKeyPad 1306                 ___fttol@exp1 0049                 ___fttol@lval 0045  
                      ??_isr 0020                        ??_nop 0023                        _ADDEN 00C3  
                      ?_main 0071                        _BCLIE 046B              __end_of___awdiv 1796  
                      _EEADR 010D                        STR_10 08E6                        STR_11 08E6  
                      STR_12 08E6                        STR_13 0824                        STR_14 0880  
                      STR_15 0891                __CFG_WDTE$OFF 0000              __end_of___awmod 17D3  
             ?_LCDTimeUpdate 0071                        _CARRY 0018              __end_of___ftmul 0795  
            ___awdiv@divisor 0029              __end_of___fttol 0960              __end_of___ltdiv 1E19  
            __end_of___lwdiv 05D8              __end_of___ltmod 1DE0              __end_of___lwmod 06C9  
                      i1l631 10C0                        i1l625 10B4                        i1l617 1098  
            ___awdiv@counter 002D                        _RCREG 001A                        _C_Bat 0062  
                      _TMR1H 000F                        _TMR1L 000E                        _SPBRG 0099  
                      _PORTA 0005                        _PORTB 0006                        _PORTC 0007  
                      _PORTD 0008                        _PORTE 0009                        _PSPIE 0467  
              i1position@row 0076                        _TRISA 0085                        _TRISB 0086  
                      _TRISC 0087                        _TRISD 0088                        _SSPIE 0463  
                      _TRISE 0089                        _TXREG 0019                        _V_Bat 0064  
              __CFG_PWRTE$ON 0000              __end_of_lcd_add 06A5                        _RowNo 148D  
         i1___lwmod@dividend 0073              __end_of_dpowers 081C              __end_of_isdigit 05E6  
              ___ftpack@sign 0027                        _state 0060                        _putch 0597  
               position@post 0027               __CFG_BOREN$OFF 0000                        pclath 000A  
                      ltemp0 007E                        ltemp1 0082                        ltemp2 0086  
                      ltemp3 0080               _Serial_NewLine 1D41                        ttemp0 007E  
                      ttemp1 0081                        ttemp2 0084                        ttemp3 0087  
                      ttemp4 007F                        status 0003                        wtemp0 007E  
                      wtemp1 0080                        wtemp2 0082                        wtemp3 0084  
                      wtemp4 0086                        wtemp5 0088                        wtemp6 007F  
         __size_ofi1___lwdiv 002A           __size_ofi1___lwmod 0024             __end_of_a2d_read 0199  
            __initialization 07EB           __size_ofi1_lcd_add 00BF             __end_of_ColomnNo 148D  
         __size_of_Calculate 0036                 __end_of_main 1000           __size_of_CheckMode 008E  
   __end_of_RotateMotorRight 1EDD            ?i1_LCD_print_char 0078                       ??_main 004A  
              ___fttol@sign1 0044      __size_of_LCD_print_char 001C           ??i1_LCD_print_char 007D  
                     ?_RowNo 0023                       _ADCON0 001F                       _ADCON1 009F  
            i1_LCDTimeUpdate 10C9                       _CCP1IE 0462                       _CCP2IE 0468  
                     _ADRESH 001E                       _ADRESL 009E                       _EEDATA 010C  
                     _EECON1 018C                       _EECON2 018D       __end_of_Serial_NewLine 1D5A  
    __end_of_enableInterrupt 1D41             ___awdiv@dividend 002B                       ?_putch 0071  
           __end_of___ftpack 104A                       i1l3220 1247                       i1l3214 122C  
                     i1l3216 1235                       i1l4024 1172                       i1l3218 123E  
                     i1l4036 1189                       i1l3192 11F9                       i1l4048 114C  
                     i1l4056 115F                       i1l3194 1202                       i1l3196 120B  
                     i1l3460 1252                       i1l3198 1214                       i1l3464 1258  
                     i1l4920 10AC                       i1l4930 10BA                       i1l4906 109D  
                     i1l4918 10AB                       i1l4928 10B9                       i1l4876 1060  
                     u361_20 11F6                       u353_25 11B7             __end_of___lwtoft 07A7  
                     u371_20 1232                       u363_20 11FF                       u355_25 11C4  
                     u524_25 117B                       u373_20 123B                       u365_20 1208  
                     u357_25 11D1                       u375_20 1244                       u367_20 1211  
                     u359_25 11DE                       u528_25 1152                       u369_20 1229  
                     u690_27 126D                       _TMR1IE 0460                       _TMR1IF 0060  
                     _TMR1CS 0081                       _TMR2IE 0461                       u687_27 1131  
                     _TMR1ON 0080                       u688_27 113D                       u689_27 125F  
       __size_of_clr_display 001C               i1position@post 0075                ??_Serial_Init 0023  
                     _V_Bat2 004D                ??_Timer1_Init 0023                  ?i1_position 0072  
       __size_of_eeprom_read 001C             __end_of_lcd_init 09B1                       ___bmul 06E2  
                     ___wmul 06C9                    ??___awdiv 002D                    ??___awmod 0027  
                  ??___ftmul 0034                    ??___fttol 0041                    ??___ltdiv 0029  
          ??_RotateMotorLeft 0025                    ??___lwdiv 0027                    ??___ltmod 0029  
                  ??___lwmod 002E                       _buffer 00A0              ??_LCDTimeUpdate 0035  
           ___awdiv@quotient 002F                       _minute 0058                       _second 005C  
            ___awmod@divisor 0023         __end_of_eeprom_write 1DAF              ___awmod@counter 0027  
                     _printf 0236                    ??_lcd_add 0023        ___ftmul@f3_as_product 0038  
  LCD_print_char@print_value 0033            __end_ofi1___lwdiv 118E            __end_ofi1___lwmod 1164  
                  ??_isdigit 0023                       saved_w 007E             __end_of_position 0718  
          __end_ofi1_lcd_add 124D            __end_of_Calculate 1E4F            __end_of_CheckMode 1301  
      __end_of_Setup_IOports 1D74              ?_Serial_NewLine 0071      __end_of__initialization 07FC  
            eeprom_read@addr 0023          ___bmul@multiplicand 0023                   ___ftmul@f1 002E  
                 ___ftmul@f2 0031                   ___fttol@f1 003D               __pcstackCOMMON 0071  
              __end_of_RowNo 14A6          __end_of_Serial_Init 1D90                __end_of_putch 05AE  
      RotateMotorRight@value 0023          __end_of_Timer1_Init 1D30                   __end_ofPL2 09C5  
                 __end_ofPL4 17DC                   __end_ofPL6 07B6                   __end_ofPL8 07BF  
                 ___lwtoft@c 002B      __end_ofi1_LCDTimeUpdate 1126          i1LCD_print_char@row 0078  
                  ?_a2d_read 0071            eeprom_write@value 0023                      ??_RowNo 0025  
         __size_of_atod_init 0006    __size_of_Serial_Print_Int 011C          __size_ofi1_position 0026  
                  ?_ColomnNo 0023                      ??_putch 0024             ?_enableInterrupt 0071  
                 __pbssBANK0 004D                   __pbssBANK1 00A0                ?_Serial_Print 0071  
        Serial_Print_Int@val 0031      __size_of_read_a2d_value 0025  i1LCD_print_char@print_value 007C  
                 __pmaintext 0013                      ?___bmul 0023                      ?___wmul 0023  
               ?_CheckKeyPad 0071                   __pintentry 0004                    ?___ftpack 0023  
             _LCD_print_char 021A                      ?_printf 002F                      _T1CKPS0 0084  
                    _T1CKPS1 0085                    ?___lwtoft 002B                      _T1OSCEN 0083  
                 ??_a2d_read 004A                    ?_lcd_init 0071                   ??_ColomnNo 0025  
             ??_Serial_Print 0023                   __stringtab 0800       i1LCD_print_char@column 007A  
                _Serial_Init 1D74                Serial_Print@a 0024                  _Timer1_Init 1D22  
      __size_of_eeprom_write 001F            __end_of_atod_init 1D22  __size_of_Serial_Println_Int 0170  
            __size_of___bmul 000E                      ___awdiv 1751                      ___awmod 1796  
                  ?_position 0024              __size_of___wmul 0019                      ___ftmul 0718  
                    ___fttol 0905                      ___ltdiv 1DE0       __end_of_LCD_print_char 0236  
                    ___lwdiv 05AE                      ___ltmod 1DAF                      ___lwmod 06A5  
          ?_RotateMotorRight 0023                   ??___ftpack 0028                      __ptext1 0236  
                    __ptext2 0597                      __ptext3 05D8                      __ptext4 06E2  
                    __ptext5 0967                      __ptext6 1D30                      __ptext7 1D90  
                    __ptext8 08E9                      __ptext9 0108                      _lcd_add 05E6  
            __size_of_printf 0361           ??_RotateMotorRight 0025                   ??___lwtoft 002E  
          __end_of_hexpowers 0824             ?i1_LCDTimeUpdate 0071                      _dpowers 0812  
          i1___lwdiv@divisor 0071                      _isdigit 05D8                 __size_of_isr 007F  
               __size_of_nop 0005            i1___lwdiv@counter 0077             ___awmod@dividend 0025  
                    _msecond 005A               position@collum 0024                      clrloop0 1001  
                 ??_lcd_init 0023         end_of_initialization 07FC            __end_of_octpowers 0812  
  __size_ofi1_LCD_print_char 001A         LCD_print_char@column 0031                 _eeprom_write 1D90  
            _RotateMotorLeft 1E4F          CheckMode@pressedKey 0034             ___ltdiv@dividend 0026  
               ??i1_position 0073                      printf@c 0044                      printf@f 0041  
                    psplit$0 A003E                   ??_position 0025              ?_LCD_print_char 002F  
                 _printf$355 003A                   _printf$348 0034                   _printf$349 0036  
      Serial_Println_Int@val 0031             ??_Serial_NewLine 0023             ___ltdiv@quotient 0029  
           _Serial_Print_Int 14C5         pnum$maintext_split_1 003E                    i1___lwdiv 1164  
                  i1___lwmod 1140                ??_clr_display 0024           __end_ofi1_position 1273  
        CheckKeyPad@colomnNo 0028                    i1_lcd_add 118E             putch@print_value 0025  
             _read_a2d_value 0199                    _Calculate 1E19                    _CheckMode 1273  
              ??_eeprom_read 0023                  printf@width 0042                  ___ftmul@exp 0037  
             __end_of___bmul 06F0         __end_of_Serial_Print 14C5               __end_of___wmul 06E2  
       __size_of_CheckKeyPad 00FB            i1___lwmod@divisor 0071                __pbitbssBANK0 0330  
      __end_of_LCDTimeUpdate 021A            i1___lwmod@counter 0075                  position@row 0028  
             __end_of_printf 0597                  __end_ofPL10 09CB                  __end_ofPL20 17F8  
                __end_ofPL12 07CA                  __end_ofPL30 0967                  __end_ofPL22 07DC  
                __end_ofPL14 17E7                  __end_ofPL40 07EB                  __end_ofPL32 1EEB  
                __end_ofPL24 07E5                  __end_ofPL16 17EF                  __end_ofPL34 1EF2  
                __end_ofPL26 1800                  __end_ofPL18 07D4                  __end_ofPL36 1EF9  
                __end_ofPL28 1EE4                  __end_ofPL38 1F00          start_initialization 07EB  
       RotateMotorLeft@value 0023                  __end_of_isr 10C9                  __end_of_nop 1306  
    __end_of_RotateMotorLeft 1E96                   ?i1___lwdiv 0071                   ?i1___lwmod 0071  
          __size_of_a2d_read 0075       __end_of_read_a2d_value 01BE                   ?i1_lcd_add 0071  
                 ?_Calculate 0071            __size_of_ColomnNo 008C                   ?_CheckMode 0071  
        __end_of_clr_display 0124                     ??___bmul 0024                     ??___wmul 0027  
        __end_of_eeprom_read 0905       __size_of_Setup_IOports 001A                     ??_printf 0031  
          __size_of___ftpack 0042                    ___latbits 0002            __size_of___lwtoft 0012  
              __pcstackBANK0 0020              ?_read_a2d_value 0023             i1_LCD_print_char 1126  
           eeprom_write@addr 0024            __size_of_lcd_init 004A                 ?_Serial_Init 0071  
   __size_of_enableInterrupt 0011                 ?_Timer1_Init 0071             ___lwdiv@dividend 0025  
    read_a2d_value@a2d_value 0027                     ?___awdiv 0029                     ?___awmod 0023  
                   ?___ftmul 002E                     ?___fttol 003D                     ?___ltdiv 0023  
                   ?___lwdiv 0023                     ?___ltmod 0023                     ?___lwmod 002A  
                  _atod_init 1D1C            __size_of_position 0028                    __pstrings 0800  
                   ?_lcd_add 0071                     ?_isdigit 0071        read_a2d_value@channel 0026  
             __size_of_RowNo 0019                    _hexpowers 081C             ___lwdiv@quotient 0027  
                ??i1___lwdiv 0075             ?_RotateMotorLeft 0023                  ??i1___lwmod 0075  
  __size_of_RotateMotorRight 0047                  _clr_display 0108               __size_of_putch 0017  
              _Setup_IOports 1D5A                  ??i1_lcd_add 0071             ___ltmod@dividend 0026  
                ??_Calculate 0029            interrupt_function 0004                  ??_CheckMode 0034  
             ___wmul@product 0027                    clear_ram0 1000                    _octpowers 0806  
                _eeprom_read 08E9             ??_LCD_print_char 0034   __end_of_Serial_Println_Int 1751  
            ___ltdiv@divisor 0023        __size_of_Serial_Print 001F              ___ltdiv@counter 002C  
           i1position@collum 0072     __end_of_Serial_Print_Int 15E1                   ?_atod_init 0071  
                __stringbase 0805            ___wmul@multiplier 0023                   printf@flag 0045  
                 printf@prec 0040                     _BlinkDet 0330                     _a2d_read 0124  
             ?_Setup_IOports 0071                     _ColomnNo 1401     __size_ofi1_LCDTimeUpdate 005D  
               _Serial_Print 14A6                     RowNo@row 0025             lcd_init@DelayLCD 0023  
               pnum$maintext 000A             __size_of___awdiv 0045             __size_of___awmod 003D  
           __size_of___ftmul 007D             __size_of___fttol 005B            ??_enableInterrupt 0023  
           __size_of___ltdiv 0039             __size_of___lwdiv 002A             __size_of___ltmod 0031  
           __size_of___lwmod 0024                     ___ftpack 1008           __end_of__stringtab 0806  
                _isdigit$559 0023                     ___lwtoft 0795             __size_of_lcd_add 00BF  
                _currentMode 0050             __size_of_isdigit 000E              ___lwdiv@divisor 0023  
            ___lwdiv@counter 0029                     __ptext10 1D1C                     __ptext11 0124  
                   __ptext20 1D22                     __ptext12 0199                     __ptext21 1D5A  
                   __ptext13 06C9                     __ptext30 05E6                     __ptext22 14C5  
                   __ptext14 0795                     __ptext31 1273                     __ptext23 1D41  
                   __ptext15 0905                     __ptext40 1E19                     __ptext32 1301  
                   __ptext24 1D74                     __ptext16 0718                     __ptext41 1E96  
                   __ptext33 15E1                     __ptext25 01BE                     __ptext17 1008  
                   __ptext42 1E4F                     __ptext34 1796                     __ptext26 06A5  
                   __ptext18 1DAF                     __ptext43 104A                     __ptext35 1751  
                   __ptext27 05AE                     __ptext19 1DE0                     __ptext44 10C9  
                   __ptext36 14A6                     __ptext28 021A                     __ptext45 1140  
                   __ptext37 1306                     __ptext29 06F0                     __ptext46 1164  
                   __ptext38 148D                     __ptext47 1126                     __ptext39 1401  
                   __ptext48 124D                     __ptext49 118E                     _lcd_data 005F  
                   _lcd_init 0967           i1___lwdiv@dividend 0073                __size_of_main 0FED  
            ___ltmod@divisor 0023              ___ltmod@counter 0029         __size_of_Serial_Init 001C  
              ??_CheckKeyPad 0027         __size_of_Timer1_Init 000E                     _position 06F0  
                  printf@idx 0039                    printf@len 003B                    printf@val 003E  
   __end_ofi1_LCD_print_char 1140                  ??_atod_init 0023                ColomnNo@rowNo 0023  
         i1___lwdiv@quotient 0075             ??_read_a2d_value 0025              ??_Setup_IOports 0023  
                   isdigit@c 0024             _RotateMotorRight 1E96                     intlevel1 0000  
    __size_of_Serial_NewLine 0019             ___lwmod@dividend 002C       __size_of_LCDTimeUpdate 005C  
          ??i1_LCDTimeUpdate 007E                    stringcode 0800            LCD_print_char@row 002F  
                   printf@ap 003D                     printf@cp 0038             CheckKeyPad@rowNo 002A  
          RotateMotorRight@i 0027          __end_of_CheckKeyPad 1401              ___lwmod@divisor 002A  
            ___lwmod@counter 002E                     stringdir 0800                     stringtab 0800  
           RotateMotorLeft@i 0027                 ?_clr_display 0071                ?_eeprom_write 0023  
               ?_eeprom_read 0071         CheckKeyPad@charactor 0027  
