

Microchip Technology PIC PRO Macro Assembler V1.34 build -361300703 
                                                                                               Tue Mar 08 00:47:25 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text18,local,class=CODE,merge=1,delta=2
    22                           	psect	text19,local,class=CODE,merge=1,delta=2
    23                           	psect	text20,local,class=CODE,merge=1,delta=2
    24                           	psect	text21,local,class=CODE,merge=1,delta=2
    25                           	psect	text23,local,class=CODE,merge=1,delta=2
    26                           	psect	text24,local,class=CODE,merge=1,delta=2
    27                           	psect	text31,local,class=CODE,merge=1,delta=2
    28                           	psect	text40,local,class=CODE,merge=1,delta=2
    29                           	psect	text43,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	pa_nodes,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000D                     	;# 
    47  000E                     	;# 
    48  000E                     	;# 
    49  000F                     	;# 
    50  0010                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0014                     	;# 
    55  0015                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001D                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0087                     	;# 
    72  0088                     	;# 
    73  0089                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  0091                     	;# 
    78  0092                     	;# 
    79  0093                     	;# 
    80  0094                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009C                     	;# 
    84  009D                     	;# 
    85  009E                     	;# 
    86  009F                     	;# 
    87  010C                     	;# 
    88  010D                     	;# 
    89  010E                     	;# 
    90  010F                     	;# 
    91  018C                     	;# 
    92  018D                     	;# 
    93                           
    94                           	psect	strings
    95  1800                     __pstrings:	
    96  1800                     stringtab:	
    97  1800                     __stringtab:	
    98  1800                     stringcode:	
    99                           ;	String table - string pointers are 1 byte each
   100                           
   101  1800                     stringdir:	
   102  1800  3018               	movlw	high stringdir
   103  1801  008A               	movwf	10
   104  1802  0804               	movf	4,w
   105  1803  0A84               	incf	4,f
   106  1804  0782               	addwf	2,f
   107  1805                     __stringbase:	
   108  1805  3400               	retlw	0
   109  1806                     __end_of__stringtab:	
   110  1806                     _octpowers:	
   111  1806  3401               	retlw	1
   112  1807  3400               	retlw	0
   113  1808  3408               	retlw	8
   114  1809  3400               	retlw	0
   115  180A  3440               	retlw	64
   116  180B  3400               	retlw	0
   117  180C  3400               	retlw	0
   118  180D  3402               	retlw	2
   119  180E  3400               	retlw	0
   120  180F  3410               	retlw	16
   121  1810  3400               	retlw	0
   122  1811  3480               	retlw	128
   123  1812                     __end_of_octpowers:	
   124  1812                     _dpowers:	
   125  1812  3401               	retlw	1
   126  1813  3400               	retlw	0
   127  1814  340A               	retlw	10
   128  1815  3400               	retlw	0
   129  1816  3464               	retlw	100
   130  1817  3400               	retlw	0
   131  1818  34E8               	retlw	232
   132  1819  3403               	retlw	3
   133  181A  3410               	retlw	16
   134  181B  3427               	retlw	39
   135  181C                     __end_of_dpowers:	
   136  181C                     _hexpowers:	
   137  181C  3401               	retlw	1
   138  181D  3400               	retlw	0
   139  181E  3410               	retlw	16
   140  181F  3400               	retlw	0
   141  1820  3400               	retlw	0
   142  1821  3401               	retlw	1
   143  1822  3400               	retlw	0
   144  1823  3410               	retlw	16
   145  1824                     __end_of_hexpowers:	
   146  001F                     _ADCON0	set	31
   147  001E                     _ADRESH	set	30
   148  0005                     _PORTA	set	5
   149  0006                     _PORTB	set	6
   150  0007                     _PORTC	set	7
   151  0008                     _PORTD	set	8
   152  0009                     _PORTE	set	9
   153  001A                     _RCREG	set	26
   154  000F                     _TMR1H	set	15
   155  000E                     _TMR1L	set	14
   156  0019                     _TXREG	set	25
   157  00C3                     _ADDEN	set	195
   158  00F8                     _ADON	set	248
   159  0018                     _CARRY	set	24
   160  00C4                     _CREN	set	196
   161  00C2                     _FERR	set	194
   162  005F                     _GIE	set	95
   163  00FA                     _GO	set	250
   164  005C                     _INTE	set	92
   165  00C1                     _OERR	set	193
   166  005E                     _PEIE	set	94
   167  0032                     _RB2	set	50
   168  0033                     _RB3	set	51
   169  0034                     _RB4	set	52
   170  0035                     _RB5	set	53
   171  005B                     _RBIE	set	91
   172  0038                     _RC0	set	56
   173  0039                     _RC1	set	57
   174  003A                     _RC2	set	58
   175  003B                     _RC3	set	59
   176  003C                     _RC4	set	60
   177  003D                     _RC5	set	61
   178  0065                     _RCIF	set	101
   179  0040                     _RD0	set	64
   180  0041                     _RD1	set	65
   181  0042                     _RD2	set	66
   182  0043                     _RD3	set	67
   183  0044                     _RD4	set	68
   184  0045                     _RD5	set	69
   185  0046                     _RD6	set	70
   186  0047                     _RD7	set	71
   187  00C6                     _RX9	set	198
   188  00C7                     _SPEN	set	199
   189  005D                     _T0IE	set	93
   190  0084                     _T1CKPS0	set	132
   191  0085                     _T1CKPS1	set	133
   192  0083                     _T1OSCEN	set	131
   193  0081                     _TMR1CS	set	129
   194  0060                     _TMR1IF	set	96
   195  0080                     _TMR1ON	set	128
   196  0064                     _TXIF	set	100
   197  009F                     _ADCON1	set	159
   198  009E                     _ADRESL	set	158
   199  0099                     _SPBRG	set	153
   200  0085                     _TRISA	set	133
   201  0086                     _TRISB	set	134
   202  0087                     _TRISC	set	135
   203  0088                     _TRISD	set	136
   204  0089                     _TRISE	set	137
   205  0466                     _ADIE	set	1126
   206  046B                     _BCLIE	set	1131
   207  04C2                     _BRGH	set	1218
   208  0462                     _CCP1IE	set	1122
   209  0468                     _CCP2IE	set	1128
   210  046C                     _EEIE	set	1132
   211  0467                     _PSPIE	set	1127
   212  0465                     _RCIE	set	1125
   213  0463                     _SSPIE	set	1123
   214  04C4                     _SYNC	set	1220
   215  0460                     _TMR1IE	set	1120
   216  0461                     _TMR2IE	set	1121
   217  04C6                     _TX9	set	1222
   218  04C5                     _TXEN	set	1221
   219  0464                     _TXIE	set	1124
   220  010D                     _EEADR	set	269
   221  010C                     _EEDATA	set	268
   222  018C                     _EECON1	set	396
   223  018D                     _EECON2	set	397
   224  0C60                     _RD	set	3168
   225  0C61                     _WR	set	3169
   226  0C62                     _WREN	set	3170
   227  1824                     STR_13:	
   228  1824  3453               	retlw	83	;'S'
   229  1825  3477               	retlw	119	;'w'
   230  1826  3469               	retlw	105	;'i'
   231  1827  3474               	retlw	116	;'t'
   232  1828  3463               	retlw	99	;'c'
   233  1829  3468               	retlw	104	;'h'
   234  182A  3465               	retlw	101	;'e'
   235  182B  3464               	retlw	100	;'d'
   236  182C  3420               	retlw	32	;' '
   237  182D  3474               	retlw	116	;'t'
   238  182E  346F               	retlw	111	;'o'
   239  182F  3420               	retlw	32	;' '
   240  1830  344D               	retlw	77	;'M'
   241  1831  346F               	retlw	111	;'o'
   242  1832  3464               	retlw	100	;'d'
   243  1833  3465               	retlw	101	;'e'
   244  1834  3420               	retlw	32	;' '
   245  1835  343A               	retlw	58	;':'
   246  1836  3420               	retlw	32	;' '
   247  1837  3400               	retlw	0
   248  1838                     STR_4:	
   249  1838  3420               	retlw	32	;' '
   250  1839  3420               	retlw	32	;' '
   251  183A  3420               	retlw	32	;' '
   252  183B  3420               	retlw	32	;' '
   253  183C  3420               	retlw	32	;' '
   254  183D  3420               	retlw	32	;' '
   255  183E  3453               	retlw	83	;'S'
   256  183F  3479               	retlw	121	;'y'
   257  1840  3473               	retlw	115	;'s'
   258  1841  3474               	retlw	116	;'t'
   259  1842  3465               	retlw	101	;'e'
   260  1843  346D               	retlw	109	;'m'
   261  1844  3420               	retlw	32	;' '
   262  1845  3420               	retlw	32	;' '
   263  1846  3420               	retlw	32	;' '
   264  1847  3420               	retlw	32	;' '
   265  1848  3420               	retlw	32	;' '
   266  1849  3400               	retlw	0
   267  184A                     STR_3:	
   268  184A  3420               	retlw	32	;' '
   269  184B  3420               	retlw	32	;' '
   270  184C  3420               	retlw	32	;' '
   271  184D  3420               	retlw	32	;' '
   272  184E  344D               	retlw	77	;'M'
   273  184F  346F               	retlw	111	;'o'
   274  1850  346E               	retlw	110	;'n'
   275  1851  3469               	retlw	105	;'i'
   276  1852  3474               	retlw	116	;'t'
   277  1853  346F               	retlw	111	;'o'
   278  1854  3472               	retlw	114	;'r'
   279  1855  3469               	retlw	105	;'i'
   280  1856  346E               	retlw	110	;'n'
   281  1857  3467               	retlw	103	;'g'
   282  1858  3420               	retlw	32	;' '
   283  1859  3420               	retlw	32	;' '
   284  185A  3420               	retlw	32	;' '
   285  185B  3400               	retlw	0
   286  185C                     STR_2:	
   287  185C  3420               	retlw	32	;' '
   288  185D  3461               	retlw	97	;'a'
   289  185E  346E               	retlw	110	;'n'
   290  185F  3464               	retlw	100	;'d'
   291  1860  3420               	retlw	32	;' '
   292  1861  3448               	retlw	72	;'H'
   293  1862  3465               	retlw	101	;'e'
   294  1863  3461               	retlw	97	;'a'
   295  1864  3472               	retlw	114	;'r'
   296  1865  3474               	retlw	116	;'t'
   297  1866  3420               	retlw	32	;' '
   298  1867  3452               	retlw	82	;'R'
   299  1868  3461               	retlw	97	;'a'
   300  1869  3474               	retlw	116	;'t'
   301  186A  3465               	retlw	101	;'e'
   302  186B  3420               	retlw	32	;' '
   303  186C  3420               	retlw	32	;' '
   304  186D  3400               	retlw	0
   305  186E                     STR_1:	
   306  186E  3442               	retlw	66	;'B'
   307  186F  346F               	retlw	111	;'o'
   308  1870  3464               	retlw	100	;'d'
   309  1871  3479               	retlw	121	;'y'
   310  1872  3420               	retlw	32	;' '
   311  1873  3454               	retlw	84	;'T'
   312  1874  3465               	retlw	101	;'e'
   313  1875  346D               	retlw	109	;'m'
   314  1876  3470               	retlw	112	;'p'
   315  1877  3465               	retlw	101	;'e'
   316  1878  3472               	retlw	114	;'r'
   317  1879  3461               	retlw	97	;'a'
   318  187A  3474               	retlw	116	;'t'
   319  187B  3475               	retlw	117	;'u'
   320  187C  3472               	retlw	114	;'r'
   321  187D  3465               	retlw	101	;'e'
   322  187E  3420               	retlw	32	;' '
   323  187F  3400               	retlw	0
   324  1880                     STR_14:	
   325  1880  3430               	retlw	48	;'0'
   326  1881  3431               	retlw	49	;'1'
   327  1882  3432               	retlw	50	;'2'
   328  1883  3433               	retlw	51	;'3'
   329  1884  3434               	retlw	52	;'4'
   330  1885  3435               	retlw	53	;'5'
   331  1886  3436               	retlw	54	;'6'
   332  1887  3437               	retlw	55	;'7'
   333  1888  3438               	retlw	56	;'8'
   334  1889  3439               	retlw	57	;'9'
   335  188A  3441               	retlw	65	;'A'
   336  188B  3442               	retlw	66	;'B'
   337  188C  3443               	retlw	67	;'C'
   338  188D  3444               	retlw	68	;'D'
   339  188E  3445               	retlw	69	;'E'
   340  188F  3446               	retlw	70	;'F'
   341  1890  3400               	retlw	0
   342  1891                     STR_15:	
   343  1891  3430               	retlw	48	;'0'
   344  1892  3431               	retlw	49	;'1'
   345  1893  3432               	retlw	50	;'2'
   346  1894  3433               	retlw	51	;'3'
   347  1895  3434               	retlw	52	;'4'
   348  1896  3435               	retlw	53	;'5'
   349  1897  3436               	retlw	54	;'6'
   350  1898  3437               	retlw	55	;'7'
   351  1899  3438               	retlw	56	;'8'
   352  189A  3439               	retlw	57	;'9'
   353  189B  3461               	retlw	97	;'a'
   354  189C  3462               	retlw	98	;'b'
   355  189D  3463               	retlw	99	;'c'
   356  189E  3464               	retlw	100	;'d'
   357  189F  3465               	retlw	101	;'e'
   358  18A0  3466               	retlw	102	;'f'
   359  18A1  3400               	retlw	0
   360  18A2                     STR_5:	
   361  18A2  3420               	retlw	32	;' '
   362  18A3  3420               	retlw	32	;' '
   363  18A4  3420               	retlw	32	;' '
   364  18A5  3420               	retlw	32	;' '
   365  18A6  3420               	retlw	32	;' '
   366  18A7  3420               	retlw	32	;' '
   367  18A8  3420               	retlw	32	;' '
   368  18A9  3466               	retlw	102	;'f'
   369  18AA  346F               	retlw	111	;'o'
   370  18AB  3472               	retlw	114	;'r'
   371  18AC  3420               	retlw	32	;' '
   372  18AD  3420               	retlw	32	;' '
   373  18AE  3420               	retlw	32	;' '
   374  18AF  3420               	retlw	32	;' '
   375  18B0  3420               	retlw	32	;' '
   376  18B1  3420               	retlw	32	;' '
   377  18B2  3400               	retlw	0
   378  18B3                     STR_6:	
   379  18B3  3420               	retlw	32	;' '
   380  18B4  3420               	retlw	32	;' '
   381  18B5  3420               	retlw	32	;' '
   382  18B6  3420               	retlw	32	;' '
   383  18B7  3450               	retlw	80	;'P'
   384  18B8  3461               	retlw	97	;'a'
   385  18B9  3474               	retlw	116	;'t'
   386  18BA  3469               	retlw	105	;'i'
   387  18BB  3465               	retlw	101	;'e'
   388  18BC  346E               	retlw	110	;'n'
   389  18BD  3474               	retlw	116	;'t'
   390  18BE  3473               	retlw	115	;'s'
   391  18BF  3420               	retlw	32	;' '
   392  18C0  3420               	retlw	32	;' '
   393  18C1  3420               	retlw	32	;' '
   394  18C2  3420               	retlw	32	;' '
   395  18C3  3400               	retlw	0
   396  18C4                     STR_8:	
   397  18C4  3454               	retlw	84	;'T'
   398  18C5  343A               	retlw	58	;':'
   399  18C6  3420               	retlw	32	;' '
   400  18C7  3420               	retlw	32	;' '
   401  18C8  3438               	retlw	56	;'8'
   402  18C9  3434               	retlw	52	;'4'
   403  18CA  3446               	retlw	70	;'F'
   404  18CB  3420               	retlw	32	;' '
   405  18CC  3420               	retlw	32	;' '
   406  18CD  3420               	retlw	32	;' '
   407  18CE  344C               	retlw	76	;'L'
   408  18CF  346F               	retlw	111	;'o'
   409  18D0  3477               	retlw	119	;'w'
   410  18D1  3420               	retlw	32	;' '
   411  18D2  3420               	retlw	32	;' '
   412  18D3  3420               	retlw	32	;' '
   413  18D4  3400               	retlw	0
   414  18D5                     STR_7:	
   415  18D5  3448               	retlw	72	;'H'
   416  18D6  343A               	retlw	58	;':'
   417  18D7  3420               	retlw	32	;' '
   418  18D8  3420               	retlw	32	;' '
   419  18D9  3436               	retlw	54	;'6'
   420  18DA  3432               	retlw	50	;'2'
   421  18DB  3450               	retlw	80	;'P'
   422  18DC  3450               	retlw	80	;'P'
   423  18DD  344D               	retlw	77	;'M'
   424  18DE  3420               	retlw	32	;' '
   425  18DF  344C               	retlw	76	;'L'
   426  18E0  346F               	retlw	111	;'o'
   427  18E1  3477               	retlw	119	;'w'
   428  18E2  3420               	retlw	32	;' '
   429  18E3  3420               	retlw	32	;' '
   430  18E4  3420               	retlw	32	;' '
   431  18E5  3400               	retlw	0
   432  18E6                     STR_9:	
   433  18E6  342C               	retlw	44	;','
   434  18E7  3420               	retlw	32	;' '
   435  18E8  3400               	retlw	0
   436  18E6                     
   437                           ; #config settings
   438  0000                     
   439                           	psect	cinit
   440  0013                     start_initialization:	
   441  0013                     __initialization:	
   442  0013  304D               	movlw	low __pbssBANK0
   443                           
   444                           ; Clear objects allocated to BITCOMMON
   445  0014  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   446                           
   447                           ; Clear objects allocated to BITBANK0
   448  0015  01E6               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   449                           
   450                           ; Clear objects allocated to BANK0
   451  0016  1383               	bcf	3,7	;select IRP bank0
   452  0017  0084               	movwf	4
   453  0018  3066               	movlw	low (__pbssBANK0+25)
   454  0019  160A  158A  2703  120A  118A  	fcall	clear_ram0
   455                           
   456                           ; Clear objects allocated to BANK1
   457  001E  30A0               	movlw	low __pbssBANK1
   458  001F  0084               	movwf	4
   459  0020  30B4               	movlw	low (__pbssBANK1+20)
   460  0021  160A  158A  2703   	fcall	clear_ram0
   461  0024                     end_of_initialization:	
   462                           ;End of C runtime variable initialization code
   463                           
   464  0024                     __end_of__initialization:	
   465  0024  0183               	clrf	3
   466  0025  120A  158A  28D6   	ljmp	_main	;jump to C main() function
   467                           
   468                           	psect	bitbssCOMMON
   469  03E8                     __pbitbssCOMMON:	
   470  03E8                     _bit0:	
   471  03E8                     	ds	1
   472  03E9                     _bit1:	
   473  03E9                     	ds	1
   474  03EA                     _bit2:	
   475  03EA                     	ds	1
   476  03EB                     _bit3:	
   477  03EB                     	ds	1
   478  03EC                     _bit4:	
   479  03EC                     	ds	1
   480  03ED                     _bit5:	
   481  03ED                     	ds	1
   482  03EE                     _bit6:	
   483  03EE                     	ds	1
   484                           
   485                           	psect	bitbssBANK0
   486  0330                     __pbitbssBANK0:	
   487  0330                     _BlinkDet:	
   488  0330                     	ds	1
   489  0331                     _Nop:	
   490  0331                     	ds	1
   491  0332                     _bit7:	
   492  0332                     	ds	1
   493                           
   494                           	psect	bssBANK0
   495  004D                     __pbssBANK0:	
   496  004D                     _V_Bat2:	
   497  004D                     	ds	3
   498  0050                     _currentMode:	
   499  0050                     	ds	2
   500  0052                     _hour:	
   501  0052                     	ds	2
   502  0054                     _ldr1:	
   503  0054                     	ds	2
   504  0056                     _ldr2:	
   505  0056                     	ds	2
   506  0058                     _minute:	
   507  0058                     	ds	2
   508  005A                     _msecond:	
   509  005A                     	ds	2
   510  005C                     _second:	
   511  005C                     	ds	2
   512  005E                     _j:	
   513  005E                     	ds	1
   514  005F                     _lcd_data:	
   515  005F                     	ds	1
   516  0060                     _state:	
   517  0060                     	ds	1
   518  0061                     _x:	
   519  0061                     	ds	1
   520  0062                     _C_Bat:	
   521  0062                     	ds	2
   522  0064                     _V_Bat:	
   523  0064                     	ds	2
   524                           
   525                           	psect	bssBANK1
   526  00A0                     __pbssBANK1:	
   527  00A0                     _buffer:	
   528  00A0                     	ds	20
   529                           
   530                           	psect	clrtext
   531  1F03                     clear_ram0:	
   532                           ;	Called with FSR containing the base address, and
   533                           ;	W with the last address+1
   534                           
   535  1F03  0064               	clrwdt	;clear the watchdog before getting into this loop
   536  1F04                     clrloop0:	
   537  1F04  0180               	clrf	0	;clear RAM location pointed to by FSR
   538  1F05  0A84               	incf	4,f	;increment pointer
   539  1F06  0604               	xorwf	4,w	;XOR with final address
   540  1F07  1903               	btfsc	3,2	;have we reached the end yet?
   541  1F08  3400               	retlw	0	;all done for this memory range, return
   542  1F09  0604               	xorwf	4,w	;XOR again to restore value
   543  1F0A  2F04               	goto	clrloop0	;do the next byte
   544                           
   545                           	psect	cstackCOMMON
   546  0070                     __pcstackCOMMON:	
   547  0070                     ?_lcd_add:	
   548  0070                     ?_LCDTimeUpdate:	
   549                           ; 0 bytes @ 0x0
   550                           
   551  0070                     ?_a2d_read:	
   552                           ; 0 bytes @ 0x0
   553                           
   554  0070                     ?_CheckMode:	
   555                           ; 0 bytes @ 0x0
   556                           
   557  0070                     ?_Calculate:	
   558                           ; 0 bytes @ 0x0
   559                           
   560  0070                     ?_isdigit:	
   561                           ; 0 bytes @ 0x0
   562                           
   563  0070                     ?_nop:	
   564                           ; 1 bit 
   565                           
   566  0070                     ?_Setup_IOports:	
   567                           ; 0 bytes @ 0x0
   568                           
   569  0070                     ?_lcd_init:	
   570                           ; 0 bytes @ 0x0
   571                           
   572  0070                     ?_putch:	
   573                           ; 0 bytes @ 0x0
   574                           
   575  0070                     ?_clr_display:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  0070                     ?_atod_init:	
   579                           ; 0 bytes @ 0x0
   580                           
   581  0070                     ?_Serial_Init:	
   582                           ; 0 bytes @ 0x0
   583                           
   584  0070                     ?_Serial_Print:	
   585                           ; 0 bytes @ 0x0
   586                           
   587  0070                     ?_Serial_NewLine:	
   588                           ; 1 bit 
   589                           
   590  0070                     ?_enableInterrupt:	
   591                           ; 0 bytes @ 0x0
   592                           
   593  0070                     ?_Timer1_Init:	
   594                           ; 0 bytes @ 0x0
   595                           
   596  0070                     ?_main:	
   597                           ; 0 bytes @ 0x0
   598                           
   599  0070                     ?_isr:	
   600                           ; 0 bytes @ 0x0
   601                           
   602  0070                     ?i1_lcd_add:	
   603                           ; 0 bytes @ 0x0
   604                           
   605  0070                     ??i1_lcd_add:	
   606                           ; 0 bytes @ 0x0
   607                           
   608  0070                     ?i1_LCDTimeUpdate:	
   609                           ; 0 bytes @ 0x0
   610                           
   611  0070                     ?_eeprom_read:	
   612                           ; 0 bytes @ 0x0
   613                           
   614  0070                     ?_CheckKeyPad:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?i1___lwdiv:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?i1___lwmod:	
   621                           ; 2 bytes @ 0x0
   622                           
   623  0070                     i1___lwdiv@divisor:	
   624                           ; 2 bytes @ 0x0
   625                           
   626  0070                     i1___lwmod@divisor:	
   627                           ; 2 bytes @ 0x0
   628                           
   629                           
   630                           ; 2 bytes @ 0x0
   631  0070                     	ds	1
   632  0071                     ?i1_position:	
   633  0071                     i1position@collum:	
   634                           ; 0 bytes @ 0x1
   635                           
   636                           
   637                           ; 1 bytes @ 0x1
   638  0071                     	ds	1
   639  0072                     ??i1_position:	
   640  0072                     i1___lwdiv@dividend:	
   641                           ; 0 bytes @ 0x2
   642                           
   643  0072                     i1___lwmod@dividend:	
   644                           ; 2 bytes @ 0x2
   645                           
   646                           
   647                           ; 2 bytes @ 0x2
   648  0072                     	ds	2
   649  0074                     ??i1___lwdiv:	
   650  0074                     ??i1___lwmod:	
   651                           ; 0 bytes @ 0x4
   652                           
   653  0074                     i1position@post:	
   654                           ; 0 bytes @ 0x4
   655                           
   656  0074                     i1___lwmod@counter:	
   657                           ; 1 bytes @ 0x4
   658                           
   659  0074                     i1___lwdiv@quotient:	
   660                           ; 1 bytes @ 0x4
   661                           
   662                           
   663                           ; 2 bytes @ 0x4
   664  0074                     	ds	1
   665  0075                     i1position@row:	
   666                           
   667                           ; 1 bytes @ 0x5
   668  0075                     	ds	1
   669  0076                     i1___lwdiv@counter:	
   670                           
   671                           ; 1 bytes @ 0x6
   672  0076                     	ds	1
   673  0077                     ?i1_LCD_print_char:	
   674  0077                     i1LCD_print_char@row:	
   675                           ; 0 bytes @ 0x7
   676                           
   677                           
   678                           ; 2 bytes @ 0x7
   679  0077                     	ds	2
   680  0079                     i1LCD_print_char@column:	
   681                           
   682                           ; 2 bytes @ 0x9
   683  0079                     	ds	2
   684  007B                     i1LCD_print_char@print_value:	
   685                           
   686                           ; 1 bytes @ 0xB
   687  007B                     	ds	1
   688  007C                     ??i1_LCD_print_char:	
   689                           
   690                           ; 0 bytes @ 0xC
   691  007C                     	ds	1
   692  007D                     ??i1_LCDTimeUpdate:	
   693                           
   694                           	psect	cstackBANK0
   695  0020                     __pcstackBANK0:	
   696                           ; 0 bytes @ 0xD
   697                           
   698  0020                     ??_isr:	
   699                           
   700                           ; 0 bytes @ 0x0
   701  0020                     	ds	3
   702  0023                     ??_lcd_add:	
   703  0023                     ?_eeprom_write:	
   704                           ; 0 bytes @ 0x3
   705                           
   706  0023                     ??_eeprom_read:	
   707                           ; 0 bytes @ 0x3
   708                           
   709  0023                     ?_RotateMotorLeft:	
   710                           ; 0 bytes @ 0x3
   711                           
   712  0023                     ?_RotateMotorRight:	
   713                           ; 0 bytes @ 0x3
   714                           
   715  0023                     ??_isdigit:	
   716                           ; 0 bytes @ 0x3
   717                           
   718  0023                     ??_nop:	
   719                           ; 0 bytes @ 0x3
   720                           
   721  0023                     ??_Setup_IOports:	
   722                           ; 0 bytes @ 0x3
   723                           
   724  0023                     ??_lcd_init:	
   725                           ; 0 bytes @ 0x3
   726                           
   727  0023                     ??_atod_init:	
   728                           ; 0 bytes @ 0x3
   729                           
   730  0023                     ??_Serial_Init:	
   731                           ; 0 bytes @ 0x3
   732                           
   733  0023                     ??_Serial_Print:	
   734                           ; 0 bytes @ 0x3
   735                           
   736  0023                     ??_Serial_NewLine:	
   737                           ; 0 bytes @ 0x3
   738                           
   739  0023                     ??_enableInterrupt:	
   740                           ; 0 bytes @ 0x3
   741                           
   742  0023                     ??_Timer1_Init:	
   743                           ; 0 bytes @ 0x3
   744                           
   745  0023                     ?___bmul:	
   746                           ; 0 bytes @ 0x3
   747                           
   748  0023                     ?_RowNo:	
   749                           ; 1 bytes @ 0x3
   750                           
   751  0023                     ?_ColomnNo:	
   752                           ; 2 bytes @ 0x3
   753                           
   754  0023                     ?_read_a2d_value:	
   755                           ; 2 bytes @ 0x3
   756                           
   757  0023                     ?___wmul:	
   758                           ; 2 bytes @ 0x3
   759                           
   760  0023                     ?___awmod:	
   761                           ; 2 bytes @ 0x3
   762                           
   763  0023                     ?___lwdiv:	
   764                           ; 2 bytes @ 0x3
   765                           
   766  0023                     ?___ftpack:	
   767                           ; 2 bytes @ 0x3
   768                           
   769  0023                     ?___ltdiv:	
   770                           ; 3 bytes @ 0x3
   771                           
   772  0023                     ?___ltmod:	
   773                           ; 3 bytes @ 0x3
   774                           
   775  0023                     eeprom_read@addr:	
   776                           ; 3 bytes @ 0x3
   777                           
   778  0023                     eeprom_write@value:	
   779                           ; 1 bytes @ 0x3
   780                           
   781  0023                     ___bmul@multiplicand:	
   782                           ; 1 bytes @ 0x3
   783                           
   784  0023                     _isdigit$559:	
   785                           ; 1 bytes @ 0x3
   786                           
   787  0023                     lcd_init@DelayLCD:	
   788                           ; 1 bytes @ 0x3
   789                           
   790  0023                     ColomnNo@rowNo:	
   791                           ; 2 bytes @ 0x3
   792                           
   793  0023                     RotateMotorLeft@value:	
   794                           ; 2 bytes @ 0x3
   795                           
   796  0023                     RotateMotorRight@value:	
   797                           ; 2 bytes @ 0x3
   798                           
   799  0023                     ___wmul@multiplier:	
   800                           ; 2 bytes @ 0x3
   801                           
   802  0023                     ___awmod@divisor:	
   803                           ; 2 bytes @ 0x3
   804                           
   805  0023                     ___lwdiv@divisor:	
   806                           ; 2 bytes @ 0x3
   807                           
   808  0023                     ___ftpack@arg:	
   809                           ; 2 bytes @ 0x3
   810                           
   811  0023                     ___ltdiv@divisor:	
   812                           ; 3 bytes @ 0x3
   813                           
   814  0023                     ___ltmod@divisor:	
   815                           ; 3 bytes @ 0x3
   816                           
   817                           
   818                           ; 3 bytes @ 0x3
   819  0023                     	ds	1
   820  0024                     ?_position:	
   821  0024                     ??_eeprom_write:	
   822                           ; 0 bytes @ 0x4
   823                           
   824  0024                     ??_putch:	
   825                           ; 0 bytes @ 0x4
   826                           
   827  0024                     ??_clr_display:	
   828                           ; 0 bytes @ 0x4
   829                           
   830  0024                     ??___bmul:	
   831                           ; 0 bytes @ 0x4
   832                           
   833  0024                     position@collum:	
   834                           ; 0 bytes @ 0x4
   835                           
   836  0024                     Serial_Print@a:	
   837                           ; 1 bytes @ 0x4
   838                           
   839  0024                     eeprom_write@addr:	
   840                           ; 1 bytes @ 0x4
   841                           
   842  0024                     ___bmul@product:	
   843                           ; 1 bytes @ 0x4
   844                           
   845  0024                     isdigit@c:	
   846                           ; 1 bytes @ 0x4
   847                           
   848                           
   849                           ; 1 bytes @ 0x4
   850  0024                     	ds	1
   851  0025                     ??_position:	
   852  0025                     ??_RowNo:	
   853                           ; 0 bytes @ 0x5
   854                           
   855  0025                     ??_ColomnNo:	
   856                           ; 0 bytes @ 0x5
   857                           
   858  0025                     ??_RotateMotorLeft:	
   859                           ; 0 bytes @ 0x5
   860                           
   861  0025                     ??_RotateMotorRight:	
   862                           ; 0 bytes @ 0x5
   863                           
   864  0025                     ??_read_a2d_value:	
   865                           ; 0 bytes @ 0x5
   866                           
   867  0025                     putch@print_value:	
   868                           ; 0 bytes @ 0x5
   869                           
   870  0025                     ___bmul@multiplier:	
   871                           ; 1 bytes @ 0x5
   872                           
   873  0025                     RowNo@row:	
   874                           ; 1 bytes @ 0x5
   875                           
   876  0025                     ___wmul@multiplicand:	
   877                           ; 2 bytes @ 0x5
   878                           
   879  0025                     ___awmod@dividend:	
   880                           ; 2 bytes @ 0x5
   881                           
   882  0025                     ___lwdiv@dividend:	
   883                           ; 2 bytes @ 0x5
   884                           
   885                           
   886                           ; 2 bytes @ 0x5
   887  0025                     	ds	1
   888  0026                     read_a2d_value@channel:	
   889  0026                     ___ftpack@exp:	
   890                           ; 1 bytes @ 0x6
   891                           
   892  0026                     ___ltdiv@dividend:	
   893                           ; 1 bytes @ 0x6
   894                           
   895  0026                     ___ltmod@dividend:	
   896                           ; 3 bytes @ 0x6
   897                           
   898                           
   899                           ; 3 bytes @ 0x6
   900  0026                     	ds	1
   901  0027                     ??_CheckKeyPad:	
   902  0027                     ??___wmul:	
   903                           ; 0 bytes @ 0x7
   904                           
   905  0027                     ??___awmod:	
   906                           ; 0 bytes @ 0x7
   907                           
   908  0027                     ??___lwdiv:	
   909                           ; 0 bytes @ 0x7
   910                           
   911  0027                     position@post:	
   912                           ; 0 bytes @ 0x7
   913                           
   914  0027                     CheckKeyPad@charactor:	
   915                           ; 1 bytes @ 0x7
   916                           
   917  0027                     ___awmod@counter:	
   918                           ; 1 bytes @ 0x7
   919                           
   920  0027                     ___ftpack@sign:	
   921                           ; 1 bytes @ 0x7
   922                           
   923  0027                     read_a2d_value@a2d_value:	
   924                           ; 1 bytes @ 0x7
   925                           
   926  0027                     RotateMotorLeft@i:	
   927                           ; 2 bytes @ 0x7
   928                           
   929  0027                     RotateMotorRight@i:	
   930                           ; 2 bytes @ 0x7
   931                           
   932  0027                     ___wmul@product:	
   933                           ; 2 bytes @ 0x7
   934                           
   935  0027                     ___lwdiv@quotient:	
   936                           ; 2 bytes @ 0x7
   937                           
   938                           
   939                           ; 2 bytes @ 0x7
   940  0027                     	ds	1
   941  0028                     ??___ftpack:	
   942  0028                     position@row:	
   943                           ; 0 bytes @ 0x8
   944                           
   945  0028                     ___awmod@sign:	
   946                           ; 1 bytes @ 0x8
   947                           
   948  0028                     CheckKeyPad@colomnNo:	
   949                           ; 1 bytes @ 0x8
   950                           
   951                           
   952                           ; 2 bytes @ 0x8
   953  0028                     	ds	1
   954  0029                     ??_Calculate:	
   955  0029                     ??___ltdiv:	
   956                           ; 0 bytes @ 0x9
   957                           
   958  0029                     ??___ltmod:	
   959                           ; 0 bytes @ 0x9
   960                           
   961  0029                     ?___awdiv:	
   962                           ; 0 bytes @ 0x9
   963                           
   964  0029                     ___ltmod@counter:	
   965                           ; 2 bytes @ 0x9
   966                           
   967  0029                     ___lwdiv@counter:	
   968                           ; 1 bytes @ 0x9
   969                           
   970  0029                     ___awdiv@divisor:	
   971                           ; 1 bytes @ 0x9
   972                           
   973  0029                     ___ltdiv@quotient:	
   974                           ; 2 bytes @ 0x9
   975                           
   976                           
   977                           ; 3 bytes @ 0x9
   978  0029                     	ds	1
   979  002A                     ?___lwmod:	
   980  002A                     CheckKeyPad@rowNo:	
   981                           ; 2 bytes @ 0xA
   982                           
   983  002A                     ___lwmod@divisor:	
   984                           ; 2 bytes @ 0xA
   985                           
   986                           
   987                           ; 2 bytes @ 0xA
   988  002A                     	ds	1
   989  002B                     ?___lwtoft:	
   990  002B                     ___awdiv@dividend:	
   991                           ; 3 bytes @ 0xB
   992                           
   993  002B                     ___lwtoft@c:	
   994                           ; 2 bytes @ 0xB
   995                           
   996                           
   997                           ; 2 bytes @ 0xB
   998  002B                     	ds	1
   999  002C                     ___ltdiv@counter:	
  1000  002C                     ___lwmod@dividend:	
  1001                           ; 1 bytes @ 0xC
  1002                           
  1003                           
  1004                           ; 2 bytes @ 0xC
  1005  002C                     	ds	1
  1006  002D                     ??___awdiv:	
  1007  002D                     ___awdiv@counter:	
  1008                           ; 0 bytes @ 0xD
  1009                           
  1010                           
  1011                           ; 1 bytes @ 0xD
  1012  002D                     	ds	1
  1013  002E                     ??___lwmod:	
  1014  002E                     ??___lwtoft:	
  1015                           ; 0 bytes @ 0xE
  1016                           
  1017  002E                     ?___ftmul:	
  1018                           ; 0 bytes @ 0xE
  1019                           
  1020  002E                     ___awdiv@sign:	
  1021                           ; 3 bytes @ 0xE
  1022                           
  1023  002E                     ___lwmod@counter:	
  1024                           ; 1 bytes @ 0xE
  1025                           
  1026  002E                     ___ftmul@f1:	
  1027                           ; 1 bytes @ 0xE
  1028                           
  1029                           
  1030                           ; 3 bytes @ 0xE
  1031  002E                     	ds	1
  1032  002F                     ?_LCD_print_char:	
  1033  002F                     ?_printf:	
  1034                           ; 0 bytes @ 0xF
  1035                           
  1036  002F                     LCD_print_char@row:	
  1037                           ; 2 bytes @ 0xF
  1038                           
  1039  002F                     ___awdiv@quotient:	
  1040                           ; 2 bytes @ 0xF
  1041                           
  1042                           
  1043                           ; 2 bytes @ 0xF
  1044  002F                     	ds	2
  1045  0031                     ??_printf:	
  1046  0031                     ?_Serial_Println_Int:	
  1047                           ; 0 bytes @ 0x11
  1048                           
  1049  0031                     ?_Serial_Print_Int:	
  1050                           ; 1 bit 
  1051                           
  1052  0031                     LCD_print_char@column:	
  1053                           ; 1 bit 
  1054                           
  1055  0031                     Serial_Println_Int@val:	
  1056                           ; 2 bytes @ 0x11
  1057                           
  1058  0031                     Serial_Print_Int@val:	
  1059                           ; 2 bytes @ 0x11
  1060                           
  1061  0031                     ___ftmul@f2:	
  1062                           ; 2 bytes @ 0x11
  1063                           
  1064                           
  1065                           ; 3 bytes @ 0x11
  1066  0031                     	ds	2
  1067  0033                     ??_Serial_Println_Int:	
  1068  0033                     ??_Serial_Print_Int:	
  1069                           ; 0 bytes @ 0x13
  1070                           
  1071  0033                     LCD_print_char@print_value:	
  1072                           ; 0 bytes @ 0x13
  1073                           
  1074                           
  1075                           ; 1 bytes @ 0x13
  1076  0033                     	ds	1
  1077  0034                     ??_CheckMode:	
  1078  0034                     ??_LCD_print_char:	
  1079                           ; 0 bytes @ 0x14
  1080                           
  1081  0034                     ??___ftmul:	
  1082                           ; 0 bytes @ 0x14
  1083                           
  1084  0034                     CheckMode@pressedKey:	
  1085                           ; 0 bytes @ 0x14
  1086                           
  1087  0034                     _printf$348:	
  1088                           ; 1 bytes @ 0x14
  1089                           
  1090                           
  1091                           ; 2 bytes @ 0x14
  1092  0034                     	ds	1
  1093  0035                     ??_LCDTimeUpdate:	
  1094                           
  1095                           ; 0 bytes @ 0x15
  1096  0035                     	ds	1
  1097  0036                     _printf$349:	
  1098                           
  1099                           ; 2 bytes @ 0x16
  1100  0036                     	ds	1
  1101  0037                     ___ftmul@exp:	
  1102                           
  1103                           ; 1 bytes @ 0x17
  1104  0037                     	ds	1
  1105  0038                     printf@cp:	
  1106  0038                     ___ftmul@f3_as_product:	
  1107                           ; 1 bytes @ 0x18
  1108                           
  1109                           
  1110                           ; 3 bytes @ 0x18
  1111  0038                     	ds	1
  1112  0039                     printf@idx:	
  1113                           
  1114                           ; 1 bytes @ 0x19
  1115  0039                     	ds	1
  1116  003A                     _printf$355:	
  1117                           
  1118                           ; 1 bytes @ 0x1A
  1119  003A                     	ds	1
  1120  003B                     ___ftmul@cntr:	
  1121  003B                     printf@len:	
  1122                           ; 1 bytes @ 0x1B
  1123                           
  1124                           
  1125                           ; 2 bytes @ 0x1B
  1126  003B                     	ds	1
  1127  003C                     ___ftmul@sign:	
  1128                           
  1129                           ; 1 bytes @ 0x1C
  1130  003C                     	ds	1
  1131  003D                     ?___fttol:	
  1132  003D                     printf@ap:	
  1133                           ; 4 bytes @ 0x1D
  1134                           
  1135  003D                     ___fttol@f1:	
  1136                           ; 1 bytes @ 0x1D
  1137                           
  1138                           
  1139                           ; 3 bytes @ 0x1D
  1140  003D                     	ds	1
  1141  003E                     printf@val:	
  1142                           
  1143                           ; 2 bytes @ 0x1E
  1144  003E                     	ds	2
  1145  0040                     printf@prec:	
  1146                           
  1147                           ; 1 bytes @ 0x20
  1148  0040                     	ds	1
  1149  0041                     ??___fttol:	
  1150  0041                     printf@f:	
  1151                           ; 0 bytes @ 0x21
  1152                           
  1153                           
  1154                           ; 1 bytes @ 0x21
  1155  0041                     	ds	1
  1156  0042                     printf@width:	
  1157                           
  1158                           ; 2 bytes @ 0x22
  1159  0042                     	ds	2
  1160  0044                     printf@c:	
  1161  0044                     ___fttol@sign1:	
  1162                           ; 1 bytes @ 0x24
  1163                           
  1164                           
  1165                           ; 1 bytes @ 0x24
  1166  0044                     	ds	1
  1167  0045                     printf@flag:	
  1168  0045                     ___fttol@lval:	
  1169                           ; 2 bytes @ 0x25
  1170                           
  1171                           
  1172                           ; 4 bytes @ 0x25
  1173  0045                     	ds	4
  1174  0049                     ___fttol@exp1:	
  1175                           
  1176                           ; 1 bytes @ 0x29
  1177  0049                     	ds	1
  1178  004A                     ??_a2d_read:	
  1179  004A                     ??_main:	
  1180                           ; 0 bytes @ 0x2A
  1181                           
  1182                           
  1183                           ; 0 bytes @ 0x2A
  1184  004A                     	ds	3
  1185                           
  1186                           	psect	maintext
  1187  08D6                     __pmaintext:	
  1188 ;;
  1189 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1190 ;;
  1191 ;; *************** function _main *****************
  1192 ;; Defined at:
  1193 ;;		line 66 in file "Automated Solar Panel Orientation Setter.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;		None
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  abc             2    0        int 
  1198 ;;  pressedKey      1    0        unsigned char 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;		None               void
  1201 ;; Registers used:
  1202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : B00/0
  1205 ;;		On exit  : 300/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1208 ;;      Params:         0       0       0       0       0
  1209 ;;      Locals:         0       0       0       0       0
  1210 ;;      Temps:          0       3       0       0       0
  1211 ;;      Totals:         0       3       0       0       0
  1212 ;;Total ram usage:        3 bytes
  1213 ;; Hardware stack levels required when called:    9
  1214 ;; This function calls:
  1215 ;;		_Calculate
  1216 ;;		_CheckMode
  1217 ;;		_LCDTimeUpdate
  1218 ;;		_LCD_print_char
  1219 ;;		_Serial_Init
  1220 ;;		_Serial_NewLine
  1221 ;;		_Serial_Print
  1222 ;;		_Serial_Print_Int
  1223 ;;		_Setup_IOports
  1224 ;;		_Timer1_Init
  1225 ;;		___ltdiv
  1226 ;;		___ltmod
  1227 ;;		_a2d_read
  1228 ;;		_atod_init
  1229 ;;		_clr_display
  1230 ;;		_eeprom_read
  1231 ;;		_eeprom_write
  1232 ;;		_enableInterrupt
  1233 ;;		_lcd_init
  1234 ;;		_nop
  1235 ;;		_position
  1236 ;;		_printf
  1237 ;; This function is called by:
  1238 ;;		Startup code after reset
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           
  1243                           ;psect for function _main
  1244  08D6                     _main:	
  1245                           
  1246                           ;Automated Solar Panel Orientation Setter.c: 68: char pressedKey;
  1247                           ;Automated Solar Panel Orientation Setter.c: 70: Setup_IOports();
  1248                           
  1249                           ;incstack = 0
  1250 ;; hardware stack exceeded
  1251                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1252  08D6  160A  118A  201A  120A  158A  	fcall	_Setup_IOports
  1253                           
  1254                           ;Automated Solar Panel Orientation Setter.c: 73: atod_init();
  1255  08DB  160A  158A  26FD  120A  158A  	fcall	_atod_init
  1256                           
  1257                           ;Automated Solar Panel Orientation Setter.c: 77: lcd_init();
  1258  08E0  120A  118A  2797  120A  158A  	fcall	_lcd_init
  1259                           
  1260                           ;Automated Solar Panel Orientation Setter.c: 78: clr_display();
  1261  08E5  160A  118A  2034  120A  158A  	fcall	_clr_display
  1262                           
  1263                           ;Automated Solar Panel Orientation Setter.c: 80: Serial_Init();
  1264  08EA  120A  158A  2015  120A  158A  	fcall	_Serial_Init
  1265                           
  1266                           ;Automated Solar Panel Orientation Setter.c: 81: Timer1_Init();
  1267  08EF  160A  158A  270B  120A  158A  	fcall	_Timer1_Init
  1268                           
  1269                           ;Automated Solar Panel Orientation Setter.c: 82: enableInterrupt();
  1270  08F4  120A  158A  2004  120A  158A  	fcall	_enableInterrupt
  1271                           
  1272                           ;Automated Solar Panel Orientation Setter.c: 86: lcd_init();
  1273  08F9  120A  118A  2797  120A  158A  	fcall	_lcd_init
  1274                           
  1275                           ;Automated Solar Panel Orientation Setter.c: 87: clr_display();
  1276  08FE  160A  118A  2034  120A  158A  	fcall	_clr_display
  1277                           
  1278                           ;Automated Solar Panel Orientation Setter.c: 89: printf("Body Temperature ");
  1279  0903  3069               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1280  0904  160A  118A  241E  120A  158A  	fcall	_printf
  1281  0909  3002               	movlw	2
  1282                           
  1283                           ;Automated Solar Panel Orientation Setter.c: 90: position(2,1);
  1284  090A  01A4               	clrf	position@collum
  1285  090B  0AA4               	incf	position@collum,f
  1286  090C  160A  118A  21D1  120A  158A  	fcall	_position
  1287                           
  1288                           ;Automated Solar Panel Orientation Setter.c: 91: printf(" and Heart Rate  ");
  1289  0911  3057               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1290  0912  160A  118A  241E  120A  158A  	fcall	_printf
  1291                           
  1292                           ;Automated Solar Panel Orientation Setter.c: 92: _delay((unsigned long)((1000)*(4000000/
      +                          4000.0)));
  1293  0917  3006               	movlw	6
  1294  0918  00CC               	movwf	??_main+2
  1295  0919  3013               	movlw	19
  1296  091A  00CB               	movwf	??_main+1
  1297  091B  30B1               	movlw	177
  1298  091C  00CA               	movwf	??_main
  1299  091D                     u6437:	
  1300  091D  0BCA               	decfsz	??_main,f
  1301  091E  291D               	goto	u6437
  1302  091F  0BCB               	decfsz	??_main+1,f
  1303  0920  291D               	goto	u6437
  1304  0921  0BCC               	decfsz	??_main+2,f
  1305  0922  291D               	goto	u6437
  1306  0923  2924               	nop2
  1307                           
  1308                           ;Automated Solar Panel Orientation Setter.c: 93: position(1,1);
  1309  0924  1283               	bcf	3,5	;RP0=0, select bank0
  1310  0925  1303               	bcf	3,6	;RP1=0, select bank0
  1311  0926  3001               	movlw	1
  1312  0927  01A4               	clrf	position@collum
  1313  0928  0AA4               	incf	position@collum,f
  1314  0929  160A  118A  21D1  120A  158A  	fcall	_position
  1315                           
  1316                           ;Automated Solar Panel Orientation Setter.c: 94: printf("    Monitoring   ");
  1317  092E  3045               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1318  092F  160A  118A  241E  120A  158A  	fcall	_printf
  1319  0934  3002               	movlw	2
  1320                           
  1321                           ;Automated Solar Panel Orientation Setter.c: 95: position(2,1);
  1322  0935  01A4               	clrf	position@collum
  1323  0936  0AA4               	incf	position@collum,f
  1324  0937  160A  118A  21D1  120A  158A  	fcall	_position
  1325                           
  1326                           ;Automated Solar Panel Orientation Setter.c: 96: printf("      System     ");
  1327  093C  3033               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1328  093D  160A  118A  241E  120A  158A  	fcall	_printf
  1329                           
  1330                           ;Automated Solar Panel Orientation Setter.c: 97: _delay((unsigned long)((1000)*(4000000/
      +                          4000.0)));
  1331  0942  3006               	movlw	6
  1332  0943  00CC               	movwf	??_main+2
  1333  0944  3013               	movlw	19
  1334  0945  00CB               	movwf	??_main+1
  1335  0946  30B1               	movlw	177
  1336  0947  00CA               	movwf	??_main
  1337  0948                     u6447:	
  1338  0948  0BCA               	decfsz	??_main,f
  1339  0949  2948               	goto	u6447
  1340  094A  0BCB               	decfsz	??_main+1,f
  1341  094B  2948               	goto	u6447
  1342  094C  0BCC               	decfsz	??_main+2,f
  1343  094D  2948               	goto	u6447
  1344  094E  294F               	nop2
  1345                           
  1346                           ;Automated Solar Panel Orientation Setter.c: 98: position(1,1);
  1347  094F  1283               	bcf	3,5	;RP0=0, select bank0
  1348  0950  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0951  3001               	movlw	1
  1350  0952  01A4               	clrf	position@collum
  1351  0953  0AA4               	incf	position@collum,f
  1352  0954  160A  118A  21D1  120A  158A  	fcall	_position
  1353                           
  1354                           ;Automated Solar Panel Orientation Setter.c: 99: printf("       for      ");
  1355  0959  309D               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1356  095A  160A  118A  241E  120A  158A  	fcall	_printf
  1357  095F  3002               	movlw	2
  1358                           
  1359                           ;Automated Solar Panel Orientation Setter.c: 100: position(2,1);
  1360  0960  01A4               	clrf	position@collum
  1361  0961  0AA4               	incf	position@collum,f
  1362  0962  160A  118A  21D1  120A  158A  	fcall	_position
  1363                           
  1364                           ;Automated Solar Panel Orientation Setter.c: 101: printf("    Patients    ");
  1365  0967  30AE               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1366  0968  160A  118A  241E  120A  158A  	fcall	_printf
  1367                           
  1368                           ;Automated Solar Panel Orientation Setter.c: 102: _delay((unsigned long)((1000)*(4000000
      +                          /4000.0)));
  1369  096D  3006               	movlw	6
  1370  096E  00CC               	movwf	??_main+2
  1371  096F  3013               	movlw	19
  1372  0970  00CB               	movwf	??_main+1
  1373  0971  30B1               	movlw	177
  1374  0972  00CA               	movwf	??_main
  1375  0973                     u6457:	
  1376  0973  0BCA               	decfsz	??_main,f
  1377  0974  2973               	goto	u6457
  1378  0975  0BCB               	decfsz	??_main+1,f
  1379  0976  2973               	goto	u6457
  1380  0977  0BCC               	decfsz	??_main+2,f
  1381  0978  2973               	goto	u6457
  1382  0979  297A               	nop2
  1383                           
  1384                           ;Automated Solar Panel Orientation Setter.c: 103: position(1,1);
  1385  097A  1283               	bcf	3,5	;RP0=0, select bank0
  1386  097B  1303               	bcf	3,6	;RP1=0, select bank0
  1387  097C  3001               	movlw	1
  1388  097D  01A4               	clrf	position@collum
  1389  097E  0AA4               	incf	position@collum,f
  1390  097F  160A  118A  21D1  120A  158A  	fcall	_position
  1391                           
  1392                           ;Automated Solar Panel Orientation Setter.c: 104: printf("H:  62PPM Low   ",HeartRate);
  1393  0984  1283               	bcf	3,5	;RP0=0, select bank0
  1394  0985  1303               	bcf	3,6	;RP1=0, select bank0
  1395  0986  30D0               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1396  0987  01AF               	clrf	?_printf
  1397  0988  01B0               	clrf	?_printf+1
  1398  0989  160A  118A  241E  120A  158A  	fcall	_printf
  1399  098E  3002               	movlw	2
  1400                           
  1401                           ;Automated Solar Panel Orientation Setter.c: 105: position(2,1);
  1402  098F  01A4               	clrf	position@collum
  1403  0990  0AA4               	incf	position@collum,f
  1404  0991  160A  118A  21D1  120A  158A  	fcall	_position
  1405                           
  1406                           ;Automated Solar Panel Orientation Setter.c: 106: printf("T:  84F   Low   ",analogReadVa
      +                          l);
  1407  0996  1283               	bcf	3,5	;RP0=0, select bank0
  1408  0997  1303               	bcf	3,6	;RP1=0, select bank0
  1409  0998  30BF               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1410  0999  01AF               	clrf	?_printf
  1411  099A  01B0               	clrf	?_printf+1
  1412  099B  160A  118A  241E  120A  158A  	fcall	_printf
  1413                           
  1414                           ;Automated Solar Panel Orientation Setter.c: 110: clr_display();
  1415  09A0  160A  118A  2034  120A  158A  	fcall	_clr_display
  1416                           
  1417                           ;Automated Solar Panel Orientation Setter.c: 111: state = 91;
  1418  09A5  305B               	movlw	91
  1419  09A6  00E0               	movwf	_state
  1420                           
  1421                           ;Automated Solar Panel Orientation Setter.c: 114: _delay((unsigned long)((20)*(4000000/4
      +                          000.0)));
  1422  09A7  301A               	movlw	26
  1423  09A8  00CB               	movwf	??_main+1
  1424  09A9  30F8               	movlw	248
  1425  09AA  00CA               	movwf	??_main
  1426  09AB                     u6467:	
  1427  09AB  0BCA               	decfsz	??_main,f
  1428  09AC  29AB               	goto	u6467
  1429  09AD  0BCB               	decfsz	??_main+1,f
  1430  09AE  29AB               	goto	u6467
  1431  09AF  0000               	nop
  1432                           
  1433                           ;Automated Solar Panel Orientation Setter.c: 115: eeprom_write(0x01, 0x2A );
  1434  09B0  302A               	movlw	42
  1435  09B1  1283               	bcf	3,5	;RP0=0, select bank0
  1436  09B2  1303               	bcf	3,6	;RP1=0, select bank0
  1437  09B3  00A3               	movwf	eeprom_write@value
  1438  09B4  3001               	movlw	1
  1439  09B5  120A  158A  204D  120A  158A  	fcall	_eeprom_write
  1440                           
  1441                           ;Automated Solar Panel Orientation Setter.c: 116: int abc = eeprom_read(0x00);
  1442  09BA  3000               	movlw	0
  1443  09BB  120A  158A  2031  120A  158A  	fcall	_eeprom_read
  1444                           
  1445                           ;Automated Solar Panel Orientation Setter.c: 117: nop();
  1446  09C0  120A  118A  20B6  120A  158A  	fcall	_nop
  1447                           
  1448                           ;Automated Solar Panel Orientation Setter.c: 118: LCDTimeUpdate();
  1449  09C5  160A  118A  2050  120A  158A  	fcall	_LCDTimeUpdate
  1450  09CA  2FD8               	goto	l5156
  1451  09CB                     l5084:	
  1452                           
  1453                           ;Automated Solar Panel Orientation Setter.c: 129: state = 91;
  1454  09CB  305B               	movlw	91
  1455  09CC  2FD7               	goto	L5
  1456  09CD                     l5086:	
  1457                           ;Automated Solar Panel Orientation Setter.c: 130: break;
  1458                           
  1459                           
  1460                           ;Automated Solar Panel Orientation Setter.c: 132: state = 92;
  1461  09CD  305C               	movlw	92
  1462  09CE  2FD7               	goto	L5
  1463  09CF                     l5088:	
  1464                           ;Automated Solar Panel Orientation Setter.c: 133: break;
  1465                           
  1466                           
  1467                           ;Automated Solar Panel Orientation Setter.c: 135: state = 93;
  1468  09CF  305D               	movlw	93
  1469  09D0  2FD7               	goto	L5
  1470  09D1                     l5090:	
  1471                           ;Automated Solar Panel Orientation Setter.c: 136: break;
  1472                           
  1473  09D1  304D               	movlw	77
  1474                           
  1475                           ;Automated Solar Panel Orientation Setter.c: 145: LCD_print_char(1,1,'M');
  1476  09D2  01AF               	clrf	LCD_print_char@row
  1477  09D3  0AAF               	incf	LCD_print_char@row,f
  1478  09D4  01B0               	clrf	LCD_print_char@row+1
  1479  09D5  01B1               	clrf	LCD_print_char@column
  1480  09D6  0AB1               	incf	LCD_print_char@column,f
  1481  09D7  01B2               	clrf	LCD_print_char@column+1
  1482  09D8  00B3               	movwf	LCD_print_char@print_value
  1483  09D9  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1484                           
  1485                           ;Automated Solar Panel Orientation Setter.c: 146: LCD_print_char(1,2,'O');
  1486  09DE  1283               	bcf	3,5	;RP0=0, select bank0
  1487  09DF  1303               	bcf	3,6	;RP1=0, select bank0
  1488  09E0  3002               	movlw	2
  1489  09E1  01AF               	clrf	LCD_print_char@row
  1490  09E2  0AAF               	incf	LCD_print_char@row,f
  1491  09E3  01B0               	clrf	LCD_print_char@row+1
  1492  09E4  00B1               	movwf	LCD_print_char@column
  1493  09E5  304F               	movlw	79
  1494  09E6  01B2               	clrf	LCD_print_char@column+1
  1495  09E7  00B3               	movwf	LCD_print_char@print_value
  1496  09E8  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1497                           
  1498                           ;Automated Solar Panel Orientation Setter.c: 147: LCD_print_char(1,3,'D');
  1499  09ED  1283               	bcf	3,5	;RP0=0, select bank0
  1500  09EE  1303               	bcf	3,6	;RP1=0, select bank0
  1501  09EF  3003               	movlw	3
  1502  09F0  01AF               	clrf	LCD_print_char@row
  1503  09F1  0AAF               	incf	LCD_print_char@row,f
  1504  09F2  01B0               	clrf	LCD_print_char@row+1
  1505  09F3  00B1               	movwf	LCD_print_char@column
  1506  09F4  3044               	movlw	68
  1507  09F5  01B2               	clrf	LCD_print_char@column+1
  1508  09F6  00B3               	movwf	LCD_print_char@print_value
  1509  09F7  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1510                           
  1511                           ;Automated Solar Panel Orientation Setter.c: 148: LCD_print_char(1,4,'E');
  1512  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  1513  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  1514  09FE  3004               	movlw	4
  1515  09FF  01AF               	clrf	LCD_print_char@row
  1516  0A00  0AAF               	incf	LCD_print_char@row,f
  1517  0A01  01B0               	clrf	LCD_print_char@row+1
  1518  0A02  00B1               	movwf	LCD_print_char@column
  1519  0A03  3045               	movlw	69
  1520  0A04  01B2               	clrf	LCD_print_char@column+1
  1521  0A05  00B3               	movwf	LCD_print_char@print_value
  1522  0A06  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1523                           
  1524                           ;Automated Solar Panel Orientation Setter.c: 150: LCD_print_char(1,6,',');
  1525  0A0B  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0A0C  1303               	bcf	3,6	;RP1=0, select bank0
  1527  0A0D  3006               	movlw	6
  1528  0A0E  01AF               	clrf	LCD_print_char@row
  1529  0A0F  0AAF               	incf	LCD_print_char@row,f
  1530  0A10  01B0               	clrf	LCD_print_char@row+1
  1531  0A11  00B1               	movwf	LCD_print_char@column
  1532  0A12  302C               	movlw	44
  1533  0A13  01B2               	clrf	LCD_print_char@column+1
  1534  0A14  00B3               	movwf	LCD_print_char@print_value
  1535  0A15  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1536                           
  1537                           ;Automated Solar Panel Orientation Setter.c: 151: LCD_print_char(1,10,'D');
  1538  0A1A  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0A1B  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0A1C  300A               	movlw	10
  1541  0A1D  01AF               	clrf	LCD_print_char@row
  1542  0A1E  0AAF               	incf	LCD_print_char@row,f
  1543  0A1F  01B0               	clrf	LCD_print_char@row+1
  1544  0A20  00B1               	movwf	LCD_print_char@column
  1545  0A21  3044               	movlw	68
  1546  0A22  01B2               	clrf	LCD_print_char@column+1
  1547  0A23  00B3               	movwf	LCD_print_char@print_value
  1548  0A24  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1549                           
  1550                           ;Automated Solar Panel Orientation Setter.c: 152: LCD_print_char(1,11,',');
  1551  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  1552  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  1553  0A2B  300B               	movlw	11
  1554  0A2C  01AF               	clrf	LCD_print_char@row
  1555  0A2D  0AAF               	incf	LCD_print_char@row,f
  1556  0A2E  01B0               	clrf	LCD_print_char@row+1
  1557  0A2F  00B1               	movwf	LCD_print_char@column
  1558  0A30  302C               	movlw	44
  1559  0A31  01B2               	clrf	LCD_print_char@column+1
  1560  0A32  00B3               	movwf	LCD_print_char@print_value
  1561  0A33  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1562                           
  1563                           ;Automated Solar Panel Orientation Setter.c: 154: LCD_print_char(2,3,'.');
  1564  0A38  3002               	movlw	2
  1565  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  1566  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  1567  0A3B  00AF               	movwf	LCD_print_char@row
  1568  0A3C  3003               	movlw	3
  1569  0A3D  01B0               	clrf	LCD_print_char@row+1
  1570  0A3E  00B1               	movwf	LCD_print_char@column
  1571  0A3F  302E               	movlw	46
  1572  0A40  01B2               	clrf	LCD_print_char@column+1
  1573  0A41  00B3               	movwf	LCD_print_char@print_value
  1574  0A42  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1575                           
  1576                           ;Automated Solar Panel Orientation Setter.c: 155: LCD_print_char(2,5,'V');
  1577  0A47  3002               	movlw	2
  1578  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  1579  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  1580  0A4A  00AF               	movwf	LCD_print_char@row
  1581  0A4B  3005               	movlw	5
  1582  0A4C  01B0               	clrf	LCD_print_char@row+1
  1583  0A4D  00B1               	movwf	LCD_print_char@column
  1584  0A4E  3056               	movlw	86
  1585  0A4F  01B2               	clrf	LCD_print_char@column+1
  1586  0A50  00B3               	movwf	LCD_print_char@print_value
  1587  0A51  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1588                           
  1589                           ;Automated Solar Panel Orientation Setter.c: 156: LCD_print_char(2,6,',');
  1590  0A56  3002               	movlw	2
  1591  0A57  1283               	bcf	3,5	;RP0=0, select bank0
  1592  0A58  1303               	bcf	3,6	;RP1=0, select bank0
  1593  0A59  00AF               	movwf	LCD_print_char@row
  1594  0A5A  3006               	movlw	6
  1595  0A5B  01B0               	clrf	LCD_print_char@row+1
  1596  0A5C  00B1               	movwf	LCD_print_char@column
  1597  0A5D  302C               	movlw	44
  1598  0A5E  01B2               	clrf	LCD_print_char@column+1
  1599  0A5F  00B3               	movwf	LCD_print_char@print_value
  1600  0A60  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1601                           
  1602                           ;Automated Solar Panel Orientation Setter.c: 157: LCD_print_char(2,8,'.');
  1603  0A65  3002               	movlw	2
  1604  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  1605  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  1606  0A68  00AF               	movwf	LCD_print_char@row
  1607  0A69  3008               	movlw	8
  1608  0A6A  01B0               	clrf	LCD_print_char@row+1
  1609  0A6B  00B1               	movwf	LCD_print_char@column
  1610  0A6C  302E               	movlw	46
  1611  0A6D  01B2               	clrf	LCD_print_char@column+1
  1612  0A6E  00B3               	movwf	LCD_print_char@print_value
  1613  0A6F  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1614                           
  1615                           ;Automated Solar Panel Orientation Setter.c: 158: LCD_print_char(2,10,'A');
  1616  0A74  3002               	movlw	2
  1617  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  1618  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  1619  0A77  00AF               	movwf	LCD_print_char@row
  1620  0A78  300A               	movlw	10
  1621  0A79  01B0               	clrf	LCD_print_char@row+1
  1622  0A7A  00B1               	movwf	LCD_print_char@column
  1623  0A7B  3041               	movlw	65
  1624  0A7C  01B2               	clrf	LCD_print_char@column+1
  1625  0A7D  00B3               	movwf	LCD_print_char@print_value
  1626  0A7E  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1627                           
  1628                           ;Automated Solar Panel Orientation Setter.c: 159: LCD_print_char(2,11,',');
  1629  0A83  3002               	movlw	2
  1630  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  1631  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  1632  0A86  00AF               	movwf	LCD_print_char@row
  1633  0A87  300B               	movlw	11
  1634  0A88  01B0               	clrf	LCD_print_char@row+1
  1635  0A89  00B1               	movwf	LCD_print_char@column
  1636  0A8A  302C               	movlw	44
  1637  0A8B  01B2               	clrf	LCD_print_char@column+1
  1638  0A8C  00B3               	movwf	LCD_print_char@print_value
  1639  0A8D  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1640                           
  1641                           ;Automated Solar Panel Orientation Setter.c: 160: LCD_print_char(2,14,'.');
  1642  0A92  3002               	movlw	2
  1643  0A93  1283               	bcf	3,5	;RP0=0, select bank0
  1644  0A94  1303               	bcf	3,6	;RP1=0, select bank0
  1645  0A95  00AF               	movwf	LCD_print_char@row
  1646  0A96  300E               	movlw	14
  1647  0A97  01B0               	clrf	LCD_print_char@row+1
  1648  0A98  00B1               	movwf	LCD_print_char@column
  1649  0A99  302E               	movlw	46
  1650  0A9A  01B2               	clrf	LCD_print_char@column+1
  1651  0A9B  00B3               	movwf	LCD_print_char@print_value
  1652  0A9C  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1653                           
  1654                           ;Automated Solar Panel Orientation Setter.c: 161: LCD_print_char(2,16,'W');
  1655  0AA1  3002               	movlw	2
  1656  0AA2  1283               	bcf	3,5	;RP0=0, select bank0
  1657  0AA3  1303               	bcf	3,6	;RP1=0, select bank0
  1658  0AA4  00AF               	movwf	LCD_print_char@row
  1659  0AA5  3010               	movlw	16
  1660  0AA6  01B0               	clrf	LCD_print_char@row+1
  1661  0AA7  00B1               	movwf	LCD_print_char@column
  1662  0AA8  3057               	movlw	87
  1663  0AA9  01B2               	clrf	LCD_print_char@column+1
  1664  0AAA  00B3               	movwf	LCD_print_char@print_value
  1665  0AAB  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1666                           
  1667                           ;Automated Solar Panel Orientation Setter.c: 164: LCD_print_char(1,5,'1');
  1668  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  1669  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  1670  0AB2  3005               	movlw	5
  1671  0AB3  01AF               	clrf	LCD_print_char@row
  1672  0AB4  0AAF               	incf	LCD_print_char@row,f
  1673  0AB5  01B0               	clrf	LCD_print_char@row+1
  1674  0AB6  00B1               	movwf	LCD_print_char@column
  1675  0AB7  3031               	movlw	49
  1676  0AB8  01B2               	clrf	LCD_print_char@column+1
  1677  0AB9  00B3               	movwf	LCD_print_char@print_value
  1678  0ABA  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1679                           
  1680                           ;Automated Solar Panel Orientation Setter.c: 166: LCD_print_char(1,7,'0');
  1681  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
  1682  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
  1683  0AC1  3007               	movlw	7
  1684  0AC2  01AF               	clrf	LCD_print_char@row
  1685  0AC3  0AAF               	incf	LCD_print_char@row,f
  1686  0AC4  01B0               	clrf	LCD_print_char@row+1
  1687  0AC5  00B1               	movwf	LCD_print_char@column
  1688  0AC6  3030               	movlw	48
  1689  0AC7  01B2               	clrf	LCD_print_char@column+1
  1690  0AC8  00B3               	movwf	LCD_print_char@print_value
  1691  0AC9  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1692                           
  1693                           ;Automated Solar Panel Orientation Setter.c: 167: LCD_print_char(1,8,'0');
  1694  0ACE  1283               	bcf	3,5	;RP0=0, select bank0
  1695  0ACF  1303               	bcf	3,6	;RP1=0, select bank0
  1696  0AD0  3008               	movlw	8
  1697  0AD1  01AF               	clrf	LCD_print_char@row
  1698  0AD2  0AAF               	incf	LCD_print_char@row,f
  1699  0AD3  01B0               	clrf	LCD_print_char@row+1
  1700  0AD4  00B1               	movwf	LCD_print_char@column
  1701  0AD5  3030               	movlw	48
  1702  0AD6  01B2               	clrf	LCD_print_char@column+1
  1703  0AD7  00B3               	movwf	LCD_print_char@print_value
  1704  0AD8  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1705                           
  1706                           ;Automated Solar Panel Orientation Setter.c: 168: LCD_print_char(1,9,'0');
  1707  0ADD  1283               	bcf	3,5	;RP0=0, select bank0
  1708  0ADE  1303               	bcf	3,6	;RP1=0, select bank0
  1709  0ADF  3009               	movlw	9
  1710  0AE0  01AF               	clrf	LCD_print_char@row
  1711  0AE1  0AAF               	incf	LCD_print_char@row,f
  1712  0AE2  01B0               	clrf	LCD_print_char@row+1
  1713  0AE3  00B1               	movwf	LCD_print_char@column
  1714  0AE4  3030               	movlw	48
  1715  0AE5  01B2               	clrf	LCD_print_char@column+1
  1716  0AE6  00B3               	movwf	LCD_print_char@print_value
  1717  0AE7  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1718                           
  1719                           ;Automated Solar Panel Orientation Setter.c: 170: LCD_print_char(2,1,'0');
  1720  0AEC  3002               	movlw	2
  1721  0AED  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0AEE  1303               	bcf	3,6	;RP1=0, select bank0
  1723  0AEF  00AF               	movwf	LCD_print_char@row
  1724  0AF0  3030               	movlw	48
  1725  0AF1  01B0               	clrf	LCD_print_char@row+1
  1726  0AF2  01B1               	clrf	LCD_print_char@column
  1727  0AF3  0AB1               	incf	LCD_print_char@column,f
  1728  0AF4  01B2               	clrf	LCD_print_char@column+1
  1729  0AF5  00B3               	movwf	LCD_print_char@print_value
  1730  0AF6  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1731                           
  1732                           ;Automated Solar Panel Orientation Setter.c: 171: LCD_print_char(2,2,'0');
  1733  0AFB  3002               	movlw	2
  1734  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  1735  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  1736  0AFE  00AF               	movwf	LCD_print_char@row
  1737  0AFF  01B0               	clrf	LCD_print_char@row+1
  1738  0B00  00B1               	movwf	LCD_print_char@column
  1739  0B01  3030               	movlw	48
  1740  0B02  01B2               	clrf	LCD_print_char@column+1
  1741  0B03  00B3               	movwf	LCD_print_char@print_value
  1742  0B04  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1743                           
  1744                           ;Automated Solar Panel Orientation Setter.c: 172: LCD_print_char(2,4,'0');
  1745  0B09  3002               	movlw	2
  1746  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  1747  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  1748  0B0C  00AF               	movwf	LCD_print_char@row
  1749  0B0D  3004               	movlw	4
  1750  0B0E  01B0               	clrf	LCD_print_char@row+1
  1751  0B0F  00B1               	movwf	LCD_print_char@column
  1752  0B10  3030               	movlw	48
  1753  0B11  01B2               	clrf	LCD_print_char@column+1
  1754  0B12  00B3               	movwf	LCD_print_char@print_value
  1755  0B13  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1756                           
  1757                           ;Automated Solar Panel Orientation Setter.c: 174: LCD_print_char(2,7,'0');
  1758  0B18  3002               	movlw	2
  1759  0B19  1283               	bcf	3,5	;RP0=0, select bank0
  1760  0B1A  1303               	bcf	3,6	;RP1=0, select bank0
  1761  0B1B  00AF               	movwf	LCD_print_char@row
  1762  0B1C  3007               	movlw	7
  1763  0B1D  01B0               	clrf	LCD_print_char@row+1
  1764  0B1E  00B1               	movwf	LCD_print_char@column
  1765  0B1F  3030               	movlw	48
  1766  0B20  01B2               	clrf	LCD_print_char@column+1
  1767  0B21  00B3               	movwf	LCD_print_char@print_value
  1768  0B22  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1769                           
  1770                           ;Automated Solar Panel Orientation Setter.c: 175: LCD_print_char(2,9,'0');
  1771  0B27  3002               	movlw	2
  1772  0B28  1283               	bcf	3,5	;RP0=0, select bank0
  1773  0B29  1303               	bcf	3,6	;RP1=0, select bank0
  1774  0B2A  00AF               	movwf	LCD_print_char@row
  1775  0B2B  3009               	movlw	9
  1776  0B2C  01B0               	clrf	LCD_print_char@row+1
  1777  0B2D  00B1               	movwf	LCD_print_char@column
  1778  0B2E  3030               	movlw	48
  1779  0B2F  01B2               	clrf	LCD_print_char@column+1
  1780  0B30  00B3               	movwf	LCD_print_char@print_value
  1781  0B31  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1782                           
  1783                           ;Automated Solar Panel Orientation Setter.c: 177: LCD_print_char(2,12,'0');
  1784  0B36  3002               	movlw	2
  1785  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  1787  0B39  00AF               	movwf	LCD_print_char@row
  1788  0B3A  300C               	movlw	12
  1789  0B3B  01B0               	clrf	LCD_print_char@row+1
  1790  0B3C  00B1               	movwf	LCD_print_char@column
  1791  0B3D  3030               	movlw	48
  1792  0B3E  01B2               	clrf	LCD_print_char@column+1
  1793  0B3F  00B3               	movwf	LCD_print_char@print_value
  1794  0B40  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1795                           
  1796                           ;Automated Solar Panel Orientation Setter.c: 178: LCD_print_char(2,13,'0');
  1797  0B45  3002               	movlw	2
  1798  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  1799  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  1800  0B48  00AF               	movwf	LCD_print_char@row
  1801  0B49  300D               	movlw	13
  1802  0B4A  01B0               	clrf	LCD_print_char@row+1
  1803  0B4B  00B1               	movwf	LCD_print_char@column
  1804  0B4C  3030               	movlw	48
  1805  0B4D  01B2               	clrf	LCD_print_char@column+1
  1806  0B4E  00B3               	movwf	LCD_print_char@print_value
  1807  0B4F  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1808                           
  1809                           ;Automated Solar Panel Orientation Setter.c: 179: LCD_print_char(2,15,'0');
  1810  0B54  3002               	movlw	2
  1811  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0B57  00AF               	movwf	LCD_print_char@row
  1814  0B58  300F               	movlw	15
  1815  0B59  01B0               	clrf	LCD_print_char@row+1
  1816  0B5A  00B1               	movwf	LCD_print_char@column
  1817  0B5B  3030               	movlw	48
  1818  0B5C  01B2               	clrf	LCD_print_char@column+1
  1819  0B5D  00B3               	movwf	LCD_print_char@print_value
  1820  0B5E  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1821                           
  1822                           ;Automated Solar Panel Orientation Setter.c: 182: state = 10;
  1823  0B63  300A               	movlw	10
  1824  0B64  2FD5               	goto	L6
  1825  0B65                     l5094:	
  1826                           ;Automated Solar Panel Orientation Setter.c: 183: break;
  1827                           
  1828                           
  1829                           ;Automated Solar Panel Orientation Setter.c: 186: a2d_read();
  1830  0B65  120A  118A  227A  120A  158A  	fcall	_a2d_read
  1831                           
  1832                           ;Automated Solar Panel Orientation Setter.c: 188: Serial_Print_Int(ldr1);
  1833  0B6A  0855               	movf	_ldr1+1,w
  1834  0B6B  00B2               	movwf	Serial_Print_Int@val+1
  1835  0B6C  0854               	movf	_ldr1,w
  1836  0B6D  00B1               	movwf	Serial_Print_Int@val
  1837  0B6E  120A  118A  2314  120A  158A  	fcall	_Serial_Print_Int
  1838                           
  1839                           ;Automated Solar Panel Orientation Setter.c: 189: Serial_Print(", ");
  1840  0B73  30E1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1841  0B74  120A  118A  225B  120A  158A  	fcall	_Serial_Print
  1842                           
  1843                           ;Automated Solar Panel Orientation Setter.c: 190: Serial_Print_Int(ldr2);
  1844  0B79  0857               	movf	_ldr2+1,w
  1845  0B7A  00B2               	movwf	Serial_Print_Int@val+1
  1846  0B7B  0856               	movf	_ldr2,w
  1847  0B7C  00B1               	movwf	Serial_Print_Int@val
  1848  0B7D  120A  118A  2314  120A  158A  	fcall	_Serial_Print_Int
  1849                           
  1850                           ;Automated Solar Panel Orientation Setter.c: 191: Serial_Print(", ");
  1851  0B82  30E1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1852  0B83  120A  118A  225B  120A  158A  	fcall	_Serial_Print
  1853                           
  1854                           ;Automated Solar Panel Orientation Setter.c: 192: Serial_Print_Int(V_Bat);
  1855  0B88  0865               	movf	_V_Bat+1,w
  1856  0B89  00B2               	movwf	Serial_Print_Int@val+1
  1857  0B8A  0864               	movf	_V_Bat,w
  1858  0B8B  00B1               	movwf	Serial_Print_Int@val
  1859  0B8C  120A  118A  2314  120A  158A  	fcall	_Serial_Print_Int
  1860                           
  1861                           ;Automated Solar Panel Orientation Setter.c: 193: Serial_Print(", ");
  1862  0B91  30E1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1863  0B92  120A  118A  225B  120A  158A  	fcall	_Serial_Print
  1864                           
  1865                           ;Automated Solar Panel Orientation Setter.c: 194: Serial_Print_Int(C_Bat);
  1866  0B97  0863               	movf	_C_Bat+1,w
  1867  0B98  00B2               	movwf	Serial_Print_Int@val+1
  1868  0B99  0862               	movf	_C_Bat,w
  1869  0B9A  00B1               	movwf	Serial_Print_Int@val
  1870  0B9B  120A  118A  2314  120A  158A  	fcall	_Serial_Print_Int
  1871                           
  1872                           ;Automated Solar Panel Orientation Setter.c: 195: Serial_Print(", ");
  1873  0BA0  30E1               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1874  0BA1  120A  118A  225B  120A  158A  	fcall	_Serial_Print
  1875                           
  1876                           ;Automated Solar Panel Orientation Setter.c: 196: Serial_NewLine();
  1877  0BA6  160A  118A  2001  120A  158A  	fcall	_Serial_NewLine
  1878                           
  1879                           ;Automated Solar Panel Orientation Setter.c: 197: _delay((unsigned long)((50)*(4000000/4
      +                          000.0)));
  1880  0BAB  3041               	movlw	65
  1881  0BAC  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0BAD  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0BAE  00CB               	movwf	??_main+1
  1884  0BAF  30EE               	movlw	238
  1885  0BB0  00CA               	movwf	??_main
  1886  0BB1                     u6477:	
  1887  0BB1  0BCA               	decfsz	??_main,f
  1888  0BB2  2BB1               	goto	u6477
  1889  0BB3  0BCB               	decfsz	??_main+1,f
  1890  0BB4  2BB1               	goto	u6477
  1891  0BB5  0000               	nop
  1892                           
  1893                           ;Automated Solar Panel Orientation Setter.c: 198: nop();
  1894  0BB6  120A  118A  20B6  120A  158A  	fcall	_nop
  1895  0BBB  3007               	movlw	7
  1896                           
  1897                           ;Automated Solar Panel Orientation Setter.c: 201: LCD_print_char(1,7,'0');
  1898  0BBC  01AF               	clrf	LCD_print_char@row
  1899  0BBD  0AAF               	incf	LCD_print_char@row,f
  1900  0BBE  01B0               	clrf	LCD_print_char@row+1
  1901  0BBF  00B1               	movwf	LCD_print_char@column
  1902  0BC0  3030               	movlw	48
  1903  0BC1  01B2               	clrf	LCD_print_char@column+1
  1904  0BC2  00B3               	movwf	LCD_print_char@print_value
  1905  0BC3  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1906                           
  1907                           ;Automated Solar Panel Orientation Setter.c: 202: LCD_print_char(1,8,'0');
  1908  0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  1909  0BC9  1303               	bcf	3,6	;RP1=0, select bank0
  1910  0BCA  3008               	movlw	8
  1911  0BCB  01AF               	clrf	LCD_print_char@row
  1912  0BCC  0AAF               	incf	LCD_print_char@row,f
  1913  0BCD  01B0               	clrf	LCD_print_char@row+1
  1914  0BCE  00B1               	movwf	LCD_print_char@column
  1915  0BCF  3030               	movlw	48
  1916  0BD0  01B2               	clrf	LCD_print_char@column+1
  1917  0BD1  00B3               	movwf	LCD_print_char@print_value
  1918  0BD2  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1919                           
  1920                           ;Automated Solar Panel Orientation Setter.c: 203: LCD_print_char(1,9,'0');
  1921  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  1922  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  1923  0BD9  3009               	movlw	9
  1924  0BDA  01AF               	clrf	LCD_print_char@row
  1925  0BDB  0AAF               	incf	LCD_print_char@row,f
  1926  0BDC  01B0               	clrf	LCD_print_char@row+1
  1927  0BDD  00B1               	movwf	LCD_print_char@column
  1928  0BDE  3030               	movlw	48
  1929  0BDF  01B2               	clrf	LCD_print_char@column+1
  1930  0BE0  00B3               	movwf	LCD_print_char@print_value
  1931  0BE1  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1932                           
  1933                           ;Automated Solar Panel Orientation Setter.c: 205: LCD_print_char(2,1,V_Bat2/10+48);
  1934  0BE6  3002               	movlw	2
  1935  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
  1936  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
  1937  0BE9  00AF               	movwf	LCD_print_char@row
  1938  0BEA  300A               	movlw	10
  1939  0BEB  01B0               	clrf	LCD_print_char@row+1
  1940  0BEC  01B1               	clrf	LCD_print_char@column
  1941  0BED  0AB1               	incf	LCD_print_char@column,f
  1942  0BEE  01B2               	clrf	LCD_print_char@column+1
  1943  0BEF  00A3               	movwf	___ltdiv@divisor
  1944  0BF0  01A4               	clrf	___ltdiv@divisor+1
  1945  0BF1  01A5               	clrf	___ltdiv@divisor+2
  1946  0BF2  084D               	movf	_V_Bat2,w
  1947  0BF3  00A6               	movwf	___ltdiv@dividend
  1948  0BF4  084E               	movf	_V_Bat2+1,w
  1949  0BF5  00A7               	movwf	___ltdiv@dividend+1
  1950  0BF6  084F               	movf	_V_Bat2+2,w
  1951  0BF7  00A8               	movwf	___ltdiv@dividend+2
  1952  0BF8  120A  158A  209D  120A  158A  	fcall	___ltdiv
  1953  0BFD  0823               	movf	?___ltdiv,w
  1954  0BFE  3E30               	addlw	48
  1955  0BFF  00B3               	movwf	LCD_print_char@print_value
  1956  0C00  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1957                           
  1958                           ;Automated Solar Panel Orientation Setter.c: 206: LCD_print_char(2,2,V_Bat2%10+48);
  1959  0C05  3002               	movlw	2
  1960  0C06  1283               	bcf	3,5	;RP0=0, select bank0
  1961  0C07  1303               	bcf	3,6	;RP1=0, select bank0
  1962  0C08  00AF               	movwf	LCD_print_char@row
  1963  0C09  01B0               	clrf	LCD_print_char@row+1
  1964  0C0A  00B1               	movwf	LCD_print_char@column
  1965  0C0B  300A               	movlw	10
  1966  0C0C  01B2               	clrf	LCD_print_char@column+1
  1967  0C0D  00A3               	movwf	___ltmod@divisor
  1968  0C0E  01A4               	clrf	___ltmod@divisor+1
  1969  0C0F  01A5               	clrf	___ltmod@divisor+2
  1970  0C10  084D               	movf	_V_Bat2,w
  1971  0C11  00A6               	movwf	___ltmod@dividend
  1972  0C12  084E               	movf	_V_Bat2+1,w
  1973  0C13  00A7               	movwf	___ltmod@dividend+1
  1974  0C14  084F               	movf	_V_Bat2+2,w
  1975  0C15  00A8               	movwf	___ltmod@dividend+2
  1976  0C16  120A  158A  206C  120A  158A  	fcall	___ltmod
  1977  0C1B  0823               	movf	?___ltmod,w
  1978  0C1C  3E30               	addlw	48
  1979  0C1D  00B3               	movwf	LCD_print_char@print_value
  1980  0C1E  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1981                           
  1982                           ;Automated Solar Panel Orientation Setter.c: 207: LCD_print_char(2,4,'0');
  1983  0C23  3002               	movlw	2
  1984  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0C26  00AF               	movwf	LCD_print_char@row
  1987  0C27  3004               	movlw	4
  1988  0C28  01B0               	clrf	LCD_print_char@row+1
  1989  0C29  00B1               	movwf	LCD_print_char@column
  1990  0C2A  3030               	movlw	48
  1991  0C2B  01B2               	clrf	LCD_print_char@column+1
  1992  0C2C  00B3               	movwf	LCD_print_char@print_value
  1993  0C2D  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  1994                           
  1995                           ;Automated Solar Panel Orientation Setter.c: 209: LCD_print_char(2,7,'0');
  1996  0C32  3002               	movlw	2
  1997  0C33  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0C34  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0C35  00AF               	movwf	LCD_print_char@row
  2000  0C36  3007               	movlw	7
  2001  0C37  01B0               	clrf	LCD_print_char@row+1
  2002  0C38  00B1               	movwf	LCD_print_char@column
  2003  0C39  3030               	movlw	48
  2004  0C3A  01B2               	clrf	LCD_print_char@column+1
  2005  0C3B  00B3               	movwf	LCD_print_char@print_value
  2006  0C3C  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2007                           
  2008                           ;Automated Solar Panel Orientation Setter.c: 210: LCD_print_char(2,9,'0');
  2009  0C41  3002               	movlw	2
  2010  0C42  1283               	bcf	3,5	;RP0=0, select bank0
  2011  0C43  1303               	bcf	3,6	;RP1=0, select bank0
  2012  0C44  00AF               	movwf	LCD_print_char@row
  2013  0C45  3009               	movlw	9
  2014  0C46  01B0               	clrf	LCD_print_char@row+1
  2015  0C47  00B1               	movwf	LCD_print_char@column
  2016  0C48  3030               	movlw	48
  2017  0C49  01B2               	clrf	LCD_print_char@column+1
  2018  0C4A  00B3               	movwf	LCD_print_char@print_value
  2019  0C4B  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2020                           
  2021                           ;Automated Solar Panel Orientation Setter.c: 212: LCD_print_char(2,12,'0');
  2022  0C50  3002               	movlw	2
  2023  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0C52  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0C53  00AF               	movwf	LCD_print_char@row
  2026  0C54  300C               	movlw	12
  2027  0C55  01B0               	clrf	LCD_print_char@row+1
  2028  0C56  00B1               	movwf	LCD_print_char@column
  2029  0C57  3030               	movlw	48
  2030  0C58  01B2               	clrf	LCD_print_char@column+1
  2031  0C59  00B3               	movwf	LCD_print_char@print_value
  2032  0C5A  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2033                           
  2034                           ;Automated Solar Panel Orientation Setter.c: 213: LCD_print_char(2,13,'0');
  2035  0C5F  3002               	movlw	2
  2036  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  2037  0C61  1303               	bcf	3,6	;RP1=0, select bank0
  2038  0C62  00AF               	movwf	LCD_print_char@row
  2039  0C63  300D               	movlw	13
  2040  0C64  01B0               	clrf	LCD_print_char@row+1
  2041  0C65  00B1               	movwf	LCD_print_char@column
  2042  0C66  3030               	movlw	48
  2043  0C67  01B2               	clrf	LCD_print_char@column+1
  2044  0C68  00B3               	movwf	LCD_print_char@print_value
  2045  0C69  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2046                           
  2047                           ;Automated Solar Panel Orientation Setter.c: 214: LCD_print_char(2,15,'0');
  2048  0C6E  3002               	movlw	2
  2049  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0C71  00AF               	movwf	LCD_print_char@row
  2052  0C72  300F               	movlw	15
  2053  0C73  01B0               	clrf	LCD_print_char@row+1
  2054  0C74  00B1               	movwf	LCD_print_char@column
  2055  0C75  3030               	movlw	48
  2056  0C76  01B2               	clrf	LCD_print_char@column+1
  2057  0C77  00B3               	movwf	LCD_print_char@print_value
  2058  0C78  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2059                           
  2060                           ;Automated Solar Panel Orientation Setter.c: 219: CheckMode();
  2061  0C7D  120A  118A  2028  120A  158A  	fcall	_CheckMode
  2062                           
  2063                           ;Automated Solar Panel Orientation Setter.c: 221: Calculate();
  2064  0C82  160A  158A  2719  120A  158A  	fcall	_Calculate
  2065                           
  2066                           ;Automated Solar Panel Orientation Setter.c: 223: break;
  2067  0C87  2FD8               	goto	l5156
  2068  0C88                     l5142:	
  2069  0C88  304D               	movlw	77
  2070                           
  2071                           ;Automated Solar Panel Orientation Setter.c: 228: LCD_print_char(1,1,'M');
  2072  0C89  01AF               	clrf	LCD_print_char@row
  2073  0C8A  0AAF               	incf	LCD_print_char@row,f
  2074  0C8B  01B0               	clrf	LCD_print_char@row+1
  2075  0C8C  01B1               	clrf	LCD_print_char@column
  2076  0C8D  0AB1               	incf	LCD_print_char@column,f
  2077  0C8E  01B2               	clrf	LCD_print_char@column+1
  2078  0C8F  00B3               	movwf	LCD_print_char@print_value
  2079  0C90  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2080                           
  2081                           ;Automated Solar Panel Orientation Setter.c: 229: LCD_print_char(1,2,'O');
  2082  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  2083  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  2084  0C97  3002               	movlw	2
  2085  0C98  01AF               	clrf	LCD_print_char@row
  2086  0C99  0AAF               	incf	LCD_print_char@row,f
  2087  0C9A  01B0               	clrf	LCD_print_char@row+1
  2088  0C9B  00B1               	movwf	LCD_print_char@column
  2089  0C9C  304F               	movlw	79
  2090  0C9D  01B2               	clrf	LCD_print_char@column+1
  2091  0C9E  00B3               	movwf	LCD_print_char@print_value
  2092  0C9F  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2093                           
  2094                           ;Automated Solar Panel Orientation Setter.c: 230: LCD_print_char(1,3,'D');
  2095  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  2096  0CA5  1303               	bcf	3,6	;RP1=0, select bank0
  2097  0CA6  3003               	movlw	3
  2098  0CA7  01AF               	clrf	LCD_print_char@row
  2099  0CA8  0AAF               	incf	LCD_print_char@row,f
  2100  0CA9  01B0               	clrf	LCD_print_char@row+1
  2101  0CAA  00B1               	movwf	LCD_print_char@column
  2102  0CAB  3044               	movlw	68
  2103  0CAC  01B2               	clrf	LCD_print_char@column+1
  2104  0CAD  00B3               	movwf	LCD_print_char@print_value
  2105  0CAE  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2106                           
  2107                           ;Automated Solar Panel Orientation Setter.c: 231: LCD_print_char(1,4,'E');
  2108  0CB3  1283               	bcf	3,5	;RP0=0, select bank0
  2109  0CB4  1303               	bcf	3,6	;RP1=0, select bank0
  2110  0CB5  3004               	movlw	4
  2111  0CB6  01AF               	clrf	LCD_print_char@row
  2112  0CB7  0AAF               	incf	LCD_print_char@row,f
  2113  0CB8  01B0               	clrf	LCD_print_char@row+1
  2114  0CB9  00B1               	movwf	LCD_print_char@column
  2115  0CBA  3045               	movlw	69
  2116  0CBB  01B2               	clrf	LCD_print_char@column+1
  2117  0CBC  00B3               	movwf	LCD_print_char@print_value
  2118  0CBD  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2119                           
  2120                           ;Automated Solar Panel Orientation Setter.c: 233: LCD_print_char(1,6,',');
  2121  0CC2  1283               	bcf	3,5	;RP0=0, select bank0
  2122  0CC3  1303               	bcf	3,6	;RP1=0, select bank0
  2123  0CC4  3006               	movlw	6
  2124  0CC5  01AF               	clrf	LCD_print_char@row
  2125  0CC6  0AAF               	incf	LCD_print_char@row,f
  2126  0CC7  01B0               	clrf	LCD_print_char@row+1
  2127  0CC8  00B1               	movwf	LCD_print_char@column
  2128  0CC9  302C               	movlw	44
  2129  0CCA  01B2               	clrf	LCD_print_char@column+1
  2130  0CCB  00B3               	movwf	LCD_print_char@print_value
  2131  0CCC  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2132                           
  2133                           ;Automated Solar Panel Orientation Setter.c: 234: LCD_print_char(1,10,'D');
  2134  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
  2135  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
  2136  0CD3  300A               	movlw	10
  2137  0CD4  01AF               	clrf	LCD_print_char@row
  2138  0CD5  0AAF               	incf	LCD_print_char@row,f
  2139  0CD6  01B0               	clrf	LCD_print_char@row+1
  2140  0CD7  00B1               	movwf	LCD_print_char@column
  2141  0CD8  3044               	movlw	68
  2142  0CD9  01B2               	clrf	LCD_print_char@column+1
  2143  0CDA  00B3               	movwf	LCD_print_char@print_value
  2144  0CDB  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2145                           
  2146                           ;Automated Solar Panel Orientation Setter.c: 235: LCD_print_char(1,11,',');
  2147  0CE0  1283               	bcf	3,5	;RP0=0, select bank0
  2148  0CE1  1303               	bcf	3,6	;RP1=0, select bank0
  2149  0CE2  300B               	movlw	11
  2150  0CE3  01AF               	clrf	LCD_print_char@row
  2151  0CE4  0AAF               	incf	LCD_print_char@row,f
  2152  0CE5  01B0               	clrf	LCD_print_char@row+1
  2153  0CE6  00B1               	movwf	LCD_print_char@column
  2154  0CE7  302C               	movlw	44
  2155  0CE8  01B2               	clrf	LCD_print_char@column+1
  2156  0CE9  00B3               	movwf	LCD_print_char@print_value
  2157  0CEA  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2158                           
  2159                           ;Automated Solar Panel Orientation Setter.c: 237: LCD_print_char(2,3,'.');
  2160  0CEF  3002               	movlw	2
  2161  0CF0  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0CF1  1303               	bcf	3,6	;RP1=0, select bank0
  2163  0CF2  00AF               	movwf	LCD_print_char@row
  2164  0CF3  3003               	movlw	3
  2165  0CF4  01B0               	clrf	LCD_print_char@row+1
  2166  0CF5  00B1               	movwf	LCD_print_char@column
  2167  0CF6  302E               	movlw	46
  2168  0CF7  01B2               	clrf	LCD_print_char@column+1
  2169  0CF8  00B3               	movwf	LCD_print_char@print_value
  2170  0CF9  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2171                           
  2172                           ;Automated Solar Panel Orientation Setter.c: 238: LCD_print_char(2,5,'V');
  2173  0CFE  3002               	movlw	2
  2174  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  2176  0D01  00AF               	movwf	LCD_print_char@row
  2177  0D02  3005               	movlw	5
  2178  0D03  01B0               	clrf	LCD_print_char@row+1
  2179  0D04  00B1               	movwf	LCD_print_char@column
  2180  0D05  3056               	movlw	86
  2181  0D06  01B2               	clrf	LCD_print_char@column+1
  2182  0D07  00B3               	movwf	LCD_print_char@print_value
  2183  0D08  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2184                           
  2185                           ;Automated Solar Panel Orientation Setter.c: 239: LCD_print_char(2,6,',');
  2186  0D0D  3002               	movlw	2
  2187  0D0E  1283               	bcf	3,5	;RP0=0, select bank0
  2188  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
  2189  0D10  00AF               	movwf	LCD_print_char@row
  2190  0D11  3006               	movlw	6
  2191  0D12  01B0               	clrf	LCD_print_char@row+1
  2192  0D13  00B1               	movwf	LCD_print_char@column
  2193  0D14  302C               	movlw	44
  2194  0D15  01B2               	clrf	LCD_print_char@column+1
  2195  0D16  00B3               	movwf	LCD_print_char@print_value
  2196  0D17  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2197                           
  2198                           ;Automated Solar Panel Orientation Setter.c: 240: LCD_print_char(2,8,'.');
  2199  0D1C  3002               	movlw	2
  2200  0D1D  1283               	bcf	3,5	;RP0=0, select bank0
  2201  0D1E  1303               	bcf	3,6	;RP1=0, select bank0
  2202  0D1F  00AF               	movwf	LCD_print_char@row
  2203  0D20  3008               	movlw	8
  2204  0D21  01B0               	clrf	LCD_print_char@row+1
  2205  0D22  00B1               	movwf	LCD_print_char@column
  2206  0D23  302E               	movlw	46
  2207  0D24  01B2               	clrf	LCD_print_char@column+1
  2208  0D25  00B3               	movwf	LCD_print_char@print_value
  2209  0D26  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2210                           
  2211                           ;Automated Solar Panel Orientation Setter.c: 241: LCD_print_char(2,10,'A');
  2212  0D2B  3002               	movlw	2
  2213  0D2C  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0D2D  1303               	bcf	3,6	;RP1=0, select bank0
  2215  0D2E  00AF               	movwf	LCD_print_char@row
  2216  0D2F  300A               	movlw	10
  2217  0D30  01B0               	clrf	LCD_print_char@row+1
  2218  0D31  00B1               	movwf	LCD_print_char@column
  2219  0D32  3041               	movlw	65
  2220  0D33  01B2               	clrf	LCD_print_char@column+1
  2221  0D34  00B3               	movwf	LCD_print_char@print_value
  2222  0D35  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2223                           
  2224                           ;Automated Solar Panel Orientation Setter.c: 242: LCD_print_char(2,11,',');
  2225  0D3A  3002               	movlw	2
  2226  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  2227  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  2228  0D3D  00AF               	movwf	LCD_print_char@row
  2229  0D3E  300B               	movlw	11
  2230  0D3F  01B0               	clrf	LCD_print_char@row+1
  2231  0D40  00B1               	movwf	LCD_print_char@column
  2232  0D41  302C               	movlw	44
  2233  0D42  01B2               	clrf	LCD_print_char@column+1
  2234  0D43  00B3               	movwf	LCD_print_char@print_value
  2235  0D44  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2236                           
  2237                           ;Automated Solar Panel Orientation Setter.c: 243: LCD_print_char(2,14,'.');
  2238  0D49  3002               	movlw	2
  2239  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  2240  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  2241  0D4C  00AF               	movwf	LCD_print_char@row
  2242  0D4D  300E               	movlw	14
  2243  0D4E  01B0               	clrf	LCD_print_char@row+1
  2244  0D4F  00B1               	movwf	LCD_print_char@column
  2245  0D50  302E               	movlw	46
  2246  0D51  01B2               	clrf	LCD_print_char@column+1
  2247  0D52  00B3               	movwf	LCD_print_char@print_value
  2248  0D53  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2249                           
  2250                           ;Automated Solar Panel Orientation Setter.c: 244: LCD_print_char(2,16,'W');
  2251  0D58  3002               	movlw	2
  2252  0D59  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0D5A  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0D5B  00AF               	movwf	LCD_print_char@row
  2255  0D5C  3010               	movlw	16
  2256  0D5D  01B0               	clrf	LCD_print_char@row+1
  2257  0D5E  00B1               	movwf	LCD_print_char@column
  2258  0D5F  3057               	movlw	87
  2259  0D60  01B2               	clrf	LCD_print_char@column+1
  2260  0D61  00B3               	movwf	LCD_print_char@print_value
  2261  0D62  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2262                           
  2263                           ;Automated Solar Panel Orientation Setter.c: 247: LCD_print_char(1,5,'2');
  2264  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  2265  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  2266  0D69  3005               	movlw	5
  2267  0D6A  01AF               	clrf	LCD_print_char@row
  2268  0D6B  0AAF               	incf	LCD_print_char@row,f
  2269  0D6C  01B0               	clrf	LCD_print_char@row+1
  2270  0D6D  00B1               	movwf	LCD_print_char@column
  2271  0D6E  3032               	movlw	50
  2272  0D6F  01B2               	clrf	LCD_print_char@column+1
  2273  0D70  00B3               	movwf	LCD_print_char@print_value
  2274  0D71  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2275                           
  2276                           ;Automated Solar Panel Orientation Setter.c: 249: LCD_print_char(1,7,'0');
  2277  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  2278  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  2279  0D78  3007               	movlw	7
  2280  0D79  01AF               	clrf	LCD_print_char@row
  2281  0D7A  0AAF               	incf	LCD_print_char@row,f
  2282  0D7B  01B0               	clrf	LCD_print_char@row+1
  2283  0D7C  00B1               	movwf	LCD_print_char@column
  2284  0D7D  3030               	movlw	48
  2285  0D7E  01B2               	clrf	LCD_print_char@column+1
  2286  0D7F  00B3               	movwf	LCD_print_char@print_value
  2287  0D80  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2288                           
  2289                           ;Automated Solar Panel Orientation Setter.c: 250: LCD_print_char(1,8,'0');
  2290  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0D87  3008               	movlw	8
  2293  0D88  01AF               	clrf	LCD_print_char@row
  2294  0D89  0AAF               	incf	LCD_print_char@row,f
  2295  0D8A  01B0               	clrf	LCD_print_char@row+1
  2296  0D8B  00B1               	movwf	LCD_print_char@column
  2297  0D8C  3030               	movlw	48
  2298  0D8D  01B2               	clrf	LCD_print_char@column+1
  2299  0D8E  00B3               	movwf	LCD_print_char@print_value
  2300  0D8F  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2301                           
  2302                           ;Automated Solar Panel Orientation Setter.c: 251: LCD_print_char(1,9,'0');
  2303  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  2304  0D95  1303               	bcf	3,6	;RP1=0, select bank0
  2305  0D96  3009               	movlw	9
  2306  0D97  01AF               	clrf	LCD_print_char@row
  2307  0D98  0AAF               	incf	LCD_print_char@row,f
  2308  0D99  01B0               	clrf	LCD_print_char@row+1
  2309  0D9A  00B1               	movwf	LCD_print_char@column
  2310  0D9B  3030               	movlw	48
  2311  0D9C  01B2               	clrf	LCD_print_char@column+1
  2312  0D9D  00B3               	movwf	LCD_print_char@print_value
  2313  0D9E  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2314                           
  2315                           ;Automated Solar Panel Orientation Setter.c: 253: LCD_print_char(2,1,V_Bat2/10+48);
  2316  0DA3  3002               	movlw	2
  2317  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
  2318  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
  2319  0DA6  00AF               	movwf	LCD_print_char@row
  2320  0DA7  300A               	movlw	10
  2321  0DA8  01B0               	clrf	LCD_print_char@row+1
  2322  0DA9  01B1               	clrf	LCD_print_char@column
  2323  0DAA  0AB1               	incf	LCD_print_char@column,f
  2324  0DAB  01B2               	clrf	LCD_print_char@column+1
  2325  0DAC  00A3               	movwf	___ltdiv@divisor
  2326  0DAD  01A4               	clrf	___ltdiv@divisor+1
  2327  0DAE  01A5               	clrf	___ltdiv@divisor+2
  2328  0DAF  084D               	movf	_V_Bat2,w
  2329  0DB0  00A6               	movwf	___ltdiv@dividend
  2330  0DB1  084E               	movf	_V_Bat2+1,w
  2331  0DB2  00A7               	movwf	___ltdiv@dividend+1
  2332  0DB3  084F               	movf	_V_Bat2+2,w
  2333  0DB4  00A8               	movwf	___ltdiv@dividend+2
  2334  0DB5  120A  158A  209D  120A  158A  	fcall	___ltdiv
  2335  0DBA  0823               	movf	?___ltdiv,w
  2336  0DBB  3E30               	addlw	48
  2337  0DBC  00B3               	movwf	LCD_print_char@print_value
  2338  0DBD  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2339                           
  2340                           ;Automated Solar Panel Orientation Setter.c: 254: LCD_print_char(2,2,V_Bat2%10+48);
  2341  0DC2  3002               	movlw	2
  2342  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  2343  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  2344  0DC5  00AF               	movwf	LCD_print_char@row
  2345  0DC6  01B0               	clrf	LCD_print_char@row+1
  2346  0DC7  00B1               	movwf	LCD_print_char@column
  2347  0DC8  300A               	movlw	10
  2348  0DC9  01B2               	clrf	LCD_print_char@column+1
  2349  0DCA  00A3               	movwf	___ltmod@divisor
  2350  0DCB  01A4               	clrf	___ltmod@divisor+1
  2351  0DCC  01A5               	clrf	___ltmod@divisor+2
  2352  0DCD  084D               	movf	_V_Bat2,w
  2353  0DCE  00A6               	movwf	___ltmod@dividend
  2354  0DCF  084E               	movf	_V_Bat2+1,w
  2355  0DD0  00A7               	movwf	___ltmod@dividend+1
  2356  0DD1  084F               	movf	_V_Bat2+2,w
  2357  0DD2  00A8               	movwf	___ltmod@dividend+2
  2358  0DD3  120A  158A  206C  120A  158A  	fcall	___ltmod
  2359  0DD8  0823               	movf	?___ltmod,w
  2360  0DD9  3E30               	addlw	48
  2361  0DDA  00B3               	movwf	LCD_print_char@print_value
  2362  0DDB  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2363                           
  2364                           ;Automated Solar Panel Orientation Setter.c: 255: LCD_print_char(2,4,'0');
  2365  0DE0  3002               	movlw	2
  2366  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  2368  0DE3  00AF               	movwf	LCD_print_char@row
  2369  0DE4  3004               	movlw	4
  2370  0DE5  01B0               	clrf	LCD_print_char@row+1
  2371  0DE6  00B1               	movwf	LCD_print_char@column
  2372  0DE7  3030               	movlw	48
  2373  0DE8  01B2               	clrf	LCD_print_char@column+1
  2374  0DE9  00B3               	movwf	LCD_print_char@print_value
  2375  0DEA  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2376                           
  2377                           ;Automated Solar Panel Orientation Setter.c: 257: LCD_print_char(2,7,'0');
  2378  0DEF  3002               	movlw	2
  2379  0DF0  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0DF1  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0DF2  00AF               	movwf	LCD_print_char@row
  2382  0DF3  3007               	movlw	7
  2383  0DF4  01B0               	clrf	LCD_print_char@row+1
  2384  0DF5  00B1               	movwf	LCD_print_char@column
  2385  0DF6  3030               	movlw	48
  2386  0DF7  01B2               	clrf	LCD_print_char@column+1
  2387  0DF8  00B3               	movwf	LCD_print_char@print_value
  2388  0DF9  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2389                           
  2390                           ;Automated Solar Panel Orientation Setter.c: 258: LCD_print_char(2,9,'0');
  2391  0DFE  3002               	movlw	2
  2392  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
  2393  0E00  1303               	bcf	3,6	;RP1=0, select bank0
  2394  0E01  00AF               	movwf	LCD_print_char@row
  2395  0E02  3009               	movlw	9
  2396  0E03  01B0               	clrf	LCD_print_char@row+1
  2397  0E04  00B1               	movwf	LCD_print_char@column
  2398  0E05  3030               	movlw	48
  2399  0E06  01B2               	clrf	LCD_print_char@column+1
  2400  0E07  00B3               	movwf	LCD_print_char@print_value
  2401  0E08  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2402                           
  2403                           ;Automated Solar Panel Orientation Setter.c: 260: LCD_print_char(2,12,'0');
  2404  0E0D  3002               	movlw	2
  2405  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
  2406  0E0F  1303               	bcf	3,6	;RP1=0, select bank0
  2407  0E10  00AF               	movwf	LCD_print_char@row
  2408  0E11  300C               	movlw	12
  2409  0E12  01B0               	clrf	LCD_print_char@row+1
  2410  0E13  00B1               	movwf	LCD_print_char@column
  2411  0E14  3030               	movlw	48
  2412  0E15  01B2               	clrf	LCD_print_char@column+1
  2413  0E16  00B3               	movwf	LCD_print_char@print_value
  2414  0E17  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2415                           
  2416                           ;Automated Solar Panel Orientation Setter.c: 261: LCD_print_char(2,13,'0');
  2417  0E1C  3002               	movlw	2
  2418  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  2420  0E1F  00AF               	movwf	LCD_print_char@row
  2421  0E20  300D               	movlw	13
  2422  0E21  01B0               	clrf	LCD_print_char@row+1
  2423  0E22  00B1               	movwf	LCD_print_char@column
  2424  0E23  3030               	movlw	48
  2425  0E24  01B2               	clrf	LCD_print_char@column+1
  2426  0E25  00B3               	movwf	LCD_print_char@print_value
  2427  0E26  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2428                           
  2429                           ;Automated Solar Panel Orientation Setter.c: 262: LCD_print_char(2,15,'0');
  2430  0E2B  3002               	movlw	2
  2431  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  2432  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  2433  0E2E  00AF               	movwf	LCD_print_char@row
  2434  0E2F  300F               	movlw	15
  2435  0E30  01B0               	clrf	LCD_print_char@row+1
  2436  0E31  00B1               	movwf	LCD_print_char@column
  2437  0E32  3030               	movlw	48
  2438  0E33  01B2               	clrf	LCD_print_char@column+1
  2439  0E34  00B3               	movwf	LCD_print_char@print_value
  2440  0E35  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2441                           
  2442                           ;Automated Solar Panel Orientation Setter.c: 265: state = 20;
  2443  0E3A  3014               	movlw	20
  2444  0E3B  2FD5               	goto	L6
  2445  0E3C                     l5146:	
  2446                           ;Automated Solar Panel Orientation Setter.c: 266: break;
  2447                           
  2448                           
  2449                           ;Automated Solar Panel Orientation Setter.c: 269: CheckMode();
  2450  0E3C  120A  118A  2028  120A  158A  	fcall	_CheckMode
  2451                           
  2452                           ;Automated Solar Panel Orientation Setter.c: 270: break;
  2453  0E41  2FD8               	goto	l5156
  2454  0E42                     l5148:	
  2455  0E42  304D               	movlw	77
  2456                           
  2457                           ;Automated Solar Panel Orientation Setter.c: 274: LCD_print_char(1,1,'M');
  2458  0E43  01AF               	clrf	LCD_print_char@row
  2459  0E44  0AAF               	incf	LCD_print_char@row,f
  2460  0E45  01B0               	clrf	LCD_print_char@row+1
  2461  0E46  01B1               	clrf	LCD_print_char@column
  2462  0E47  0AB1               	incf	LCD_print_char@column,f
  2463  0E48  01B2               	clrf	LCD_print_char@column+1
  2464  0E49  00B3               	movwf	LCD_print_char@print_value
  2465  0E4A  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2466                           
  2467                           ;Automated Solar Panel Orientation Setter.c: 275: LCD_print_char(1,2,'O');
  2468  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  2469  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  2470  0E51  3002               	movlw	2
  2471  0E52  01AF               	clrf	LCD_print_char@row
  2472  0E53  0AAF               	incf	LCD_print_char@row,f
  2473  0E54  01B0               	clrf	LCD_print_char@row+1
  2474  0E55  00B1               	movwf	LCD_print_char@column
  2475  0E56  304F               	movlw	79
  2476  0E57  01B2               	clrf	LCD_print_char@column+1
  2477  0E58  00B3               	movwf	LCD_print_char@print_value
  2478  0E59  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2479                           
  2480                           ;Automated Solar Panel Orientation Setter.c: 276: LCD_print_char(1,3,'D');
  2481  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  2482  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  2483  0E60  3003               	movlw	3
  2484  0E61  01AF               	clrf	LCD_print_char@row
  2485  0E62  0AAF               	incf	LCD_print_char@row,f
  2486  0E63  01B0               	clrf	LCD_print_char@row+1
  2487  0E64  00B1               	movwf	LCD_print_char@column
  2488  0E65  3044               	movlw	68
  2489  0E66  01B2               	clrf	LCD_print_char@column+1
  2490  0E67  00B3               	movwf	LCD_print_char@print_value
  2491  0E68  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2492                           
  2493                           ;Automated Solar Panel Orientation Setter.c: 277: LCD_print_char(1,4,'E');
  2494  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  2495  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  2496  0E6F  3004               	movlw	4
  2497  0E70  01AF               	clrf	LCD_print_char@row
  2498  0E71  0AAF               	incf	LCD_print_char@row,f
  2499  0E72  01B0               	clrf	LCD_print_char@row+1
  2500  0E73  00B1               	movwf	LCD_print_char@column
  2501  0E74  3045               	movlw	69
  2502  0E75  01B2               	clrf	LCD_print_char@column+1
  2503  0E76  00B3               	movwf	LCD_print_char@print_value
  2504  0E77  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2505                           
  2506                           ;Automated Solar Panel Orientation Setter.c: 279: LCD_print_char(1,6,',');
  2507  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  2508  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  2509  0E7E  3006               	movlw	6
  2510  0E7F  01AF               	clrf	LCD_print_char@row
  2511  0E80  0AAF               	incf	LCD_print_char@row,f
  2512  0E81  01B0               	clrf	LCD_print_char@row+1
  2513  0E82  00B1               	movwf	LCD_print_char@column
  2514  0E83  302C               	movlw	44
  2515  0E84  01B2               	clrf	LCD_print_char@column+1
  2516  0E85  00B3               	movwf	LCD_print_char@print_value
  2517  0E86  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2518                           
  2519                           ;Automated Solar Panel Orientation Setter.c: 280: LCD_print_char(1,10,'D');
  2520  0E8B  1283               	bcf	3,5	;RP0=0, select bank0
  2521  0E8C  1303               	bcf	3,6	;RP1=0, select bank0
  2522  0E8D  300A               	movlw	10
  2523  0E8E  01AF               	clrf	LCD_print_char@row
  2524  0E8F  0AAF               	incf	LCD_print_char@row,f
  2525  0E90  01B0               	clrf	LCD_print_char@row+1
  2526  0E91  00B1               	movwf	LCD_print_char@column
  2527  0E92  3044               	movlw	68
  2528  0E93  01B2               	clrf	LCD_print_char@column+1
  2529  0E94  00B3               	movwf	LCD_print_char@print_value
  2530  0E95  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2531                           
  2532                           ;Automated Solar Panel Orientation Setter.c: 281: LCD_print_char(1,11,',');
  2533  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  2534  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  2535  0E9C  300B               	movlw	11
  2536  0E9D  01AF               	clrf	LCD_print_char@row
  2537  0E9E  0AAF               	incf	LCD_print_char@row,f
  2538  0E9F  01B0               	clrf	LCD_print_char@row+1
  2539  0EA0  00B1               	movwf	LCD_print_char@column
  2540  0EA1  302C               	movlw	44
  2541  0EA2  01B2               	clrf	LCD_print_char@column+1
  2542  0EA3  00B3               	movwf	LCD_print_char@print_value
  2543  0EA4  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2544                           
  2545                           ;Automated Solar Panel Orientation Setter.c: 283: LCD_print_char(2,3,'.');
  2546  0EA9  3002               	movlw	2
  2547  0EAA  1283               	bcf	3,5	;RP0=0, select bank0
  2548  0EAB  1303               	bcf	3,6	;RP1=0, select bank0
  2549  0EAC  00AF               	movwf	LCD_print_char@row
  2550  0EAD  3003               	movlw	3
  2551  0EAE  01B0               	clrf	LCD_print_char@row+1
  2552  0EAF  00B1               	movwf	LCD_print_char@column
  2553  0EB0  302E               	movlw	46
  2554  0EB1  01B2               	clrf	LCD_print_char@column+1
  2555  0EB2  00B3               	movwf	LCD_print_char@print_value
  2556  0EB3  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2557                           
  2558                           ;Automated Solar Panel Orientation Setter.c: 284: LCD_print_char(2,5,'V');
  2559  0EB8  3002               	movlw	2
  2560  0EB9  1283               	bcf	3,5	;RP0=0, select bank0
  2561  0EBA  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0EBB  00AF               	movwf	LCD_print_char@row
  2563  0EBC  3005               	movlw	5
  2564  0EBD  01B0               	clrf	LCD_print_char@row+1
  2565  0EBE  00B1               	movwf	LCD_print_char@column
  2566  0EBF  3056               	movlw	86
  2567  0EC0  01B2               	clrf	LCD_print_char@column+1
  2568  0EC1  00B3               	movwf	LCD_print_char@print_value
  2569  0EC2  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2570                           
  2571                           ;Automated Solar Panel Orientation Setter.c: 285: LCD_print_char(2,6,',');
  2572  0EC7  3002               	movlw	2
  2573  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  2574  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  2575  0ECA  00AF               	movwf	LCD_print_char@row
  2576  0ECB  3006               	movlw	6
  2577  0ECC  01B0               	clrf	LCD_print_char@row+1
  2578  0ECD  00B1               	movwf	LCD_print_char@column
  2579  0ECE  302C               	movlw	44
  2580  0ECF  01B2               	clrf	LCD_print_char@column+1
  2581  0ED0  00B3               	movwf	LCD_print_char@print_value
  2582  0ED1  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2583                           
  2584                           ;Automated Solar Panel Orientation Setter.c: 286: LCD_print_char(2,8,'.');
  2585  0ED6  3002               	movlw	2
  2586  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  2587  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  2588  0ED9  00AF               	movwf	LCD_print_char@row
  2589  0EDA  3008               	movlw	8
  2590  0EDB  01B0               	clrf	LCD_print_char@row+1
  2591  0EDC  00B1               	movwf	LCD_print_char@column
  2592  0EDD  302E               	movlw	46
  2593  0EDE  01B2               	clrf	LCD_print_char@column+1
  2594  0EDF  00B3               	movwf	LCD_print_char@print_value
  2595  0EE0  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2596                           
  2597                           ;Automated Solar Panel Orientation Setter.c: 287: LCD_print_char(2,10,'A');
  2598  0EE5  3002               	movlw	2
  2599  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  2600  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  2601  0EE8  00AF               	movwf	LCD_print_char@row
  2602  0EE9  300A               	movlw	10
  2603  0EEA  01B0               	clrf	LCD_print_char@row+1
  2604  0EEB  00B1               	movwf	LCD_print_char@column
  2605  0EEC  3041               	movlw	65
  2606  0EED  01B2               	clrf	LCD_print_char@column+1
  2607  0EEE  00B3               	movwf	LCD_print_char@print_value
  2608  0EEF  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2609                           
  2610                           ;Automated Solar Panel Orientation Setter.c: 288: LCD_print_char(2,11,',');
  2611  0EF4  3002               	movlw	2
  2612  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  2613  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  2614  0EF7  00AF               	movwf	LCD_print_char@row
  2615  0EF8  300B               	movlw	11
  2616  0EF9  01B0               	clrf	LCD_print_char@row+1
  2617  0EFA  00B1               	movwf	LCD_print_char@column
  2618  0EFB  302C               	movlw	44
  2619  0EFC  01B2               	clrf	LCD_print_char@column+1
  2620  0EFD  00B3               	movwf	LCD_print_char@print_value
  2621  0EFE  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2622                           
  2623                           ;Automated Solar Panel Orientation Setter.c: 289: LCD_print_char(2,14,'.');
  2624  0F03  3002               	movlw	2
  2625  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  2626  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  2627  0F06  00AF               	movwf	LCD_print_char@row
  2628  0F07  300E               	movlw	14
  2629  0F08  01B0               	clrf	LCD_print_char@row+1
  2630  0F09  00B1               	movwf	LCD_print_char@column
  2631  0F0A  302E               	movlw	46
  2632  0F0B  01B2               	clrf	LCD_print_char@column+1
  2633  0F0C  00B3               	movwf	LCD_print_char@print_value
  2634  0F0D  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2635                           
  2636                           ;Automated Solar Panel Orientation Setter.c: 290: LCD_print_char(2,16,'W');
  2637  0F12  3002               	movlw	2
  2638  0F13  1283               	bcf	3,5	;RP0=0, select bank0
  2639  0F14  1303               	bcf	3,6	;RP1=0, select bank0
  2640  0F15  00AF               	movwf	LCD_print_char@row
  2641  0F16  3010               	movlw	16
  2642  0F17  01B0               	clrf	LCD_print_char@row+1
  2643  0F18  00B1               	movwf	LCD_print_char@column
  2644  0F19  3057               	movlw	87
  2645  0F1A  01B2               	clrf	LCD_print_char@column+1
  2646  0F1B  00B3               	movwf	LCD_print_char@print_value
  2647  0F1C  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2648                           
  2649                           ;Automated Solar Panel Orientation Setter.c: 293: LCD_print_char(1,5,'3');
  2650  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  2651  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  2652  0F23  3005               	movlw	5
  2653  0F24  01AF               	clrf	LCD_print_char@row
  2654  0F25  0AAF               	incf	LCD_print_char@row,f
  2655  0F26  01B0               	clrf	LCD_print_char@row+1
  2656  0F27  00B1               	movwf	LCD_print_char@column
  2657  0F28  3033               	movlw	51
  2658  0F29  01B2               	clrf	LCD_print_char@column+1
  2659  0F2A  00B3               	movwf	LCD_print_char@print_value
  2660  0F2B  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2661                           
  2662                           ;Automated Solar Panel Orientation Setter.c: 295: LCD_print_char(1,7,'0');
  2663  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  2664  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  2665  0F32  3007               	movlw	7
  2666  0F33  01AF               	clrf	LCD_print_char@row
  2667  0F34  0AAF               	incf	LCD_print_char@row,f
  2668  0F35  01B0               	clrf	LCD_print_char@row+1
  2669  0F36  00B1               	movwf	LCD_print_char@column
  2670  0F37  3030               	movlw	48
  2671  0F38  01B2               	clrf	LCD_print_char@column+1
  2672  0F39  00B3               	movwf	LCD_print_char@print_value
  2673  0F3A  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2674                           
  2675                           ;Automated Solar Panel Orientation Setter.c: 296: LCD_print_char(1,8,'0');
  2676  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  2677  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  2678  0F41  3008               	movlw	8
  2679  0F42  01AF               	clrf	LCD_print_char@row
  2680  0F43  0AAF               	incf	LCD_print_char@row,f
  2681  0F44  01B0               	clrf	LCD_print_char@row+1
  2682  0F45  00B1               	movwf	LCD_print_char@column
  2683  0F46  3030               	movlw	48
  2684  0F47  01B2               	clrf	LCD_print_char@column+1
  2685  0F48  00B3               	movwf	LCD_print_char@print_value
  2686  0F49  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2687                           
  2688                           ;Automated Solar Panel Orientation Setter.c: 297: LCD_print_char(1,9,'0');
  2689  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  2690  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  2691  0F50  3009               	movlw	9
  2692  0F51  01AF               	clrf	LCD_print_char@row
  2693  0F52  0AAF               	incf	LCD_print_char@row,f
  2694  0F53  01B0               	clrf	LCD_print_char@row+1
  2695  0F54  00B1               	movwf	LCD_print_char@column
  2696  0F55  3030               	movlw	48
  2697  0F56  01B2               	clrf	LCD_print_char@column+1
  2698  0F57  00B3               	movwf	LCD_print_char@print_value
  2699  0F58  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2700                           
  2701                           ;Automated Solar Panel Orientation Setter.c: 299: LCD_print_char(2,1,'0');
  2702  0F5D  3002               	movlw	2
  2703  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  2704  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  2705  0F60  00AF               	movwf	LCD_print_char@row
  2706  0F61  3030               	movlw	48
  2707  0F62  01B0               	clrf	LCD_print_char@row+1
  2708  0F63  01B1               	clrf	LCD_print_char@column
  2709  0F64  0AB1               	incf	LCD_print_char@column,f
  2710  0F65  01B2               	clrf	LCD_print_char@column+1
  2711  0F66  00B3               	movwf	LCD_print_char@print_value
  2712  0F67  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2713                           
  2714                           ;Automated Solar Panel Orientation Setter.c: 300: LCD_print_char(2,2,'0');
  2715  0F6C  3002               	movlw	2
  2716  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  2717  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  2718  0F6F  00AF               	movwf	LCD_print_char@row
  2719  0F70  01B0               	clrf	LCD_print_char@row+1
  2720  0F71  00B1               	movwf	LCD_print_char@column
  2721  0F72  3030               	movlw	48
  2722  0F73  01B2               	clrf	LCD_print_char@column+1
  2723  0F74  00B3               	movwf	LCD_print_char@print_value
  2724  0F75  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2725                           
  2726                           ;Automated Solar Panel Orientation Setter.c: 301: LCD_print_char(2,4,'0');
  2727  0F7A  3002               	movlw	2
  2728  0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  2729  0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  2730  0F7D  00AF               	movwf	LCD_print_char@row
  2731  0F7E  3004               	movlw	4
  2732  0F7F  01B0               	clrf	LCD_print_char@row+1
  2733  0F80  00B1               	movwf	LCD_print_char@column
  2734  0F81  3030               	movlw	48
  2735  0F82  01B2               	clrf	LCD_print_char@column+1
  2736  0F83  00B3               	movwf	LCD_print_char@print_value
  2737  0F84  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2738                           
  2739                           ;Automated Solar Panel Orientation Setter.c: 303: LCD_print_char(2,7,'0');
  2740  0F89  3002               	movlw	2
  2741  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  2742  0F8B  1303               	bcf	3,6	;RP1=0, select bank0
  2743  0F8C  00AF               	movwf	LCD_print_char@row
  2744  0F8D  3007               	movlw	7
  2745  0F8E  01B0               	clrf	LCD_print_char@row+1
  2746  0F8F  00B1               	movwf	LCD_print_char@column
  2747  0F90  3030               	movlw	48
  2748  0F91  01B2               	clrf	LCD_print_char@column+1
  2749  0F92  00B3               	movwf	LCD_print_char@print_value
  2750  0F93  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2751                           
  2752                           ;Automated Solar Panel Orientation Setter.c: 304: LCD_print_char(2,9,'0');
  2753  0F98  3002               	movlw	2
  2754  0F99  1283               	bcf	3,5	;RP0=0, select bank0
  2755  0F9A  1303               	bcf	3,6	;RP1=0, select bank0
  2756  0F9B  00AF               	movwf	LCD_print_char@row
  2757  0F9C  3009               	movlw	9
  2758  0F9D  01B0               	clrf	LCD_print_char@row+1
  2759  0F9E  00B1               	movwf	LCD_print_char@column
  2760  0F9F  3030               	movlw	48
  2761  0FA0  01B2               	clrf	LCD_print_char@column+1
  2762  0FA1  00B3               	movwf	LCD_print_char@print_value
  2763  0FA2  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2764                           
  2765                           ;Automated Solar Panel Orientation Setter.c: 306: LCD_print_char(2,12,'0');
  2766  0FA7  3002               	movlw	2
  2767  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  2768  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  2769  0FAA  00AF               	movwf	LCD_print_char@row
  2770  0FAB  300C               	movlw	12
  2771  0FAC  01B0               	clrf	LCD_print_char@row+1
  2772  0FAD  00B1               	movwf	LCD_print_char@column
  2773  0FAE  3030               	movlw	48
  2774  0FAF  01B2               	clrf	LCD_print_char@column+1
  2775  0FB0  00B3               	movwf	LCD_print_char@print_value
  2776  0FB1  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2777                           
  2778                           ;Automated Solar Panel Orientation Setter.c: 307: LCD_print_char(2,13,'0');
  2779  0FB6  3002               	movlw	2
  2780  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  2781  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  2782  0FB9  00AF               	movwf	LCD_print_char@row
  2783  0FBA  300D               	movlw	13
  2784  0FBB  01B0               	clrf	LCD_print_char@row+1
  2785  0FBC  00B1               	movwf	LCD_print_char@column
  2786  0FBD  3030               	movlw	48
  2787  0FBE  01B2               	clrf	LCD_print_char@column+1
  2788  0FBF  00B3               	movwf	LCD_print_char@print_value
  2789  0FC0  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2790                           
  2791                           ;Automated Solar Panel Orientation Setter.c: 308: LCD_print_char(2,15,'0');
  2792  0FC5  3002               	movlw	2
  2793  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  2794  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  2795  0FC8  00AF               	movwf	LCD_print_char@row
  2796  0FC9  300F               	movlw	15
  2797  0FCA  01B0               	clrf	LCD_print_char@row+1
  2798  0FCB  00B1               	movwf	LCD_print_char@column
  2799  0FCC  3030               	movlw	48
  2800  0FCD  01B2               	clrf	LCD_print_char@column+1
  2801  0FCE  00B3               	movwf	LCD_print_char@print_value
  2802  0FCF  160A  118A  20AC  120A  158A  	fcall	_LCD_print_char
  2803                           
  2804                           ;Automated Solar Panel Orientation Setter.c: 311: state = 30;
  2805  0FD4  301E               	movlw	30
  2806  0FD5                     L6:	
  2807  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  2808  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  2809  0FD7                     L5:	
  2810  0FD7  00E0               	movwf	_state
  2811  0FD8                     l469:	
  2812                           ;Automated Solar Panel Orientation Setter.c: 312: break;
  2813                           
  2814  0FD8                     l5156:	
  2815  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2816  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2817  0FDA  0860               	movf	_state,w
  2818                           
  2819                           ; Switch size 1, requested type "space"
  2820                           ; Number of cases is 11, Range of values is 0 to 93
  2821                           ; switch strategies available:
  2822                           ; Name         Instructions Cycles
  2823                           ; simple_byte           34    18 (average)
  2824                           ; jumptable            260     6 (fixed)
  2825                           ;	Chosen strategy is simple_byte
  2826  0FDB  3A00               	xorlw	0	; case 0
  2827  0FDC  1903               	skipnz
  2828  0FDD  2FD8               	goto	l469
  2829  0FDE  3A01               	xorlw	1	; case 1
  2830  0FDF  1903               	skipnz
  2831  0FE0  29CB               	goto	l5084
  2832  0FE1  3A03               	xorlw	3	; case 2
  2833  0FE2  1903               	skipnz
  2834  0FE3  29CD               	goto	l5086
  2835  0FE4  3A01               	xorlw	1	; case 3
  2836  0FE5  1903               	skipnz
  2837  0FE6  29CF               	goto	l5088
  2838  0FE7  3A09               	xorlw	9	; case 10
  2839  0FE8  1903               	skipnz
  2840  0FE9  2B65               	goto	l5094
  2841  0FEA  3A1E               	xorlw	30	; case 20
  2842  0FEB  1903               	skipnz
  2843  0FEC  2E3C               	goto	l5146
  2844  0FED  3A0A               	xorlw	10	; case 30
  2845  0FEE  1903               	skipnz
  2846  0FEF  2E3C               	goto	l5146
  2847  0FF0  3A44               	xorlw	68	; case 90
  2848  0FF1  1903               	skipnz
  2849  0FF2  2FD8               	goto	l469
  2850  0FF3  3A01               	xorlw	1	; case 91
  2851  0FF4  1903               	skipnz
  2852  0FF5  29D1               	goto	l5090
  2853  0FF6  3A07               	xorlw	7	; case 92
  2854  0FF7  1903               	skipnz
  2855  0FF8  2C88               	goto	l5142
  2856  0FF9  3A01               	xorlw	1	; case 93
  2857  0FFA  1903               	skipnz
  2858  0FFB  2E42               	goto	l5148
  2859  0FFC  2FD8               	goto	l5156
  2860  0FFD  120A  118A  2810   	ljmp	start
  2861  1000                     __end_of_main:	
  2862                           
  2863                           	psect	text1
  2864  141E                     __ptext1:	
  2865 ;; *************** function _printf *****************
  2866 ;; Defined at:
  2867 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  f               1    wreg     PTR const unsigned char 
  2870 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(17), 
  2871 ;;		 -> STR_4(18), STR_3(18), STR_2(18), STR_1(18), 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  f               1   33[BANK0 ] PTR const unsigned char 
  2874 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(17), 
  2875 ;;		 -> STR_4(18), STR_3(18), STR_2(18), STR_1(18), 
  2876 ;;  idx             1   25[BANK0 ] unsigned char 
  2877 ;;  tmpval          4    0        struct .
  2878 ;;  flag            2   37[BANK0 ] unsigned short 
  2879 ;;  width           2   34[BANK0 ] int 
  2880 ;;  val             2   30[BANK0 ] unsigned int 
  2881 ;;  len             2   27[BANK0 ] unsigned int 
  2882 ;;  c               1   36[BANK0 ] char 
  2883 ;;  prec            1   32[BANK0 ] char 
  2884 ;;  ap              1   29[BANK0 ] PTR void [1]
  2885 ;;		 -> ?_printf(2), 
  2886 ;;  cp              1   24[BANK0 ] PTR const unsigned char 
  2887 ;;		 -> printf@c(1), 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  2   15[BANK0 ] int 
  2890 ;; Registers used:
  2891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 300/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2897 ;;      Params:         0       2       0       0       0
  2898 ;;      Locals:         0      19       0       0       0
  2899 ;;      Temps:          0       3       0       0       0
  2900 ;;      Totals:         0      24       0       0       0
  2901 ;;Total ram usage:       24 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    7
  2904 ;; This function calls:
  2905 ;;		___bmul
  2906 ;;		___lwdiv
  2907 ;;		___lwmod
  2908 ;;		___wmul
  2909 ;;		_isdigit
  2910 ;;		_putch
  2911 ;; This function is called by:
  2912 ;;		_main
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           
  2917                           ;psect for function _printf
  2918  141E                     _printf:	
  2919                           
  2920                           ;incstack = 0
  2921 ;; using string table level
  2922                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2923                           ;printf@f stored from wreg
  2924  141E  1283               	bcf	3,5	;RP0=0, select bank0
  2925  141F  1303               	bcf	3,6	;RP1=0, select bank0
  2926  1420  00C1               	movwf	printf@f
  2927                           
  2928                           ;doprnt.c: 466: va_list ap;
  2929                           ;doprnt.c: 499: signed char c;
  2930                           ;doprnt.c: 501: int width;
  2931                           ;doprnt.c: 506: signed char prec;
  2932                           ;doprnt.c: 508: unsigned short flag;
  2933                           ;doprnt.c: 523: union {
  2934                           ;doprnt.c: 524: unsigned long vd;
  2935                           ;doprnt.c: 525: double integ;
  2936                           ;doprnt.c: 526: } tmpval;
  2937                           ;doprnt.c: 528: unsigned int val;
  2938                           ;doprnt.c: 529: unsigned len;
  2939                           ;doprnt.c: 530: const char * cp;
  2940                           ;doprnt.c: 533: *ap = __va_start();
  2941  1421  302F               	movlw	(low (?_printf| 0))& (0+255)
  2942  1422  00BD               	movwf	printf@ap
  2943  1423                     l4556:	
  2944                           ;doprnt.c: 536: while(c = *f++) {
  2945                           
  2946  1423  1283               	bcf	3,5	;RP0=0, select bank0
  2947  1424  1303               	bcf	3,6	;RP1=0, select bank0
  2948  1425  0841               	movf	printf@f,w
  2949  1426  0AC1               	incf	printf@f,f
  2950  1427  0084               	movwf	4
  2951  1428  160A  158A  2000  160A  118A  	fcall	stringdir
  2952  142D  00C4               	movwf	printf@c
  2953  142E  0844               	movf	printf@c,w
  2954  142F  1903               	btfsc	3,2
  2955  1430  0008               	return
  2956                           
  2957                           ;doprnt.c: 538: if(c != '%')
  2958  1431  3A25               	xorlw	37
  2959  1432  1903               	btfsc	3,2
  2960  1433  2C39               	goto	l4260
  2961                           
  2962                           ;doprnt.c: 540: {
  2963                           ;doprnt.c: 541: (putch(c) );
  2964  1434  0844               	movf	printf@c,w
  2965  1435  2787  160A  118A   	fcall	_putch
  2966                           
  2967                           ;doprnt.c: 542: continue;
  2968  1438  2C23               	goto	l4556
  2969  1439                     l4260:	
  2970                           
  2971                           ;doprnt.c: 543: }
  2972                           ;doprnt.c: 546: width = 0;
  2973  1439  01C2               	clrf	printf@width
  2974  143A  01C3               	clrf	printf@width+1
  2975                           
  2976                           ;doprnt.c: 548: flag = 0;
  2977  143B  01C5               	clrf	printf@flag
  2978  143C  01C6               	clrf	printf@flag+1
  2979  143D  2C46               	goto	l4272
  2980  143E                     l691:	
  2981                           ;doprnt.c: 553: case '-':
  2982                           
  2983                           
  2984                           ;doprnt.c: 554: flag |= 0x08;
  2985  143E  15C5               	bsf	printf@flag,3
  2986                           
  2987                           ;doprnt.c: 556: continue;
  2988  143F  2C45               	goto	l4262
  2989  1440                     l693:	
  2990                           ;doprnt.c: 560: case ' ':
  2991                           
  2992                           
  2993                           ;doprnt.c: 561: flag |= 0x01;
  2994  1440  1445               	bsf	printf@flag,0
  2995  1441  2C45               	goto	l4262
  2996  1442                     l694:	
  2997                           ;doprnt.c: 573: case '#':
  2998                           
  2999                           
  3000                           ;doprnt.c: 574: flag |= 0x800;
  3001  1442  15C6               	bsf	printf@flag+1,3
  3002  1443  2C45               	goto	l4262
  3003  1444                     l695:	
  3004                           ;doprnt.c: 579: case '0':
  3005                           
  3006                           
  3007                           ;doprnt.c: 580: flag |= 0x04;
  3008  1444  1545               	bsf	printf@flag,2
  3009  1445                     l4262:	
  3010                           
  3011                           ;doprnt.c: 555: f++;
  3012  1445  0AC1               	incf	printf@f,f
  3013  1446                     l4272:	
  3014  1446  0841               	movf	printf@f,w
  3015  1447  0084               	movwf	4
  3016  1448  160A  158A  2000  160A  118A  	fcall	stringdir
  3017                           
  3018                           ; Switch size 1, requested type "space"
  3019                           ; Number of cases is 4, Range of values is 32 to 48
  3020                           ; switch strategies available:
  3021                           ; Name         Instructions Cycles
  3022                           ; simple_byte           13     7 (average)
  3023                           ; direct_byte           62    11 (fixed)
  3024                           ; jumptable            263     9 (fixed)
  3025                           ;	Chosen strategy is simple_byte
  3026  144D  3A20               	xorlw	32	; case 32
  3027  144E  1903               	skipnz
  3028  144F  2C40               	goto	l693
  3029  1450  3A03               	xorlw	3	; case 35
  3030  1451  1903               	skipnz
  3031  1452  2C42               	goto	l694
  3032  1453  3A0E               	xorlw	14	; case 45
  3033  1454  1903               	skipnz
  3034  1455  2C3E               	goto	l691
  3035  1456  3A1D               	xorlw	29	; case 48
  3036  1457  1903               	skipnz
  3037  1458  2C44               	goto	l695
  3038  1459  2C5A               	goto	l697
  3039  145A                     l697:	
  3040                           
  3041                           ;doprnt.c: 593: if(flag & 0x08)
  3042  145A  1DC5               	btfss	printf@flag,3
  3043  145B  2C5D               	goto	l4276
  3044                           
  3045                           ;doprnt.c: 594: flag &= ~0x04;
  3046  145C  1145               	bcf	printf@flag,2
  3047  145D                     l4276:	
  3048                           
  3049                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3050  145D  0841               	movf	printf@f,w
  3051  145E  0084               	movwf	4
  3052  145F  160A  158A  2000  160A  118A  	fcall	stringdir
  3053  1464  27A0  160A  118A   	fcall	_isdigit
  3054  1467  1C03               	btfss	3,0
  3055  1468  2C9C               	goto	l4288
  3056                           
  3057                           ;doprnt.c: 598: width = 0;
  3058  1469  01C2               	clrf	printf@width
  3059  146A  01C3               	clrf	printf@width+1
  3060  146B                     l4280:	
  3061                           
  3062                           ;doprnt.c: 600: width *= 10;
  3063  146B  300A               	movlw	10
  3064  146C  00A3               	movwf	___wmul@multiplier
  3065  146D  01A4               	clrf	___wmul@multiplier+1
  3066  146E  0843               	movf	printf@width+1,w
  3067  146F  00A6               	movwf	___wmul@multiplicand+1
  3068  1470  0842               	movf	printf@width,w
  3069  1471  00A5               	movwf	___wmul@multiplicand
  3070  1472  120A  118A  2632  160A  118A  	fcall	___wmul
  3071  1477  0824               	movf	?___wmul+1,w
  3072  1478  00C3               	movwf	printf@width+1
  3073  1479  0823               	movf	?___wmul,w
  3074  147A  00C2               	movwf	printf@width
  3075                           
  3076                           ;doprnt.c: 601: width += *f++ - '0';
  3077  147B  0841               	movf	printf@f,w
  3078  147C  0084               	movwf	4
  3079  147D  160A  158A  2000  160A  118A  	fcall	stringdir
  3080  1482  3ED0               	addlw	208
  3081  1483  00B1               	movwf	??_printf
  3082  1484  30FF               	movlw	255
  3083  1485  1803               	skipnc
  3084  1486  3000               	movlw	0
  3085  1487  00B2               	movwf	??_printf+1
  3086  1488  0831               	movf	??_printf,w
  3087  1489  07C2               	addwf	printf@width,f
  3088  148A  1803               	skipnc
  3089  148B  0AC3               	incf	printf@width+1,f
  3090  148C  0832               	movf	??_printf+1,w
  3091  148D  07C3               	addwf	printf@width+1,f
  3092  148E  0AC1               	incf	printf@f,f
  3093                           
  3094                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3095  148F  0841               	movf	printf@f,w
  3096  1490  0084               	movwf	4
  3097  1491  160A  158A  2000  160A  118A  	fcall	stringdir
  3098  1496  27A0  160A  118A   	fcall	_isdigit
  3099  1499  1C03               	btfss	3,0
  3100  149A  2CB1               	goto	l4296
  3101  149B  2C6B               	goto	l4280
  3102  149C                     l4288:	
  3103  149C  0841               	movf	printf@f,w
  3104  149D  0084               	movwf	4
  3105  149E  160A  158A  2000  160A  118A  	fcall	stringdir
  3106  14A3  3A2A               	xorlw	42
  3107  14A4  1D03               	skipz
  3108  14A5  2CB1               	goto	l4296
  3109                           
  3110                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  3111  14A6  083D               	movf	printf@ap,w
  3112  14A7  0084               	movwf	4
  3113  14A8  1383               	bcf	3,7	;select IRP bank0
  3114  14A9  0800               	movf	0,w
  3115  14AA  00C2               	movwf	printf@width
  3116  14AB  0A84               	incf	4,f
  3117  14AC  0800               	movf	0,w
  3118  14AD  00C3               	movwf	printf@width+1
  3119  14AE  0ABD               	incf	printf@ap,f
  3120  14AF  0ABD               	incf	printf@ap,f
  3121                           
  3122                           ;doprnt.c: 606: f++;
  3123  14B0  0AC1               	incf	printf@f,f
  3124  14B1                     l4296:	
  3125                           
  3126                           ;doprnt.c: 608: }
  3127                           ;doprnt.c: 611: if(*f == '.') {
  3128  14B1  0841               	movf	printf@f,w
  3129  14B2  0084               	movwf	4
  3130  14B3  160A  158A  2000  160A  118A  	fcall	stringdir
  3131  14B8  3A2E               	xorlw	46
  3132  14B9  1D03               	skipz
  3133  14BA  2CF0               	goto	l4318
  3134                           
  3135                           ;doprnt.c: 612: flag |= 0x4000;
  3136  14BB  1746               	bsf	printf@flag+1,6
  3137                           
  3138                           ;doprnt.c: 613: f++;
  3139  14BC  0AC1               	incf	printf@f,f
  3140                           
  3141                           ;doprnt.c: 615: if(*f == '*') {
  3142  14BD  0841               	movf	printf@f,w
  3143  14BE  0084               	movwf	4
  3144  14BF  160A  158A  2000  160A  118A  	fcall	stringdir
  3145  14C4  3A2A               	xorlw	42
  3146  14C5  1D03               	skipz
  3147  14C6  2CD0               	goto	l4310
  3148                           
  3149                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  3150  14C7  083D               	movf	printf@ap,w
  3151  14C8  0084               	movwf	4
  3152  14C9  1383               	bcf	3,7	;select IRP bank0
  3153  14CA  0800               	movf	0,w
  3154  14CB  00C0               	movwf	printf@prec
  3155  14CC  0ABD               	incf	printf@ap,f
  3156  14CD  0ABD               	incf	printf@ap,f
  3157                           
  3158                           ;doprnt.c: 617: f++;
  3159  14CE  0AC1               	incf	printf@f,f
  3160                           
  3161                           ;doprnt.c: 618: } else
  3162  14CF  2D68               	goto	l4364
  3163  14D0                     l4310:	
  3164                           
  3165                           ;doprnt.c: 620: {
  3166                           ;doprnt.c: 621: prec = 0;
  3167  14D0  01C0               	clrf	printf@prec
  3168  14D1                     l4316:	
  3169                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3170                           
  3171  14D1  0841               	movf	printf@f,w
  3172  14D2  0084               	movwf	4
  3173  14D3  160A  158A  2000  160A  118A  	fcall	stringdir
  3174  14D8  27A0  160A  118A   	fcall	_isdigit
  3175                           
  3176                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3177  14DB  0841               	movf	printf@f,w
  3178  14DC  1C03               	btfss	3,0
  3179  14DD  2D69               	goto	L21
  3180  14DE  0084               	movwf	4
  3181  14DF  160A  158A  2000  160A  118A  	fcall	stringdir
  3182  14E4  00B1               	movwf	??_printf
  3183  14E5  300A               	movlw	10
  3184  14E6  00A3               	movwf	___bmul@multiplicand
  3185  14E7  0840               	movf	printf@prec,w
  3186  14E8  27AE  160A  118A   	fcall	___bmul
  3187  14EB  0731               	addwf	??_printf,w
  3188  14EC  3ED0               	addlw	-48
  3189  14ED  00C0               	movwf	printf@prec
  3190  14EE  0AC1               	incf	printf@f,f
  3191  14EF  2CD1               	goto	l4316
  3192  14F0                     l4318:	
  3193                           
  3194                           ;doprnt.c: 626: prec = 0;
  3195  14F0  01C0               	clrf	printf@prec
  3196  14F1  2D68               	goto	l4364
  3197  14F2                     l714:	
  3198                           ;doprnt.c: 689: case 'o':
  3199                           
  3200                           
  3201                           ;doprnt.c: 691: flag |= 0x40;
  3202  14F2  1745               	bsf	printf@flag,6
  3203                           
  3204                           ;doprnt.c: 693: break;
  3205  14F3  2D8A               	goto	l4366
  3206  14F4                     l718:	
  3207                           ;doprnt.c: 712: case 'X':
  3208                           
  3209                           
  3210                           ;doprnt.c: 714: flag |= 0x20;
  3211  14F4  16C5               	bsf	printf@flag,5
  3212  14F5                     l719:	
  3213                           ;doprnt.c: 718: case 'x':
  3214                           
  3215                           
  3216                           ;doprnt.c: 721: flag |= 0x80;
  3217  14F5  17C5               	bsf	printf@flag,7
  3218                           
  3219                           ;doprnt.c: 723: break;
  3220  14F6  2D8A               	goto	l4366
  3221  14F7                     l4320:	
  3222                           
  3223                           ;doprnt.c: 753: if(prec && prec < len)
  3224  14F7  0840               	movf	printf@prec,w
  3225  14F8  1903               	btfsc	3,2
  3226  14F9  2D0C               	goto	l4326
  3227  14FA  0840               	movf	printf@prec,w
  3228  14FB  00B1               	movwf	??_printf
  3229  14FC  01B2               	clrf	??_printf+1
  3230  14FD  1BB1               	btfsc	??_printf,7
  3231  14FE  03B2               	decf	??_printf+1,f
  3232  14FF  083C               	movf	printf@len+1,w
  3233  1500  0232               	subwf	??_printf+1,w
  3234  1501  1D03               	skipz
  3235  1502  2D05               	goto	u5635
  3236  1503  083B               	movf	printf@len,w
  3237  1504  0231               	subwf	??_printf,w
  3238  1505                     u5635:	
  3239  1505  1803               	skipnc
  3240  1506  2D0C               	goto	l4326
  3241                           
  3242                           ;doprnt.c: 754: len = prec;
  3243  1507  0840               	movf	printf@prec,w
  3244  1508  00BB               	movwf	printf@len
  3245  1509  01BC               	clrf	printf@len+1
  3246  150A  1BBB               	btfsc	printf@len,7
  3247  150B  03BC               	decf	printf@len+1,f
  3248  150C                     l4326:	
  3249                           
  3250                           ;doprnt.c: 757: if(width > len)
  3251  150C  0843               	movf	printf@width+1,w
  3252  150D  023C               	subwf	printf@len+1,w
  3253  150E  1D03               	skipz
  3254  150F  2D12               	goto	u5645
  3255  1510  0842               	movf	printf@width,w
  3256  1511  023B               	subwf	printf@len,w
  3257  1512                     u5645:	
  3258  1512  1803               	skipnc
  3259  1513  2D1B               	goto	l4330
  3260                           
  3261                           ;doprnt.c: 758: width -= len;
  3262  1514  083B               	movf	printf@len,w
  3263  1515  02C2               	subwf	printf@width,f
  3264  1516  083C               	movf	printf@len+1,w
  3265  1517  1C03               	skipc
  3266  1518  03C3               	decf	printf@width+1,f
  3267  1519  02C3               	subwf	printf@width+1,f
  3268  151A  2D1D               	goto	l4332
  3269  151B                     l4330:	
  3270                           
  3271                           ;doprnt.c: 759: else
  3272                           ;doprnt.c: 760: width = 0;
  3273  151B  01C2               	clrf	printf@width
  3274  151C  01C3               	clrf	printf@width+1
  3275  151D                     l4332:	
  3276                           
  3277                           ;doprnt.c: 762: if(!(flag & 0x08))
  3278  151D  1DC5               	btfss	printf@flag,3
  3279  151E  2D24               	goto	l4338
  3280  151F  2D3A               	goto	l4344
  3281  1520                     l4336:	
  3282                           
  3283                           ;doprnt.c: 765: (putch(' ') );
  3284  1520  3020               	movlw	32
  3285  1521  2787  160A  118A   	fcall	_putch
  3286  1524                     l4338:	
  3287  1524  30FF               	movlw	-1
  3288  1525  1283               	bcf	3,5	;RP0=0, select bank0
  3289  1526  1303               	bcf	3,6	;RP1=0, select bank0
  3290  1527  07C2               	addwf	printf@width,f
  3291  1528  1C03               	skipc
  3292  1529  03C3               	decf	printf@width+1,f
  3293  152A  0F42               	incfsz	printf@width,w
  3294  152B  2D20               	goto	l4336
  3295  152C  0A43               	incf	printf@width+1,w
  3296  152D  1903               	btfsc	3,2
  3297  152E  2D3A               	goto	l4344
  3298  152F  2D20               	goto	l4336
  3299  1530                     l4340:	
  3300                           
  3301                           ;doprnt.c: 768: (putch(*cp++) );
  3302  1530  0838               	movf	printf@cp,w
  3303  1531  0084               	movwf	4
  3304  1532  1383               	bcf	3,7	;select IRP bank0
  3305  1533  0800               	movf	0,w
  3306  1534  2787  160A  118A   	fcall	_putch
  3307  1537  1283               	bcf	3,5	;RP0=0, select bank0
  3308  1538  1303               	bcf	3,6	;RP1=0, select bank0
  3309  1539  0AB8               	incf	printf@cp,f
  3310  153A                     l4344:	
  3311  153A  3001               	movlw	1
  3312  153B  02BB               	subwf	printf@len,f
  3313  153C  3000               	movlw	0
  3314  153D  1C03               	skipc
  3315  153E  03BC               	decf	printf@len+1,f
  3316  153F  02BC               	subwf	printf@len+1,f
  3317  1540  0F3B               	incfsz	printf@len,w
  3318  1541  2D30               	goto	l4340
  3319  1542  0A3C               	incf	printf@len+1,w
  3320  1543  1D03               	btfss	3,2
  3321  1544  2D30               	goto	l4340
  3322                           
  3323                           ;doprnt.c: 770: if(flag & 0x08)
  3324  1545  19C5               	btfsc	printf@flag,3
  3325  1546  2D4C               	goto	l4350
  3326  1547  2C23               	goto	l4556
  3327  1548                     l4348:	
  3328                           
  3329                           ;doprnt.c: 772: (putch(' ') );
  3330  1548  3020               	movlw	32
  3331  1549  2787  160A  118A   	fcall	_putch
  3332  154C                     l4350:	
  3333  154C  30FF               	movlw	-1
  3334  154D  1283               	bcf	3,5	;RP0=0, select bank0
  3335  154E  1303               	bcf	3,6	;RP1=0, select bank0
  3336  154F  07C2               	addwf	printf@width,f
  3337  1550  1C03               	skipc
  3338  1551  03C3               	decf	printf@width+1,f
  3339  1552  0F42               	incfsz	printf@width,w
  3340  1553  2D48               	goto	l4348
  3341  1554  0A43               	incf	printf@width+1,w
  3342  1555  1903               	btfsc	3,2
  3343  1556  2C23               	goto	l4556
  3344  1557  2D48               	goto	l4348
  3345  1558                     l4352:	
  3346                           
  3347                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3348  1558  083D               	movf	printf@ap,w
  3349  1559  0084               	movwf	4
  3350  155A  1383               	bcf	3,7	;select IRP bank0
  3351  155B  0800               	movf	0,w
  3352  155C  00C4               	movwf	printf@c
  3353  155D  0ABD               	incf	printf@ap,f
  3354  155E  0ABD               	incf	printf@ap,f
  3355  155F                     l4356:	
  3356                           
  3357                           ;doprnt.c: 805: cp = (char *)&c;
  3358  155F  3044               	movlw	(low (printf@c| 0))& (0+255)
  3359  1560  00B8               	movwf	printf@cp
  3360                           
  3361                           ;doprnt.c: 806: len = 1;
  3362  1561  01BB               	clrf	printf@len
  3363  1562  0ABB               	incf	printf@len,f
  3364  1563  01BC               	clrf	printf@len+1
  3365                           
  3366                           ;doprnt.c: 807: goto dostring;
  3367  1564  2CF7               	goto	l4320
  3368  1565                     l4360:	
  3369                           
  3370                           ;doprnt.c: 818: flag |= 0xC0;
  3371  1565  30C0               	movlw	192
  3372  1566  04C5               	iorwf	printf@flag,f
  3373                           
  3374                           ;doprnt.c: 819: break;
  3375  1567  2D8A               	goto	l4366
  3376  1568                     l4364:	
  3377  1568  0841               	movf	printf@f,w
  3378  1569                     L21:	
  3379  1569  0AC1               	incf	printf@f,f
  3380  156A  0084               	movwf	4
  3381  156B  160A  158A  2000  160A  118A  	fcall	stringdir
  3382  1570  00C4               	movwf	printf@c
  3383                           
  3384                           ; Switch size 1, requested type "space"
  3385                           ; Number of cases is 8, Range of values is 0 to 120
  3386                           ; switch strategies available:
  3387                           ; Name         Instructions Cycles
  3388                           ; simple_byte           25    13 (average)
  3389                           ; jumptable            260     6 (fixed)
  3390                           ;	Chosen strategy is simple_byte
  3391  1571  3A00               	xorlw	0	; case 0
  3392  1572  1903               	skipnz
  3393  1573  2F86               	goto	l816
  3394  1574  3A58               	xorlw	88	; case 88
  3395  1575  1903               	skipnz
  3396  1576  2CF4               	goto	l718
  3397  1577  3A3B               	xorlw	59	; case 99
  3398  1578  1903               	skipnz
  3399  1579  2D58               	goto	l4352
  3400  157A  3A07               	xorlw	7	; case 100
  3401  157B  1903               	skipnz
  3402  157C  2D8A               	goto	l4366
  3403  157D  3A0D               	xorlw	13	; case 105
  3404  157E  1903               	skipnz
  3405  157F  2D8A               	goto	l4366
  3406  1580  3A06               	xorlw	6	; case 111
  3407  1581  1903               	skipnz
  3408  1582  2CF2               	goto	l714
  3409  1583  3A1A               	xorlw	26	; case 117
  3410  1584  1903               	skipnz
  3411  1585  2D65               	goto	l4360
  3412  1586  3A0D               	xorlw	13	; case 120
  3413  1587  1903               	skipnz
  3414  1588  2CF5               	goto	l719
  3415  1589  2D5F               	goto	l4356
  3416  158A                     l4366:	
  3417                           
  3418                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3419  158A  0845               	movf	printf@flag,w
  3420  158B  39C0               	andlw	192
  3421  158C  1D03               	btfss	3,2
  3422  158D  2D9B               	goto	l4378
  3423                           
  3424                           ;doprnt.c: 1253: {
  3425                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3426  158E  27D4  160A  118A   	fcall	PL14	;call to abstracted procedure
  3427                           
  3428                           ;doprnt.c: 1261: if((int)val < 0) {
  3429  1591  1FBF               	btfss	printf@val+1,7
  3430  1592  2D9E               	goto	l4382
  3431                           
  3432                           ;doprnt.c: 1262: flag |= 0x03;
  3433  1593  3003               	movlw	3
  3434  1594  04C5               	iorwf	printf@flag,f
  3435                           
  3436                           ;doprnt.c: 1263: val = -val;
  3437  1595  09BE               	comf	printf@val,f
  3438  1596  09BF               	comf	printf@val+1,f
  3439  1597  0ABE               	incf	printf@val,f
  3440  1598  1903               	skipnz
  3441  1599  0ABF               	incf	printf@val+1,f
  3442  159A  2D9E               	goto	l4382
  3443  159B                     l4378:	
  3444                           
  3445                           ;doprnt.c: 1268: else
  3446                           ;doprnt.c: 1273: {
  3447                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3448  159B  27D4  160A  118A   	fcall	PL14	;call to abstracted procedure
  3449  159E                     l4382:	
  3450                           
  3451                           ;doprnt.c: 1287: }
  3452                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3453  159E  0840               	movf	printf@prec,w
  3454  159F  1D03               	btfss	3,2
  3455  15A0  2E01               	goto	l4426
  3456  15A1  083E               	movf	printf@val,w
  3457  15A2  043F               	iorwf	printf@val+1,w
  3458  15A3  1D03               	btfss	3,2
  3459  15A4  2E01               	goto	l4426
  3460                           
  3461                           ;doprnt.c: 1291: prec++;
  3462  15A5  0AC0               	incf	printf@prec,f
  3463  15A6  2E01               	goto	l4426
  3464  15A7                     l744:	
  3465                           
  3466                           ;doprnt.c: 1302: case 0xC0:
  3467                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3468  15A7  01C4               	clrf	printf@c
  3469  15A8                     L7:	
  3470  15A8  3005               	movlw	5
  3471  15A9  0AC4               	incf	printf@c,f
  3472  15AA  0644               	xorwf	printf@c,w
  3473  15AB  1903               	btfsc	3,2
  3474  15AC  2E0F               	goto	l4428
  3475                           
  3476                           ;doprnt.c: 1306: if(val < dpowers[c])
  3477  15AD  1003               	clrc
  3478  15AE  0D44               	rlf	printf@c,w
  3479  15AF  3E0D               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3480  15B0  0084               	movwf	4
  3481  15B1  160A  158A  2000  160A  118A  	fcall	stringdir
  3482  15B6  00B1               	movwf	??_printf
  3483  15B7  160A  158A  2000  160A  118A  	fcall	stringdir
  3484  15BC  00B2               	movwf	??_printf+1
  3485  15BD  023F               	subwf	printf@val+1,w
  3486  15BE  1D03               	skipz
  3487  15BF  2DC2               	goto	u5755
  3488  15C0  0831               	movf	??_printf,w
  3489  15C1  023E               	subwf	printf@val,w
  3490  15C2                     u5755:	
  3491  15C2  1C03               	btfss	3,0
  3492  15C3  2E0F               	goto	l4428
  3493  15C4  2DA8               	goto	L7
  3494  15C5                     l749:	
  3495                           ;doprnt.c: 1314: case 0x80:
  3496                           
  3497                           
  3498                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3499  15C5  01C4               	clrf	printf@c
  3500  15C6                     L8:	
  3501  15C6  3004               	movlw	4
  3502  15C7  0AC4               	incf	printf@c,f
  3503  15C8  0644               	xorwf	printf@c,w
  3504  15C9  1903               	btfsc	3,2
  3505  15CA  2E0F               	goto	l4428
  3506                           
  3507                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3508  15CB  1003               	clrc
  3509  15CC  0D44               	rlf	printf@c,w
  3510  15CD  3E17               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  3511  15CE  0084               	movwf	4
  3512  15CF  160A  158A  2000  160A  118A  	fcall	stringdir
  3513  15D4  00B1               	movwf	??_printf
  3514  15D5  160A  158A  2000  160A  118A  	fcall	stringdir
  3515  15DA  00B2               	movwf	??_printf+1
  3516  15DB  023F               	subwf	printf@val+1,w
  3517  15DC  1D03               	skipz
  3518  15DD  2DE0               	goto	u5775
  3519  15DE  0831               	movf	??_printf,w
  3520  15DF  023E               	subwf	printf@val,w
  3521  15E0                     u5775:	
  3522  15E0  1C03               	btfss	3,0
  3523  15E1  2E0F               	goto	l4428
  3524  15E2  2DC6               	goto	L8
  3525  15E3                     l753:	
  3526                           ;doprnt.c: 1326: case 0x40:
  3527                           
  3528                           
  3529                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  3530  15E3  01C4               	clrf	printf@c
  3531  15E4                     L9:	
  3532  15E4  3006               	movlw	6
  3533  15E5  0AC4               	incf	printf@c,f
  3534  15E6  0644               	xorwf	printf@c,w
  3535  15E7  1903               	btfsc	3,2
  3536  15E8  2E0F               	goto	l4428
  3537                           
  3538                           ;doprnt.c: 1329: if(val < octpowers[c])
  3539  15E9  1003               	clrc
  3540  15EA  0D44               	rlf	printf@c,w
  3541  15EB  3E01               	addlw	low ((_octpowers-__stringbase)| (0+32768))
  3542  15EC  0084               	movwf	4
  3543  15ED  160A  158A  2000  160A  118A  	fcall	stringdir
  3544  15F2  00B1               	movwf	??_printf
  3545  15F3  160A  158A  2000  160A  118A  	fcall	stringdir
  3546  15F8  00B2               	movwf	??_printf+1
  3547  15F9  023F               	subwf	printf@val+1,w
  3548  15FA  1D03               	skipz
  3549  15FB  2DFE               	goto	u5795
  3550  15FC  0831               	movf	??_printf,w
  3551  15FD  023E               	subwf	printf@val,w
  3552  15FE                     u5795:	
  3553  15FE  1C03               	btfss	3,0
  3554  15FF  2E0F               	goto	l4428
  3555  1600  2DE4               	goto	L9
  3556  1601                     l4426:	
  3557  1601  0845               	movf	printf@flag,w
  3558  1602  39C0               	andlw	192
  3559                           
  3560                           ; Switch size 1, requested type "space"
  3561                           ; Number of cases is 4, Range of values is 0 to 192
  3562                           ; switch strategies available:
  3563                           ; Name         Instructions Cycles
  3564                           ; simple_byte           13     7 (average)
  3565                           ; jumptable            260     6 (fixed)
  3566                           ;	Chosen strategy is simple_byte
  3567  1603  1903               	skipnz
  3568  1604  2DA7               	goto	l744
  3569  1605  3A40               	xorlw	64	; case 64
  3570  1606  1903               	skipnz
  3571  1607  2DE3               	goto	l753
  3572  1608  3AC0               	xorlw	192	; case 128
  3573  1609  1903               	skipnz
  3574  160A  2DC5               	goto	l749
  3575  160B  3A40               	xorlw	64	; case 192
  3576  160C  1903               	skipnz
  3577  160D  2DA7               	goto	l744
  3578  160E  2E0F               	goto	l4428
  3579  160F                     l4428:	
  3580                           
  3581                           ;doprnt.c: 1339: if(c < prec)
  3582  160F  0844               	movf	printf@c,w
  3583  1610  3A80               	xorlw	128
  3584  1611  00B1               	movwf	??_printf
  3585  1612  0840               	movf	printf@prec,w
  3586  1613  3A80               	xorlw	128
  3587  1614  02B1               	subwf	??_printf,f
  3588                           
  3589                           ;doprnt.c: 1340: c = prec;
  3590  1615  0840               	movf	printf@prec,w
  3591  1616  1803               	skipnc
  3592  1617  2E1A               	goto	L22
  3593  1618  00C4               	movwf	printf@c
  3594  1619  2E23               	goto	l4436
  3595  161A                     L22:	
  3596                           ;doprnt.c: 1341: else if(prec < c)
  3597                           
  3598  161A  3A80               	xorlw	128
  3599  161B  00B1               	movwf	??_printf
  3600  161C  0844               	movf	printf@c,w
  3601  161D  3A80               	xorlw	128
  3602  161E  02B1               	subwf	??_printf,f
  3603  161F  1803               	skipnc
  3604  1620  2E23               	goto	l4436
  3605                           
  3606                           ;doprnt.c: 1342: prec = c;
  3607  1621  0844               	movf	printf@c,w
  3608  1622  00C0               	movwf	printf@prec
  3609  1623                     l4436:	
  3610                           
  3611                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3612  1623  0842               	movf	printf@width,w
  3613  1624  0443               	iorwf	printf@width+1,w
  3614  1625  1903               	btfsc	3,2
  3615  1626  2E2F               	goto	l4442
  3616  1627  0845               	movf	printf@flag,w
  3617  1628  3903               	andlw	3
  3618  1629  1903               	btfsc	3,2
  3619  162A  2E2F               	goto	l4442
  3620                           
  3621                           ;doprnt.c: 1346: width--;
  3622  162B  30FF               	movlw	-1
  3623  162C  07C2               	addwf	printf@width,f
  3624  162D  1C03               	skipc
  3625  162E  03C3               	decf	printf@width+1,f
  3626  162F                     l4442:	
  3627                           
  3628                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3629  162F  1F46               	btfss	printf@flag+1,6
  3630  1630  2E42               	goto	l4450
  3631                           
  3632                           ;doprnt.c: 1349: if(width > prec)
  3633  1631  0840               	movf	printf@prec,w
  3634  1632  27BC  160A  118A   	fcall	PL6	;call to abstracted procedure
  3635  1635  1803               	skipnc
  3636  1636  2E3E               	goto	l4448
  3637                           
  3638                           ;doprnt.c: 1350: width -= prec;
  3639  1637  1283               	bcf	3,5	;RP0=0, select bank0
  3640  1638  1303               	bcf	3,6	;RP1=0, select bank0
  3641  1639  0840               	movf	printf@prec,w
  3642  163A  27DF  160A  118A   	fcall	PL18	;call to abstracted procedure
  3643  163D  2E42               	goto	l4450
  3644  163E                     l4448:	
  3645                           
  3646                           ;doprnt.c: 1351: else
  3647                           ;doprnt.c: 1352: width = 0;
  3648  163E  1283               	bcf	3,5	;RP0=0, select bank0
  3649  163F  1303               	bcf	3,6	;RP1=0, select bank0
  3650  1640  01C2               	clrf	printf@width
  3651  1641  01C3               	clrf	printf@width+1
  3652  1642                     l4450:	
  3653                           
  3654                           ;doprnt.c: 1353: }
  3655                           ;doprnt.c: 1357: if((flag & (
  3656                           ;doprnt.c: 1359: 0x04|
  3657                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  3658  1642  30C4               	movlw	196
  3659  1643  27E9  160A  118A   	fcall	PL22	;call to abstracted procedure
  3660  1646  1903               	skipnz
  3661  1647  0632               	xorwf	??_printf+1,w
  3662  1648  1D03               	btfss	3,2
  3663  1649  2E50               	goto	l4456
  3664                           
  3665                           ;doprnt.c: 1362: if(width)
  3666  164A  0842               	movf	printf@width,w
  3667  164B  0443               	iorwf	printf@width+1,w
  3668  164C  1903               	btfsc	3,2
  3669  164D  2E6D               	goto	l4464
  3670                           
  3671                           ;doprnt.c: 1363: width--;
  3672  164E  30FF               	movlw	-1
  3673  164F  2E65               	goto	L10
  3674  1650                     l4456:	
  3675                           
  3676                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3677  1650  27CB  160A  118A   	fcall	PL8	;call to abstracted procedure
  3678  1653  1903               	skipnz
  3679  1654  0632               	xorwf	??_printf+1,w
  3680  1655  1D03               	btfss	3,2
  3681  1656  2E6D               	goto	l4464
  3682                           
  3683                           ;doprnt.c: 1372: if(width > 2)
  3684  1657  0843               	movf	printf@width+1,w
  3685  1658  3A80               	xorlw	128
  3686  1659  00FF               	movwf	127
  3687  165A  3080               	movlw	128
  3688  165B  027F               	subwf	127,w
  3689  165C  1D03               	skipz
  3690  165D  2E60               	goto	u5895
  3691  165E  3003               	movlw	3
  3692  165F  0242               	subwf	printf@width,w
  3693  1660                     u5895:	
  3694  1660  1C03               	skipc
  3695  1661  2E69               	goto	l4462
  3696                           
  3697                           ;doprnt.c: 1373: width -= 2;
  3698  1662  30FE               	movlw	-2
  3699  1663  1283               	bcf	3,5	;RP0=0, select bank0
  3700  1664  1303               	bcf	3,6	;RP1=0, select bank0
  3701  1665                     L10:	
  3702  1665  07C2               	addwf	printf@width,f
  3703  1666  1C03               	skipc
  3704  1667  03C3               	decf	printf@width+1,f
  3705  1668  2E6D               	goto	l4464
  3706  1669                     l4462:	
  3707                           
  3708                           ;doprnt.c: 1374: else
  3709                           ;doprnt.c: 1375: width = 0;
  3710  1669  1283               	bcf	3,5	;RP0=0, select bank0
  3711  166A  1303               	bcf	3,6	;RP1=0, select bank0
  3712  166B  01C2               	clrf	printf@width
  3713  166C  01C3               	clrf	printf@width+1
  3714  166D                     l4464:	
  3715                           
  3716                           ;doprnt.c: 1376: }
  3717                           ;doprnt.c: 1381: if(width > c)
  3718  166D  0844               	movf	printf@c,w
  3719  166E  27BC  160A  118A   	fcall	PL6	;call to abstracted procedure
  3720  1671  1803               	skipnc
  3721  1672  2E7A               	goto	l4468
  3722                           
  3723                           ;doprnt.c: 1382: width -= c;
  3724  1673  1283               	bcf	3,5	;RP0=0, select bank0
  3725  1674  1303               	bcf	3,6	;RP1=0, select bank0
  3726  1675  0844               	movf	printf@c,w
  3727  1676  27DF  160A  118A   	fcall	PL18	;call to abstracted procedure
  3728  1679  2E7E               	goto	l4470
  3729  167A                     l4468:	
  3730                           
  3731                           ;doprnt.c: 1383: else
  3732                           ;doprnt.c: 1384: width = 0;
  3733  167A  1283               	bcf	3,5	;RP0=0, select bank0
  3734  167B  1303               	bcf	3,6	;RP1=0, select bank0
  3735  167C  01C2               	clrf	printf@width
  3736  167D  01C3               	clrf	printf@width+1
  3737  167E                     l4470:	
  3738                           
  3739                           ;doprnt.c: 1387: if(flag & 0x04) {
  3740  167E  1D45               	btfss	printf@flag,2
  3741  167F  2EB3               	goto	l4496
  3742                           
  3743                           ;doprnt.c: 1392: if(flag & 0x03)
  3744  1680  0845               	movf	printf@flag,w
  3745  1681  3903               	andlw	3
  3746  1682  1903               	btfsc	3,2
  3747  1683  2E86               	goto	l773
  3748                           
  3749                           ;doprnt.c: 1393: (putch('-') );
  3750  1684  302D               	movlw	45
  3751  1685  2E9F               	goto	L11
  3752  1686                     l773:	
  3753                           
  3754                           ;doprnt.c: 1396: else
  3755                           ;doprnt.c: 1399: if(flag & 0x01)
  3756  1686  1C45               	btfss	printf@flag,0
  3757  1687  2E8A               	goto	l4478
  3758                           
  3759                           ;doprnt.c: 1400: (putch(' ') );
  3760  1688  3020               	movlw	32
  3761  1689  2E9F               	goto	L11
  3762  168A                     l4478:	
  3763                           
  3764                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3765  168A  27CB  160A  118A   	fcall	PL8	;call to abstracted procedure
  3766  168D  1903               	skipnz
  3767  168E  0632               	xorwf	??_printf+1,w
  3768  168F  1D03               	btfss	3,2
  3769  1690  2EA2               	goto	l4490
  3770                           
  3771                           ;doprnt.c: 1404: (putch('0') );
  3772  1691  3030               	movlw	48
  3773  1692  2787  160A  118A   	fcall	_putch
  3774                           
  3775                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  3776  1695  1283               	bcf	3,5	;RP0=0, select bank0
  3777  1696  1303               	bcf	3,6	;RP1=0, select bank0
  3778  1697  1AC5               	btfsc	printf@flag,5
  3779  1698  2E9B               	goto	l4486
  3780  1699  3078               	movlw	120
  3781  169A  2E9C               	goto	L12
  3782  169B                     l4486:	
  3783  169B  3058               	movlw	88
  3784  169C                     L12:	
  3785  169C  00B4               	movwf	_printf$348
  3786  169D  01B5               	clrf	_printf$348+1
  3787  169E  0834               	movf	_printf$348,w
  3788  169F                     L11:	
  3789  169F  2787  160A  118A   	fcall	_putch
  3790  16A2                     l4490:	
  3791                           
  3792                           ;doprnt.c: 1412: }
  3793                           ;doprnt.c: 1415: if(width)
  3794  16A2  1283               	bcf	3,5	;RP0=0, select bank0
  3795  16A3  1303               	bcf	3,6	;RP1=0, select bank0
  3796  16A4                     L19:	
  3797  16A4  0842               	movf	printf@width,w
  3798  16A5  0443               	iorwf	printf@width+1,w
  3799  16A6  1903               	btfsc	3,2
  3800  16A7  2F6A               	goto	l4548
  3801                           
  3802                           ;doprnt.c: 1417: (putch('0') );
  3803  16A8  3030               	movlw	48
  3804  16A9  2787  160A  118A   	fcall	_putch
  3805                           
  3806                           ;doprnt.c: 1418: while(--width);
  3807  16AC  30FF               	movlw	-1
  3808  16AD  1283               	bcf	3,5	;RP0=0, select bank0
  3809  16AE  1303               	bcf	3,6	;RP1=0, select bank0
  3810  16AF  07C2               	addwf	printf@width,f
  3811  16B0  1C03               	skipc
  3812  16B1  03C3               	decf	printf@width+1,f
  3813  16B2  2EA4               	goto	L19
  3814  16B3                     l4496:	
  3815                           
  3816                           ;doprnt.c: 1422: {
  3817                           ;doprnt.c: 1424: if(width
  3818                           ;doprnt.c: 1426: && !(flag & 0x08)
  3819                           ;doprnt.c: 1428: )
  3820  16B3  0842               	movf	printf@width,w
  3821  16B4  0443               	iorwf	printf@width+1,w
  3822  16B5  1D03               	btfss	3,2
  3823  16B6  19C5               	btfsc	printf@flag,3
  3824  16B7  2EC1               	goto	l4504
  3825  16B8                     l4500:	
  3826                           
  3827                           ;doprnt.c: 1430: (putch(' ') );
  3828  16B8  3020               	movlw	32
  3829  16B9  2787  160A  118A   	fcall	_putch
  3830                           
  3831                           ;doprnt.c: 1431: while(--width);
  3832  16BC  27F1  160A  118A   	fcall	PL24	;call to abstracted procedure
  3833  16BF  1D03               	btfss	3,2
  3834  16C0  2EB8               	goto	l4500
  3835  16C1                     l4504:	
  3836                           
  3837                           ;doprnt.c: 1438: if(flag & 0x03)
  3838  16C1  0845               	movf	printf@flag,w
  3839  16C2  3903               	andlw	3
  3840  16C3  1903               	btfsc	3,2
  3841  16C4  2EC7               	goto	l789
  3842                           
  3843                           ;doprnt.c: 1439: (putch('-') );
  3844  16C5  302D               	movlw	45
  3845  16C6  2ECA               	goto	L13
  3846  16C7                     l789:	
  3847                           
  3848                           ;doprnt.c: 1443: else if(flag & 0x01)
  3849  16C7  1C45               	btfss	printf@flag,0
  3850  16C8  2ECD               	goto	l4510
  3851                           
  3852                           ;doprnt.c: 1444: (putch(' ') );
  3853  16C9  3020               	movlw	32
  3854  16CA                     L13:	
  3855  16CA  2787  160A  118A   	fcall	_putch
  3856  16CD                     l4510:	
  3857                           
  3858                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  3859  16CD  30C0               	movlw	192
  3860  16CE  1283               	bcf	3,5	;RP0=0, select bank0
  3861  16CF  1303               	bcf	3,6	;RP1=0, select bank0
  3862  16D0  27E9  160A  118A   	fcall	PL22	;call to abstracted procedure
  3863  16D3  1903               	skipnz
  3864  16D4  0632               	xorwf	??_printf+1,w
  3865  16D5  1D03               	btfss	3,2
  3866  16D6  2ED9               	goto	l4514
  3867                           
  3868                           ;doprnt.c: 1449: (putch('0') );
  3869  16D7  3030               	movlw	48
  3870  16D8  2F67               	goto	L14
  3871  16D9                     l4514:	
  3872                           
  3873                           ;doprnt.c: 1450: else
  3874                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3875  16D9  27CB  160A  118A   	fcall	PL8	;call to abstracted procedure
  3876  16DC  1903               	skipnz
  3877  16DD  0632               	xorwf	??_printf+1,w
  3878  16DE  1D03               	btfss	3,2
  3879  16DF  2F6A               	goto	l4548
  3880                           
  3881                           ;doprnt.c: 1458: (putch('0') );
  3882  16E0  3030               	movlw	48
  3883  16E1  2787  160A  118A   	fcall	_putch
  3884                           
  3885                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  3886  16E4  1283               	bcf	3,5	;RP0=0, select bank0
  3887  16E5  1303               	bcf	3,6	;RP1=0, select bank0
  3888  16E6  1AC5               	btfsc	printf@flag,5
  3889  16E7  2EEA               	goto	l4522
  3890  16E8  3078               	movlw	120
  3891  16E9  2EEB               	goto	L15
  3892  16EA                     l4522:	
  3893  16EA  3058               	movlw	88
  3894  16EB                     L15:	
  3895  16EB  00B6               	movwf	_printf$349
  3896  16EC  01B7               	clrf	_printf$349+1
  3897  16ED  0836               	movf	_printf$349,w
  3898  16EE  2F67               	goto	L14
  3899  16EF                     l4526:	
  3900                           ;doprnt.c: 1466: }
  3901                           ;doprnt.c: 1469: }
  3902                           ;doprnt.c: 1474: while(prec--) {
  3903                           
  3904                           
  3905                           ;doprnt.c: 1486: case 0xC0:
  3906                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3907  16EF  300A               	movlw	10
  3908  16F0  00AA               	movwf	___lwmod@divisor
  3909  16F1  01AB               	clrf	___lwmod@divisor+1
  3910  16F2  1003               	clrc
  3911  16F3  0D40               	rlf	printf@prec,w
  3912  16F4  3E0D               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3913  16F5  0084               	movwf	4
  3914  16F6  160A  158A  2000  160A  118A  	fcall	stringdir
  3915  16FB  00A3               	movwf	___lwdiv@divisor
  3916  16FC  160A  158A  2000  160A  118A  	fcall	stringdir
  3917  1701  27FA               	fcall	PL40	;call to abstracted procedure
  3918  1702  160A  118A  20C8  160A  118A  	fcall	___lwdiv
  3919  1707  0824               	movf	?___lwdiv+1,w
  3920  1708  00AD               	movwf	___lwmod@dividend+1
  3921  1709  0823               	movf	?___lwdiv,w
  3922  170A  00AC               	movwf	___lwmod@dividend
  3923  170B  160A  118A  20F2  160A  118A  	fcall	___lwmod
  3924  1710  082A               	movf	?___lwmod,w
  3925  1711  2F55               	goto	L20
  3926  1712                     l4528:	
  3927                           ;doprnt.c: 1491: break;
  3928                           
  3929                           
  3930                           ;doprnt.c: 1499: {
  3931                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3932  1712  083F               	movf	printf@val+1,w
  3933  1713  00A6               	movwf	___lwdiv@dividend+1
  3934  1714  083E               	movf	printf@val,w
  3935  1715  00A5               	movwf	___lwdiv@dividend
  3936  1716  1003               	clrc
  3937  1717  0D40               	rlf	printf@prec,w
  3938  1718  3E17               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  3939  1719  0084               	movwf	4
  3940  171A  160A  158A  2000  160A  118A  	fcall	stringdir
  3941  171F  00A3               	movwf	___lwdiv@divisor
  3942  1720  160A  158A  2000  160A  118A  	fcall	stringdir
  3943  1725  00A4               	movwf	___lwdiv@divisor+1
  3944  1726  160A  118A  20C8  160A  118A  	fcall	___lwdiv
  3945  172B  0823               	movf	?___lwdiv,w
  3946  172C  00B9               	movwf	printf@idx
  3947  172D  300F               	movlw	15
  3948  172E  05B9               	andwf	printf@idx,f
  3949                           
  3950                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  3951  172F  1AC5               	btfsc	printf@flag,5
  3952  1730  2F33               	goto	l4536
  3953  1731  308C               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  3954  1732  2F34               	goto	L17
  3955  1733                     l4536:	
  3956  1733  307B               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  3957  1734                     L17:	
  3958  1734  00BA               	movwf	_printf$355
  3959  1735  0839               	movf	printf@idx,w
  3960  1736  073A               	addwf	_printf$355,w
  3961  1737  0084               	movwf	4
  3962  1738  160A  158A  2000  160A  118A  	fcall	stringdir
  3963  173D  2F56               	goto	L18
  3964  173E                     l4540:	
  3965                           ;doprnt.c: 1508: }
  3966                           ;doprnt.c: 1510: break;
  3967                           
  3968                           
  3969                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  3970  173E  1003               	clrc
  3971  173F  0D40               	rlf	printf@prec,w
  3972  1740  3E01               	addlw	low ((_octpowers-__stringbase)| (0+32768))
  3973  1741  0084               	movwf	4
  3974  1742  160A  158A  2000  160A  118A  	fcall	stringdir
  3975  1747  00A3               	movwf	___lwdiv@divisor
  3976  1748  160A  158A  2000  160A  118A  	fcall	stringdir
  3977  174D  27FA               	fcall	PL40	;call to abstracted procedure
  3978  174E  160A  118A  20C8  160A  118A  	fcall	___lwdiv
  3979  1753  0823               	movf	?___lwdiv,w
  3980  1754  3907               	andlw	7
  3981  1755                     L20:	
  3982  1755  3E30               	addlw	48
  3983  1756                     L18:	
  3984  1756  00C4               	movwf	printf@c
  3985                           
  3986                           ;doprnt.c: 1520: break;
  3987  1757  2F66               	goto	l4546
  3988  1758                     l4544:	
  3989  1758  0845               	movf	printf@flag,w
  3990  1759  39C0               	andlw	192
  3991                           
  3992                           ; Switch size 1, requested type "space"
  3993                           ; Number of cases is 4, Range of values is 0 to 192
  3994                           ; switch strategies available:
  3995                           ; Name         Instructions Cycles
  3996                           ; simple_byte           13     7 (average)
  3997                           ; jumptable            260     6 (fixed)
  3998                           ;	Chosen strategy is simple_byte
  3999  175A  1903               	skipnz
  4000  175B  2EEF               	goto	l4526
  4001  175C  3A40               	xorlw	64	; case 64
  4002  175D  1903               	skipnz
  4003  175E  2F3E               	goto	l4540
  4004  175F  3AC0               	xorlw	192	; case 128
  4005  1760  1903               	skipnz
  4006  1761  2F12               	goto	l4528
  4007  1762  3A40               	xorlw	64	; case 192
  4008  1763  1903               	skipnz
  4009  1764  2EEF               	goto	l4526
  4010  1765  2F66               	goto	l4546
  4011  1766                     l4546:	
  4012                           
  4013                           ;doprnt.c: 1524: (putch(c) );
  4014  1766  0844               	movf	printf@c,w
  4015  1767                     L14:	
  4016  1767  2787  160A  118A   	fcall	_putch
  4017  176A                     l4548:	
  4018  176A  1283               	bcf	3,5	;RP0=0, select bank0
  4019  176B  1303               	bcf	3,6	;RP1=0, select bank0
  4020  176C  03C0               	decf	printf@prec,f
  4021  176D  0F40               	incfsz	printf@prec,w
  4022  176E  2F58               	goto	l4544
  4023                           
  4024                           ;doprnt.c: 1525: }
  4025                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  4026  176F  1DC5               	btfss	printf@flag,3
  4027  1770  2C23               	goto	l4556
  4028  1771  0843               	movf	printf@width+1,w
  4029  1772  3A80               	xorlw	128
  4030  1773  00FF               	movwf	127
  4031  1774  3080               	movlw	128
  4032  1775  027F               	subwf	127,w
  4033  1776  1D03               	skipz
  4034  1777  2F7A               	goto	u6095
  4035  1778  3001               	movlw	1
  4036  1779  0242               	subwf	printf@width,w
  4037  177A                     u6095:	
  4038  177A  1C03               	skipc
  4039  177B  2C23               	goto	l4556
  4040  177C                     l4552:	
  4041                           
  4042                           ;doprnt.c: 1530: (putch(' ') );
  4043  177C  3020               	movlw	32
  4044  177D  2787  160A  118A   	fcall	_putch
  4045                           
  4046                           ;doprnt.c: 1531: while(--width);
  4047  1780  27F1  160A  118A   	fcall	PL24	;call to abstracted procedure
  4048  1783  1903               	btfsc	3,2
  4049  1784  2C23               	goto	l4556
  4050  1785  2F7C               	goto	l4552
  4051  1786                     l816:	
  4052  1786  0008               	return
  4053  1787                     __end_of_printf:	
  4054  1787                     __ptext2:	
  4055 ;; *************** function _putch *****************
  4056 ;; Defined at:
  4057 ;;		line 166 in file "lcdv2.h"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;  print_value     1    wreg     unsigned char 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  print_value     1    5[BANK0 ] unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;		None               void
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0, pclath, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4071 ;;      Params:         0       0       0       0       0
  4072 ;;      Locals:         0       1       0       0       0
  4073 ;;      Temps:          0       1       0       0       0
  4074 ;;      Totals:         0       2       0       0       0
  4075 ;;Total ram usage:        2 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    6
  4078 ;; This function calls:
  4079 ;;		_lcd_add
  4080 ;; This function is called by:
  4081 ;;		_printf
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           
  4086                           ;psect for function _putch
  4087  1787                     _putch:	
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  4091                           ;putch@print_value stored from wreg
  4092  1787  1283               	bcf	3,5	;RP0=0, select bank0
  4093  1788  1303               	bcf	3,6	;RP1=0, select bank0
  4094  1789  00A5               	movwf	putch@print_value
  4095                           
  4096                           ;lcdv2.h: 167: RC2 = 1;
  4097  178A  1507               	bsf	7,2	;volatile
  4098                           
  4099                           ;lcdv2.h: 168: _delay(20);
  4100  178B  3006               	movlw	6
  4101  178C  00A4               	movwf	??_putch
  4102  178D                     u6487:	
  4103  178D  0BA4               	decfsz	??_putch,f
  4104  178E  2F8D               	goto	u6487
  4105  178F  0000               	nop
  4106                           
  4107                           ;lcdv2.h: 169: lcd_data = print_value;
  4108  1790  1283               	bcf	3,5	;RP0=0, select bank0
  4109  1791  1303               	bcf	3,6	;RP1=0, select bank0
  4110  1792  0825               	movf	putch@print_value,w
  4111  1793  00DF               	movwf	_lcd_data
  4112                           
  4113                           ;lcdv2.h: 170: lcd_add();
  4114  1794  160A  118A  2116  160A  118A  	fcall	_lcd_add
  4115                           
  4116                           ;lcdv2.h: 171: _delay(100);
  4117  1799  3021               	movlw	33
  4118  179A  1283               	bcf	3,5	;RP0=0, select bank0
  4119  179B  1303               	bcf	3,6	;RP1=0, select bank0
  4120  179C  00A4               	movwf	??_putch
  4121  179D                     u6497:	
  4122  179D  0BA4               	decfsz	??_putch,f
  4123  179E  2F9D               	goto	u6497
  4124  179F  0008               	return
  4125  17A0                     __end_of_putch:	
  4126  17A0                     __ptext3:	
  4127 ;; *************** function _isdigit *****************
  4128 ;; Defined at:
  4129 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;  c               1    wreg     unsigned char 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  c               1    4[BANK0 ] unsigned char 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;		None               void
  4136 ;; Registers used:
  4137 ;;		wreg, status,2, status,0
  4138 ;; Tracked objects:
  4139 ;;		On entry : 300/0
  4140 ;;		On exit  : 300/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4143 ;;      Params:         0       0       0       0       0
  4144 ;;      Locals:         0       2       0       0       0
  4145 ;;      Temps:          0       0       0       0       0
  4146 ;;      Totals:         0       2       0       0       0
  4147 ;;Total ram usage:        2 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    5
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_printf
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _isdigit
  4159  17A0                     _isdigit:	
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4163                           ;isdigit@c stored from wreg
  4164  17A0  00A4               	movwf	isdigit@c
  4165  17A1  303A               	movlw	58
  4166  17A2  01A3               	clrf	_isdigit$559
  4167  17A3  0224               	subwf	isdigit@c,w
  4168  17A4  1803               	skipnc
  4169  17A5  2FAC               	goto	l3828
  4170  17A6  3030               	movlw	48
  4171  17A7  0224               	subwf	isdigit@c,w
  4172  17A8  1C03               	skipc
  4173  17A9  2FAC               	goto	l3828
  4174  17AA  01A3               	clrf	_isdigit$559
  4175  17AB  0AA3               	incf	_isdigit$559,f
  4176  17AC                     l3828:	
  4177  17AC  0C23               	rrf	_isdigit$559,w
  4178  17AD  0008               	return
  4179  17AE                     __end_of_isdigit:	
  4180  17AE                     __ptext4:	
  4181 ;; *************** function ___bmul *****************
  4182 ;; Defined at:
  4183 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul8.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  multiplier      1    wreg     unsigned char 
  4186 ;;  multiplicand    1    3[BANK0 ] unsigned char 
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;  multiplier      1    5[BANK0 ] unsigned char 
  4189 ;;  product         1    4[BANK0 ] unsigned char 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      unsigned char 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2, status,0
  4194 ;; Tracked objects:
  4195 ;;		On entry : 300/0
  4196 ;;		On exit  : 300/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4199 ;;      Params:         0       1       0       0       0
  4200 ;;      Locals:         0       2       0       0       0
  4201 ;;      Temps:          0       0       0       0       0
  4202 ;;      Totals:         0       3       0       0       0
  4203 ;;Total ram usage:        3 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    5
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_printf
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function ___bmul
  4215  17AE                     ___bmul:	
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4219                           ;___bmul@multiplier stored from wreg
  4220  17AE  00A5               	movwf	___bmul@multiplier
  4221  17AF  01A4               	clrf	___bmul@product
  4222  17B0                     l3850:	
  4223  17B0  0823               	movf	___bmul@multiplicand,w
  4224  17B1  1825               	btfsc	___bmul@multiplier,0
  4225  17B2  07A4               	addwf	___bmul@product,f
  4226  17B3  1003               	clrc
  4227  17B4  0DA3               	rlf	___bmul@multiplicand,f
  4228  17B5  1003               	clrc
  4229  17B6  0CA5               	rrf	___bmul@multiplier,f
  4230  17B7  0825               	movf	___bmul@multiplier,w
  4231  17B8  1D03               	btfss	3,2
  4232  17B9  2FB0               	goto	l3850
  4233  17BA  0824               	movf	___bmul@product,w
  4234  17BB  0008               	return
  4235  17BC                     __end_of___bmul:	
  4236  17BC                     PL6:	
  4237  17BC  00B1               	movwf	??_printf
  4238  17BD  01B2               	clrf	??_printf+1
  4239  17BE  1BB1               	btfsc	??_printf,7
  4240  17BF  03B2               	decf	??_printf+1,f
  4241  17C0  0832               	movf	??_printf+1,w
  4242  17C1  3A80               	xorlw	128
  4243  17C2  00B3               	movwf	??_printf+2
  4244  17C3  0843               	movf	printf@width+1,w
  4245  17C4  3A80               	xorlw	128
  4246  17C5  0233               	subwf	??_printf+2,w
  4247  17C6  1D03               	skipz
  4248  17C7  0008               	return
  4249  17C8  0842               	movf	printf@width,w
  4250  17C9  0231               	subwf	??_printf,w
  4251  17CA  0008               	return
  4252  17CB                     __end_ofPL6:	
  4253  17CB                     PL8:	
  4254  17CB  30C0               	movlw	192
  4255  17CC  0545               	andwf	printf@flag,w
  4256  17CD  00B1               	movwf	??_printf
  4257  17CE  3008               	movlw	8
  4258  17CF  0546               	andwf	printf@flag+1,w
  4259  17D0  00B2               	movwf	??_printf+1
  4260  17D1  3080               	movlw	128
  4261  17D2  0631               	xorwf	??_printf,w
  4262  17D3  3408               	retlw	8
  4263  17D4                     __end_ofPL8:	
  4264  17D4                     PL14:	
  4265  17D4  083D               	movf	printf@ap,w
  4266  17D5  0084               	movwf	4
  4267  17D6  1383               	bcf	3,7	;select IRP bank0
  4268  17D7  0800               	movf	0,w
  4269  17D8  00BE               	movwf	printf@val
  4270  17D9  0A84               	incf	4,f
  4271  17DA  0800               	movf	0,w
  4272  17DB  00BF               	movwf	printf@val+1
  4273  17DC  0ABD               	incf	printf@ap,f
  4274  17DD  0ABD               	incf	printf@ap,f
  4275  17DE  0008               	return
  4276  17DF                     __end_ofPL14:	
  4277  17DF                     PL18:	
  4278  17DF  00B1               	movwf	??_printf
  4279  17E0  01B2               	clrf	??_printf+1
  4280  17E1  1BB1               	btfsc	??_printf,7
  4281  17E2  03B2               	decf	??_printf+1,f
  4282  17E3  02C2               	subwf	printf@width,f
  4283  17E4  0832               	movf	??_printf+1,w
  4284  17E5  1C03               	skipc
  4285  17E6  03C3               	decf	printf@width+1,f
  4286  17E7  02C3               	subwf	printf@width+1,f
  4287  17E8  0008               	return
  4288  17E9                     __end_ofPL18:	
  4289  17E9                     PL22:	
  4290  17E9  0545               	andwf	printf@flag,w
  4291  17EA  00B1               	movwf	??_printf
  4292  17EB  3008               	movlw	8
  4293  17EC  0546               	andwf	printf@flag+1,w
  4294  17ED  00B2               	movwf	??_printf+1
  4295  17EE  3040               	movlw	64
  4296  17EF  0631               	xorwf	??_printf,w
  4297  17F0  3408               	retlw	8
  4298  17F1                     __end_ofPL22:	
  4299  17F1                     PL24:	
  4300  17F1  30FF               	movlw	-1
  4301  17F2  1283               	bcf	3,5	;RP0=0, select bank0
  4302  17F3  1303               	bcf	3,6	;RP1=0, select bank0
  4303  17F4  07C2               	addwf	printf@width,f
  4304  17F5  1C03               	skipc
  4305  17F6  03C3               	decf	printf@width+1,f
  4306  17F7  0842               	movf	printf@width,w
  4307  17F8  0443               	iorwf	printf@width+1,w
  4308  17F9  0008               	return
  4309  17FA                     __end_ofPL24:	
  4310  17FA                     PL40:	
  4311  17FA  00A4               	movwf	___lwdiv@divisor+1
  4312  17FB  083F               	movf	printf@val+1,w
  4313  17FC  00A6               	movwf	___lwdiv@dividend+1
  4314  17FD  083E               	movf	printf@val,w
  4315  17FE  00A5               	movwf	___lwdiv@dividend
  4316  17FF  0008               	return
  4317  1800                     __end_ofPL40:	
  4318                           
  4319                           	psect	text5
  4320  0797                     __ptext5:	
  4321 ;; *************** function _lcd_init *****************
  4322 ;; Defined at:
  4323 ;;		line 60 in file "lcdv2.h"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;  DelayLCD        2    3[BANK0 ] unsigned int 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;		None               void
  4330 ;; Registers used:
  4331 ;;		wreg, status,2, status,0
  4332 ;; Tracked objects:
  4333 ;;		On entry : 300/100
  4334 ;;		On exit  : 300/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4337 ;;      Params:         0       0       0       0       0
  4338 ;;      Locals:         0       2       0       0       0
  4339 ;;      Temps:          0       0       0       0       0
  4340 ;;      Totals:         0       2       0       0       0
  4341 ;;Total ram usage:        2 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    5
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_main
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _lcd_init
  4353  0797                     _lcd_init:	
  4354                           
  4355                           ;lcdv2.h: 63: RC3 = 0;
  4356                           
  4357                           ;incstack = 0
  4358                           ; Regs used in _lcd_init: [wreg+status,2+status,0]
  4359  0797  1283               	bcf	3,5	;RP0=0, select bank0
  4360  0798  1187               	bcf	7,3	;volatile
  4361                           
  4362                           ;lcdv2.h: 65: unsigned int DelayLCD;
  4363                           ;lcdv2.h: 67: RC2 = 0;
  4364  0799  1107               	bcf	7,2	;volatile
  4365                           
  4366                           ;lcdv2.h: 68: RD1 = 0;
  4367  079A  1088               	bcf	8,1	;volatile
  4368                           
  4369                           ;lcdv2.h: 69: RC0 = 0;
  4370  079B  1007               	bcf	7,0	;volatile
  4371                           
  4372                           ;lcdv2.h: 70: RD0 = 1;
  4373  079C  1408               	bsf	8,0	;volatile
  4374                           
  4375                           ;lcdv2.h: 71: RC1 = 0;
  4376  079D  1087               	bcf	7,1	;volatile
  4377                           
  4378                           ;lcdv2.h: 72: RC3 = 1;
  4379  079E  1587               	bsf	7,3	;volatile
  4380                           
  4381                           ;lcdv2.h: 73: RC3 = 0;
  4382  079F  1187               	bcf	7,3	;volatile
  4383                           
  4384                           ;lcdv2.h: 74: RD1 = 1;
  4385  07A0  1488               	bsf	8,1	;volatile
  4386                           
  4387                           ;lcdv2.h: 75: RC0 = 0;
  4388  07A1  1007               	bcf	7,0	;volatile
  4389                           
  4390                           ;lcdv2.h: 76: RD0 = 0;
  4391                           
  4392                           ;lcdv2.h: 77: RC1 = 0;
  4393                           
  4394                           ;lcdv2.h: 78: RC3 = 1;
  4395                           
  4396                           ;lcdv2.h: 79: RC3 = 0;
  4397                           
  4398                           ;lcdv2.h: 80: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  4399                           
  4400                           ;lcdv2.h: 83: RC2 = 0;
  4401                           
  4402                           ;lcdv2.h: 84: RD1 = 0;
  4403                           
  4404                           ;lcdv2.h: 85: RC0 = 0;
  4405  07A2  27E1  120A  118A   	fcall	PL2	;call to abstracted procedure
  4406                           
  4407                           ;lcdv2.h: 86: RD0 = 1;
  4408  07A5  1408               	bsf	8,0	;volatile
  4409                           
  4410                           ;lcdv2.h: 87: RC1 = 0;
  4411  07A6  1087               	bcf	7,1	;volatile
  4412                           
  4413                           ;lcdv2.h: 88: RC3 = 1;
  4414  07A7  1587               	bsf	7,3	;volatile
  4415                           
  4416                           ;lcdv2.h: 89: RC3 = 0;
  4417  07A8  1187               	bcf	7,3	;volatile
  4418                           
  4419                           ;lcdv2.h: 90: RD1 = 1;
  4420  07A9  1488               	bsf	8,1	;volatile
  4421                           
  4422                           ;lcdv2.h: 91: RC0 = 0;
  4423  07AA  1007               	bcf	7,0	;volatile
  4424                           
  4425                           ;lcdv2.h: 92: RD0 = 0;
  4426                           
  4427                           ;lcdv2.h: 93: RC1 = 0;
  4428                           
  4429                           ;lcdv2.h: 94: RC3 = 1;
  4430                           
  4431                           ;lcdv2.h: 95: RC3 = 0;
  4432                           
  4433                           ;lcdv2.h: 96: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  4434                           
  4435                           ;lcdv2.h: 99: RC2 = 0;
  4436                           
  4437                           ;lcdv2.h: 100: RD1 = 0;
  4438                           
  4439                           ;lcdv2.h: 101: RC0 = 0;
  4440  07AB  27E1  120A  118A   	fcall	PL2	;call to abstracted procedure
  4441                           
  4442                           ;lcdv2.h: 102: RD0 = 0;
  4443  07AE  1008               	bcf	8,0	;volatile
  4444                           
  4445                           ;lcdv2.h: 103: RC1 = 0;
  4446  07AF  1087               	bcf	7,1	;volatile
  4447                           
  4448                           ;lcdv2.h: 104: RC3 = 1;
  4449  07B0  1587               	bsf	7,3	;volatile
  4450                           
  4451                           ;lcdv2.h: 105: RC3 = 0;
  4452  07B1  1187               	bcf	7,3	;volatile
  4453                           
  4454                           ;lcdv2.h: 106: RD1 = 0;
  4455  07B2  1088               	bcf	8,1	;volatile
  4456                           
  4457                           ;lcdv2.h: 107: RC0 = 1;
  4458  07B3  1407               	bsf	7,0	;volatile
  4459                           
  4460                           ;lcdv2.h: 108: RD0 = 1;
  4461  07B4  1408               	bsf	8,0	;volatile
  4462                           
  4463                           ;lcdv2.h: 109: RC1 = 0;
  4464  07B5  1087               	bcf	7,1	;volatile
  4465                           
  4466                           ;lcdv2.h: 110: RC3 = 1;
  4467  07B6  1587               	bsf	7,3	;volatile
  4468                           
  4469                           ;lcdv2.h: 111: RC3 = 0;
  4470  07B7  1187               	bcf	7,3	;volatile
  4471                           
  4472                           ;lcdv2.h: 112: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  4473  07B8  01A3               	clrf	lcd_init@DelayLCD
  4474  07B9  01A4               	clrf	lcd_init@DelayLCD+1
  4475  07BA                     l4102:	
  4476  07BA  27F5  120A  118A   	fcall	PL10	;call to abstracted procedure
  4477  07BD  1903               	skipnz
  4478  07BE  0223               	subwf	lcd_init@DelayLCD,w
  4479  07BF  1C03               	skipc
  4480  07C0  2FBA               	goto	l4102
  4481                           
  4482                           ;lcdv2.h: 115: RC2 = 0;
  4483  07C1  1107               	bcf	7,2	;volatile
  4484                           
  4485                           ;lcdv2.h: 116: RD1 = 0;
  4486  07C2  1088               	bcf	8,1	;volatile
  4487                           
  4488                           ;lcdv2.h: 117: RC0 = 0;
  4489  07C3  1007               	bcf	7,0	;volatile
  4490                           
  4491                           ;lcdv2.h: 118: RD0 = 0;
  4492  07C4  1008               	bcf	8,0	;volatile
  4493                           
  4494                           ;lcdv2.h: 119: RC1 = 0;
  4495  07C5  1087               	bcf	7,1	;volatile
  4496                           
  4497                           ;lcdv2.h: 120: RC3 = 1;
  4498  07C6  1587               	bsf	7,3	;volatile
  4499                           
  4500                           ;lcdv2.h: 121: RC3 = 0;
  4501  07C7  1187               	bcf	7,3	;volatile
  4502                           
  4503                           ;lcdv2.h: 122: RD1 = 1;
  4504  07C8  1488               	bsf	8,1	;volatile
  4505                           
  4506                           ;lcdv2.h: 123: RC0 = 1;
  4507  07C9  1407               	bsf	7,0	;volatile
  4508                           
  4509                           ;lcdv2.h: 124: RD0 = 0;
  4510                           
  4511                           ;lcdv2.h: 125: RC1 = 0;
  4512                           
  4513                           ;lcdv2.h: 126: RC3 = 1;
  4514                           
  4515                           ;lcdv2.h: 127: RC3 = 0;
  4516                           
  4517                           ;lcdv2.h: 128: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  4518                           
  4519                           ;lcdv2.h: 131: RC2 = 0;
  4520                           
  4521                           ;lcdv2.h: 132: RD1 = 0;
  4522                           
  4523                           ;lcdv2.h: 133: RC0 = 0;
  4524  07CA  27E1  120A  118A   	fcall	PL2	;call to abstracted procedure
  4525                           
  4526                           ;lcdv2.h: 134: RD0 = 0;
  4527  07CD  1008               	bcf	8,0	;volatile
  4528                           
  4529                           ;lcdv2.h: 135: RC1 = 0;
  4530  07CE  1087               	bcf	7,1	;volatile
  4531                           
  4532                           ;lcdv2.h: 136: RC3 = 1;
  4533  07CF  1587               	bsf	7,3	;volatile
  4534                           
  4535                           ;lcdv2.h: 137: RC3 = 0;
  4536  07D0  1187               	bcf	7,3	;volatile
  4537                           
  4538                           ;lcdv2.h: 138: RD1 = 0;
  4539  07D1  1088               	bcf	8,1	;volatile
  4540                           
  4541                           ;lcdv2.h: 139: RC0 = 0;
  4542  07D2  1007               	bcf	7,0	;volatile
  4543                           
  4544                           ;lcdv2.h: 140: RD0 = 0;
  4545  07D3  1008               	bcf	8,0	;volatile
  4546                           
  4547                           ;lcdv2.h: 141: RC1 = 1;
  4548  07D4  1487               	bsf	7,1	;volatile
  4549                           
  4550                           ;lcdv2.h: 142: RC3 = 1;
  4551  07D5  1587               	bsf	7,3	;volatile
  4552                           
  4553                           ;lcdv2.h: 143: RC3 = 0;
  4554  07D6  1187               	bcf	7,3	;volatile
  4555                           
  4556                           ;lcdv2.h: 144: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  4557  07D7  01A3               	clrf	lcd_init@DelayLCD
  4558  07D8  01A4               	clrf	lcd_init@DelayLCD+1
  4559  07D9                     l4122:	
  4560  07D9  27F5  120A  118A   	fcall	PL10	;call to abstracted procedure
  4561  07DC  1903               	skipnz
  4562  07DD  0223               	subwf	lcd_init@DelayLCD,w
  4563  07DE  1803               	btfsc	3,0
  4564  07DF  0008               	return
  4565  07E0  2FD9               	goto	l4122
  4566  07E1                     __end_of_lcd_init:	
  4567  07E1                     PL2:	
  4568  07E1  1008               	bcf	8,0	;volatile
  4569  07E2  1087               	bcf	7,1	;volatile
  4570  07E3  1587               	bsf	7,3	;volatile
  4571  07E4  1187               	bcf	7,3	;volatile
  4572  07E5  01A3               	clrf	lcd_init@DelayLCD
  4573  07E6  01A4               	clrf	lcd_init@DelayLCD+1
  4574  07E7                     l4082:	
  4575  07E7  0AA3               	incf	lcd_init@DelayLCD,f
  4576  07E8  1903               	skipnz
  4577  07E9  0AA4               	incf	lcd_init@DelayLCD+1,f
  4578  07EA  3009               	movlw	9
  4579  07EB  0224               	subwf	lcd_init@DelayLCD+1,w
  4580  07EC  30C4               	movlw	196
  4581  07ED  1903               	skipnz
  4582  07EE  0223               	subwf	lcd_init@DelayLCD,w
  4583  07EF  1C03               	skipc
  4584  07F0  2FE7               	goto	l4082
  4585  07F1  1107               	bcf	7,2	;volatile
  4586  07F2  1088               	bcf	8,1	;volatile
  4587  07F3  1007               	bcf	7,0	;volatile
  4588  07F4  0008               	return
  4589  07F5                     __end_ofPL2:	
  4590  07F5                     PL10:	
  4591  07F5  0AA3               	incf	lcd_init@DelayLCD,f
  4592  07F6  1903               	skipnz
  4593  07F7  0AA4               	incf	lcd_init@DelayLCD+1,f
  4594  07F8  3009               	movlw	9
  4595  07F9  0224               	subwf	lcd_init@DelayLCD+1,w
  4596  07FA  34C4               	retlw	196
  4597  07FB                     __end_ofPL10:	
  4598                           
  4599                           	psect	text6
  4600  0804                     __ptext6:	
  4601 ;; *************** function _enableInterrupt *****************
  4602 ;; Defined at:
  4603 ;;		line 7 in file "interrupts.h"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;		None
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;		None
  4608 ;; Return value:  Size  Location     Type
  4609 ;;		None               void
  4610 ;; Registers used:
  4611 ;;		None
  4612 ;; Tracked objects:
  4613 ;;		On entry : 300/100
  4614 ;;		On exit  : 300/100
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4617 ;;      Params:         0       0       0       0       0
  4618 ;;      Locals:         0       0       0       0       0
  4619 ;;      Temps:          0       0       0       0       0
  4620 ;;      Totals:         0       0       0       0       0
  4621 ;;Total ram usage:        0 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; Hardware stack levels required when called:    5
  4624 ;; This function calls:
  4625 ;;		Nothing
  4626 ;; This function is called by:
  4627 ;;		_main
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function _enableInterrupt
  4633  0804                     _enableInterrupt:	
  4634                           
  4635                           ;interrupts.h: 9: RBIE = 0;
  4636                           
  4637                           ;incstack = 0
  4638                           ; Regs used in _enableInterrupt: []
  4639  0804  118B               	bcf	11,3	;volatile
  4640                           
  4641                           ;interrupts.h: 10: INTE = 0;
  4642  0805  120B               	bcf	11,4	;volatile
  4643                           
  4644                           ;interrupts.h: 12: PSPIE = 0;
  4645  0806  138C               	bcf	12,7	;volatile
  4646                           
  4647                           ;interrupts.h: 13: ADIE = 0;
  4648  0807  130C               	bcf	12,6	;volatile
  4649                           
  4650                           ;interrupts.h: 15: TXIE = 0;
  4651  0808  120C               	bcf	12,4	;volatile
  4652                           
  4653                           ;interrupts.h: 16: RCIE = 1;
  4654  0809  168C               	bsf	12,5	;volatile
  4655                           
  4656                           ;interrupts.h: 18: SSPIE = 0;
  4657  080A  118C               	bcf	12,3	;volatile
  4658                           
  4659                           ;interrupts.h: 19: CCP1IE = 0;
  4660  080B  110C               	bcf	12,2	;volatile
  4661                           
  4662                           ;interrupts.h: 21: TMR1IE = 1;
  4663  080C  140C               	bsf	12,0	;volatile
  4664                           
  4665                           ;interrupts.h: 22: TMR2IE = 0;
  4666  080D  108C               	bcf	12,1	;volatile
  4667                           
  4668                           ;interrupts.h: 23: T0IE = 0;
  4669  080E  128B               	bcf	11,5	;volatile
  4670                           
  4671                           ;interrupts.h: 25: EEIE = 0;
  4672  080F  120D               	bcf	13,4	;volatile
  4673                           
  4674                           ;interrupts.h: 26: BCLIE = 0;
  4675  0810  118D               	bcf	13,3	;volatile
  4676                           
  4677                           ;interrupts.h: 27: CCP2IE = 0;
  4678  0811  100D               	bcf	13,0	;volatile
  4679                           
  4680                           ;interrupts.h: 30: GIE = 1;
  4681  0812  178B               	bsf	11,7	;volatile
  4682                           
  4683                           ;interrupts.h: 31: PEIE = 1;
  4684  0813  170B               	bsf	11,6	;volatile
  4685  0814  0008               	return
  4686  0815                     __end_of_enableInterrupt:	
  4687                           
  4688                           	psect	text7
  4689  084D                     __ptext7:	
  4690 ;; *************** function _eeprom_write *****************
  4691 ;; Defined at:
  4692 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic\eewrite.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  addr            1    wreg     unsigned char 
  4695 ;;  value           1    3[BANK0 ] unsigned char 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  addr            1    4[BANK0 ] unsigned char 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;		None               void
  4700 ;; Registers used:
  4701 ;;		wreg, status,2, status,0
  4702 ;; Tracked objects:
  4703 ;;		On entry : 300/0
  4704 ;;		On exit  : 300/300
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4707 ;;      Params:         0       1       0       0       0
  4708 ;;      Locals:         0       1       0       0       0
  4709 ;;      Temps:          0       0       0       0       0
  4710 ;;      Totals:         0       2       0       0       0
  4711 ;;Total ram usage:        2 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; Hardware stack levels required when called:    5
  4714 ;; This function calls:
  4715 ;;		Nothing
  4716 ;; This function is called by:
  4717 ;;		_main
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           
  4722                           ;psect for function _eeprom_write
  4723  084D                     _eeprom_write:	
  4724                           
  4725                           ;incstack = 0
  4726                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4727                           ;eeprom_write@addr stored from wreg
  4728  084D  00A4               	movwf	eeprom_write@addr
  4729  084E                     l851:	
  4730  084E  1683               	bsf	3,5	;RP0=1, select bank3
  4731  084F  1703               	bsf	3,6	;RP1=1, select bank3
  4732  0850  188C               	btfsc	12,1	;volsfr
  4733  0851  284E               	goto	l851
  4734  0852  1283               	bcf	3,5	;RP0=0, select bank0
  4735  0853  1303               	bcf	3,6	;RP1=0, select bank0
  4736  0854  0824               	movf	eeprom_write@addr,w
  4737  0855  1703               	bsf	3,6	;RP1=1, select bank2
  4738  0856  008D               	movwf	13	;volatile
  4739  0857  1303               	bcf	3,6	;RP1=0, select bank0
  4740  0858  0823               	movf	eeprom_write@value,w
  4741  0859  1703               	bsf	3,6	;RP1=1, select bank2
  4742  085A  008C               	movwf	12	;volatile
  4743  085B  303F               	movlw	63
  4744  085C  1683               	bsf	3,5	;RP0=1, select bank3
  4745  085D  058C               	andwf	12,f	;volsfr
  4746  085E  1003               	bcf	3,0	;volatile
  4747  085F  1B8B               	btfsc	11,7	;volatile
  4748  0860  1403               	bsf	3,0	;volatile
  4749  0861  138B               	bcf	11,7	;volatile
  4750  0862  150C               	bsf	12,2	;volsfr
  4751  0863  3055               	movlw	85
  4752  0864  008D               	movwf	13	;volsfr
  4753  0865  30AA               	movlw	170
  4754  0866  008D               	movwf	13	;volsfr
  4755  0867  148C               	bsf	12,1	;volsfr
  4756  0868  110C               	bcf	12,2	;volsfr
  4757  0869  1803               	btfsc	3,0	;volatile
  4758  086A  178B               	bsf	11,7	;volatile
  4759  086B  0008               	return
  4760  086C                     __end_of_eeprom_write:	
  4761                           
  4762                           	psect	text8
  4763  0831                     __ptext8:	
  4764 ;; *************** function _eeprom_read *****************
  4765 ;; Defined at:
  4766 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic\eeread.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  addr            1    wreg     unsigned char 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  addr            1    3[BANK0 ] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      unsigned char 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 300/300
  4777 ;;		On exit  : 300/200
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4780 ;;      Params:         0       0       0       0       0
  4781 ;;      Locals:         0       1       0       0       0
  4782 ;;      Temps:          0       0       0       0       0
  4783 ;;      Totals:         0       1       0       0       0
  4784 ;;Total ram usage:        1 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    5
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_main
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           
  4795                           ;psect for function _eeprom_read
  4796  0831                     _eeprom_read:	
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4800                           ;eeprom_read@addr stored from wreg
  4801  0831  1283               	bcf	3,5	;RP0=0, select bank0
  4802  0832  1303               	bcf	3,6	;RP1=0, select bank0
  4803  0833  00A3               	movwf	eeprom_read@addr
  4804  0834  2837               	goto	l829
  4805  0835                     u6151:	
  4806  0835  1283               	bcf	3,5	;RP0=0, select bank0
  4807  0836  1303               	bcf	3,6	;RP1=0, select bank0
  4808  0837                     l829:	
  4809  0837  0064               	clrwdt	;# 
  4810  0838  1683               	bsf	3,5	;RP0=1, select bank3
  4811  0839  1703               	bsf	3,6	;RP1=1, select bank3
  4812  083A  188C               	btfsc	12,1	;volsfr
  4813  083B  2835               	goto	u6151
  4814  083C  1283               	bcf	3,5	;RP0=0, select bank0
  4815  083D  1303               	bcf	3,6	;RP1=0, select bank0
  4816  083E  0823               	movf	eeprom_read@addr,w
  4817  083F  1703               	bsf	3,6	;RP1=1, select bank2
  4818  0840  008D               	movwf	13	;volatile
  4819  0841  303F               	movlw	63
  4820  0842  1683               	bsf	3,5	;RP0=1, select bank3
  4821  0843  058C               	andwf	12,f	;volsfr
  4822  0844  140C               	bsf	12,0	;volsfr
  4823  0845  1003               	clrc
  4824  0846  180C               	btfsc	12,0	;volsfr
  4825  0847  1403               	setc
  4826  0848  1803               	skipnc
  4827  0849  3001               	movlw	1
  4828  084A  1283               	bcf	3,5	;RP0=0, select bank2
  4829  084B  080C               	movf	12,w	;volatile
  4830  084C  0008               	return
  4831  084D                     __end_of_eeprom_read:	
  4832                           
  4833                           	psect	text9
  4834  1034                     __ptext9:	
  4835 ;; *************** function _clr_display *****************
  4836 ;; Defined at:
  4837 ;;		line 183 in file "lcdv2.h"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;		None               void
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0, pclath, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 300/0
  4848 ;;		On exit  : 300/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4851 ;;      Params:         0       0       0       0       0
  4852 ;;      Locals:         0       0       0       0       0
  4853 ;;      Temps:          0       2       0       0       0
  4854 ;;      Totals:         0       2       0       0       0
  4855 ;;Total ram usage:        2 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    6
  4858 ;; This function calls:
  4859 ;;		_lcd_add
  4860 ;; This function is called by:
  4861 ;;		_main
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _clr_display
  4867  1034                     _clr_display:	
  4868                           
  4869                           ;lcdv2.h: 185: RC2 = 0;
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _clr_display: [wreg+status,2+status,0+pclath+cstack]
  4873  1034  1107               	bcf	7,2	;volatile
  4874                           
  4875                           ;lcdv2.h: 186: _delay(20);
  4876  1035  3006               	movlw	6
  4877  1036  00A4               	movwf	??_clr_display
  4878  1037                     u6507:	
  4879  1037  0BA4               	decfsz	??_clr_display,f
  4880  1038  2837               	goto	u6507
  4881  1039  0000               	nop
  4882                           
  4883                           ;lcdv2.h: 187: lcd_data = 0b00000001;
  4884  103A  1283               	bcf	3,5	;RP0=0, select bank0
  4885  103B  1303               	bcf	3,6	;RP1=0, select bank0
  4886  103C  01DF               	clrf	_lcd_data
  4887  103D  0ADF               	incf	_lcd_data,f
  4888                           
  4889                           ;lcdv2.h: 188: lcd_add();
  4890  103E  2116  160A  118A   	fcall	_lcd_add
  4891                           
  4892                           ;lcdv2.h: 189: _delay((unsigned long)((10)*(4000000/4000.0)));
  4893  1041  300D               	movlw	13
  4894  1042  1283               	bcf	3,5	;RP0=0, select bank0
  4895  1043  1303               	bcf	3,6	;RP1=0, select bank0
  4896  1044  00A5               	movwf	??_clr_display+1
  4897  1045  30FB               	movlw	251
  4898  1046  00A4               	movwf	??_clr_display
  4899  1047                     u6517:	
  4900  1047  0BA4               	decfsz	??_clr_display,f
  4901  1048  2847               	goto	u6517
  4902  1049  0BA5               	decfsz	??_clr_display+1,f
  4903  104A  2847               	goto	u6517
  4904  104B  284C               	nop2
  4905                           
  4906                           ;lcdv2.h: 190: RC2 = 1;
  4907  104C  1283               	bcf	3,5	;RP0=0, select bank0
  4908  104D  1303               	bcf	3,6	;RP1=0, select bank0
  4909  104E  1507               	bsf	7,2	;volatile
  4910  104F  0008               	return
  4911  1050                     __end_of_clr_display:	
  4912  1050                     __ptext25:	
  4913 ;; *************** function _LCDTimeUpdate *****************
  4914 ;; Defined at:
  4915 ;;		line 734 in file "Automated Solar Panel Orientation Setter.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;		None
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;		None               void
  4922 ;; Registers used:
  4923 ;;		wreg, status,2, status,0, pclath, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 300/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4929 ;;      Params:         0       0       0       0       0
  4930 ;;      Locals:         0       0       0       0       0
  4931 ;;      Temps:          0       0       0       0       0
  4932 ;;      Totals:         0       0       0       0       0
  4933 ;;Total ram usage:        0 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    8
  4936 ;; This function calls:
  4937 ;;		_LCD_print_char
  4938 ;;		___lwdiv
  4939 ;;		___lwmod
  4940 ;; This function is called by:
  4941 ;;		_main
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function _LCDTimeUpdate
  4947  1050                     _LCDTimeUpdate:	
  4948                           
  4949                           ;incstack = 0
  4950 ;; hardware stack exceeded
  4951                           ; Regs used in _LCDTimeUpdate: [wreg+status,2+status,0+pclath+cstack]
  4952  1050  300C               	movlw	12
  4953                           
  4954                           ;Automated Solar Panel Orientation Setter.c: 735: LCD_print_char(1,12,hour/10+48);
  4955  1051  01AF               	clrf	LCD_print_char@row
  4956  1052  0AAF               	incf	LCD_print_char@row,f
  4957  1053  01B0               	clrf	LCD_print_char@row+1
  4958  1054  00B1               	movwf	LCD_print_char@column
  4959  1055  300A               	movlw	10
  4960  1056  01B2               	clrf	LCD_print_char@column+1
  4961  1057  00A3               	movwf	___lwdiv@divisor
  4962  1058  01A4               	clrf	___lwdiv@divisor+1
  4963  1059  0853               	movf	_hour+1,w
  4964  105A  00A6               	movwf	___lwdiv@dividend+1
  4965  105B  0852               	movf	_hour,w
  4966  105C  00A5               	movwf	___lwdiv@dividend
  4967  105D  20C8  160A  118A   	fcall	___lwdiv
  4968  1060  0823               	movf	?___lwdiv,w
  4969  1061  3E30               	addlw	48
  4970  1062  00B3               	movwf	LCD_print_char@print_value
  4971  1063  20AC  160A  118A   	fcall	_LCD_print_char
  4972                           
  4973                           ;Automated Solar Panel Orientation Setter.c: 736: LCD_print_char(1,13,hour%10+48);
  4974  1066  1283               	bcf	3,5	;RP0=0, select bank0
  4975  1067  1303               	bcf	3,6	;RP1=0, select bank0
  4976  1068  300D               	movlw	13
  4977  1069  01AF               	clrf	LCD_print_char@row
  4978  106A  0AAF               	incf	LCD_print_char@row,f
  4979  106B  01B0               	clrf	LCD_print_char@row+1
  4980  106C  00B1               	movwf	LCD_print_char@column
  4981  106D  300A               	movlw	10
  4982  106E  01B2               	clrf	LCD_print_char@column+1
  4983  106F  00AA               	movwf	___lwmod@divisor
  4984  1070  01AB               	clrf	___lwmod@divisor+1
  4985  1071  0853               	movf	_hour+1,w
  4986  1072  00AD               	movwf	___lwmod@dividend+1
  4987  1073  0852               	movf	_hour,w
  4988  1074  00AC               	movwf	___lwmod@dividend
  4989  1075  20F2  160A  118A   	fcall	___lwmod
  4990  1078  082A               	movf	?___lwmod,w
  4991  1079  3E30               	addlw	48
  4992  107A  00B3               	movwf	LCD_print_char@print_value
  4993  107B  20AC  160A  118A   	fcall	_LCD_print_char
  4994                           
  4995                           ;Automated Solar Panel Orientation Setter.c: 737: LCD_print_char(1,15,minute/10+48);
  4996  107E  1283               	bcf	3,5	;RP0=0, select bank0
  4997  107F  1303               	bcf	3,6	;RP1=0, select bank0
  4998  1080  300F               	movlw	15
  4999  1081  01AF               	clrf	LCD_print_char@row
  5000  1082  0AAF               	incf	LCD_print_char@row,f
  5001  1083  01B0               	clrf	LCD_print_char@row+1
  5002  1084  00B1               	movwf	LCD_print_char@column
  5003  1085  300A               	movlw	10
  5004  1086  01B2               	clrf	LCD_print_char@column+1
  5005  1087  00A3               	movwf	___lwdiv@divisor
  5006  1088  01A4               	clrf	___lwdiv@divisor+1
  5007  1089  0859               	movf	_minute+1,w
  5008  108A  00A6               	movwf	___lwdiv@dividend+1
  5009  108B  0858               	movf	_minute,w
  5010  108C  00A5               	movwf	___lwdiv@dividend
  5011  108D  20C8  160A  118A   	fcall	___lwdiv
  5012  1090  0823               	movf	?___lwdiv,w
  5013  1091  3E30               	addlw	48
  5014  1092  00B3               	movwf	LCD_print_char@print_value
  5015  1093  20AC  160A  118A   	fcall	_LCD_print_char
  5016                           
  5017                           ;Automated Solar Panel Orientation Setter.c: 738: LCD_print_char(1,16,minute%10+48);
  5018  1096  1283               	bcf	3,5	;RP0=0, select bank0
  5019  1097  1303               	bcf	3,6	;RP1=0, select bank0
  5020  1098  3010               	movlw	16
  5021  1099  01AF               	clrf	LCD_print_char@row
  5022  109A  0AAF               	incf	LCD_print_char@row,f
  5023  109B  01B0               	clrf	LCD_print_char@row+1
  5024  109C  00B1               	movwf	LCD_print_char@column
  5025  109D  300A               	movlw	10
  5026  109E  01B2               	clrf	LCD_print_char@column+1
  5027  109F  00AA               	movwf	___lwmod@divisor
  5028  10A0  01AB               	clrf	___lwmod@divisor+1
  5029  10A1  0859               	movf	_minute+1,w
  5030  10A2  00AD               	movwf	___lwmod@dividend+1
  5031  10A3  0858               	movf	_minute,w
  5032  10A4  00AC               	movwf	___lwmod@dividend
  5033  10A5  20F2  160A  118A   	fcall	___lwmod
  5034  10A8  082A               	movf	?___lwmod,w
  5035  10A9  3E30               	addlw	48
  5036  10AA  00B3               	movwf	LCD_print_char@print_value
  5037  10AB  28AC               	ljmp	l3490
  5038  10AC                     __end_of_LCDTimeUpdate:	
  5039  10AC                     __ptext28:	
  5040 ;; *************** function _LCD_print_char *****************
  5041 ;; Defined at:
  5042 ;;		line 174 in file "lcdv2.h"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  row             2   15[BANK0 ] int 
  5045 ;;  column          2   17[BANK0 ] int 
  5046 ;;  print_value     1   19[BANK0 ] unsigned char 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;		None
  5049 ;; Return value:  Size  Location     Type
  5050 ;;		None               void
  5051 ;; Registers used:
  5052 ;;		wreg, status,2, status,0, pclath, cstack
  5053 ;; Tracked objects:
  5054 ;;		On entry : 300/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5058 ;;      Params:         0       5       0       0       0
  5059 ;;      Locals:         0       0       0       0       0
  5060 ;;      Temps:          0       1       0       0       0
  5061 ;;      Totals:         0       6       0       0       0
  5062 ;;Total ram usage:        6 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; Hardware stack levels required when called:    7
  5065 ;; This function calls:
  5066 ;;		_lcd_add
  5067 ;;		_position
  5068 ;; This function is called by:
  5069 ;;		_main
  5070 ;;		_LCDTimeUpdate
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _LCD_print_char
  5076  10AC                     _LCD_print_char:	
  5077  10AC                     l3490:	
  5078                           ;incstack = 0
  5079                           ; Regs used in _LCD_print_char: [wreg+status,2+status,0+pclath+cstack]
  5080                           
  5081                           
  5082                           ;lcdv2.h: 175: position(row,column);
  5083  10AC  0831               	movf	LCD_print_char@column,w
  5084  10AD  00A4               	movwf	position@collum
  5085  10AE  082F               	movf	LCD_print_char@row,w
  5086  10AF  21D1  160A  118A   	fcall	_position
  5087                           
  5088                           ;lcdv2.h: 176: RC2 = 1;
  5089  10B2  1283               	bcf	3,5	;RP0=0, select bank0
  5090  10B3  1303               	bcf	3,6	;RP1=0, select bank0
  5091  10B4  1507               	bsf	7,2	;volatile
  5092                           
  5093                           ;lcdv2.h: 177: _delay(20);
  5094  10B5  3006               	movlw	6
  5095  10B6  00B4               	movwf	??_LCD_print_char
  5096  10B7                     u6657:	
  5097  10B7  0BB4               	decfsz	??_LCD_print_char,f
  5098  10B8  28B7               	goto	u6657
  5099  10B9  0000               	nop
  5100                           
  5101                           ;lcdv2.h: 178: lcd_data = print_value;
  5102  10BA  1283               	bcf	3,5	;RP0=0, select bank0
  5103  10BB  1303               	bcf	3,6	;RP1=0, select bank0
  5104  10BC  0833               	movf	LCD_print_char@print_value,w
  5105  10BD  00DF               	movwf	_lcd_data
  5106                           
  5107                           ;lcdv2.h: 179: lcd_add();
  5108  10BE  2116  160A  118A   	fcall	_lcd_add
  5109                           
  5110                           ;lcdv2.h: 180: _delay(100);
  5111  10C1  3021               	movlw	33
  5112  10C2  1283               	bcf	3,5	;RP0=0, select bank0
  5113  10C3  1303               	bcf	3,6	;RP1=0, select bank0
  5114  10C4  00B4               	movwf	??_LCD_print_char
  5115  10C5                     u6667:	
  5116  10C5  0BB4               	decfsz	??_LCD_print_char,f
  5117  10C6  28C5               	goto	u6667
  5118  10C7  0008               	return
  5119  10C8                     __end_of_LCD_print_char:	
  5120  10C8                     __ptext27:	
  5121 ;; *************** function ___lwdiv *****************
  5122 ;; Defined at:
  5123 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  divisor         2    3[BANK0 ] unsigned int 
  5126 ;;  dividend        2    5[BANK0 ] unsigned int 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  quotient        2    7[BANK0 ] unsigned int 
  5129 ;;  counter         1    9[BANK0 ] unsigned char 
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  2    3[BANK0 ] unsigned int 
  5132 ;; Registers used:
  5133 ;;		wreg, status,2, status,0
  5134 ;; Tracked objects:
  5135 ;;		On entry : 300/0
  5136 ;;		On exit  : 300/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5139 ;;      Params:         0       4       0       0       0
  5140 ;;      Locals:         0       3       0       0       0
  5141 ;;      Temps:          0       0       0       0       0
  5142 ;;      Totals:         0       7       0       0       0
  5143 ;;Total ram usage:        7 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    5
  5146 ;; This function calls:
  5147 ;;		Nothing
  5148 ;; This function is called by:
  5149 ;;		_LCDTimeUpdate
  5150 ;;		_printf
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           
  5155                           ;psect for function ___lwdiv
  5156  10C8                     ___lwdiv:	
  5157                           
  5158                           ;incstack = 0
  5159                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5160  10C8  01A7               	clrf	___lwdiv@quotient
  5161  10C9  01A8               	clrf	___lwdiv@quotient+1
  5162  10CA  0823               	movf	___lwdiv@divisor,w
  5163  10CB  0424               	iorwf	___lwdiv@divisor+1,w
  5164  10CC  1903               	btfsc	3,2
  5165  10CD  28ED               	goto	l3976
  5166  10CE  01A9               	clrf	___lwdiv@counter
  5167  10CF                     L29:	
  5168  10CF  0AA9               	incf	___lwdiv@counter,f
  5169  10D0  1BA4               	btfsc	___lwdiv@divisor+1,7
  5170  10D1  28D6               	goto	l3964
  5171  10D2  1003               	clrc
  5172  10D3  0DA3               	rlf	___lwdiv@divisor,f
  5173  10D4  0DA4               	rlf	___lwdiv@divisor+1,f
  5174  10D5  28CF               	goto	L29
  5175  10D6                     l3964:	
  5176  10D6  1003               	clrc
  5177  10D7  0DA7               	rlf	___lwdiv@quotient,f
  5178  10D8  0DA8               	rlf	___lwdiv@quotient+1,f
  5179  10D9  0824               	movf	___lwdiv@divisor+1,w
  5180  10DA  0226               	subwf	___lwdiv@dividend+1,w
  5181  10DB  1D03               	skipz
  5182  10DC  28DF               	goto	u5165
  5183  10DD  0823               	movf	___lwdiv@divisor,w
  5184  10DE  0225               	subwf	___lwdiv@dividend,w
  5185  10DF                     u5165:	
  5186  10DF  1C03               	skipc
  5187  10E0  28E9               	goto	L30
  5188  10E1  0823               	movf	___lwdiv@divisor,w
  5189  10E2  02A5               	subwf	___lwdiv@dividend,f
  5190  10E3  0824               	movf	___lwdiv@divisor+1,w
  5191  10E4  1C03               	skipc
  5192  10E5  03A6               	decf	___lwdiv@dividend+1,f
  5193  10E6  02A6               	subwf	___lwdiv@dividend+1,f
  5194  10E7  1427               	bsf	___lwdiv@quotient,0
  5195  10E8  1003               	clrc
  5196  10E9                     L30:	
  5197  10E9  0CA4               	rrf	___lwdiv@divisor+1,f
  5198  10EA  0CA3               	rrf	___lwdiv@divisor,f
  5199  10EB  0BA9               	decfsz	___lwdiv@counter,f
  5200  10EC  28D6               	goto	l3964
  5201  10ED                     l3976:	
  5202  10ED  0828               	movf	___lwdiv@quotient+1,w
  5203  10EE  00A4               	movwf	?___lwdiv+1
  5204  10EF  0827               	movf	___lwdiv@quotient,w
  5205  10F0  00A3               	movwf	?___lwdiv
  5206  10F1  0008               	return
  5207  10F2                     __end_of___lwdiv:	
  5208  10F2                     __ptext26:	
  5209 ;; *************** function ___lwmod *****************
  5210 ;; Defined at:
  5211 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  divisor         2   10[BANK0 ] unsigned int 
  5214 ;;  dividend        2   12[BANK0 ] unsigned int 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  counter         1   14[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  2   10[BANK0 ] unsigned int 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0
  5221 ;; Tracked objects:
  5222 ;;		On entry : 300/0
  5223 ;;		On exit  : 300/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5226 ;;      Params:         0       4       0       0       0
  5227 ;;      Locals:         0       1       0       0       0
  5228 ;;      Temps:          0       0       0       0       0
  5229 ;;      Totals:         0       5       0       0       0
  5230 ;;Total ram usage:        5 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    5
  5233 ;; This function calls:
  5234 ;;		Nothing
  5235 ;; This function is called by:
  5236 ;;		_LCDTimeUpdate
  5237 ;;		_printf
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           
  5242                           ;psect for function ___lwmod
  5243  10F2                     ___lwmod:	
  5244                           
  5245                           ;incstack = 0
  5246                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5247  10F2  082A               	movf	___lwmod@divisor,w
  5248  10F3  042B               	iorwf	___lwmod@divisor+1,w
  5249  10F4  1903               	btfsc	3,2
  5250  10F5  2911               	goto	l3996
  5251  10F6  01AE               	clrf	___lwmod@counter
  5252  10F7                     L27:	
  5253  10F7  0AAE               	incf	___lwmod@counter,f
  5254  10F8  1BAB               	btfsc	___lwmod@divisor+1,7
  5255  10F9  28FE               	goto	l3988
  5256  10FA  1003               	clrc
  5257  10FB  0DAA               	rlf	___lwmod@divisor,f
  5258  10FC  0DAB               	rlf	___lwmod@divisor+1,f
  5259  10FD  28F7               	goto	L27
  5260  10FE                     l3988:	
  5261  10FE  082B               	movf	___lwmod@divisor+1,w
  5262  10FF  022D               	subwf	___lwmod@dividend+1,w
  5263  1100  1D03               	skipz
  5264  1101  2904               	goto	u5205
  5265  1102  082A               	movf	___lwmod@divisor,w
  5266  1103  022C               	subwf	___lwmod@dividend,w
  5267  1104                     u5205:	
  5268  1104  1C03               	skipc
  5269  1105  290D               	goto	L28
  5270  1106  082A               	movf	___lwmod@divisor,w
  5271  1107  02AC               	subwf	___lwmod@dividend,f
  5272  1108  082B               	movf	___lwmod@divisor+1,w
  5273  1109  1C03               	skipc
  5274  110A  03AD               	decf	___lwmod@dividend+1,f
  5275  110B  02AD               	subwf	___lwmod@dividend+1,f
  5276  110C  1003               	clrc
  5277  110D                     L28:	
  5278  110D  0CAB               	rrf	___lwmod@divisor+1,f
  5279  110E  0CAA               	rrf	___lwmod@divisor,f
  5280  110F  0BAE               	decfsz	___lwmod@counter,f
  5281  1110  28FE               	goto	l3988
  5282  1111                     l3996:	
  5283  1111  082D               	movf	___lwmod@dividend+1,w
  5284  1112  00AB               	movwf	?___lwmod+1
  5285  1113  082C               	movf	___lwmod@dividend,w
  5286  1114  00AA               	movwf	?___lwmod
  5287  1115  0008               	return
  5288  1116                     __end_of___lwmod:	
  5289  1116                     __ptext30:	
  5290 ;; *************** function _lcd_add *****************
  5291 ;; Defined at:
  5292 ;;		line 224 in file "lcdv2.h"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;		None
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;		None
  5297 ;; Return value:  Size  Location     Type
  5298 ;;		None               void
  5299 ;; Registers used:
  5300 ;;		wreg, status,2, status,0
  5301 ;; Tracked objects:
  5302 ;;		On entry : 300/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5306 ;;      Params:         0       0       0       0       0
  5307 ;;      Locals:         0       0       0       0       0
  5308 ;;      Temps:          0       1       0       0       0
  5309 ;;      Totals:         0       1       0       0       0
  5310 ;;Total ram usage:        1 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    5
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		_putch
  5317 ;;		_LCD_print_char
  5318 ;;		_clr_display
  5319 ;;		_position
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           
  5324                           ;psect for function _lcd_add
  5325  1116                     _lcd_add:	
  5326                           
  5327                           ;lcdv2.h: 230: bit0 = lcd_data;
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in _lcd_add: [wreg+status,2+status,0]
  5331  1116  107D               	bcf	_bit0/(0+8),_bit0& (0+7)
  5332  1117  185F               	btfsc	_lcd_data,0
  5333  1118  147D               	bsf	_bit0/(0+8),_bit0& (0+7)
  5334                           
  5335                           ;lcdv2.h: 231: bit1 = lcd_data>>1;
  5336  1119  1283               	bcf	3,5	;RP0=0, select bank0
  5337  111A  1303               	bcf	3,6	;RP1=0, select bank0
  5338  111B  085F               	movf	_lcd_data,w
  5339  111C  00A3               	movwf	??_lcd_add
  5340  111D  1003               	clrc
  5341  111E  0CA3               	rrf	??_lcd_add,f
  5342  111F  10FD               	bcf	_bit1/(0+8),_bit1& (0+7)
  5343  1120  1823               	btfsc	??_lcd_add,0
  5344  1121  14FD               	bsf	_bit1/(0+8),_bit1& (0+7)
  5345                           
  5346                           ;lcdv2.h: 232: bit2 = lcd_data>>2;
  5347  1122  1283               	bcf	3,5	;RP0=0, select bank0
  5348  1123  1303               	bcf	3,6	;RP1=0, select bank0
  5349  1124  085F               	movf	_lcd_data,w
  5350  1125  00A3               	movwf	??_lcd_add
  5351  1126  1003               	clrc
  5352  1127  0CA3               	rrf	??_lcd_add,f
  5353  1128  1003               	clrc
  5354  1129  0CA3               	rrf	??_lcd_add,f
  5355  112A  117D               	bcf	_bit2/(0+8),_bit2& (0+7)
  5356  112B  1823               	btfsc	??_lcd_add,0
  5357  112C  157D               	bsf	_bit2/(0+8),_bit2& (0+7)
  5358                           
  5359                           ;lcdv2.h: 233: bit3 = lcd_data>>3;
  5360  112D  1283               	bcf	3,5	;RP0=0, select bank0
  5361  112E  1303               	bcf	3,6	;RP1=0, select bank0
  5362  112F  085F               	movf	_lcd_data,w
  5363  1130  00A3               	movwf	??_lcd_add
  5364  1131  1003               	clrc
  5365  1132  0CA3               	rrf	??_lcd_add,f
  5366  1133  1003               	clrc
  5367  1134  0CA3               	rrf	??_lcd_add,f
  5368  1135  1003               	clrc
  5369  1136  0CA3               	rrf	??_lcd_add,f
  5370  1137  11FD               	bcf	_bit3/(0+8),_bit3& (0+7)
  5371  1138  1823               	btfsc	??_lcd_add,0
  5372  1139  15FD               	bsf	_bit3/(0+8),_bit3& (0+7)
  5373                           
  5374                           ;lcdv2.h: 234: bit4 = lcd_data>>4;
  5375  113A  1283               	bcf	3,5	;RP0=0, select bank0
  5376  113B  1303               	bcf	3,6	;RP1=0, select bank0
  5377  113C  085F               	movf	_lcd_data,w
  5378  113D  00A3               	movwf	??_lcd_add
  5379  113E  3004               	movlw	4
  5380  113F                     u3255:	
  5381  113F  1003               	clrc
  5382  1140  0CA3               	rrf	??_lcd_add,f
  5383  1141  3EFF               	addlw	-1
  5384  1142  1D03               	skipz
  5385  1143  293F               	goto	u3255
  5386  1144  127D               	bcf	_bit4/(0+8),_bit4& (0+7)
  5387  1145  1823               	btfsc	??_lcd_add,0
  5388  1146  167D               	bsf	_bit4/(0+8),_bit4& (0+7)
  5389                           
  5390                           ;lcdv2.h: 235: bit5 = lcd_data>>5;
  5391  1147  1283               	bcf	3,5	;RP0=0, select bank0
  5392  1148  1303               	bcf	3,6	;RP1=0, select bank0
  5393  1149  085F               	movf	_lcd_data,w
  5394  114A  00A3               	movwf	??_lcd_add
  5395  114B  3005               	movlw	5
  5396  114C                     u3275:	
  5397  114C  1003               	clrc
  5398  114D  0CA3               	rrf	??_lcd_add,f
  5399  114E  3EFF               	addlw	-1
  5400  114F  1D03               	skipz
  5401  1150  294C               	goto	u3275
  5402  1151  12FD               	bcf	_bit5/(0+8),_bit5& (0+7)
  5403  1152  1823               	btfsc	??_lcd_add,0
  5404  1153  16FD               	bsf	_bit5/(0+8),_bit5& (0+7)
  5405                           
  5406                           ;lcdv2.h: 236: bit6 = lcd_data>>6;
  5407  1154  1283               	bcf	3,5	;RP0=0, select bank0
  5408  1155  1303               	bcf	3,6	;RP1=0, select bank0
  5409  1156  085F               	movf	_lcd_data,w
  5410  1157  00A3               	movwf	??_lcd_add
  5411  1158  3006               	movlw	6
  5412  1159                     u3295:	
  5413  1159  1003               	clrc
  5414  115A  0CA3               	rrf	??_lcd_add,f
  5415  115B  3EFF               	addlw	-1
  5416  115C  1D03               	skipz
  5417  115D  2959               	goto	u3295
  5418  115E  137D               	bcf	_bit6/(0+8),_bit6& (0+7)
  5419  115F  1823               	btfsc	??_lcd_add,0
  5420  1160  177D               	bsf	_bit6/(0+8),_bit6& (0+7)
  5421                           
  5422                           ;lcdv2.h: 237: bit7 = lcd_data>>7;
  5423  1161  1283               	bcf	3,5	;RP0=0, select bank0
  5424  1162  1303               	bcf	3,6	;RP1=0, select bank0
  5425  1163  085F               	movf	_lcd_data,w
  5426  1164  00A3               	movwf	??_lcd_add
  5427  1165  3007               	movlw	7
  5428  1166                     u3315:	
  5429  1166  1003               	clrc
  5430  1167  0CA3               	rrf	??_lcd_add,f
  5431  1168  3EFF               	addlw	-1
  5432  1169  1D03               	skipz
  5433  116A  2966               	goto	u3315
  5434  116B  1166               	bcf	_bit7/(0+8),_bit7& (0+7)
  5435  116C  1823               	btfsc	??_lcd_add,0
  5436  116D  1566               	bsf	_bit7/(0+8),_bit7& (0+7)
  5437                           
  5438                           ;lcdv2.h: 239: RC3 = 0;
  5439  116E  1283               	bcf	3,5	;RP0=0, select bank0
  5440  116F  1303               	bcf	3,6	;RP1=0, select bank0
  5441  1170  1187               	bcf	7,3	;volatile
  5442                           
  5443                           ;lcdv2.h: 240: _delay(1);
  5444  1171  0000               	nop
  5445                           
  5446                           ;lcdv2.h: 241: RC3 = 1;
  5447  1172  1283               	bcf	3,5	;RP0=0, select bank0
  5448  1173  1303               	bcf	3,6	;RP1=0, select bank0
  5449  1174  1587               	bsf	7,3	;volatile
  5450                           
  5451                           ;lcdv2.h: 242: _delay(1);
  5452  1175  0000               	nop
  5453                           
  5454                           ;lcdv2.h: 244: RC1 = bit4;
  5455  1176  1E7D               	btfss	_bit4/(0+8),_bit4& (0+7)
  5456  1177  297C               	goto	u3330
  5457  1178  1283               	bcf	3,5	;RP0=0, select bank0
  5458  1179  1303               	bcf	3,6	;RP1=0, select bank0
  5459  117A  1487               	bsf	7,1	;volatile
  5460  117B  297F               	goto	l3144
  5461  117C                     u3330:	
  5462  117C  1283               	bcf	3,5	;RP0=0, select bank0
  5463  117D  1303               	bcf	3,6	;RP1=0, select bank0
  5464  117E  1087               	bcf	7,1	;volatile
  5465  117F                     l3144:	
  5466                           
  5467                           ;lcdv2.h: 245: RD0 = bit5;
  5468  117F  1EFD               	btfss	_bit5/(0+8),_bit5& (0+7)
  5469  1180  2985               	goto	u3350
  5470  1181  1283               	bcf	3,5	;RP0=0, select bank0
  5471  1182  1303               	bcf	3,6	;RP1=0, select bank0
  5472  1183  1408               	bsf	8,0	;volatile
  5473  1184  2988               	goto	l3146
  5474  1185                     u3350:	
  5475  1185  1283               	bcf	3,5	;RP0=0, select bank0
  5476  1186  1303               	bcf	3,6	;RP1=0, select bank0
  5477  1187  1008               	bcf	8,0	;volatile
  5478  1188                     l3146:	
  5479                           
  5480                           ;lcdv2.h: 246: RC0 = bit6;
  5481  1188  1F7D               	btfss	_bit6/(0+8),_bit6& (0+7)
  5482  1189  298E               	goto	u3370
  5483  118A  1283               	bcf	3,5	;RP0=0, select bank0
  5484  118B  1303               	bcf	3,6	;RP1=0, select bank0
  5485  118C  1407               	bsf	7,0	;volatile
  5486  118D  2991               	goto	l3148
  5487  118E                     u3370:	
  5488  118E  1283               	bcf	3,5	;RP0=0, select bank0
  5489  118F  1303               	bcf	3,6	;RP1=0, select bank0
  5490  1190  1007               	bcf	7,0	;volatile
  5491  1191                     l3148:	
  5492                           
  5493                           ;lcdv2.h: 247: RD1 = bit7;
  5494  1191  1D66               	btfss	_bit7/(0+8),_bit7& (0+7)
  5495  1192  2997               	goto	u3390
  5496  1193  1283               	bcf	3,5	;RP0=0, select bank0
  5497  1194  1303               	bcf	3,6	;RP1=0, select bank0
  5498  1195  1488               	bsf	8,1	;volatile
  5499  1196  299A               	goto	l3150
  5500  1197                     u3390:	
  5501  1197  1283               	bcf	3,5	;RP0=0, select bank0
  5502  1198  1303               	bcf	3,6	;RP1=0, select bank0
  5503  1199  1088               	bcf	8,1	;volatile
  5504  119A                     l3150:	
  5505                           
  5506                           ;lcdv2.h: 249: _delay(1);
  5507  119A  0000               	nop
  5508                           
  5509                           ;lcdv2.h: 250: RC3 = 0;
  5510  119B  1283               	bcf	3,5	;RP0=0, select bank0
  5511  119C  1303               	bcf	3,6	;RP1=0, select bank0
  5512  119D  1187               	bcf	7,3	;volatile
  5513                           
  5514                           ;lcdv2.h: 251: _delay(1);
  5515  119E  0000               	nop
  5516                           
  5517                           ;lcdv2.h: 255: RC3 = 0;
  5518  119F  1283               	bcf	3,5	;RP0=0, select bank0
  5519  11A0  1303               	bcf	3,6	;RP1=0, select bank0
  5520  11A1  1187               	bcf	7,3	;volatile
  5521                           
  5522                           ;lcdv2.h: 256: _delay(1);
  5523  11A2  0000               	nop
  5524                           
  5525                           ;lcdv2.h: 257: RC3 = 1;
  5526  11A3  1283               	bcf	3,5	;RP0=0, select bank0
  5527  11A4  1303               	bcf	3,6	;RP1=0, select bank0
  5528  11A5  1587               	bsf	7,3	;volatile
  5529                           
  5530                           ;lcdv2.h: 258: _delay(1);
  5531  11A6  0000               	nop
  5532                           
  5533                           ;lcdv2.h: 260: RC1 = bit0;
  5534  11A7  1C7D               	btfss	_bit0/(0+8),_bit0& (0+7)
  5535  11A8  29AD               	goto	u3410
  5536  11A9  1283               	bcf	3,5	;RP0=0, select bank0
  5537  11AA  1303               	bcf	3,6	;RP1=0, select bank0
  5538  11AB  1487               	bsf	7,1	;volatile
  5539  11AC  29B0               	goto	l3166
  5540  11AD                     u3410:	
  5541  11AD  1283               	bcf	3,5	;RP0=0, select bank0
  5542  11AE  1303               	bcf	3,6	;RP1=0, select bank0
  5543  11AF  1087               	bcf	7,1	;volatile
  5544  11B0                     l3166:	
  5545                           
  5546                           ;lcdv2.h: 261: RD0 = bit1;
  5547  11B0  1CFD               	btfss	_bit1/(0+8),_bit1& (0+7)
  5548  11B1  29B6               	goto	u3430
  5549  11B2  1283               	bcf	3,5	;RP0=0, select bank0
  5550  11B3  1303               	bcf	3,6	;RP1=0, select bank0
  5551  11B4  1408               	bsf	8,0	;volatile
  5552  11B5  29B9               	goto	l3168
  5553  11B6                     u3430:	
  5554  11B6  1283               	bcf	3,5	;RP0=0, select bank0
  5555  11B7  1303               	bcf	3,6	;RP1=0, select bank0
  5556  11B8  1008               	bcf	8,0	;volatile
  5557  11B9                     l3168:	
  5558                           
  5559                           ;lcdv2.h: 262: RC0 = bit2;
  5560  11B9  1D7D               	btfss	_bit2/(0+8),_bit2& (0+7)
  5561  11BA  29BF               	goto	u3450
  5562  11BB  1283               	bcf	3,5	;RP0=0, select bank0
  5563  11BC  1303               	bcf	3,6	;RP1=0, select bank0
  5564  11BD  1407               	bsf	7,0	;volatile
  5565  11BE  29C2               	goto	l3170
  5566  11BF                     u3450:	
  5567  11BF  1283               	bcf	3,5	;RP0=0, select bank0
  5568  11C0  1303               	bcf	3,6	;RP1=0, select bank0
  5569  11C1  1007               	bcf	7,0	;volatile
  5570  11C2                     l3170:	
  5571                           
  5572                           ;lcdv2.h: 263: RD1 = bit3;
  5573  11C2  1DFD               	btfss	_bit3/(0+8),_bit3& (0+7)
  5574  11C3  29C8               	goto	u3470
  5575  11C4  1283               	bcf	3,5	;RP0=0, select bank0
  5576  11C5  1303               	bcf	3,6	;RP1=0, select bank0
  5577  11C6  1488               	bsf	8,1	;volatile
  5578  11C7  29CB               	goto	l3172
  5579  11C8                     u3470:	
  5580  11C8  1283               	bcf	3,5	;RP0=0, select bank0
  5581  11C9  1303               	bcf	3,6	;RP1=0, select bank0
  5582  11CA  1088               	bcf	8,1	;volatile
  5583  11CB                     l3172:	
  5584                           
  5585                           ;lcdv2.h: 265: _delay(1);
  5586  11CB  0000               	nop
  5587                           
  5588                           ;lcdv2.h: 266: RC3 = 0;
  5589  11CC  1283               	bcf	3,5	;RP0=0, select bank0
  5590  11CD  1303               	bcf	3,6	;RP1=0, select bank0
  5591  11CE  1187               	bcf	7,3	;volatile
  5592                           
  5593                           ;lcdv2.h: 267: _delay(1);
  5594  11CF  0000               	nop
  5595  11D0  0008               	return
  5596  11D1                     __end_of_lcd_add:	
  5597  11D1                     __ptext29:	
  5598 ;; *************** function _position *****************
  5599 ;; Defined at:
  5600 ;;		line 208 in file "lcdv2.h"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  row             1    wreg     unsigned char 
  5603 ;;  collum          1    4[BANK0 ] unsigned char 
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;  row             1    8[BANK0 ] unsigned char 
  5606 ;;  post            1    7[BANK0 ] unsigned char 
  5607 ;; Return value:  Size  Location     Type
  5608 ;;		None               void
  5609 ;; Registers used:
  5610 ;;		wreg, status,2, status,0, pclath, cstack
  5611 ;; Tracked objects:
  5612 ;;		On entry : 300/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5616 ;;      Params:         0       1       0       0       0
  5617 ;;      Locals:         0       2       0       0       0
  5618 ;;      Temps:          0       2       0       0       0
  5619 ;;      Totals:         0       5       0       0       0
  5620 ;;Total ram usage:        5 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    6
  5623 ;; This function calls:
  5624 ;;		_lcd_add
  5625 ;; This function is called by:
  5626 ;;		_LCD_print_char
  5627 ;;		_main
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _position
  5633  11D1                     _position:	
  5634                           
  5635                           ;incstack = 0
  5636                           ; Regs used in _position: [wreg+status,2+status,0+pclath+cstack]
  5637                           ;position@row stored from wreg
  5638  11D1  00A8               	movwf	position@row
  5639                           
  5640                           ;lcdv2.h: 210: char post ;
  5641                           ;lcdv2.h: 211: if( row == 1 ) row = 128;
  5642  11D2  0B28               	decfsz	position@row,w
  5643  11D3  29D6               	goto	l3230
  5644  11D4  3080               	movlw	128
  5645  11D5  00A8               	movwf	position@row
  5646  11D6                     l3230:	
  5647                           
  5648                           ;lcdv2.h: 212: if( row == 2 ) row = 192;
  5649  11D6  3002               	movlw	2
  5650  11D7  0628               	xorwf	position@row,w
  5651  11D8  1D03               	btfss	3,2
  5652  11D9  29DC               	goto	l3234
  5653  11DA  30C0               	movlw	192
  5654  11DB  00A8               	movwf	position@row
  5655  11DC                     l3234:	
  5656                           
  5657                           ;lcdv2.h: 213: post = row + collum - 1;
  5658  11DC  0824               	movf	position@collum,w
  5659  11DD  0728               	addwf	position@row,w
  5660  11DE  3EFF               	addlw	255
  5661  11DF  00A7               	movwf	position@post
  5662                           
  5663                           ;lcdv2.h: 214: RC2 = 0;
  5664  11E0  1107               	bcf	7,2	;volatile
  5665                           
  5666                           ;lcdv2.h: 215: _delay(20);
  5667  11E1  3006               	movlw	6
  5668  11E2  00A5               	movwf	??_position
  5669  11E3                     u6677:	
  5670  11E3  0BA5               	decfsz	??_position,f
  5671  11E4  29E3               	goto	u6677
  5672  11E5  0000               	nop
  5673                           
  5674                           ;lcdv2.h: 216: lcd_data = post ;
  5675  11E6  1283               	bcf	3,5	;RP0=0, select bank0
  5676  11E7  1303               	bcf	3,6	;RP1=0, select bank0
  5677  11E8  0827               	movf	position@post,w
  5678  11E9  00DF               	movwf	_lcd_data
  5679                           
  5680                           ;lcdv2.h: 217: lcd_add();
  5681  11EA  2116  160A  118A   	fcall	_lcd_add
  5682                           
  5683                           ;lcdv2.h: 218: _delay((unsigned long)((10)*(4000000/4000.0)));
  5684  11ED  300D               	movlw	13
  5685  11EE  1283               	bcf	3,5	;RP0=0, select bank0
  5686  11EF  1303               	bcf	3,6	;RP1=0, select bank0
  5687  11F0  00A6               	movwf	??_position+1
  5688  11F1  30FB               	movlw	251
  5689  11F2  00A5               	movwf	??_position
  5690  11F3                     u6687:	
  5691  11F3  0BA5               	decfsz	??_position,f
  5692  11F4  29F3               	goto	u6687
  5693  11F5  0BA6               	decfsz	??_position+1,f
  5694  11F6  29F3               	goto	u6687
  5695  11F7  29F8               	nop2
  5696  11F8  0008               	return
  5697  11F9                     __end_of_position:	
  5698                           
  5699                           	psect	text10
  5700  1EFD                     __ptext10:	
  5701 ;; *************** function _atod_init *****************
  5702 ;; Defined at:
  5703 ;;		line 8 in file "a2d.h"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;		None
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;		None
  5708 ;; Return value:  Size  Location     Type
  5709 ;;		None               void
  5710 ;; Registers used:
  5711 ;;		wreg
  5712 ;; Tracked objects:
  5713 ;;		On entry : B00/0
  5714 ;;		On exit  : B00/100
  5715 ;;		Unchanged: 800/0
  5716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5717 ;;      Params:         0       0       0       0       0
  5718 ;;      Locals:         0       0       0       0       0
  5719 ;;      Temps:          0       0       0       0       0
  5720 ;;      Totals:         0       0       0       0       0
  5721 ;;Total ram usage:        0 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    5
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_main
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           
  5732                           ;psect for function _atod_init
  5733  1EFD                     _atod_init:	
  5734                           
  5735                           ;a2d.h: 9: ADCON0 = 0b01000010;
  5736                           
  5737                           ;incstack = 0
  5738                           ; Regs used in _atod_init: [wreg]
  5739  1EFD  3042               	movlw	66
  5740  1EFE  009F               	movwf	31	;volatile
  5741                           
  5742                           ;a2d.h: 10: ADCON1 = 0b10000100;
  5743  1EFF  3084               	movlw	132
  5744  1F00  1683               	bsf	3,5	;RP0=1, select bank1
  5745  1F01  009F               	movwf	31	;volatile
  5746  1F02  0008               	return
  5747  1F03                     __end_of_atod_init:	
  5748                           
  5749                           	psect	text18
  5750  086C                     __ptext18:	
  5751 ;; *************** function ___ltmod *****************
  5752 ;; Defined at:
  5753 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ltmod.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;  divisor         3    3[BANK0 ] unsigned um
  5756 ;;  dividend        3    6[BANK0 ] unsigned um
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;  counter         1    9[BANK0 ] unsigned char 
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  3    3[BANK0 ] unsigned um
  5761 ;; Registers used:
  5762 ;;		wreg, status,2, status,0
  5763 ;; Tracked objects:
  5764 ;;		On entry : 300/0
  5765 ;;		On exit  : 300/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5768 ;;      Params:         0       6       0       0       0
  5769 ;;      Locals:         0       1       0       0       0
  5770 ;;      Temps:          0       0       0       0       0
  5771 ;;      Totals:         0       7       0       0       0
  5772 ;;Total ram usage:        7 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; Hardware stack levels required when called:    5
  5775 ;; This function calls:
  5776 ;;		Nothing
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           
  5783                           ;psect for function ___ltmod
  5784  086C                     ___ltmod:	
  5785                           
  5786                           ;incstack = 0
  5787                           ; Regs used in ___ltmod: [wreg+status,2+status,0]
  5788  086C  0825               	movf	___ltmod@divisor+2,w
  5789  086D  0424               	iorwf	___ltmod@divisor+1,w
  5790  086E  0423               	iorwf	___ltmod@divisor,w
  5791  086F  1903               	skipnz
  5792  0870  2896               	goto	l4732
  5793  0871  01A9               	clrf	___ltmod@counter
  5794  0872                     L23:	
  5795  0872  0AA9               	incf	___ltmod@counter,f
  5796  0873  1BA5               	btfsc	___ltmod@divisor+2,7
  5797  0874  287A               	goto	l4724
  5798  0875  1003               	clrc
  5799  0876  0DA3               	rlf	___ltmod@divisor,f
  5800  0877  0DA4               	rlf	___ltmod@divisor+1,f
  5801  0878  0DA5               	rlf	___ltmod@divisor+2,f
  5802  0879  2872               	goto	L23
  5803  087A                     l4724:	
  5804  087A  0825               	movf	___ltmod@divisor+2,w
  5805  087B  0228               	subwf	___ltmod@dividend+2,w
  5806  087C  1D03               	skipz
  5807  087D  2884               	goto	u6285
  5808  087E  0824               	movf	___ltmod@divisor+1,w
  5809  087F  0227               	subwf	___ltmod@dividend+1,w
  5810  0880  1D03               	skipz
  5811  0881  2884               	goto	u6285
  5812  0882  0823               	movf	___ltmod@divisor,w
  5813  0883  0226               	subwf	___ltmod@dividend,w
  5814  0884                     u6285:	
  5815  0884  1C03               	skipc
  5816  0885  2891               	goto	L24
  5817  0886  0823               	movf	___ltmod@divisor,w
  5818  0887  02A6               	subwf	___ltmod@dividend,f
  5819  0888  0824               	movf	___ltmod@divisor+1,w
  5820  0889  1C03               	skipc
  5821  088A  0F24               	incfsz	___ltmod@divisor+1,w
  5822  088B  02A7               	subwf	___ltmod@dividend+1,f
  5823  088C  0825               	movf	___ltmod@divisor+2,w
  5824  088D  1C03               	skipc
  5825  088E  0A25               	incf	___ltmod@divisor+2,w
  5826  088F  02A8               	subwf	___ltmod@dividend+2,f
  5827  0890  1003               	clrc
  5828  0891                     L24:	
  5829  0891  0CA5               	rrf	___ltmod@divisor+2,f
  5830  0892  0CA4               	rrf	___ltmod@divisor+1,f
  5831  0893  0CA3               	rrf	___ltmod@divisor,f
  5832  0894  0BA9               	decfsz	___ltmod@counter,f
  5833  0895  287A               	goto	l4724
  5834  0896                     l4732:	
  5835  0896  0826               	movf	___ltmod@dividend,w
  5836  0897  00A3               	movwf	?___ltmod
  5837  0898  0827               	movf	___ltmod@dividend+1,w
  5838  0899  00A4               	movwf	?___ltmod+1
  5839  089A  0828               	movf	___ltmod@dividend+2,w
  5840  089B  00A5               	movwf	?___ltmod+2
  5841  089C  0008               	return
  5842  089D                     __end_of___ltmod:	
  5843                           
  5844                           	psect	text19
  5845  089D                     __ptext19:	
  5846 ;; *************** function ___ltdiv *****************
  5847 ;; Defined at:
  5848 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ltdiv.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  divisor         3    3[BANK0 ] unsigned um
  5851 ;;  dividend        3    6[BANK0 ] unsigned um
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  quotient        3    9[BANK0 ] unsigned um
  5854 ;;  counter         1   12[BANK0 ] unsigned char 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  3    3[BANK0 ] unsigned um
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0
  5859 ;; Tracked objects:
  5860 ;;		On entry : 300/0
  5861 ;;		On exit  : 300/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5864 ;;      Params:         0       6       0       0       0
  5865 ;;      Locals:         0       4       0       0       0
  5866 ;;      Temps:          0       0       0       0       0
  5867 ;;      Totals:         0      10       0       0       0
  5868 ;;Total ram usage:       10 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    5
  5871 ;; This function calls:
  5872 ;;		Nothing
  5873 ;; This function is called by:
  5874 ;;		_main
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           
  5879                           ;psect for function ___ltdiv
  5880  089D                     ___ltdiv:	
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  5884  089D  01A9               	clrf	___ltdiv@quotient
  5885  089E  01AA               	clrf	___ltdiv@quotient+1
  5886  089F  01AB               	clrf	___ltdiv@quotient+2
  5887  08A0  0825               	movf	___ltdiv@divisor+2,w
  5888  08A1  0424               	iorwf	___ltdiv@divisor+1,w
  5889  08A2  0423               	iorwf	___ltdiv@divisor,w
  5890  08A3  1903               	skipnz
  5891  08A4  28CF               	goto	l4712
  5892  08A5  01AC               	clrf	___ltdiv@counter
  5893  08A6                     L25:	
  5894  08A6  0AAC               	incf	___ltdiv@counter,f
  5895  08A7  1BA5               	btfsc	___ltdiv@divisor+2,7
  5896  08A8  28AE               	goto	l4700
  5897  08A9  1003               	clrc
  5898  08AA  0DA3               	rlf	___ltdiv@divisor,f
  5899  08AB  0DA4               	rlf	___ltdiv@divisor+1,f
  5900  08AC  0DA5               	rlf	___ltdiv@divisor+2,f
  5901  08AD  28A6               	goto	L25
  5902  08AE                     l4700:	
  5903  08AE  1003               	clrc
  5904  08AF  0DA9               	rlf	___ltdiv@quotient,f
  5905  08B0  0DAA               	rlf	___ltdiv@quotient+1,f
  5906  08B1  0DAB               	rlf	___ltdiv@quotient+2,f
  5907  08B2  0825               	movf	___ltdiv@divisor+2,w
  5908  08B3  0228               	subwf	___ltdiv@dividend+2,w
  5909  08B4  1D03               	skipz
  5910  08B5  28BC               	goto	u6245
  5911  08B6  0824               	movf	___ltdiv@divisor+1,w
  5912  08B7  0227               	subwf	___ltdiv@dividend+1,w
  5913  08B8  1D03               	skipz
  5914  08B9  28BC               	goto	u6245
  5915  08BA  0823               	movf	___ltdiv@divisor,w
  5916  08BB  0226               	subwf	___ltdiv@dividend,w
  5917  08BC                     u6245:	
  5918  08BC  1C03               	skipc
  5919  08BD  28CA               	goto	L26
  5920  08BE  0823               	movf	___ltdiv@divisor,w
  5921  08BF  02A6               	subwf	___ltdiv@dividend,f
  5922  08C0  0824               	movf	___ltdiv@divisor+1,w
  5923  08C1  1C03               	skipc
  5924  08C2  0F24               	incfsz	___ltdiv@divisor+1,w
  5925  08C3  02A7               	subwf	___ltdiv@dividend+1,f
  5926  08C4  0825               	movf	___ltdiv@divisor+2,w
  5927  08C5  1C03               	skipc
  5928  08C6  0A25               	incf	___ltdiv@divisor+2,w
  5929  08C7  02A8               	subwf	___ltdiv@dividend+2,f
  5930  08C8  1429               	bsf	___ltdiv@quotient,0
  5931  08C9  1003               	clrc
  5932  08CA                     L26:	
  5933  08CA  0CA5               	rrf	___ltdiv@divisor+2,f
  5934  08CB  0CA4               	rrf	___ltdiv@divisor+1,f
  5935  08CC  0CA3               	rrf	___ltdiv@divisor,f
  5936  08CD  0BAC               	decfsz	___ltdiv@counter,f
  5937  08CE  28AE               	goto	l4700
  5938  08CF                     l4712:	
  5939  08CF  0829               	movf	___ltdiv@quotient,w
  5940  08D0  00A3               	movwf	?___ltdiv
  5941  08D1  082A               	movf	___ltdiv@quotient+1,w
  5942  08D2  00A4               	movwf	?___ltdiv+1
  5943  08D3  082B               	movf	___ltdiv@quotient+2,w
  5944  08D4  00A5               	movwf	?___ltdiv+2
  5945  08D5  0008               	return
  5946  08D6                     __end_of___ltdiv:	
  5947                           
  5948                           	psect	text20
  5949  1F0B                     __ptext20:	
  5950 ;; *************** function _Timer1_Init *****************
  5951 ;; Defined at:
  5952 ;;		line 4 in file "timer1.h"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;		None
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;		None
  5957 ;; Return value:  Size  Location     Type
  5958 ;;		None               void
  5959 ;; Registers used:
  5960 ;;		wreg
  5961 ;; Tracked objects:
  5962 ;;		On entry : 0/0
  5963 ;;		On exit  : 300/100
  5964 ;;		Unchanged: 0/0
  5965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5966 ;;      Params:         0       0       0       0       0
  5967 ;;      Locals:         0       0       0       0       0
  5968 ;;      Temps:          0       0       0       0       0
  5969 ;;      Totals:         0       0       0       0       0
  5970 ;;Total ram usage:        0 bytes
  5971 ;; Hardware stack levels used:    1
  5972 ;; Hardware stack levels required when called:    5
  5973 ;; This function calls:
  5974 ;;		Nothing
  5975 ;; This function is called by:
  5976 ;;		_main
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           
  5981                           ;psect for function _Timer1_Init
  5982  1F0B                     _Timer1_Init:	
  5983                           
  5984                           ;timer1.h: 6: T1CKPS1 = 0;
  5985                           
  5986                           ;incstack = 0
  5987                           ; Regs used in _Timer1_Init: [wreg]
  5988  1F0B  1283               	bcf	3,5	;RP0=0, select bank0
  5989  1F0C  1303               	bcf	3,6	;RP1=0, select bank0
  5990  1F0D  1290               	bcf	16,5	;volatile
  5991                           
  5992                           ;timer1.h: 7: T1CKPS0 = 1;
  5993  1F0E  1610               	bsf	16,4	;volatile
  5994                           
  5995                           ;timer1.h: 8: TMR1CS = 0;
  5996  1F0F  1090               	bcf	16,1	;volatile
  5997                           
  5998                           ;timer1.h: 9: TMR1ON = 1;
  5999  1F10  1410               	bsf	16,0	;volatile
  6000                           
  6001                           ;timer1.h: 10: T1OSCEN = 0;
  6002  1F11  1190               	bcf	16,3	;volatile
  6003                           
  6004                           ;timer1.h: 11: TMR1L = 0xB0;
  6005  1F12  30B0               	movlw	176
  6006  1F13  008E               	movwf	14	;volatile
  6007                           
  6008                           ;timer1.h: 12: TMR1H = 60;
  6009  1F14  303C               	movlw	60
  6010  1F15  008F               	movwf	15	;volatile
  6011                           
  6012                           ;timer1.h: 13: TMR1IE = 1;
  6013  1F16  1683               	bsf	3,5	;RP0=1, select bank1
  6014  1F17  140C               	bsf	12,0	;volatile
  6015  1F18  0008               	return
  6016  1F19                     __end_of_Timer1_Init:	
  6017                           
  6018                           	psect	text21
  6019  101A                     __ptext21:	
  6020 ;; *************** function _Setup_IOports *****************
  6021 ;; Defined at:
  6022 ;;		line 56 in file "setup.h"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;		None
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;		None
  6027 ;; Return value:  Size  Location     Type
  6028 ;;		None               void
  6029 ;; Registers used:
  6030 ;;		wreg, status,2
  6031 ;; Tracked objects:
  6032 ;;		On entry : B00/0
  6033 ;;		On exit  : B00/0
  6034 ;;		Unchanged: 800/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6036 ;;      Params:         0       0       0       0       0
  6037 ;;      Locals:         0       0       0       0       0
  6038 ;;      Temps:          0       0       0       0       0
  6039 ;;      Totals:         0       0       0       0       0
  6040 ;;Total ram usage:        0 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    5
  6043 ;; This function calls:
  6044 ;;		Nothing
  6045 ;; This function is called by:
  6046 ;;		_main
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           
  6051                           ;psect for function _Setup_IOports
  6052  101A                     _Setup_IOports:	
  6053                           
  6054                           ;setup.h: 58: TRISA = 0b11111111;
  6055                           
  6056                           ;incstack = 0
  6057                           ; Regs used in _Setup_IOports: [wreg+status,2]
  6058  101A  30FF               	movlw	255
  6059  101B  1683               	bsf	3,5	;RP0=1, select bank1
  6060  101C  0085               	movwf	5	;volatile
  6061                           
  6062                           ;setup.h: 59: PORTA = 0b00000000;
  6063  101D  1283               	bcf	3,5	;RP0=0, select bank0
  6064  101E  0185               	clrf	5	;volatile
  6065                           
  6066                           ;setup.h: 61: TRISB = 0b11000000;
  6067  101F  30C0               	movlw	192
  6068  1020  1683               	bsf	3,5	;RP0=1, select bank1
  6069  1021  0086               	movwf	6	;volatile
  6070                           
  6071                           ;setup.h: 62: PORTB = 0b00000000;
  6072  1022  1283               	bcf	3,5	;RP0=0, select bank0
  6073  1023  0186               	clrf	6	;volatile
  6074                           
  6075                           ;setup.h: 64: TRISC = 0b10000000;
  6076  1024  3080               	movlw	128
  6077  1025  1683               	bsf	3,5	;RP0=1, select bank1
  6078  1026  0087               	movwf	7	;volatile
  6079                           
  6080                           ;setup.h: 65: PORTC = 0b00000000;
  6081  1027  1283               	bcf	3,5	;RP0=0, select bank0
  6082  1028  0187               	clrf	7	;volatile
  6083                           
  6084                           ;setup.h: 67: TRISD = 0b11001100;
  6085  1029  30CC               	movlw	204
  6086  102A  1683               	bsf	3,5	;RP0=1, select bank1
  6087  102B  0088               	movwf	8	;volatile
  6088                           
  6089                           ;setup.h: 68: PORTD = 0b00000000;
  6090  102C  1283               	bcf	3,5	;RP0=0, select bank0
  6091  102D  0188               	clrf	8	;volatile
  6092                           
  6093                           ;setup.h: 70: TRISE = 0b10000000;
  6094  102E  3080               	movlw	128
  6095  102F  1683               	bsf	3,5	;RP0=1, select bank1
  6096  1030  0089               	movwf	9	;volatile
  6097                           
  6098                           ;setup.h: 71: PORTE = 0b00000000;
  6099  1031  1283               	bcf	3,5	;RP0=0, select bank0
  6100  1032  0189               	clrf	9	;volatile
  6101  1033  0008               	return
  6102  1034                     __end_of_Setup_IOports:	
  6103                           
  6104                           	psect	text23
  6105  1001                     __ptext23:	
  6106 ;; *************** function _Serial_NewLine *****************
  6107 ;; Defined at:
  6108 ;;		line 37 in file "serialv2.h"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;		None
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;		None
  6113 ;; Return value:  Size  Location     Type
  6114 ;;		None               void
  6115 ;; Registers used:
  6116 ;;		wreg
  6117 ;; Tracked objects:
  6118 ;;		On entry : 300/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6122 ;;      Params:         0       0       0       0       0
  6123 ;;      Locals:         0       0       0       0       0
  6124 ;;      Temps:          0       1       0       0       0
  6125 ;;      Totals:         0       1       0       0       0
  6126 ;;Total ram usage:        1 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    5
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_main
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           
  6137                           ;psect for function _Serial_NewLine
  6138  1001                     _Serial_NewLine:	
  6139  1001                     l280:	
  6140                           ;serialv2.h: 38: while(!TXIF);
  6141                           
  6142                           ;incstack = 0
  6143                           ; Regs used in _Serial_NewLine: [wreg]
  6144                           
  6145  1001  1E0C               	btfss	12,4	;volatile
  6146  1002  2801               	goto	l280
  6147                           
  6148                           ;serialv2.h: 39: TXREG = 13;
  6149  1003  300D               	movlw	13
  6150  1004  0099               	movwf	25	;volatile
  6151                           
  6152                           ;serialv2.h: 40: _delay((unsigned long)((1)*(4000000/4000.0)));
  6153  1005  30F9               	movlw	249
  6154  1006  00A3               	movwf	??_Serial_NewLine
  6155  1007                     u6627:	
  6156  1007  0000               	nop
  6157  1008  0BA3               	decfsz	??_Serial_NewLine,f
  6158  1009  2807               	goto	u6627
  6159  100A  280B               	nop2	;nop
  6160  100B  0000               	nop
  6161  100C                     l283:	
  6162                           ;serialv2.h: 41: while(!TXIF);
  6163                           
  6164  100C  1283               	bcf	3,5	;RP0=0, select bank0
  6165  100D  1303               	bcf	3,6	;RP1=0, select bank0
  6166  100E  1E0C               	btfss	12,4	;volatile
  6167  100F  280C               	goto	l283
  6168                           
  6169                           ;serialv2.h: 42: TXREG = 10;
  6170  1010  300A               	movlw	10
  6171  1011  0099               	movwf	25	;volatile
  6172                           
  6173                           ;serialv2.h: 43: _delay((unsigned long)((1)*(4000000/4000.0)));
  6174  1012  30F9               	movlw	249
  6175  1013  00A3               	movwf	??_Serial_NewLine
  6176  1014                     u6637:	
  6177  1014  0000               	nop
  6178  1015  0BA3               	decfsz	??_Serial_NewLine,f
  6179  1016  2814               	goto	u6637
  6180  1017  2818               	nop2	;nop
  6181  1018  0000               	nop
  6182  1019  0008               	return
  6183  101A                     __end_of_Serial_NewLine:	
  6184                           
  6185                           	psect	text24
  6186  0815                     __ptext24:	
  6187 ;; *************** function _Serial_Init *****************
  6188 ;; Defined at:
  6189 ;;		line 10 in file "serialv2.h"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;		None
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;		None               void
  6196 ;; Registers used:
  6197 ;;		wreg
  6198 ;; Tracked objects:
  6199 ;;		On entry : 300/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6203 ;;      Params:         0       0       0       0       0
  6204 ;;      Locals:         0       0       0       0       0
  6205 ;;      Temps:          0       3       0       0       0
  6206 ;;      Totals:         0       3       0       0       0
  6207 ;;Total ram usage:        3 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    5
  6210 ;; This function calls:
  6211 ;;		Nothing
  6212 ;; This function is called by:
  6213 ;;		_main
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _Serial_Init
  6219  0815                     _Serial_Init:	
  6220                           
  6221                           ;serialv2.h: 13: SPEN = 1;
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _Serial_Init: [wreg]
  6225  0815  1798               	bsf	24,7	;volatile
  6226                           
  6227                           ;serialv2.h: 14: RX9 = 0;
  6228  0816  1318               	bcf	24,6	;volatile
  6229                           
  6230                           ;serialv2.h: 15: CREN = 1;
  6231  0817  1618               	bsf	24,4	;volatile
  6232                           
  6233                           ;serialv2.h: 16: TX9 = 0;
  6234  0818  1683               	bsf	3,5	;RP0=1, select bank1
  6235  0819  1318               	bcf	24,6	;volatile
  6236                           
  6237                           ;serialv2.h: 17: TXEN = 1;
  6238  081A  1698               	bsf	24,5	;volatile
  6239                           
  6240                           ;serialv2.h: 18: SYNC = 0;
  6241  081B  1218               	bcf	24,4	;volatile
  6242                           
  6243                           ;serialv2.h: 19: BRGH = 1;
  6244  081C  1518               	bsf	24,2	;volatile
  6245                           
  6246                           ;serialv2.h: 20: SPBRG = 129;
  6247  081D  3081               	movlw	129
  6248  081E  0099               	movwf	25	;volatile
  6249                           
  6250                           ;serialv2.h: 21: RCIE = 1;
  6251  081F  168C               	bsf	12,5	;volatile
  6252                           
  6253                           ;serialv2.h: 22: TXIE = 0;
  6254  0820  120C               	bcf	12,4	;volatile
  6255                           
  6256                           ;serialv2.h: 23: ADDEN = 0;
  6257  0821  1283               	bcf	3,5	;RP0=0, select bank0
  6258  0822  1198               	bcf	24,3	;volatile
  6259                           
  6260                           ;serialv2.h: 24: _delay((unsigned long)((500)*(4000000/4000.0)));
  6261  0823  3003               	movlw	3
  6262  0824  00A5               	movwf	??_Serial_Init+2
  6263  0825  308A               	movlw	138
  6264  0826  00A4               	movwf	??_Serial_Init+1
  6265  0827  3056               	movlw	86
  6266  0828  00A3               	movwf	??_Serial_Init
  6267  0829                     u6647:	
  6268  0829  0BA3               	decfsz	??_Serial_Init,f
  6269  082A  2829               	goto	u6647
  6270  082B  0BA4               	decfsz	??_Serial_Init+1,f
  6271  082C  2829               	goto	u6647
  6272  082D  0BA5               	decfsz	??_Serial_Init+2,f
  6273  082E  2829               	goto	u6647
  6274  082F  2830               	nop2
  6275  0830  0008               	return
  6276  0831                     __end_of_Serial_Init:	
  6277                           
  6278                           	psect	text31
  6279  0028                     __ptext31:	
  6280 ;; *************** function _CheckMode *****************
  6281 ;; Defined at:
  6282 ;;		line 324 in file "Automated Solar Panel Orientation Setter.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;		None
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  pressedKey      1   20[BANK0 ] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;		None               void
  6289 ;; Registers used:
  6290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 300/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6296 ;;      Params:         0       0       0       0       0
  6297 ;;      Locals:         0       1       0       0       0
  6298 ;;      Temps:          0       0       0       0       0
  6299 ;;      Totals:         0       1       0       0       0
  6300 ;;Total ram usage:        1 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    7
  6303 ;; This function calls:
  6304 ;;		_CheckKeyPad
  6305 ;;		_Serial_Print
  6306 ;;		_Serial_Println_Int
  6307 ;;		_nop
  6308 ;; This function is called by:
  6309 ;;		_main
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           
  6314                           ;psect for function _CheckMode
  6315  0028                     _CheckMode:	
  6316                           
  6317                           ;Automated Solar Panel Orientation Setter.c: 325: char pressedKey;
  6318                           ;Automated Solar Panel Orientation Setter.c: 326: pressedKey = CheckKeyPad();
  6319                           
  6320                           ;incstack = 0
  6321                           ; Regs used in _CheckMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6322  0028  20BB  120A  118A   	fcall	_CheckKeyPad
  6323  002B  00B4               	movwf	CheckMode@pressedKey
  6324                           
  6325                           ;Automated Solar Panel Orientation Setter.c: 328: if( pressedKey=='*' ){
  6326  002C  3A2A               	xorlw	42
  6327  002D  1D03               	btfss	3,2
  6328  002E  0008               	return
  6329                           
  6330                           ;Automated Solar Panel Orientation Setter.c: 329: currentMode++;
  6331  002F  0AD0               	incf	_currentMode,f
  6332  0030  1903               	skipnz
  6333  0031  0AD1               	incf	_currentMode+1,f
  6334                           
  6335                           ;Automated Solar Panel Orientation Setter.c: 330: if (currentMode>3) currentMode = 1;
  6336  0032  3000               	movlw	0
  6337  0033  0251               	subwf	_currentMode+1,w
  6338  0034  3004               	movlw	4
  6339  0035  1903               	skipnz
  6340  0036  0250               	subwf	_currentMode,w
  6341  0037  1C03               	skipc
  6342  0038  283C               	goto	l4950
  6343  0039  01D0               	clrf	_currentMode
  6344  003A  0AD0               	incf	_currentMode,f
  6345  003B  01D1               	clrf	_currentMode+1
  6346  003C                     l4950:	
  6347                           
  6348                           ;Automated Solar Panel Orientation Setter.c: 331: state = currentMode;
  6349  003C  0850               	movf	_currentMode,w
  6350  003D  00E0               	movwf	_state
  6351                           
  6352                           ;Automated Solar Panel Orientation Setter.c: 333: RC1 = 1;
  6353  003E  1487               	bsf	7,1	;volatile
  6354                           
  6355                           ;Automated Solar Panel Orientation Setter.c: 334: Serial_Print("Switched to Mode : ");
  6356  003F  301F               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  6357  0040  225B  120A  118A   	fcall	_Serial_Print
  6358                           
  6359                           ;Automated Solar Panel Orientation Setter.c: 335: Serial_Println_Int((int)state);
  6360  0043  0860               	movf	_state,w
  6361  0044  00B1               	movwf	Serial_Println_Int@val
  6362  0045  01B2               	clrf	Serial_Println_Int@val+1
  6363  0046  2430  120A  118A   	fcall	_Serial_Println_Int
  6364                           
  6365                           ;Automated Solar Panel Orientation Setter.c: 336: RC1 = 0;
  6366  0049  1283               	bcf	3,5	;RP0=0, select bank0
  6367  004A  1303               	bcf	3,6	;RP1=0, select bank0
  6368  004B  1087               	bcf	7,1	;volatile
  6369                           
  6370                           ;Automated Solar Panel Orientation Setter.c: 338: ; nop();nop();nop();nop();nop();nop();
      +                          nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop(
      +                          );nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();no
      +                          p();;
  6371  004C  20B6  120A  118A   	fcall	_nop
  6372  004F  20B6  120A  118A   	fcall	_nop
  6373  0052  20B6  120A  118A   	fcall	_nop
  6374  0055  20B6  120A  118A   	fcall	_nop
  6375  0058  20B6  120A  118A   	fcall	_nop
  6376  005B  20B6  120A  118A   	fcall	_nop
  6377  005E  20B6  120A  118A   	fcall	_nop
  6378  0061  20B6  120A  118A   	fcall	_nop
  6379  0064  20B6  120A  118A   	fcall	_nop
  6380  0067  20B6  120A  118A   	fcall	_nop
  6381  006A  20B6  120A  118A   	fcall	_nop
  6382  006D  20B6  120A  118A   	fcall	_nop
  6383  0070  20B6  120A  118A   	fcall	_nop
  6384  0073  20B6  120A  118A   	fcall	_nop
  6385  0076  20B6  120A  118A   	fcall	_nop
  6386  0079  20B6  120A  118A   	fcall	_nop
  6387  007C  20B6  120A  118A   	fcall	_nop
  6388  007F  20B6  120A  118A   	fcall	_nop
  6389  0082  20B6  120A  118A   	fcall	_nop
  6390  0085  20B6  120A  118A   	fcall	_nop
  6391  0088  20B6  120A  118A   	fcall	_nop
  6392  008B  20B6  120A  118A   	fcall	_nop
  6393  008E  20B6  120A  118A   	fcall	_nop
  6394  0091  20B6  120A  118A   	fcall	_nop
  6395  0094  20B6  120A  118A   	fcall	_nop
  6396  0097  20B6  120A  118A   	fcall	_nop
  6397  009A  20B6  120A  118A   	fcall	_nop
  6398  009D  20B6  120A  118A   	fcall	_nop
  6399  00A0  20B6  120A  118A   	fcall	_nop
  6400  00A3  20B6  120A  118A   	fcall	_nop
  6401  00A6  20B6  120A  118A   	fcall	_nop
  6402  00A9  20B6  120A  118A   	fcall	_nop
  6403  00AC  20B6  120A  118A   	fcall	_nop
  6404  00AF  20B6  120A  118A   	fcall	_nop
  6405  00B2  20B6  120A  118A   	fcall	_nop
  6406  00B5  28B6               	ljmp	l4938
  6407  00B6                     __end_of_CheckMode:	
  6408  00B6                     __ptext32:	
  6409 ;; *************** function _nop *****************
  6410 ;; Defined at:
  6411 ;;		line 50 in file "setup.h"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;		None
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;		None
  6416 ;; Return value:  Size  Location     Type
  6417 ;;		None               void
  6418 ;; Registers used:
  6419 ;;		wreg
  6420 ;; Tracked objects:
  6421 ;;		On entry : 0/200
  6422 ;;		On exit  : 300/0
  6423 ;;		Unchanged: 0/0
  6424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6425 ;;      Params:         0       0       0       0       0
  6426 ;;      Locals:         0       0       0       0       0
  6427 ;;      Temps:          0       0       0       0       0
  6428 ;;      Totals:         0       0       0       0       0
  6429 ;;Total ram usage:        0 bytes
  6430 ;; Hardware stack levels used:    1
  6431 ;; Hardware stack levels required when called:    5
  6432 ;; This function calls:
  6433 ;;		Nothing
  6434 ;; This function is called by:
  6435 ;;		_main
  6436 ;;		_CheckMode
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           
  6441                           ;psect for function _nop
  6442  00B6                     _nop:	
  6443  00B6                     l4938:	
  6444                           ;incstack = 0
  6445                           ; Regs used in _nop: [wreg]
  6446                           
  6447                           
  6448                           ;setup.h: 51: Nop = !Nop;
  6449  00B6  3002               	movlw	(0+1) shl (_Nop& (0+7))
  6450  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  6451  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  6452  00B9  06E6               	xorwf	_Nop/(0+8),f
  6453  00BA  0008               	return
  6454  00BB                     __end_of_nop:	
  6455  00BB                     __ptext37:	
  6456 ;; *************** function _CheckKeyPad *****************
  6457 ;; Defined at:
  6458 ;;		line 355 in file "Automated Solar Panel Orientation Setter.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;  rowNo           2   10[BANK0 ] int 
  6463 ;;  colomnNo        2    8[BANK0 ] int 
  6464 ;;  charactor       1    7[BANK0 ] unsigned char 
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      unsigned char 
  6467 ;; Registers used:
  6468 ;;		wreg, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 300/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6474 ;;      Params:         0       0       0       0       0
  6475 ;;      Locals:         0       5       0       0       0
  6476 ;;      Temps:          0       0       0       0       0
  6477 ;;      Totals:         0       5       0       0       0
  6478 ;;Total ram usage:        5 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    6
  6481 ;; This function calls:
  6482 ;;		_ColomnNo
  6483 ;;		_RowNo
  6484 ;; This function is called by:
  6485 ;;		_CheckMode
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           
  6490                           ;psect for function _CheckKeyPad
  6491  00BB                     _CheckKeyPad:	
  6492                           
  6493                           ;Automated Solar Panel Orientation Setter.c: 356: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _CheckKeyPad: [wreg+status,2+status,0+pclath+cstack]
  6497  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  6498  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  6499  00BD  1207               	bcf	7,4	;volatile
  6500  00BE  1288               	bcf	8,5	;volatile
  6501  00BF  1287               	bcf	7,5	;volatile
  6502  00C0  1208               	bcf	8,4	;volatile
  6503                           
  6504                           ;Automated Solar Panel Orientation Setter.c: 357: char charactor = '$';
  6505  00C1  3024               	movlw	36
  6506  00C2  00A7               	movwf	CheckKeyPad@charactor
  6507                           
  6508                           ;Automated Solar Panel Orientation Setter.c: 359: int rowNo = RowNo();
  6509  00C3  2242  120A  118A   	fcall	_RowNo
  6510  00C6  0824               	movf	?_RowNo+1,w
  6511  00C7  00AB               	movwf	CheckKeyPad@rowNo+1
  6512  00C8  0823               	movf	?_RowNo,w
  6513  00C9  00AA               	movwf	CheckKeyPad@rowNo
  6514                           
  6515                           ;Automated Solar Panel Orientation Setter.c: 360: if (rowNo != 0){
  6516  00CA  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6517  00CB  1903               	btfsc	3,2
  6518  00CC  2996               	goto	l3736
  6519                           
  6520                           ;Automated Solar Panel Orientation Setter.c: 361: colomnNo = ColomnNo(rowNo);
  6521  00CD  082B               	movf	CheckKeyPad@rowNo+1,w
  6522  00CE  00A4               	movwf	ColomnNo@rowNo+1
  6523  00CF  082A               	movf	CheckKeyPad@rowNo,w
  6524  00D0  00A3               	movwf	ColomnNo@rowNo
  6525  00D1  21B6  120A  118A   	fcall	_ColomnNo
  6526  00D4  0824               	movf	?_ColomnNo+1,w
  6527  00D5  00A9               	movwf	CheckKeyPad@colomnNo+1
  6528  00D6  0823               	movf	?_ColomnNo,w
  6529  00D7  00A8               	movwf	CheckKeyPad@colomnNo
  6530                           
  6531                           ;Automated Solar Panel Orientation Setter.c: 362: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6532  00D8  1207               	bcf	7,4	;volatile
  6533  00D9  1288               	bcf	8,5	;volatile
  6534  00DA  1287               	bcf	7,5	;volatile
  6535  00DB  1208               	bcf	8,4	;volatile
  6536                           
  6537                           ;Automated Solar Panel Orientation Setter.c: 363: if(colomnNo==1 && rowNo == 1) characto
      +                          r = '1';
  6538  00DC  0328               	decf	CheckKeyPad@colomnNo,w
  6539  00DD  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6540  00DE  1D03               	btfss	3,2
  6541  00DF  28E6               	goto	l3644
  6542  00E0  032A               	decf	CheckKeyPad@rowNo,w
  6543  00E1  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6544  00E2  1D03               	btfss	3,2
  6545  00E3  28E6               	goto	l3644
  6546  00E4  3031               	movlw	49
  6547  00E5  2995               	goto	L35
  6548  00E6                     l3644:	
  6549                           
  6550                           ;Automated Solar Panel Orientation Setter.c: 364: else if(colomnNo==1 && rowNo == 2) cha
      +                          ractor = '2';
  6551  00E6  0328               	decf	CheckKeyPad@colomnNo,w
  6552  00E7  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6553  00E8  1D03               	btfss	3,2
  6554  00E9  28F1               	goto	l3650
  6555  00EA  3002               	movlw	2
  6556  00EB  062A               	xorwf	CheckKeyPad@rowNo,w
  6557  00EC  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6558  00ED  1D03               	btfss	3,2
  6559  00EE  28F1               	goto	l3650
  6560  00EF  3032               	movlw	50
  6561  00F0  2995               	goto	L35
  6562  00F1                     l3650:	
  6563                           
  6564                           ;Automated Solar Panel Orientation Setter.c: 365: else if(colomnNo==1 && rowNo == 3) cha
      +                          ractor = '3';
  6565  00F1  0328               	decf	CheckKeyPad@colomnNo,w
  6566  00F2  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6567  00F3  1D03               	btfss	3,2
  6568  00F4  28FC               	goto	l3656
  6569  00F5  3003               	movlw	3
  6570  00F6  062A               	xorwf	CheckKeyPad@rowNo,w
  6571  00F7  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6572  00F8  1D03               	btfss	3,2
  6573  00F9  28FC               	goto	l3656
  6574  00FA  3033               	movlw	51
  6575  00FB  2995               	goto	L35
  6576  00FC                     l3656:	
  6577                           
  6578                           ;Automated Solar Panel Orientation Setter.c: 366: else if(colomnNo==1 && rowNo == 4) cha
      +                          ractor = 'A';
  6579  00FC  0328               	decf	CheckKeyPad@colomnNo,w
  6580  00FD  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6581  00FE  1D03               	btfss	3,2
  6582  00FF  2907               	goto	l3662
  6583  0100  3004               	movlw	4
  6584  0101  062A               	xorwf	CheckKeyPad@rowNo,w
  6585  0102  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6586  0103  1D03               	btfss	3,2
  6587  0104  2907               	goto	l3662
  6588  0105  3041               	movlw	65
  6589  0106  2995               	goto	L35
  6590  0107                     l3662:	
  6591                           
  6592                           ;Automated Solar Panel Orientation Setter.c: 368: else if(colomnNo==2 && rowNo == 1) cha
      +                          ractor = '4';
  6593  0107  3002               	movlw	2
  6594  0108  0628               	xorwf	CheckKeyPad@colomnNo,w
  6595  0109  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6596  010A  1D03               	btfss	3,2
  6597  010B  2912               	goto	l3668
  6598  010C  032A               	decf	CheckKeyPad@rowNo,w
  6599  010D  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6600  010E  1D03               	btfss	3,2
  6601  010F  2912               	goto	l3668
  6602  0110  3034               	movlw	52
  6603  0111  2995               	goto	L35
  6604  0112                     l3668:	
  6605                           
  6606                           ;Automated Solar Panel Orientation Setter.c: 369: else if(colomnNo==2 && rowNo == 2) cha
      +                          ractor = '5';
  6607  0112  3002               	movlw	2
  6608  0113  0628               	xorwf	CheckKeyPad@colomnNo,w
  6609  0114  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6610  0115  3002               	movlw	2
  6611  0116  1D03               	btfss	3,2
  6612  0117  291F               	goto	L36
  6613  0118  062A               	xorwf	CheckKeyPad@rowNo,w
  6614  0119  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6615  011A  1D03               	btfss	3,2
  6616  011B  291E               	goto	l3674
  6617  011C  3035               	movlw	53
  6618  011D  2995               	goto	L35
  6619  011E                     l3674:	
  6620                           
  6621                           ;Automated Solar Panel Orientation Setter.c: 370: else if(colomnNo==2 && rowNo == 3) cha
      +                          ractor = '6';
  6622  011E  3002               	movlw	2
  6623  011F                     L36:	
  6624  011F  0628               	xorwf	CheckKeyPad@colomnNo,w
  6625  0120  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6626  0121  1D03               	btfss	3,2
  6627  0122  292A               	goto	l3680
  6628  0123  3003               	movlw	3
  6629  0124  062A               	xorwf	CheckKeyPad@rowNo,w
  6630  0125  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6631  0126  1D03               	btfss	3,2
  6632  0127  292A               	goto	l3680
  6633  0128  3036               	movlw	54
  6634  0129  2995               	goto	L35
  6635  012A                     l3680:	
  6636                           
  6637                           ;Automated Solar Panel Orientation Setter.c: 371: else if(colomnNo==2 && rowNo == 4) cha
      +                          ractor = 'B';
  6638  012A  3002               	movlw	2
  6639  012B  0628               	xorwf	CheckKeyPad@colomnNo,w
  6640  012C  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6641  012D  1D03               	btfss	3,2
  6642  012E  2936               	goto	l3686
  6643  012F  3004               	movlw	4
  6644  0130  062A               	xorwf	CheckKeyPad@rowNo,w
  6645  0131  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6646  0132  1D03               	btfss	3,2
  6647  0133  2936               	goto	l3686
  6648  0134  3042               	movlw	66
  6649  0135  2995               	goto	L35
  6650  0136                     l3686:	
  6651                           
  6652                           ;Automated Solar Panel Orientation Setter.c: 373: else if(colomnNo==3 && rowNo == 1) cha
      +                          ractor = '7';
  6653  0136  3003               	movlw	3
  6654  0137  0628               	xorwf	CheckKeyPad@colomnNo,w
  6655  0138  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6656  0139  1D03               	btfss	3,2
  6657  013A  2941               	goto	l3692
  6658  013B  032A               	decf	CheckKeyPad@rowNo,w
  6659  013C  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6660  013D  1D03               	btfss	3,2
  6661  013E  2941               	goto	l3692
  6662  013F  3037               	movlw	55
  6663  0140  2995               	goto	L35
  6664  0141                     l3692:	
  6665                           
  6666                           ;Automated Solar Panel Orientation Setter.c: 374: else if(colomnNo==3 && rowNo == 2) cha
      +                          ractor = '8';
  6667  0141  3003               	movlw	3
  6668  0142  0628               	xorwf	CheckKeyPad@colomnNo,w
  6669  0143  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6670  0144  1D03               	btfss	3,2
  6671  0145  294D               	goto	l3698
  6672  0146  3002               	movlw	2
  6673  0147  062A               	xorwf	CheckKeyPad@rowNo,w
  6674  0148  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6675  0149  1D03               	btfss	3,2
  6676  014A  294D               	goto	l3698
  6677  014B  3038               	movlw	56
  6678  014C  2995               	goto	L35
  6679  014D                     l3698:	
  6680                           
  6681                           ;Automated Solar Panel Orientation Setter.c: 375: else if(colomnNo==3 && rowNo == 3) cha
      +                          ractor = '9';
  6682  014D  3003               	movlw	3
  6683  014E  0628               	xorwf	CheckKeyPad@colomnNo,w
  6684  014F  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6685  0150  3003               	movlw	3
  6686  0151  1D03               	btfss	3,2
  6687  0152  295A               	goto	L37
  6688  0153  062A               	xorwf	CheckKeyPad@rowNo,w
  6689  0154  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6690  0155  1D03               	btfss	3,2
  6691  0156  2959               	goto	l3704
  6692  0157  3039               	movlw	57
  6693  0158  2995               	goto	L35
  6694  0159                     l3704:	
  6695                           
  6696                           ;Automated Solar Panel Orientation Setter.c: 376: else if(colomnNo==3 && rowNo == 4) cha
      +                          ractor = 'C';
  6697  0159  3003               	movlw	3
  6698  015A                     L37:	
  6699  015A  0628               	xorwf	CheckKeyPad@colomnNo,w
  6700  015B  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6701  015C  3004               	movlw	4
  6702  015D  1D03               	btfss	3,2
  6703  015E  2966               	goto	L38
  6704  015F  062A               	xorwf	CheckKeyPad@rowNo,w
  6705  0160  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6706  0161  1D03               	btfss	3,2
  6707  0162  2965               	goto	l3710
  6708  0163  3043               	movlw	67
  6709  0164  2995               	goto	L35
  6710  0165                     l3710:	
  6711                           
  6712                           ;Automated Solar Panel Orientation Setter.c: 378: else if(colomnNo==4 && rowNo == 1) cha
      +                          ractor = '*';
  6713  0165  3004               	movlw	4
  6714  0166                     L38:	
  6715  0166  0628               	xorwf	CheckKeyPad@colomnNo,w
  6716  0167  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6717  0168  1D03               	btfss	3,2
  6718  0169  2970               	goto	l3716
  6719  016A  032A               	decf	CheckKeyPad@rowNo,w
  6720  016B  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6721  016C  1D03               	btfss	3,2
  6722  016D  2970               	goto	l3716
  6723  016E  302A               	movlw	42
  6724  016F  2995               	goto	L35
  6725  0170                     l3716:	
  6726                           
  6727                           ;Automated Solar Panel Orientation Setter.c: 379: else if(colomnNo==4 && rowNo == 2) cha
      +                          ractor = '0';
  6728  0170  3004               	movlw	4
  6729  0171  0628               	xorwf	CheckKeyPad@colomnNo,w
  6730  0172  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6731  0173  1D03               	btfss	3,2
  6732  0174  297C               	goto	l3722
  6733  0175  3002               	movlw	2
  6734  0176  062A               	xorwf	CheckKeyPad@rowNo,w
  6735  0177  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6736  0178  1D03               	btfss	3,2
  6737  0179  297C               	goto	l3722
  6738  017A  3030               	movlw	48
  6739  017B  2995               	goto	L35
  6740  017C                     l3722:	
  6741                           
  6742                           ;Automated Solar Panel Orientation Setter.c: 380: else if(colomnNo==4 && rowNo == 3) cha
      +                          ractor = '#';
  6743  017C  3004               	movlw	4
  6744  017D  0628               	xorwf	CheckKeyPad@colomnNo,w
  6745  017E  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6746  017F  1D03               	btfss	3,2
  6747  0180  2988               	goto	l3728
  6748  0181  3003               	movlw	3
  6749  0182  062A               	xorwf	CheckKeyPad@rowNo,w
  6750  0183  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6751  0184  1D03               	btfss	3,2
  6752  0185  2988               	goto	l3728
  6753  0186  3023               	movlw	35
  6754  0187  2995               	goto	L35
  6755  0188                     l3728:	
  6756                           
  6757                           ;Automated Solar Panel Orientation Setter.c: 381: else if(colomnNo==4 && rowNo == 4) cha
      +                          ractor = 'D';
  6758  0188  3004               	movlw	4
  6759  0189  0628               	xorwf	CheckKeyPad@colomnNo,w
  6760  018A  0429               	iorwf	CheckKeyPad@colomnNo+1,w
  6761  018B  1D03               	btfss	3,2
  6762  018C  2994               	goto	l3734
  6763  018D  3004               	movlw	4
  6764  018E  062A               	xorwf	CheckKeyPad@rowNo,w
  6765  018F  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6766  0190  1D03               	btfss	3,2
  6767  0191  2994               	goto	l3734
  6768  0192  3044               	movlw	68
  6769  0193  2995               	goto	L35
  6770  0194                     l3734:	
  6771                           
  6772                           ;Automated Solar Panel Orientation Setter.c: 383: else charactor = '@';
  6773  0194  3040               	movlw	64
  6774  0195                     L35:	
  6775  0195  00A7               	movwf	CheckKeyPad@charactor
  6776  0196                     l3736:	
  6777                           
  6778                           ;Automated Solar Panel Orientation Setter.c: 384: }
  6779                           ;Automated Solar Panel Orientation Setter.c: 385: if(rowNo==1) while(RD2==0);
  6780  0196  032A               	decf	CheckKeyPad@rowNo,w
  6781  0197  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6782  0198  1D03               	btfss	3,2
  6783  0199  299D               	goto	l3740
  6784  019A                     l530:	
  6785  019A  1908               	btfsc	8,2	;volatile
  6786  019B  29B4               	goto	l3752
  6787  019C  299A               	goto	l530
  6788  019D                     l3740:	
  6789                           
  6790                           ;Automated Solar Panel Orientation Setter.c: 386: else if(rowNo==2) while(RD7==0);
  6791  019D  3002               	movlw	2
  6792  019E  062A               	xorwf	CheckKeyPad@rowNo,w
  6793  019F  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6794  01A0  1D03               	btfss	3,2
  6795  01A1  29A5               	goto	l3744
  6796  01A2                     l535:	
  6797  01A2  1B88               	btfsc	8,7	;volatile
  6798  01A3  29B4               	goto	l3752
  6799  01A4  29A2               	goto	l535
  6800  01A5                     l3744:	
  6801                           
  6802                           ;Automated Solar Panel Orientation Setter.c: 387: else if(rowNo==3) while(RD3==0);
  6803  01A5  3003               	movlw	3
  6804  01A6  062A               	xorwf	CheckKeyPad@rowNo,w
  6805  01A7  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6806  01A8  1D03               	btfss	3,2
  6807  01A9  29AD               	goto	l3748
  6808  01AA                     l540:	
  6809  01AA  1988               	btfsc	8,3	;volatile
  6810  01AB  29B4               	goto	l3752
  6811  01AC  29AA               	goto	l540
  6812  01AD                     l3748:	
  6813                           
  6814                           ;Automated Solar Panel Orientation Setter.c: 388: else if(rowNo==4) while(RD6==0);
  6815  01AD  3004               	movlw	4
  6816  01AE  062A               	xorwf	CheckKeyPad@rowNo,w
  6817  01AF  042B               	iorwf	CheckKeyPad@rowNo+1,w
  6818  01B0  1D03               	btfss	3,2
  6819  01B1  29B4               	goto	l3752
  6820  01B2                     l545:	
  6821  01B2  1F08               	btfss	8,6	;volatile
  6822  01B3  29B2               	goto	l545
  6823  01B4                     l3752:	
  6824                           
  6825                           ;Automated Solar Panel Orientation Setter.c: 389: return charactor;
  6826  01B4  0827               	movf	CheckKeyPad@charactor,w
  6827  01B5  0008               	return
  6828  01B6                     __end_of_CheckKeyPad:	
  6829  01B6                     __ptext39:	
  6830 ;; *************** function _ColomnNo *****************
  6831 ;; Defined at:
  6832 ;;		line 392 in file "Automated Solar Panel Orientation Setter.c"
  6833 ;; Parameters:    Size  Location     Type
  6834 ;;  rowNo           2    3[BANK0 ] int 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;		None
  6837 ;; Return value:  Size  Location     Type
  6838 ;;                  2    3[BANK0 ] int 
  6839 ;; Registers used:
  6840 ;;		wreg, status,2, status,0
  6841 ;; Tracked objects:
  6842 ;;		On entry : 300/0
  6843 ;;		On exit  : 300/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6846 ;;      Params:         0       2       0       0       0
  6847 ;;      Locals:         0       0       0       0       0
  6848 ;;      Temps:          0       0       0       0       0
  6849 ;;      Totals:         0       2       0       0       0
  6850 ;;Total ram usage:        2 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    5
  6853 ;; This function calls:
  6854 ;;		Nothing
  6855 ;; This function is called by:
  6856 ;;		_CheckKeyPad
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           
  6861                           ;psect for function _ColomnNo
  6862  01B6                     _ColomnNo:	
  6863                           
  6864                           ;Automated Solar Panel Orientation Setter.c: 393: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6865                           
  6866                           ;incstack = 0
  6867                           ; Regs used in _ColomnNo: [wreg+status,2+status,0]
  6868  01B6  1207               	bcf	7,4	;volatile
  6869  01B7  1288               	bcf	8,5	;volatile
  6870  01B8  1287               	bcf	7,5	;volatile
  6871  01B9  1208               	bcf	8,4	;volatile
  6872                           
  6873                           ;Automated Solar Panel Orientation Setter.c: 394: if(rowNo==1){
  6874  01BA  0323               	decf	ColomnNo@rowNo,w
  6875  01BB  0424               	iorwf	ColomnNo@rowNo+1,w
  6876  01BC  1D03               	btfss	3,2
  6877  01BD  29E6               	goto	l3288
  6878                           
  6879                           ;Automated Solar Panel Orientation Setter.c: 395: RC4 = 1;
  6880  01BE  1607               	bsf	7,4	;volatile
  6881                           
  6882                           ;Automated Solar Panel Orientation Setter.c: 396: _delay(1);
  6883  01BF  0000               	nop
  6884                           
  6885                           ;Automated Solar Panel Orientation Setter.c: 397: if(RD2==1){
  6886  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  6887  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  6888  01C2  1D08               	btfss	8,2	;volatile
  6889  01C3  29C8               	goto	l552
  6890  01C4                     l3272:	
  6891                           
  6892                           ;Automated Solar Panel Orientation Setter.c: 398: return 1;
  6893  01C4  01A3               	clrf	?_ColomnNo
  6894  01C5  0AA3               	incf	?_ColomnNo,f
  6895  01C6  01A4               	clrf	?_ColomnNo+1
  6896  01C7  0008               	return
  6897  01C8                     l552:	
  6898                           
  6899                           ;Automated Solar Panel Orientation Setter.c: 399: }
  6900                           ;Automated Solar Panel Orientation Setter.c: 400: RD5 = 1;
  6901  01C8  1688               	bsf	8,5	;volatile
  6902                           
  6903                           ;Automated Solar Panel Orientation Setter.c: 401: _delay(1);
  6904  01C9  0000               	nop
  6905                           
  6906                           ;Automated Solar Panel Orientation Setter.c: 402: if(RD2==1){
  6907  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  6908  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  6909  01CC  1D08               	btfss	8,2	;volatile
  6910  01CD  29D2               	goto	l554
  6911  01CE                     l3276:	
  6912                           
  6913                           ;Automated Solar Panel Orientation Setter.c: 403: return 2;
  6914  01CE  3002               	movlw	2
  6915  01CF  00A3               	movwf	?_ColomnNo
  6916  01D0  01A4               	clrf	?_ColomnNo+1
  6917  01D1  0008               	return
  6918  01D2                     l554:	
  6919                           
  6920                           ;Automated Solar Panel Orientation Setter.c: 404: }
  6921                           ;Automated Solar Panel Orientation Setter.c: 405: RC5 = 1;
  6922  01D2  1687               	bsf	7,5	;volatile
  6923                           
  6924                           ;Automated Solar Panel Orientation Setter.c: 406: _delay(1);
  6925  01D3  0000               	nop
  6926                           
  6927                           ;Automated Solar Panel Orientation Setter.c: 407: if(RD2==1){
  6928  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  6929  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  6930  01D6  1D08               	btfss	8,2	;volatile
  6931  01D7  29DC               	goto	l555
  6932  01D8                     l3280:	
  6933                           
  6934                           ;Automated Solar Panel Orientation Setter.c: 408: return 3;
  6935  01D8  3003               	movlw	3
  6936  01D9  00A3               	movwf	?_ColomnNo
  6937  01DA  01A4               	clrf	?_ColomnNo+1
  6938  01DB  0008               	return
  6939  01DC                     l555:	
  6940                           
  6941                           ;Automated Solar Panel Orientation Setter.c: 409: }
  6942                           ;Automated Solar Panel Orientation Setter.c: 410: RD4 = 1;
  6943  01DC  1608               	bsf	8,4	;volatile
  6944                           
  6945                           ;Automated Solar Panel Orientation Setter.c: 411: _delay(1);
  6946  01DD  0000               	nop
  6947                           
  6948                           ;Automated Solar Panel Orientation Setter.c: 412: if(RD2==1){
  6949  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  6950  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  6951  01E0  1D08               	btfss	8,2	;volatile
  6952  01E1  2A3F               	goto	l3348
  6953  01E2                     l3284:	
  6954                           
  6955                           ;Automated Solar Panel Orientation Setter.c: 413: return 4;
  6956  01E2  3004               	movlw	4
  6957  01E3  00A3               	movwf	?_ColomnNo
  6958  01E4  01A4               	clrf	?_ColomnNo+1
  6959  01E5  0008               	return
  6960  01E6                     l3288:	
  6961                           
  6962                           ;Automated Solar Panel Orientation Setter.c: 416: else if(rowNo==2){
  6963  01E6  3002               	movlw	2
  6964  01E7  0623               	xorwf	ColomnNo@rowNo,w
  6965  01E8  0424               	iorwf	ColomnNo@rowNo+1,w
  6966  01E9  1D03               	btfss	3,2
  6967  01EA  2A04               	goto	l3308
  6968                           
  6969                           ;Automated Solar Panel Orientation Setter.c: 417: RC4 = 1;
  6970  01EB  1607               	bsf	7,4	;volatile
  6971                           
  6972                           ;Automated Solar Panel Orientation Setter.c: 418: _delay(1);
  6973  01EC  0000               	nop
  6974                           
  6975                           ;Automated Solar Panel Orientation Setter.c: 419: if(RD7==1){
  6976  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  6977  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  6978  01EF  1B88               	btfsc	8,7	;volatile
  6979  01F0  29C4               	goto	l3272
  6980                           
  6981                           ;Automated Solar Panel Orientation Setter.c: 421: }
  6982                           ;Automated Solar Panel Orientation Setter.c: 422: RD5 = 1;
  6983  01F1  1688               	bsf	8,5	;volatile
  6984                           
  6985                           ;Automated Solar Panel Orientation Setter.c: 423: _delay(1);
  6986  01F2  0000               	nop
  6987                           
  6988                           ;Automated Solar Panel Orientation Setter.c: 424: if(RD7==1){
  6989  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  6990  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  6991  01F5  1B88               	btfsc	8,7	;volatile
  6992  01F6  29CE               	goto	l3276
  6993                           
  6994                           ;Automated Solar Panel Orientation Setter.c: 426: }
  6995                           ;Automated Solar Panel Orientation Setter.c: 427: RC5 = 1;
  6996  01F7  1687               	bsf	7,5	;volatile
  6997                           
  6998                           ;Automated Solar Panel Orientation Setter.c: 428: _delay(1);
  6999  01F8  0000               	nop
  7000                           
  7001                           ;Automated Solar Panel Orientation Setter.c: 429: if(RD7==1){
  7002  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  7003  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  7004  01FB  1B88               	btfsc	8,7	;volatile
  7005  01FC  29D8               	goto	l3280
  7006                           
  7007                           ;Automated Solar Panel Orientation Setter.c: 431: }
  7008                           ;Automated Solar Panel Orientation Setter.c: 432: RD4 = 1;
  7009  01FD  1608               	bsf	8,4	;volatile
  7010                           
  7011                           ;Automated Solar Panel Orientation Setter.c: 433: _delay(1);
  7012  01FE  0000               	nop
  7013                           
  7014                           ;Automated Solar Panel Orientation Setter.c: 434: if(RD7==1){
  7015  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  7016  0200  1303               	bcf	3,6	;RP1=0, select bank0
  7017  0201  1B88               	btfsc	8,7	;volatile
  7018  0202  29E2               	goto	l3284
  7019  0203  2A3F               	goto	l3348
  7020  0204                     l3308:	
  7021                           
  7022                           ;Automated Solar Panel Orientation Setter.c: 438: else if(rowNo==3){
  7023  0204  3003               	movlw	3
  7024  0205  0623               	xorwf	ColomnNo@rowNo,w
  7025  0206  0424               	iorwf	ColomnNo@rowNo+1,w
  7026  0207  1D03               	btfss	3,2
  7027  0208  2A22               	goto	l3328
  7028                           
  7029                           ;Automated Solar Panel Orientation Setter.c: 439: RC4 = 1;
  7030  0209  1607               	bsf	7,4	;volatile
  7031                           
  7032                           ;Automated Solar Panel Orientation Setter.c: 440: _delay(1);
  7033  020A  0000               	nop
  7034                           
  7035                           ;Automated Solar Panel Orientation Setter.c: 441: if(RD3==1){
  7036  020B  1283               	bcf	3,5	;RP0=0, select bank0
  7037  020C  1303               	bcf	3,6	;RP1=0, select bank0
  7038  020D  1988               	btfsc	8,3	;volatile
  7039  020E  29C4               	goto	l3272
  7040                           
  7041                           ;Automated Solar Panel Orientation Setter.c: 443: }
  7042                           ;Automated Solar Panel Orientation Setter.c: 444: RD5 = 1;
  7043  020F  1688               	bsf	8,5	;volatile
  7044                           
  7045                           ;Automated Solar Panel Orientation Setter.c: 445: _delay(1);
  7046  0210  0000               	nop
  7047                           
  7048                           ;Automated Solar Panel Orientation Setter.c: 446: if(RD3==1){
  7049  0211  1283               	bcf	3,5	;RP0=0, select bank0
  7050  0212  1303               	bcf	3,6	;RP1=0, select bank0
  7051  0213  1988               	btfsc	8,3	;volatile
  7052  0214  29CE               	goto	l3276
  7053                           
  7054                           ;Automated Solar Panel Orientation Setter.c: 448: }
  7055                           ;Automated Solar Panel Orientation Setter.c: 449: RC5 = 1;
  7056  0215  1687               	bsf	7,5	;volatile
  7057                           
  7058                           ;Automated Solar Panel Orientation Setter.c: 450: _delay(1);
  7059  0216  0000               	nop
  7060                           
  7061                           ;Automated Solar Panel Orientation Setter.c: 451: if(RD3==1){
  7062  0217  1283               	bcf	3,5	;RP0=0, select bank0
  7063  0218  1303               	bcf	3,6	;RP1=0, select bank0
  7064  0219  1988               	btfsc	8,3	;volatile
  7065  021A  29D8               	goto	l3280
  7066                           
  7067                           ;Automated Solar Panel Orientation Setter.c: 453: }
  7068                           ;Automated Solar Panel Orientation Setter.c: 454: RD4 = 1;
  7069  021B  1608               	bsf	8,4	;volatile
  7070                           
  7071                           ;Automated Solar Panel Orientation Setter.c: 455: _delay(1);
  7072  021C  0000               	nop
  7073                           
  7074                           ;Automated Solar Panel Orientation Setter.c: 456: if(RD3==1){
  7075  021D  1283               	bcf	3,5	;RP0=0, select bank0
  7076  021E  1303               	bcf	3,6	;RP1=0, select bank0
  7077  021F  1988               	btfsc	8,3	;volatile
  7078  0220  29E2               	goto	l3284
  7079  0221  2A3F               	goto	l3348
  7080  0222                     l3328:	
  7081                           
  7082                           ;Automated Solar Panel Orientation Setter.c: 460: else if(rowNo==4){
  7083  0222  3004               	movlw	4
  7084  0223  0623               	xorwf	ColomnNo@rowNo,w
  7085  0224  0424               	iorwf	ColomnNo@rowNo+1,w
  7086  0225  1D03               	btfss	3,2
  7087  0226  2A3F               	goto	l3348
  7088                           
  7089                           ;Automated Solar Panel Orientation Setter.c: 461: RC4 = 1;
  7090  0227  1607               	bsf	7,4	;volatile
  7091                           
  7092                           ;Automated Solar Panel Orientation Setter.c: 462: _delay(1);
  7093  0228  0000               	nop
  7094                           
  7095                           ;Automated Solar Panel Orientation Setter.c: 463: if(RD6==1){
  7096  0229  1283               	bcf	3,5	;RP0=0, select bank0
  7097  022A  1303               	bcf	3,6	;RP1=0, select bank0
  7098  022B  1B08               	btfsc	8,6	;volatile
  7099  022C  29C4               	goto	l3272
  7100                           
  7101                           ;Automated Solar Panel Orientation Setter.c: 465: }
  7102                           ;Automated Solar Panel Orientation Setter.c: 466: RD5 = 1;
  7103  022D  1688               	bsf	8,5	;volatile
  7104                           
  7105                           ;Automated Solar Panel Orientation Setter.c: 467: _delay(1);
  7106  022E  0000               	nop
  7107                           
  7108                           ;Automated Solar Panel Orientation Setter.c: 468: if(RD6==1){
  7109  022F  1283               	bcf	3,5	;RP0=0, select bank0
  7110  0230  1303               	bcf	3,6	;RP1=0, select bank0
  7111  0231  1B08               	btfsc	8,6	;volatile
  7112  0232  29CE               	goto	l3276
  7113                           
  7114                           ;Automated Solar Panel Orientation Setter.c: 470: }
  7115                           ;Automated Solar Panel Orientation Setter.c: 471: RC5 = 1;
  7116  0233  1687               	bsf	7,5	;volatile
  7117                           
  7118                           ;Automated Solar Panel Orientation Setter.c: 472: _delay(1);
  7119  0234  0000               	nop
  7120                           
  7121                           ;Automated Solar Panel Orientation Setter.c: 473: if(RD6==1){
  7122  0235  1283               	bcf	3,5	;RP0=0, select bank0
  7123  0236  1303               	bcf	3,6	;RP1=0, select bank0
  7124  0237  1B08               	btfsc	8,6	;volatile
  7125  0238  29D8               	goto	l3280
  7126                           
  7127                           ;Automated Solar Panel Orientation Setter.c: 475: }
  7128                           ;Automated Solar Panel Orientation Setter.c: 476: RD4 = 1;
  7129  0239  1608               	bsf	8,4	;volatile
  7130                           
  7131                           ;Automated Solar Panel Orientation Setter.c: 477: _delay(1);
  7132  023A  0000               	nop
  7133                           
  7134                           ;Automated Solar Panel Orientation Setter.c: 478: if(RD6==1){
  7135  023B  1283               	bcf	3,5	;RP0=0, select bank0
  7136  023C  1303               	bcf	3,6	;RP1=0, select bank0
  7137  023D  1B08               	btfsc	8,6	;volatile
  7138  023E  29E2               	goto	l3284
  7139  023F                     l3348:	
  7140                           
  7141                           ;Automated Solar Panel Orientation Setter.c: 480: }
  7142                           ;Automated Solar Panel Orientation Setter.c: 481: }
  7143                           ;Automated Solar Panel Orientation Setter.c: 482: return 0;
  7144  023F  01A3               	clrf	?_ColomnNo
  7145  0240  01A4               	clrf	?_ColomnNo+1
  7146  0241  0008               	return
  7147  0242                     __end_of_ColomnNo:	
  7148  0242                     __ptext38:	
  7149 ;; *************** function _RowNo *****************
  7150 ;; Defined at:
  7151 ;;		line 485 in file "Automated Solar Panel Orientation Setter.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;		None
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  row             2    5[BANK0 ] int 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  2    3[BANK0 ] int 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0
  7160 ;; Tracked objects:
  7161 ;;		On entry : 300/0
  7162 ;;		On exit  : 300/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7165 ;;      Params:         0       2       0       0       0
  7166 ;;      Locals:         0       2       0       0       0
  7167 ;;      Temps:          0       0       0       0       0
  7168 ;;      Totals:         0       4       0       0       0
  7169 ;;Total ram usage:        4 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    5
  7172 ;; This function calls:
  7173 ;;		Nothing
  7174 ;; This function is called by:
  7175 ;;		_CheckKeyPad
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           
  7180                           ;psect for function _RowNo
  7181  0242                     _RowNo:	
  7182                           
  7183                           ;Automated Solar Panel Orientation Setter.c: 486: int row;
  7184                           ;Automated Solar Panel Orientation Setter.c: 487: if( RD2!=1){
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _RowNo: [wreg+status,2+status,0]
  7188  0242  1908               	btfsc	8,2	;volatile
  7189  0243  2A47               	goto	l577
  7190                           
  7191                           ;Automated Solar Panel Orientation Setter.c: 488: row = 1;
  7192  0244  01A5               	clrf	RowNo@row
  7193  0245  0AA5               	incf	RowNo@row,f
  7194  0246  2A55               	goto	L39
  7195  0247                     l577:	
  7196                           ;Automated Solar Panel Orientation Setter.c: 489: }
  7197                           
  7198                           
  7199                           ;Automated Solar Panel Orientation Setter.c: 490: else if( RD7!=1 ){
  7200  0247  1B88               	btfsc	8,7	;volatile
  7201  0248  2A4B               	goto	l579
  7202                           
  7203                           ;Automated Solar Panel Orientation Setter.c: 491: row = 2;
  7204  0249  3002               	movlw	2
  7205  024A  2A52               	goto	L41
  7206  024B                     l579:	
  7207                           ;Automated Solar Panel Orientation Setter.c: 492: }
  7208                           
  7209                           
  7210                           ;Automated Solar Panel Orientation Setter.c: 493: else if( RD3!=1 ){
  7211  024B  1988               	btfsc	8,3	;volatile
  7212  024C  2A4F               	goto	l581
  7213                           
  7214                           ;Automated Solar Panel Orientation Setter.c: 494: row = 3;
  7215  024D  3003               	movlw	3
  7216  024E  2A52               	goto	L41
  7217  024F                     l581:	
  7218                           ;Automated Solar Panel Orientation Setter.c: 495: }
  7219                           
  7220                           
  7221                           ;Automated Solar Panel Orientation Setter.c: 496: else if( RD6!=1 ){
  7222  024F  1B08               	btfsc	8,6	;volatile
  7223  0250  2A54               	goto	l3260
  7224                           
  7225                           ;Automated Solar Panel Orientation Setter.c: 497: row = 4;
  7226  0251  3004               	movlw	4
  7227  0252                     L41:	
  7228  0252  00A5               	movwf	RowNo@row
  7229  0253  2A55               	goto	L39
  7230  0254                     l3260:	
  7231                           ;Automated Solar Panel Orientation Setter.c: 498: }
  7232                           
  7233                           
  7234                           ;Automated Solar Panel Orientation Setter.c: 499: else{
  7235                           ;Automated Solar Panel Orientation Setter.c: 500: row = 0;
  7236  0254  01A5               	clrf	RowNo@row
  7237  0255                     L39:	
  7238  0255  01A6               	clrf	RowNo@row+1
  7239                           
  7240                           ;Automated Solar Panel Orientation Setter.c: 501: }
  7241                           ;Automated Solar Panel Orientation Setter.c: 502: return row;
  7242  0256  0826               	movf	RowNo@row+1,w
  7243  0257  00A4               	movwf	?_RowNo+1
  7244  0258  0825               	movf	RowNo@row,w
  7245  0259  00A3               	movwf	?_RowNo
  7246  025A  0008               	return
  7247  025B                     __end_of_RowNo:	
  7248  025B                     __ptext36:	
  7249 ;; *************** function _Serial_Print *****************
  7250 ;; Defined at:
  7251 ;;		line 27 in file "serialv2.h"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;  a               1    wreg     PTR const unsigned char 
  7254 ;;		 -> STR_13(20), STR_12(3), STR_11(3), STR_10(3), 
  7255 ;;		 -> STR_9(3), 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  a               1    4[BANK0 ] PTR const unsigned char 
  7258 ;;		 -> STR_13(20), STR_12(3), STR_11(3), STR_10(3), 
  7259 ;;		 -> STR_9(3), 
  7260 ;; Return value:  Size  Location     Type
  7261 ;;		None               void
  7262 ;; Registers used:
  7263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 300/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7269 ;;      Params:         0       0       0       0       0
  7270 ;;      Locals:         0       1       0       0       0
  7271 ;;      Temps:          0       1       0       0       0
  7272 ;;      Totals:         0       2       0       0       0
  7273 ;;Total ram usage:        2 bytes
  7274 ;; Hardware stack levels used:    1
  7275 ;; Hardware stack levels required when called:    5
  7276 ;; This function calls:
  7277 ;;		Nothing
  7278 ;; This function is called by:
  7279 ;;		_main
  7280 ;;		_CheckMode
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           
  7285                           ;psect for function _Serial_Print
  7286  025B                     _Serial_Print:	
  7287                           
  7288                           ;incstack = 0
  7289                           ; Regs used in _Serial_Print: [wreg-fsr0h+status,2+status,0+pclath]
  7290                           ;Serial_Print@a stored from wreg
  7291  025B  1283               	bcf	3,5	;RP0=0, select bank0
  7292  025C  1303               	bcf	3,6	;RP1=0, select bank0
  7293  025D  00A4               	movwf	Serial_Print@a
  7294  025E                     l3522:	
  7295                           ;serialv2.h: 28: while( *a!='\0'){
  7296                           
  7297  025E  0824               	movf	Serial_Print@a,w
  7298  025F  0084               	movwf	4
  7299  0260  160A  158A  2000  120A  118A  	fcall	stringdir
  7300  0265  3A00               	xorlw	0
  7301  0266  1903               	btfsc	3,2
  7302  0267  0008               	return
  7303  0268                     l273:	
  7304  0268  1E0C               	btfss	12,4	;volatile
  7305  0269  2A68               	goto	l273
  7306                           
  7307                           ;serialv2.h: 30: TXREG = *a;
  7308  026A  0824               	movf	Serial_Print@a,w
  7309  026B  0084               	movwf	4
  7310  026C  160A  158A  2000  120A  118A  	fcall	stringdir
  7311  0271  0099               	movwf	25	;volatile
  7312                           
  7313                           ;serialv2.h: 31: _delay(10);
  7314  0272  3003               	movlw	3
  7315  0273  00A3               	movwf	??_Serial_Print
  7316  0274                     u6807:	
  7317  0274  0BA3               	decfsz	??_Serial_Print,f
  7318  0275  2A74               	goto	u6807
  7319                           
  7320                           ;serialv2.h: 32: a = a+1;
  7321  0276  1283               	bcf	3,5	;RP0=0, select bank0
  7322  0277  1303               	bcf	3,6	;RP1=0, select bank0
  7323  0278  0AA4               	incf	Serial_Print@a,f
  7324  0279  2A5E               	goto	l3522
  7325  027A                     __end_of_Serial_Print:	
  7326  027A                     __ptext11:	
  7327 ;; *************** function _a2d_read *****************
  7328 ;; Defined at:
  7329 ;;		line 549 in file "Automated Solar Panel Orientation Setter.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;		None
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;		None
  7334 ;; Return value:  Size  Location     Type
  7335 ;;		None               void
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, status,0, pclath, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 300/0
  7340 ;;		On exit  : 300/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7343 ;;      Params:         0       0       0       0       0
  7344 ;;      Locals:         0       0       0       0       0
  7345 ;;      Temps:          0       0       0       0       0
  7346 ;;      Totals:         0       0       0       0       0
  7347 ;;Total ram usage:        0 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    7
  7350 ;; This function calls:
  7351 ;;		___awdiv
  7352 ;;		___ftmul
  7353 ;;		___fttol
  7354 ;;		___lwtoft
  7355 ;;		___wmul
  7356 ;;		_read_a2d_value
  7357 ;; This function is called by:
  7358 ;;		_main
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           
  7363                           ;psect for function _a2d_read
  7364  027A                     _a2d_read:	
  7365                           
  7366                           ;Automated Solar Panel Orientation Setter.c: 550: ldr1 = read_a2d_value(0);
  7367                           
  7368                           ;incstack = 0
  7369                           ; Regs used in _a2d_read: [wreg+status,2+status,0+pclath+cstack]
  7370  027A  3000               	movlw	0
  7371  027B  22EF  120A  118A   	fcall	_read_a2d_value
  7372  027E  0824               	movf	?_read_a2d_value+1,w
  7373  027F  00D5               	movwf	_ldr1+1
  7374  0280  0823               	movf	?_read_a2d_value,w
  7375  0281  00D4               	movwf	_ldr1
  7376                           
  7377                           ;Automated Solar Panel Orientation Setter.c: 551: ldr2 = read_a2d_value(1);
  7378  0282  3001               	movlw	1
  7379  0283  22EF  120A  118A   	fcall	_read_a2d_value
  7380  0286  0824               	movf	?_read_a2d_value+1,w
  7381  0287  00D7               	movwf	_ldr2+1
  7382  0288  0823               	movf	?_read_a2d_value,w
  7383  0289  00D6               	movwf	_ldr2
  7384                           
  7385                           ;Automated Solar Panel Orientation Setter.c: 552: ldr2 = ldr2 + (int)(ldr2*0.35);
  7386  028A  0857               	movf	_ldr2+1,w
  7387  028B  00AC               	movwf	___lwtoft@c+1
  7388  028C  0856               	movf	_ldr2,w
  7389  028D  00AB               	movwf	___lwtoft@c
  7390  028E  2622  120A  118A   	fcall	___lwtoft
  7391  0291  082B               	movf	?___lwtoft,w
  7392  0292  00B1               	movwf	___ftmul@f2
  7393  0293  082C               	movf	?___lwtoft+1,w
  7394  0294  00B2               	movwf	___ftmul@f2+1
  7395  0295  082D               	movf	?___lwtoft+2,w
  7396  0296  00B3               	movwf	___ftmul@f2+2
  7397  0297  3033               	movlw	51
  7398  0298  00AE               	movwf	___ftmul@f1
  7399  0299  30B3               	movlw	179
  7400  029A  00AF               	movwf	___ftmul@f1+1
  7401  029B  303E               	movlw	62
  7402  029C  00B0               	movwf	___ftmul@f1+2
  7403  029D  264B  120A  118A   	fcall	___ftmul
  7404  02A0  082E               	movf	?___ftmul,w
  7405  02A1  00BD               	movwf	___fttol@f1
  7406  02A2  082F               	movf	?___ftmul+1,w
  7407  02A3  00BE               	movwf	___fttol@f1+1
  7408  02A4  0830               	movf	?___ftmul+2,w
  7409  02A5  00BF               	movwf	___fttol@f1+2
  7410  02A6  2708  120A  118A   	fcall	___fttol
  7411  02A9  083D               	movf	?___fttol,w
  7412  02AA  07D6               	addwf	_ldr2,f
  7413  02AB  1803               	skipnc
  7414  02AC  0AD7               	incf	_ldr2+1,f
  7415  02AD  083E               	movf	?___fttol+1,w
  7416  02AE  07D7               	addwf	_ldr2+1,f
  7417                           
  7418                           ;Automated Solar Panel Orientation Setter.c: 553: V_Bat = read_a2d_value(2);
  7419  02AF  3002               	movlw	2
  7420  02B0  22EF  120A  118A   	fcall	_read_a2d_value
  7421  02B3  0824               	movf	?_read_a2d_value+1,w
  7422  02B4  00E5               	movwf	_V_Bat+1
  7423  02B5  0823               	movf	?_read_a2d_value,w
  7424  02B6  00E4               	movwf	_V_Bat
  7425                           
  7426                           ;Automated Solar Panel Orientation Setter.c: 554: V_Bat2 = (int)V_Bat*5*11/1023;
  7427  02B7  30FF               	movlw	255
  7428  02B8  00A9               	movwf	___awdiv@divisor
  7429  02B9  3003               	movlw	3
  7430  02BA  00AA               	movwf	___awdiv@divisor+1
  7431  02BB  0865               	movf	_V_Bat+1,w
  7432  02BC  00A4               	movwf	___wmul@multiplier+1
  7433  02BD  0864               	movf	_V_Bat,w
  7434  02BE  00A3               	movwf	___wmul@multiplier
  7435  02BF  3037               	movlw	55
  7436  02C0  00A5               	movwf	___wmul@multiplicand
  7437  02C1  01A6               	clrf	___wmul@multiplicand+1
  7438  02C2  2632  120A  118A   	fcall	___wmul
  7439  02C5  0824               	movf	?___wmul+1,w
  7440  02C6  00AC               	movwf	___awdiv@dividend+1
  7441  02C7  0823               	movf	?___wmul,w
  7442  02C8  00AB               	movwf	___awdiv@dividend
  7443  02C9  25A0  120A  118A   	fcall	___awdiv
  7444  02CC  0829               	movf	?___awdiv,w
  7445  02CD  00CD               	movwf	_V_Bat2
  7446  02CE  082A               	movf	?___awdiv+1,w
  7447  02CF  00CE               	movwf	_V_Bat2+1
  7448  02D0  3000               	movlw	0
  7449  02D1  1BAA               	btfsc	?___awdiv+1,7
  7450  02D2  30FF               	movlw	255
  7451  02D3  00CF               	movwf	_V_Bat2+2
  7452                           
  7453                           ;Automated Solar Panel Orientation Setter.c: 555: C_Bat = read_a2d_value(3);
  7454  02D4  3003               	movlw	3
  7455  02D5  22EF  120A  118A   	fcall	_read_a2d_value
  7456  02D8  0824               	movf	?_read_a2d_value+1,w
  7457  02D9  00E3               	movwf	_C_Bat+1
  7458  02DA  0823               	movf	?_read_a2d_value,w
  7459  02DB  00E2               	movwf	_C_Bat
  7460                           
  7461                           ;Automated Solar Panel Orientation Setter.c: 556: C_Bat2 = (int)C_Bat*5*11/1023;
  7462  02DC  30FF               	movlw	255
  7463  02DD  00A9               	movwf	___awdiv@divisor
  7464  02DE  3003               	movlw	3
  7465  02DF  00AA               	movwf	___awdiv@divisor+1
  7466  02E0  0863               	movf	_C_Bat+1,w
  7467  02E1  00A4               	movwf	___wmul@multiplier+1
  7468  02E2  0862               	movf	_C_Bat,w
  7469  02E3  00A3               	movwf	___wmul@multiplier
  7470  02E4  3037               	movlw	55
  7471  02E5  00A5               	movwf	___wmul@multiplicand
  7472  02E6  01A6               	clrf	___wmul@multiplicand+1
  7473  02E7  2632  120A  118A   	fcall	___wmul
  7474  02EA  0824               	movf	?___wmul+1,w
  7475  02EB  00AC               	movwf	___awdiv@dividend+1
  7476  02EC  0823               	movf	?___wmul,w
  7477  02ED  00AB               	movwf	___awdiv@dividend
  7478  02EE  2DA0               	ljmp	l3376
  7479  02EF                     __end_of_a2d_read:	
  7480  02EF                     __ptext12:	
  7481 ;; *************** function _read_a2d_value *****************
  7482 ;; Defined at:
  7483 ;;		line 13 in file "a2d.h"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;  channel         1    wreg     unsigned char 
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;  channel         1    6[BANK0 ] unsigned char 
  7488 ;;  a2d_value       2    7[BANK0 ] unsigned int 
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  2    3[BANK0 ] unsigned int 
  7491 ;; Registers used:
  7492 ;;		wreg, status,2, status,0
  7493 ;; Tracked objects:
  7494 ;;		On entry : 300/0
  7495 ;;		On exit  : 300/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7498 ;;      Params:         0       2       0       0       0
  7499 ;;      Locals:         0       3       0       0       0
  7500 ;;      Temps:          0       1       0       0       0
  7501 ;;      Totals:         0       6       0       0       0
  7502 ;;Total ram usage:        6 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    5
  7505 ;; This function calls:
  7506 ;;		Nothing
  7507 ;; This function is called by:
  7508 ;;		_a2d_read
  7509 ;; This function uses a non-reentrant model
  7510 ;;
  7511                           
  7512                           
  7513                           ;psect for function _read_a2d_value
  7514  02EF                     _read_a2d_value:	
  7515                           
  7516                           ;incstack = 0
  7517                           ; Regs used in _read_a2d_value: [wreg+status,2+status,0]
  7518                           ;read_a2d_value@channel stored from wreg
  7519  02EF  00A6               	movwf	read_a2d_value@channel
  7520                           
  7521                           ;a2d.h: 14: unsigned int a2d_value;
  7522                           ;a2d.h: 15: channel = channel << 3;
  7523  02F0  0DA6               	rlf	read_a2d_value@channel,f
  7524  02F1  0DA6               	rlf	read_a2d_value@channel,f
  7525  02F2  0D26               	rlf	read_a2d_value@channel,w
  7526  02F3  39F8               	andlw	248
  7527  02F4  00A6               	movwf	read_a2d_value@channel
  7528                           
  7529                           ;a2d.h: 16: ADCON0 = ADCON0 & 0b11000111;
  7530  02F5  30C7               	movlw	199
  7531  02F6  059F               	andwf	31,f	;volatile
  7532                           
  7533                           ;a2d.h: 17: ADCON0 = ADCON0 | channel;
  7534  02F7  0826               	movf	read_a2d_value@channel,w
  7535  02F8  049F               	iorwf	31,f	;volatile
  7536                           
  7537                           ;a2d.h: 18: ADON = 1;
  7538  02F9  141F               	bsf	31,0	;volatile
  7539                           
  7540                           ;a2d.h: 19: _delay(50);
  7541  02FA  3010               	movlw	16
  7542  02FB  00A5               	movwf	??_read_a2d_value
  7543  02FC                     u6527:	
  7544  02FC  0BA5               	decfsz	??_read_a2d_value,f
  7545  02FD  2AFC               	goto	u6527
  7546  02FE  0000               	nop
  7547                           
  7548                           ;a2d.h: 20: GO = 1;
  7549  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  7550  0300  1303               	bcf	3,6	;RP1=0, select bank0
  7551  0301  151F               	bsf	31,2	;volatile
  7552  0302                     l262:	
  7553                           ;a2d.h: 21: while( GO == 1 );
  7554                           
  7555  0302  191F               	btfsc	31,2	;volatile
  7556  0303  2B02               	goto	l262
  7557                           
  7558                           ;a2d.h: 22: a2d_value = ADRESH;
  7559  0304  081E               	movf	30,w	;volatile
  7560  0305  00A7               	movwf	read_a2d_value@a2d_value
  7561  0306  01A8               	clrf	read_a2d_value@a2d_value+1
  7562                           
  7563                           ;a2d.h: 23: a2d_value = a2d_value << 8;
  7564  0307  00A8               	movwf	read_a2d_value@a2d_value+1
  7565  0308  01A7               	clrf	read_a2d_value@a2d_value
  7566                           
  7567                           ;a2d.h: 24: a2d_value = a2d_value + ADRESL;
  7568  0309  1683               	bsf	3,5	;RP0=1, select bank1
  7569  030A  081E               	movf	30,w	;volatile
  7570  030B  1283               	bcf	3,5	;RP0=0, select bank0
  7571  030C  07A7               	addwf	read_a2d_value@a2d_value,f
  7572  030D  1803               	skipnc
  7573  030E  0AA8               	incf	read_a2d_value@a2d_value+1,f
  7574                           
  7575                           ;a2d.h: 25: return a2d_value;
  7576  030F  0828               	movf	read_a2d_value@a2d_value+1,w
  7577  0310  00A4               	movwf	?_read_a2d_value+1
  7578  0311  0827               	movf	read_a2d_value@a2d_value,w
  7579  0312  00A3               	movwf	?_read_a2d_value
  7580  0313  0008               	return
  7581  0314                     __end_of_read_a2d_value:	
  7582  0314                     __ptext22:	
  7583 ;; *************** function _Serial_Print_Int *****************
  7584 ;; Defined at:
  7585 ;;		line 141 in file "serialv2.h"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  val             2   17[BANK0 ] int 
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;		None
  7590 ;; Return value:  Size  Location     Type
  7591 ;;		None               void
  7592 ;; Registers used:
  7593 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7594 ;; Tracked objects:
  7595 ;;		On entry : 300/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7599 ;;      Params:         0       2       0       0       0
  7600 ;;      Locals:         0       0       0       0       0
  7601 ;;      Temps:          0       1       0       0       0
  7602 ;;      Totals:         0       3       0       0       0
  7603 ;;Total ram usage:        3 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; Hardware stack levels required when called:    6
  7606 ;; This function calls:
  7607 ;;		___awdiv
  7608 ;;		___awmod
  7609 ;; This function is called by:
  7610 ;;		_main
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614                           
  7615                           ;psect for function _Serial_Print_Int
  7616  0314                     _Serial_Print_Int:	
  7617                           
  7618                           ;serialv2.h: 144: if(val < 0){
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _Serial_Print_Int: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7622  0314  1FB2               	btfss	Serial_Print_Int@val+1,7
  7623  0315  2B25               	goto	l4164
  7624  0316                     l358:	
  7625  0316  1E0C               	btfss	12,4	;volatile
  7626  0317  2B16               	goto	l358
  7627                           
  7628                           ;serialv2.h: 146: TXREG = '-';
  7629  0318  302D               	movlw	45
  7630  0319  0099               	movwf	25	;volatile
  7631                           
  7632                           ;serialv2.h: 147: _delay(10);
  7633  031A  3003               	movlw	3
  7634  031B  00B3               	movwf	??_Serial_Print_Int
  7635  031C                     u6537:	
  7636  031C  0BB3               	decfsz	??_Serial_Print_Int,f
  7637  031D  2B1C               	goto	u6537
  7638                           
  7639                           ;serialv2.h: 148: val = -val;
  7640  031E  1283               	bcf	3,5	;RP0=0, select bank0
  7641  031F  1303               	bcf	3,6	;RP1=0, select bank0
  7642  0320  09B1               	comf	Serial_Print_Int@val,f
  7643  0321  09B2               	comf	Serial_Print_Int@val+1,f
  7644  0322  0AB1               	incf	Serial_Print_Int@val,f
  7645  0323  1903               	skipnz
  7646  0324  0AB2               	incf	Serial_Print_Int@val+1,f
  7647  0325                     l4164:	
  7648                           
  7649                           ;serialv2.h: 149: }
  7650                           ;serialv2.h: 150: if(val > 9999){
  7651  0325  0832               	movf	Serial_Print_Int@val+1,w
  7652  0326  3A80               	xorlw	128
  7653  0327  00FF               	movwf	127
  7654  0328  30A7               	movlw	167
  7655  0329  027F               	subwf	127,w
  7656  032A  1D03               	skipz
  7657  032B  2B2E               	goto	u5395
  7658  032C  3010               	movlw	16
  7659  032D  0231               	subwf	Serial_Print_Int@val,w
  7660  032E                     u5395:	
  7661  032E  1C03               	skipc
  7662  032F  2BA9               	goto	l4192
  7663  0330                     l362:	
  7664  0330  1283               	bcf	3,5	;RP0=0, select bank0
  7665  0331  1303               	bcf	3,6	;RP1=0, select bank0
  7666  0332  1E0C               	btfss	12,4	;volatile
  7667  0333  2B30               	goto	l362
  7668                           
  7669                           ;serialv2.h: 152: TXREG = val/10000+48;
  7670  0334  3010               	movlw	16
  7671  0335  00A9               	movwf	___awdiv@divisor
  7672  0336  3027               	movlw	39
  7673  0337  00AA               	movwf	___awdiv@divisor+1
  7674  0338  0832               	movf	Serial_Print_Int@val+1,w
  7675  0339  00AC               	movwf	___awdiv@dividend+1
  7676  033A  0831               	movf	Serial_Print_Int@val,w
  7677  033B  00AB               	movwf	___awdiv@dividend
  7678  033C  25A0  120A  118A   	fcall	___awdiv
  7679  033F  0829               	movf	?___awdiv,w
  7680  0340  3E30               	addlw	48
  7681  0341  0099               	movwf	25	;volatile
  7682                           
  7683                           ;serialv2.h: 153: _delay(10);
  7684  0342  3003               	movlw	3
  7685  0343  00B3               	movwf	??_Serial_Print_Int
  7686  0344                     u6547:	
  7687  0344  0BB3               	decfsz	??_Serial_Print_Int,f
  7688  0345  2B44               	goto	u6547
  7689                           
  7690                           ;serialv2.h: 154: val = val%10000;
  7691  0346  3010               	movlw	16
  7692  0347  1283               	bcf	3,5	;RP0=0, select bank0
  7693  0348  1303               	bcf	3,6	;RP1=0, select bank0
  7694  0349  00A3               	movwf	___awmod@divisor
  7695  034A  3027               	movlw	39
  7696  034B  00A4               	movwf	___awmod@divisor+1
  7697  034C  0832               	movf	Serial_Print_Int@val+1,w
  7698  034D  00A6               	movwf	___awmod@dividend+1
  7699  034E  0831               	movf	Serial_Print_Int@val,w
  7700  034F  00A5               	movwf	___awmod@dividend
  7701  0350  25E5  120A  118A   	fcall	___awmod
  7702  0353  0824               	movf	?___awmod+1,w
  7703  0354  00B2               	movwf	Serial_Print_Int@val+1
  7704  0355  0823               	movf	?___awmod,w
  7705  0356  00B1               	movwf	Serial_Print_Int@val
  7706  0357                     l365:	
  7707                           ;serialv2.h: 156: while(!TXIF);
  7708                           
  7709  0357  1E0C               	btfss	12,4	;volatile
  7710  0358  2B57               	goto	l365
  7711                           
  7712                           ;serialv2.h: 157: TXREG = val/1000+48;
  7713  0359  277F  120A  118A   	fcall	PL20	;call to abstracted procedure
  7714  035C  25A0  120A  118A   	fcall	___awdiv
  7715  035F  0829               	movf	?___awdiv,w
  7716  0360  3E30               	addlw	48
  7717  0361  0099               	movwf	25	;volatile
  7718                           
  7719                           ;serialv2.h: 158: _delay(10);
  7720  0362  3003               	movlw	3
  7721  0363  00B3               	movwf	??_Serial_Print_Int
  7722  0364                     u6557:	
  7723  0364  0BB3               	decfsz	??_Serial_Print_Int,f
  7724  0365  2B64               	goto	u6557
  7725                           
  7726                           ;serialv2.h: 159: val = val%1000;
  7727  0366  276C  120A  118A   	fcall	PL12	;call to abstracted procedure
  7728  0369  25E5  120A  118A   	fcall	___awmod
  7729  036C  0824               	movf	?___awmod+1,w
  7730  036D  00B2               	movwf	Serial_Print_Int@val+1
  7731  036E  0823               	movf	?___awmod,w
  7732  036F  00B1               	movwf	Serial_Print_Int@val
  7733  0370                     l368:	
  7734                           ;serialv2.h: 161: while(!TXIF);
  7735                           
  7736  0370  1E0C               	btfss	12,4	;volatile
  7737  0371  2B70               	goto	l368
  7738                           
  7739                           ;serialv2.h: 162: TXREG = val/100+48;
  7740  0372  2777  120A  118A   	fcall	PL16	;call to abstracted procedure
  7741  0375  25A0  120A  118A   	fcall	___awdiv
  7742  0378  0829               	movf	?___awdiv,w
  7743  0379  3E30               	addlw	48
  7744  037A  0099               	movwf	25	;volatile
  7745                           
  7746                           ;serialv2.h: 163: _delay(10);
  7747  037B  3003               	movlw	3
  7748  037C  00B3               	movwf	??_Serial_Print_Int
  7749  037D                     u6567:	
  7750  037D  0BB3               	decfsz	??_Serial_Print_Int,f
  7751  037E  2B7D               	goto	u6567
  7752                           
  7753                           ;serialv2.h: 164: val = val%100;
  7754  037F  3064               	movlw	100
  7755  0380  2763  120A  118A   	fcall	PL4	;call to abstracted procedure
  7756  0383  25E5  120A  118A   	fcall	___awmod
  7757  0386  0824               	movf	?___awmod+1,w
  7758  0387  00B2               	movwf	Serial_Print_Int@val+1
  7759  0388  0823               	movf	?___awmod,w
  7760  0389  00B1               	movwf	Serial_Print_Int@val
  7761  038A                     l371:	
  7762                           ;serialv2.h: 166: while(!TXIF);
  7763                           
  7764  038A  1E0C               	btfss	12,4	;volatile
  7765  038B  2B8A               	goto	l371
  7766  038C                     l4186:	
  7767                           
  7768                           ;serialv2.h: 167: TXREG = val/10+48;
  7769  038C  300A               	movlw	10
  7770  038D  00A9               	movwf	___awdiv@divisor
  7771  038E  01AA               	clrf	___awdiv@divisor+1
  7772  038F  0832               	movf	Serial_Print_Int@val+1,w
  7773  0390  00AC               	movwf	___awdiv@dividend+1
  7774  0391  0831               	movf	Serial_Print_Int@val,w
  7775  0392  00AB               	movwf	___awdiv@dividend
  7776  0393  25A0  120A  118A   	fcall	___awdiv
  7777  0396  0829               	movf	?___awdiv,w
  7778  0397  3E30               	addlw	48
  7779  0398  0099               	movwf	25	;volatile
  7780                           
  7781                           ;serialv2.h: 168: _delay(10);
  7782  0399  3003               	movlw	3
  7783  039A  00B3               	movwf	??_Serial_Print_Int
  7784  039B                     u6577:	
  7785  039B  0BB3               	decfsz	??_Serial_Print_Int,f
  7786  039C  2B9B               	goto	u6577
  7787                           
  7788                           ;serialv2.h: 169: val = val%10;
  7789  039D  300A               	movlw	10
  7790  039E  2763  120A  118A   	fcall	PL4	;call to abstracted procedure
  7791  03A1  25E5  120A  118A   	fcall	___awmod
  7792  03A4  0824               	movf	?___awmod+1,w
  7793  03A5  00B2               	movwf	Serial_Print_Int@val+1
  7794  03A6  0823               	movf	?___awmod,w
  7795  03A7  00B1               	movwf	Serial_Print_Int@val
  7796                           
  7797                           ;serialv2.h: 170: }
  7798  03A8  2C24               	goto	l398
  7799  03A9                     l4192:	
  7800                           
  7801                           ;serialv2.h: 171: else if(val > 999){
  7802  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  7803  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  7804  03AB  0832               	movf	Serial_Print_Int@val+1,w
  7805  03AC  3A80               	xorlw	128
  7806  03AD  00FF               	movwf	127
  7807  03AE  3083               	movlw	131
  7808  03AF  027F               	subwf	127,w
  7809  03B0  1D03               	skipz
  7810  03B1  2BB4               	goto	u5445
  7811  03B2  30E8               	movlw	232
  7812  03B3  0231               	subwf	Serial_Print_Int@val,w
  7813  03B4                     u5445:	
  7814  03B4  1C03               	skipc
  7815  03B5  2BEE               	goto	l4214
  7816  03B6                     l376:	
  7817  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  7818  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  7819  03B8  1E0C               	btfss	12,4	;volatile
  7820  03B9  2BB6               	goto	l376
  7821                           
  7822                           ;serialv2.h: 173: TXREG = val/1000+48;
  7823  03BA  277F  120A  118A   	fcall	PL20	;call to abstracted procedure
  7824  03BD  25A0  120A  118A   	fcall	___awdiv
  7825  03C0  0829               	movf	?___awdiv,w
  7826  03C1  3E30               	addlw	48
  7827  03C2  0099               	movwf	25	;volatile
  7828                           
  7829                           ;serialv2.h: 174: _delay(10);
  7830  03C3  3003               	movlw	3
  7831  03C4  00B3               	movwf	??_Serial_Print_Int
  7832  03C5                     u6587:	
  7833  03C5  0BB3               	decfsz	??_Serial_Print_Int,f
  7834  03C6  2BC5               	goto	u6587
  7835                           
  7836                           ;serialv2.h: 175: val = val%1000;
  7837  03C7  276C  120A  118A   	fcall	PL12	;call to abstracted procedure
  7838  03CA  25E5  120A  118A   	fcall	___awmod
  7839  03CD  0824               	movf	?___awmod+1,w
  7840  03CE  00B2               	movwf	Serial_Print_Int@val+1
  7841  03CF  0823               	movf	?___awmod,w
  7842  03D0  00B1               	movwf	Serial_Print_Int@val
  7843  03D1                     l379:	
  7844                           ;serialv2.h: 177: while(!TXIF);
  7845                           
  7846  03D1  1E0C               	btfss	12,4	;volatile
  7847  03D2  2BD1               	goto	l379
  7848                           
  7849                           ;serialv2.h: 178: TXREG = val/100+48;
  7850  03D3  2777  120A  118A   	fcall	PL16	;call to abstracted procedure
  7851  03D6  25A0  120A  118A   	fcall	___awdiv
  7852  03D9  0829               	movf	?___awdiv,w
  7853  03DA  3E30               	addlw	48
  7854  03DB  0099               	movwf	25	;volatile
  7855                           
  7856                           ;serialv2.h: 179: _delay(10);
  7857  03DC  3003               	movlw	3
  7858  03DD  00B3               	movwf	??_Serial_Print_Int
  7859  03DE                     u6597:	
  7860  03DE  0BB3               	decfsz	??_Serial_Print_Int,f
  7861  03DF  2BDE               	goto	u6597
  7862                           
  7863                           ;serialv2.h: 180: val = val%100;
  7864  03E0  3064               	movlw	100
  7865  03E1  2763  120A  118A   	fcall	PL4	;call to abstracted procedure
  7866  03E4  25E5  120A  118A   	fcall	___awmod
  7867  03E7  0824               	movf	?___awmod+1,w
  7868  03E8  00B2               	movwf	Serial_Print_Int@val+1
  7869  03E9  0823               	movf	?___awmod,w
  7870  03EA  00B1               	movwf	Serial_Print_Int@val
  7871  03EB                     l382:	
  7872                           ;serialv2.h: 182: while(!TXIF);
  7873                           
  7874  03EB  1A0C               	btfsc	12,4	;volatile
  7875  03EC  2B8C               	goto	l4186
  7876  03ED  2BEB               	goto	l382
  7877  03EE                     l4214:	
  7878                           
  7879                           ;serialv2.h: 187: else if(val > 99){
  7880  03EE  2788  120A  118A   	fcall	PL28	;call to abstracted procedure
  7881  03F1  1D03               	skipz
  7882  03F2  2BF5               	goto	u5485
  7883  03F3  3064               	movlw	100
  7884  03F4  0231               	subwf	Serial_Print_Int@val,w
  7885  03F5                     u5485:	
  7886  03F5  1C03               	skipc
  7887  03F6  2C16               	goto	l4230
  7888  03F7                     l387:	
  7889  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  7890  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  7891  03F9  1E0C               	btfss	12,4	;volatile
  7892  03FA  2BF7               	goto	l387
  7893                           
  7894                           ;serialv2.h: 189: TXREG = val/100+48;
  7895  03FB  2777  120A  118A   	fcall	PL16	;call to abstracted procedure
  7896  03FE  25A0  120A  118A   	fcall	___awdiv
  7897  0401  0829               	movf	?___awdiv,w
  7898  0402  3E30               	addlw	48
  7899  0403  0099               	movwf	25	;volatile
  7900                           
  7901                           ;serialv2.h: 190: _delay(10);
  7902  0404  3003               	movlw	3
  7903  0405  00B3               	movwf	??_Serial_Print_Int
  7904  0406                     u6607:	
  7905  0406  0BB3               	decfsz	??_Serial_Print_Int,f
  7906  0407  2C06               	goto	u6607
  7907                           
  7908                           ;serialv2.h: 191: val = val%100;
  7909  0408  3064               	movlw	100
  7910  0409  2763  120A  118A   	fcall	PL4	;call to abstracted procedure
  7911  040C  25E5  120A  118A   	fcall	___awmod
  7912  040F  0824               	movf	?___awmod+1,w
  7913  0410  00B2               	movwf	Serial_Print_Int@val+1
  7914  0411  0823               	movf	?___awmod,w
  7915  0412  00B1               	movwf	Serial_Print_Int@val
  7916  0413                     l390:	
  7917                           ;serialv2.h: 193: while(!TXIF);
  7918                           
  7919  0413  1A0C               	btfsc	12,4	;volatile
  7920  0414  2B8C               	goto	l4186
  7921  0415  2C13               	goto	l390
  7922  0416                     l4230:	
  7923                           
  7924                           ;serialv2.h: 198: else if(val > 9){
  7925  0416  2788  120A  118A   	fcall	PL28	;call to abstracted procedure
  7926  0419  1D03               	skipz
  7927  041A  2C1D               	goto	u5515
  7928  041B  300A               	movlw	10
  7929  041C  0231               	subwf	Serial_Print_Int@val,w
  7930  041D                     u5515:	
  7931  041D  1C03               	skipc
  7932  041E  2C24               	goto	l398
  7933  041F                     l395:	
  7934  041F  1283               	bcf	3,5	;RP0=0, select bank0
  7935  0420  1303               	bcf	3,6	;RP1=0, select bank0
  7936  0421  1A0C               	btfsc	12,4	;volatile
  7937  0422  2B8C               	goto	l4186
  7938  0423  2C1F               	goto	l395
  7939  0424                     l398:	
  7940  0424  1283               	bcf	3,5	;RP0=0, select bank0
  7941  0425  1303               	bcf	3,6	;RP1=0, select bank0
  7942  0426  1E0C               	btfss	12,4	;volatile
  7943  0427  2C24               	goto	l398
  7944                           
  7945                           ;serialv2.h: 205: TXREG = val+48;
  7946  0428  0831               	movf	Serial_Print_Int@val,w
  7947  0429  3E30               	addlw	48
  7948  042A  0099               	movwf	25	;volatile
  7949                           
  7950                           ;serialv2.h: 206: _delay(10);
  7951  042B  3003               	movlw	3
  7952  042C  00B3               	movwf	??_Serial_Print_Int
  7953  042D                     u6617:	
  7954  042D  0BB3               	decfsz	??_Serial_Print_Int,f
  7955  042E  2C2D               	goto	u6617
  7956  042F  0008               	return
  7957  0430                     __end_of_Serial_Print_Int:	
  7958  0430                     __ptext33:	
  7959 ;; *************** function _Serial_Println_Int *****************
  7960 ;; Defined at:
  7961 ;;		line 58 in file "serialv2.h"
  7962 ;; Parameters:    Size  Location     Type
  7963 ;;  val             2   17[BANK0 ] int 
  7964 ;; Auto vars:     Size  Location     Type
  7965 ;;		None
  7966 ;; Return value:  Size  Location     Type
  7967 ;;		None               void
  7968 ;; Registers used:
  7969 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7970 ;; Tracked objects:
  7971 ;;		On entry : 300/0
  7972 ;;		On exit  : 0/0
  7973 ;;		Unchanged: 0/0
  7974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7975 ;;      Params:         0       2       0       0       0
  7976 ;;      Locals:         0       0       0       0       0
  7977 ;;      Temps:          0       1       0       0       0
  7978 ;;      Totals:         0       3       0       0       0
  7979 ;;Total ram usage:        3 bytes
  7980 ;; Hardware stack levels used:    1
  7981 ;; Hardware stack levels required when called:    6
  7982 ;; This function calls:
  7983 ;;		___awdiv
  7984 ;;		___awmod
  7985 ;; This function is called by:
  7986 ;;		_CheckMode
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           
  7991                           ;psect for function _Serial_Println_Int
  7992  0430                     _Serial_Println_Int:	
  7993                           
  7994                           ;serialv2.h: 61: if(val < 0){
  7995                           
  7996                           ;incstack = 0
  7997                           ; Regs used in _Serial_Println_Int: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7998  0430  1FB2               	btfss	Serial_Println_Int@val+1,7
  7999  0431  2C41               	goto	l3532
  8000  0432                     l299:	
  8001  0432  1E0C               	btfss	12,4	;volatile
  8002  0433  2C32               	goto	l299
  8003                           
  8004                           ;serialv2.h: 63: TXREG = '-';
  8005  0434  302D               	movlw	45
  8006  0435  0099               	movwf	25	;volatile
  8007                           
  8008                           ;serialv2.h: 64: _delay(10);
  8009  0436  3003               	movlw	3
  8010  0437  00B3               	movwf	??_Serial_Println_Int
  8011  0438                     u6697:	
  8012  0438  0BB3               	decfsz	??_Serial_Println_Int,f
  8013  0439  2C38               	goto	u6697
  8014                           
  8015                           ;serialv2.h: 65: val = -val;
  8016  043A  1283               	bcf	3,5	;RP0=0, select bank0
  8017  043B  1303               	bcf	3,6	;RP1=0, select bank0
  8018  043C  09B1               	comf	Serial_Println_Int@val,f
  8019  043D  09B2               	comf	Serial_Println_Int@val+1,f
  8020  043E  0AB1               	incf	Serial_Println_Int@val,f
  8021  043F  1903               	skipnz
  8022  0440  0AB2               	incf	Serial_Println_Int@val+1,f
  8023  0441                     l3532:	
  8024                           
  8025                           ;serialv2.h: 66: }
  8026                           ;serialv2.h: 67: if(val > 9999){
  8027  0441  0832               	movf	Serial_Println_Int@val+1,w
  8028  0442  3A80               	xorlw	128
  8029  0443  00FF               	movwf	127
  8030  0444  30A7               	movlw	167
  8031  0445  027F               	subwf	127,w
  8032  0446  1D03               	skipz
  8033  0447  2C4A               	goto	u4325
  8034  0448  3010               	movlw	16
  8035  0449  0231               	subwf	Serial_Println_Int@val,w
  8036  044A                     u4325:	
  8037  044A  1C03               	skipc
  8038  044B  2CDF               	goto	l3560
  8039  044C                     l303:	
  8040  044C  1283               	bcf	3,5	;RP0=0, select bank0
  8041  044D  1303               	bcf	3,6	;RP1=0, select bank0
  8042  044E  1E0C               	btfss	12,4	;volatile
  8043  044F  2C4C               	goto	l303
  8044                           
  8045                           ;serialv2.h: 69: TXREG = val/10000+48;
  8046  0450  3010               	movlw	16
  8047  0451  00A9               	movwf	___awdiv@divisor
  8048  0452  3027               	movlw	39
  8049  0453  00AA               	movwf	___awdiv@divisor+1
  8050  0454  0832               	movf	Serial_Println_Int@val+1,w
  8051  0455  00AC               	movwf	___awdiv@dividend+1
  8052  0456  0831               	movf	Serial_Println_Int@val,w
  8053  0457  00AB               	movwf	___awdiv@dividend
  8054  0458  25A0  120A  118A   	fcall	___awdiv
  8055  045B  0829               	movf	?___awdiv,w
  8056  045C  3E30               	addlw	48
  8057  045D  0099               	movwf	25	;volatile
  8058                           
  8059                           ;serialv2.h: 70: _delay(10);
  8060  045E  3003               	movlw	3
  8061  045F  00B3               	movwf	??_Serial_Println_Int
  8062  0460                     u6707:	
  8063  0460  0BB3               	decfsz	??_Serial_Println_Int,f
  8064  0461  2C60               	goto	u6707
  8065                           
  8066                           ;serialv2.h: 71: val = val%10000;
  8067  0462  3010               	movlw	16
  8068  0463  1283               	bcf	3,5	;RP0=0, select bank0
  8069  0464  1303               	bcf	3,6	;RP1=0, select bank0
  8070  0465  00A3               	movwf	___awmod@divisor
  8071  0466  3027               	movlw	39
  8072  0467  00A4               	movwf	___awmod@divisor+1
  8073  0468  0832               	movf	Serial_Println_Int@val+1,w
  8074  0469  00A6               	movwf	___awmod@dividend+1
  8075  046A  0831               	movf	Serial_Println_Int@val,w
  8076  046B  00A5               	movwf	___awmod@dividend
  8077  046C  25E5  120A  118A   	fcall	___awmod
  8078  046F  0824               	movf	?___awmod+1,w
  8079  0470  00B2               	movwf	Serial_Println_Int@val+1
  8080  0471  0823               	movf	?___awmod,w
  8081  0472  00B1               	movwf	Serial_Println_Int@val
  8082  0473                     l306:	
  8083                           ;serialv2.h: 73: while(!TXIF);
  8084                           
  8085  0473  1E0C               	btfss	12,4	;volatile
  8086  0474  2C73               	goto	l306
  8087                           
  8088                           ;serialv2.h: 74: TXREG = val/1000+48;
  8089  0475  30E8               	movlw	232
  8090  0476  00A9               	movwf	___awdiv@divisor
  8091  0477  3003               	movlw	3
  8092  0478  00AA               	movwf	___awdiv@divisor+1
  8093  0479  0832               	movf	Serial_Println_Int@val+1,w
  8094  047A  00AC               	movwf	___awdiv@dividend+1
  8095  047B  0831               	movf	Serial_Println_Int@val,w
  8096  047C  00AB               	movwf	___awdiv@dividend
  8097  047D  25A0  120A  118A   	fcall	___awdiv
  8098  0480  0829               	movf	?___awdiv,w
  8099  0481  3E30               	addlw	48
  8100  0482  0099               	movwf	25	;volatile
  8101                           
  8102                           ;serialv2.h: 75: _delay(10);
  8103  0483  3003               	movlw	3
  8104  0484  00B3               	movwf	??_Serial_Println_Int
  8105  0485                     u6717:	
  8106  0485  0BB3               	decfsz	??_Serial_Println_Int,f
  8107  0486  2C85               	goto	u6717
  8108                           
  8109                           ;serialv2.h: 76: val = val%1000;
  8110  0487  30E8               	movlw	232
  8111  0488  1283               	bcf	3,5	;RP0=0, select bank0
  8112  0489  1303               	bcf	3,6	;RP1=0, select bank0
  8113  048A  00A3               	movwf	___awmod@divisor
  8114  048B  3003               	movlw	3
  8115  048C  00A4               	movwf	___awmod@divisor+1
  8116  048D  0832               	movf	Serial_Println_Int@val+1,w
  8117  048E  00A6               	movwf	___awmod@dividend+1
  8118  048F  0831               	movf	Serial_Println_Int@val,w
  8119  0490  00A5               	movwf	___awmod@dividend
  8120  0491  25E5  120A  118A   	fcall	___awmod
  8121  0494  0824               	movf	?___awmod+1,w
  8122  0495  00B2               	movwf	Serial_Println_Int@val+1
  8123  0496  0823               	movf	?___awmod,w
  8124  0497  00B1               	movwf	Serial_Println_Int@val
  8125  0498                     l309:	
  8126                           ;serialv2.h: 78: while(!TXIF);
  8127                           
  8128  0498  1E0C               	btfss	12,4	;volatile
  8129  0499  2C98               	goto	l309
  8130                           
  8131                           ;serialv2.h: 79: TXREG = val/100+48;
  8132  049A  3064               	movlw	100
  8133  049B  00A9               	movwf	___awdiv@divisor
  8134  049C  01AA               	clrf	___awdiv@divisor+1
  8135  049D  0832               	movf	Serial_Println_Int@val+1,w
  8136  049E  00AC               	movwf	___awdiv@dividend+1
  8137  049F  0831               	movf	Serial_Println_Int@val,w
  8138  04A0  00AB               	movwf	___awdiv@dividend
  8139  04A1  25A0  120A  118A   	fcall	___awdiv
  8140  04A4  0829               	movf	?___awdiv,w
  8141  04A5  3E30               	addlw	48
  8142  04A6  0099               	movwf	25	;volatile
  8143                           
  8144                           ;serialv2.h: 80: _delay(10);
  8145  04A7  3003               	movlw	3
  8146  04A8  00B3               	movwf	??_Serial_Println_Int
  8147  04A9                     u6727:	
  8148  04A9  0BB3               	decfsz	??_Serial_Println_Int,f
  8149  04AA  2CA9               	goto	u6727
  8150                           
  8151                           ;serialv2.h: 81: val = val%100;
  8152  04AB  3064               	movlw	100
  8153  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  8154  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  8155  04AE  00A3               	movwf	___awmod@divisor
  8156  04AF  01A4               	clrf	___awmod@divisor+1
  8157  04B0  0832               	movf	Serial_Println_Int@val+1,w
  8158  04B1  00A6               	movwf	___awmod@dividend+1
  8159  04B2  0831               	movf	Serial_Println_Int@val,w
  8160  04B3  00A5               	movwf	___awmod@dividend
  8161  04B4  25E5  120A  118A   	fcall	___awmod
  8162  04B7  0824               	movf	?___awmod+1,w
  8163  04B8  00B2               	movwf	Serial_Println_Int@val+1
  8164  04B9  0823               	movf	?___awmod,w
  8165  04BA  00B1               	movwf	Serial_Println_Int@val
  8166  04BB                     l312:	
  8167                           ;serialv2.h: 83: while(!TXIF);
  8168                           
  8169  04BB  1E0C               	btfss	12,4	;volatile
  8170  04BC  2CBB               	goto	l312
  8171  04BD                     l3554:	
  8172                           
  8173                           ;serialv2.h: 84: TXREG = val/10+48;
  8174  04BD  300A               	movlw	10
  8175  04BE  00A9               	movwf	___awdiv@divisor
  8176  04BF  01AA               	clrf	___awdiv@divisor+1
  8177  04C0  0832               	movf	Serial_Println_Int@val+1,w
  8178  04C1  00AC               	movwf	___awdiv@dividend+1
  8179  04C2  0831               	movf	Serial_Println_Int@val,w
  8180  04C3  00AB               	movwf	___awdiv@dividend
  8181  04C4  25A0  120A  118A   	fcall	___awdiv
  8182  04C7  0829               	movf	?___awdiv,w
  8183  04C8  3E30               	addlw	48
  8184  04C9  0099               	movwf	25	;volatile
  8185                           
  8186                           ;serialv2.h: 85: _delay(10);
  8187  04CA  3003               	movlw	3
  8188  04CB  00B3               	movwf	??_Serial_Println_Int
  8189  04CC                     u6737:	
  8190  04CC  0BB3               	decfsz	??_Serial_Println_Int,f
  8191  04CD  2CCC               	goto	u6737
  8192                           
  8193                           ;serialv2.h: 86: val = val%10;
  8194  04CE  300A               	movlw	10
  8195  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  8196  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  8197  04D1  00A3               	movwf	___awmod@divisor
  8198  04D2  01A4               	clrf	___awmod@divisor+1
  8199  04D3  0832               	movf	Serial_Println_Int@val+1,w
  8200  04D4  00A6               	movwf	___awmod@dividend+1
  8201  04D5  0831               	movf	Serial_Println_Int@val,w
  8202  04D6  00A5               	movwf	___awmod@dividend
  8203  04D7  25E5  120A  118A   	fcall	___awmod
  8204  04DA  0824               	movf	?___awmod+1,w
  8205  04DB  00B2               	movwf	Serial_Println_Int@val+1
  8206  04DC  0823               	movf	?___awmod,w
  8207  04DD  00B1               	movwf	Serial_Println_Int@val
  8208                           
  8209                           ;serialv2.h: 87: }
  8210  04DE  2D80               	goto	l339
  8211  04DF                     l3560:	
  8212                           
  8213                           ;serialv2.h: 88: else if(val > 999){
  8214  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  8215  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  8216  04E1  0832               	movf	Serial_Println_Int@val+1,w
  8217  04E2  3A80               	xorlw	128
  8218  04E3  00FF               	movwf	127
  8219  04E4  3083               	movlw	131
  8220  04E5  027F               	subwf	127,w
  8221  04E6  1D03               	skipz
  8222  04E7  2CEA               	goto	u4375
  8223  04E8  30E8               	movlw	232
  8224  04E9  0231               	subwf	Serial_Println_Int@val,w
  8225  04EA                     u4375:	
  8226  04EA  1C03               	skipc
  8227  04EB  2D39               	goto	l3582
  8228  04EC                     l317:	
  8229  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  8230  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  8231  04EE  1E0C               	btfss	12,4	;volatile
  8232  04EF  2CEC               	goto	l317
  8233                           
  8234                           ;serialv2.h: 90: TXREG = val/1000+48;
  8235  04F0  30E8               	movlw	232
  8236  04F1  00A9               	movwf	___awdiv@divisor
  8237  04F2  3003               	movlw	3
  8238  04F3  00AA               	movwf	___awdiv@divisor+1
  8239  04F4  0832               	movf	Serial_Println_Int@val+1,w
  8240  04F5  00AC               	movwf	___awdiv@dividend+1
  8241  04F6  0831               	movf	Serial_Println_Int@val,w
  8242  04F7  00AB               	movwf	___awdiv@dividend
  8243  04F8  25A0  120A  118A   	fcall	___awdiv
  8244  04FB  0829               	movf	?___awdiv,w
  8245  04FC  3E30               	addlw	48
  8246  04FD  0099               	movwf	25	;volatile
  8247                           
  8248                           ;serialv2.h: 91: _delay(10);
  8249  04FE  3003               	movlw	3
  8250  04FF  00B3               	movwf	??_Serial_Println_Int
  8251  0500                     u6747:	
  8252  0500  0BB3               	decfsz	??_Serial_Println_Int,f
  8253  0501  2D00               	goto	u6747
  8254                           
  8255                           ;serialv2.h: 92: val = val%1000;
  8256  0502  30E8               	movlw	232
  8257  0503  1283               	bcf	3,5	;RP0=0, select bank0
  8258  0504  1303               	bcf	3,6	;RP1=0, select bank0
  8259  0505  00A3               	movwf	___awmod@divisor
  8260  0506  3003               	movlw	3
  8261  0507  00A4               	movwf	___awmod@divisor+1
  8262  0508  0832               	movf	Serial_Println_Int@val+1,w
  8263  0509  00A6               	movwf	___awmod@dividend+1
  8264  050A  0831               	movf	Serial_Println_Int@val,w
  8265  050B  00A5               	movwf	___awmod@dividend
  8266  050C  25E5  120A  118A   	fcall	___awmod
  8267  050F  0824               	movf	?___awmod+1,w
  8268  0510  00B2               	movwf	Serial_Println_Int@val+1
  8269  0511  0823               	movf	?___awmod,w
  8270  0512  00B1               	movwf	Serial_Println_Int@val
  8271  0513                     l320:	
  8272                           ;serialv2.h: 94: while(!TXIF);
  8273                           
  8274  0513  1E0C               	btfss	12,4	;volatile
  8275  0514  2D13               	goto	l320
  8276                           
  8277                           ;serialv2.h: 95: TXREG = val/100+48;
  8278  0515  3064               	movlw	100
  8279  0516  00A9               	movwf	___awdiv@divisor
  8280  0517  01AA               	clrf	___awdiv@divisor+1
  8281  0518  0832               	movf	Serial_Println_Int@val+1,w
  8282  0519  00AC               	movwf	___awdiv@dividend+1
  8283  051A  0831               	movf	Serial_Println_Int@val,w
  8284  051B  00AB               	movwf	___awdiv@dividend
  8285  051C  25A0  120A  118A   	fcall	___awdiv
  8286  051F  0829               	movf	?___awdiv,w
  8287  0520  3E30               	addlw	48
  8288  0521  0099               	movwf	25	;volatile
  8289                           
  8290                           ;serialv2.h: 96: _delay(10);
  8291  0522  3003               	movlw	3
  8292  0523  00B3               	movwf	??_Serial_Println_Int
  8293  0524                     u6757:	
  8294  0524  0BB3               	decfsz	??_Serial_Println_Int,f
  8295  0525  2D24               	goto	u6757
  8296                           
  8297                           ;serialv2.h: 97: val = val%100;
  8298  0526  3064               	movlw	100
  8299  0527  1283               	bcf	3,5	;RP0=0, select bank0
  8300  0528  1303               	bcf	3,6	;RP1=0, select bank0
  8301  0529  00A3               	movwf	___awmod@divisor
  8302  052A  01A4               	clrf	___awmod@divisor+1
  8303  052B  0832               	movf	Serial_Println_Int@val+1,w
  8304  052C  00A6               	movwf	___awmod@dividend+1
  8305  052D  0831               	movf	Serial_Println_Int@val,w
  8306  052E  00A5               	movwf	___awmod@dividend
  8307  052F  25E5  120A  118A   	fcall	___awmod
  8308  0532  0824               	movf	?___awmod+1,w
  8309  0533  00B2               	movwf	Serial_Println_Int@val+1
  8310  0534  0823               	movf	?___awmod,w
  8311  0535  00B1               	movwf	Serial_Println_Int@val
  8312  0536                     l323:	
  8313                           ;serialv2.h: 99: while(!TXIF);
  8314                           
  8315  0536  1A0C               	btfsc	12,4	;volatile
  8316  0537  2CBD               	goto	l3554
  8317  0538  2D36               	goto	l323
  8318  0539                     l3582:	
  8319                           
  8320                           ;serialv2.h: 104: else if(val > 99){
  8321  0539  1283               	bcf	3,5	;RP0=0, select bank0
  8322  053A  1303               	bcf	3,6	;RP1=0, select bank0
  8323  053B  0832               	movf	Serial_Println_Int@val+1,w
  8324  053C  3A80               	xorlw	128
  8325  053D  00FF               	movwf	127
  8326  053E  3080               	movlw	128
  8327  053F  027F               	subwf	127,w
  8328  0540  1D03               	skipz
  8329  0541  2D44               	goto	u4415
  8330  0542  3064               	movlw	100
  8331  0543  0231               	subwf	Serial_Println_Int@val,w
  8332  0544                     u4415:	
  8333  0544  1C03               	skipc
  8334  0545  2D6E               	goto	l3598
  8335  0546                     l328:	
  8336  0546  1283               	bcf	3,5	;RP0=0, select bank0
  8337  0547  1303               	bcf	3,6	;RP1=0, select bank0
  8338  0548  1E0C               	btfss	12,4	;volatile
  8339  0549  2D46               	goto	l328
  8340                           
  8341                           ;serialv2.h: 106: TXREG = val/100+48;
  8342  054A  3064               	movlw	100
  8343  054B  00A9               	movwf	___awdiv@divisor
  8344  054C  01AA               	clrf	___awdiv@divisor+1
  8345  054D  0832               	movf	Serial_Println_Int@val+1,w
  8346  054E  00AC               	movwf	___awdiv@dividend+1
  8347  054F  0831               	movf	Serial_Println_Int@val,w
  8348  0550  00AB               	movwf	___awdiv@dividend
  8349  0551  25A0  120A  118A   	fcall	___awdiv
  8350  0554  0829               	movf	?___awdiv,w
  8351  0555  3E30               	addlw	48
  8352  0556  0099               	movwf	25	;volatile
  8353                           
  8354                           ;serialv2.h: 107: _delay(10);
  8355  0557  3003               	movlw	3
  8356  0558  00B3               	movwf	??_Serial_Println_Int
  8357  0559                     u6767:	
  8358  0559  0BB3               	decfsz	??_Serial_Println_Int,f
  8359  055A  2D59               	goto	u6767
  8360                           
  8361                           ;serialv2.h: 108: val = val%100;
  8362  055B  3064               	movlw	100
  8363  055C  1283               	bcf	3,5	;RP0=0, select bank0
  8364  055D  1303               	bcf	3,6	;RP1=0, select bank0
  8365  055E  00A3               	movwf	___awmod@divisor
  8366  055F  01A4               	clrf	___awmod@divisor+1
  8367  0560  0832               	movf	Serial_Println_Int@val+1,w
  8368  0561  00A6               	movwf	___awmod@dividend+1
  8369  0562  0831               	movf	Serial_Println_Int@val,w
  8370  0563  00A5               	movwf	___awmod@dividend
  8371  0564  25E5  120A  118A   	fcall	___awmod
  8372  0567  0824               	movf	?___awmod+1,w
  8373  0568  00B2               	movwf	Serial_Println_Int@val+1
  8374  0569  0823               	movf	?___awmod,w
  8375  056A  00B1               	movwf	Serial_Println_Int@val
  8376  056B                     l331:	
  8377                           ;serialv2.h: 110: while(!TXIF);
  8378                           
  8379  056B  1A0C               	btfsc	12,4	;volatile
  8380  056C  2CBD               	goto	l3554
  8381  056D  2D6B               	goto	l331
  8382  056E                     l3598:	
  8383                           
  8384                           ;serialv2.h: 115: else if(val > 9){
  8385  056E  1283               	bcf	3,5	;RP0=0, select bank0
  8386  056F  1303               	bcf	3,6	;RP1=0, select bank0
  8387  0570  0832               	movf	Serial_Println_Int@val+1,w
  8388  0571  3A80               	xorlw	128
  8389  0572  00FF               	movwf	127
  8390  0573  3080               	movlw	128
  8391  0574  027F               	subwf	127,w
  8392  0575  1D03               	skipz
  8393  0576  2D79               	goto	u4445
  8394  0577  300A               	movlw	10
  8395  0578  0231               	subwf	Serial_Println_Int@val,w
  8396  0579                     u4445:	
  8397  0579  1C03               	skipc
  8398  057A  2D80               	goto	l339
  8399  057B                     l336:	
  8400  057B  1283               	bcf	3,5	;RP0=0, select bank0
  8401  057C  1303               	bcf	3,6	;RP1=0, select bank0
  8402  057D  1A0C               	btfsc	12,4	;volatile
  8403  057E  2CBD               	goto	l3554
  8404  057F  2D7B               	goto	l336
  8405  0580                     l339:	
  8406  0580  1283               	bcf	3,5	;RP0=0, select bank0
  8407  0581  1303               	bcf	3,6	;RP1=0, select bank0
  8408  0582  1E0C               	btfss	12,4	;volatile
  8409  0583  2D80               	goto	l339
  8410                           
  8411                           ;serialv2.h: 122: TXREG = val+48;
  8412  0584  0831               	movf	Serial_Println_Int@val,w
  8413  0585  3E30               	addlw	48
  8414  0586  0099               	movwf	25	;volatile
  8415                           
  8416                           ;serialv2.h: 123: _delay(10);
  8417  0587  3003               	movlw	3
  8418  0588  00B3               	movwf	??_Serial_Println_Int
  8419  0589                     u6777:	
  8420  0589  0BB3               	decfsz	??_Serial_Println_Int,f
  8421  058A  2D89               	goto	u6777
  8422  058B                     l342:	
  8423                           ;serialv2.h: 124: while(!TXIF);
  8424                           
  8425  058B  1283               	bcf	3,5	;RP0=0, select bank0
  8426  058C  1303               	bcf	3,6	;RP1=0, select bank0
  8427  058D  1E0C               	btfss	12,4	;volatile
  8428  058E  2D8B               	goto	l342
  8429                           
  8430                           ;serialv2.h: 125: TXREG = 13;
  8431  058F  300D               	movlw	13
  8432  0590  0099               	movwf	25	;volatile
  8433                           
  8434                           ;serialv2.h: 126: _delay(10);
  8435  0591  3003               	movlw	3
  8436  0592  00B3               	movwf	??_Serial_Println_Int
  8437  0593                     u6787:	
  8438  0593  0BB3               	decfsz	??_Serial_Println_Int,f
  8439  0594  2D93               	goto	u6787
  8440  0595                     l345:	
  8441                           ;serialv2.h: 127: while(!TXIF);
  8442                           
  8443  0595  1283               	bcf	3,5	;RP0=0, select bank0
  8444  0596  1303               	bcf	3,6	;RP1=0, select bank0
  8445  0597  1E0C               	btfss	12,4	;volatile
  8446  0598  2D95               	goto	l345
  8447                           
  8448                           ;serialv2.h: 128: TXREG = 10;
  8449  0599  300A               	movlw	10
  8450  059A  0099               	movwf	25	;volatile
  8451                           
  8452                           ;serialv2.h: 129: _delay(10);
  8453  059B  3003               	movlw	3
  8454  059C  00B3               	movwf	??_Serial_Println_Int
  8455  059D                     u6797:	
  8456  059D  0BB3               	decfsz	??_Serial_Println_Int,f
  8457  059E  2D9D               	goto	u6797
  8458  059F  0008               	return
  8459  05A0                     __end_of_Serial_Println_Int:	
  8460  05A0                     __ptext35:	
  8461 ;; *************** function ___awdiv *****************
  8462 ;; Defined at:
  8463 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;  divisor         2    9[BANK0 ] int 
  8466 ;;  dividend        2   11[BANK0 ] int 
  8467 ;; Auto vars:     Size  Location     Type
  8468 ;;  quotient        2   15[BANK0 ] int 
  8469 ;;  sign            1   14[BANK0 ] unsigned char 
  8470 ;;  counter         1   13[BANK0 ] unsigned char 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  2    9[BANK0 ] int 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2, status,0
  8475 ;; Tracked objects:
  8476 ;;		On entry : 300/0
  8477 ;;		On exit  : 300/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8480 ;;      Params:         0       4       0       0       0
  8481 ;;      Locals:         0       4       0       0       0
  8482 ;;      Temps:          0       0       0       0       0
  8483 ;;      Totals:         0       8       0       0       0
  8484 ;;Total ram usage:        8 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    5
  8487 ;; This function calls:
  8488 ;;		Nothing
  8489 ;; This function is called by:
  8490 ;;		_Serial_Println_Int
  8491 ;;		_Serial_Print_Int
  8492 ;;		_a2d_read
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function ___awdiv
  8498  05A0                     ___awdiv:	
  8499  05A0                     l3376:	
  8500                           ;incstack = 0
  8501                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8502                           
  8503  05A0  01AE               	clrf	___awdiv@sign
  8504  05A1  1FAA               	btfss	___awdiv@divisor+1,7
  8505  05A2  2DAA               	goto	l3384
  8506  05A3  09A9               	comf	___awdiv@divisor,f
  8507  05A4  09AA               	comf	___awdiv@divisor+1,f
  8508  05A5  0AA9               	incf	___awdiv@divisor,f
  8509  05A6  1903               	skipnz
  8510  05A7  0AAA               	incf	___awdiv@divisor+1,f
  8511  05A8  01AE               	clrf	___awdiv@sign
  8512  05A9  0AAE               	incf	___awdiv@sign,f
  8513  05AA                     l3384:	
  8514  05AA  1FAC               	btfss	___awdiv@dividend+1,7
  8515  05AB  2DB3               	goto	l3390
  8516  05AC  09AB               	comf	___awdiv@dividend,f
  8517  05AD  09AC               	comf	___awdiv@dividend+1,f
  8518  05AE  0AAB               	incf	___awdiv@dividend,f
  8519  05AF  1903               	skipnz
  8520  05B0  0AAC               	incf	___awdiv@dividend+1,f
  8521  05B1  3001               	movlw	1
  8522  05B2  06AE               	xorwf	___awdiv@sign,f
  8523  05B3                     l3390:	
  8524  05B3  01AF               	clrf	___awdiv@quotient
  8525  05B4  01B0               	clrf	___awdiv@quotient+1
  8526  05B5  0829               	movf	___awdiv@divisor,w
  8527  05B6  042A               	iorwf	___awdiv@divisor+1,w
  8528  05B7  1903               	btfsc	3,2
  8529  05B8  2DD8               	goto	l3412
  8530  05B9  01AD               	clrf	___awdiv@counter
  8531  05BA                     L33:	
  8532  05BA  0AAD               	incf	___awdiv@counter,f
  8533  05BB  1BAA               	btfsc	___awdiv@divisor+1,7
  8534  05BC  2DC1               	goto	l3400
  8535  05BD  1003               	clrc
  8536  05BE  0DA9               	rlf	___awdiv@divisor,f
  8537  05BF  0DAA               	rlf	___awdiv@divisor+1,f
  8538  05C0  2DBA               	goto	L33
  8539  05C1                     l3400:	
  8540  05C1  1003               	clrc
  8541  05C2  0DAF               	rlf	___awdiv@quotient,f
  8542  05C3  0DB0               	rlf	___awdiv@quotient+1,f
  8543  05C4  082A               	movf	___awdiv@divisor+1,w
  8544  05C5  022C               	subwf	___awdiv@dividend+1,w
  8545  05C6  1D03               	skipz
  8546  05C7  2DCA               	goto	u4155
  8547  05C8  0829               	movf	___awdiv@divisor,w
  8548  05C9  022B               	subwf	___awdiv@dividend,w
  8549  05CA                     u4155:	
  8550  05CA  1C03               	skipc
  8551  05CB  2DD4               	goto	L34
  8552  05CC  0829               	movf	___awdiv@divisor,w
  8553  05CD  02AB               	subwf	___awdiv@dividend,f
  8554  05CE  082A               	movf	___awdiv@divisor+1,w
  8555  05CF  1C03               	skipc
  8556  05D0  03AC               	decf	___awdiv@dividend+1,f
  8557  05D1  02AC               	subwf	___awdiv@dividend+1,f
  8558  05D2  142F               	bsf	___awdiv@quotient,0
  8559  05D3  1003               	clrc
  8560  05D4                     L34:	
  8561  05D4  0CAA               	rrf	___awdiv@divisor+1,f
  8562  05D5  0CA9               	rrf	___awdiv@divisor,f
  8563  05D6  0BAD               	decfsz	___awdiv@counter,f
  8564  05D7  2DC1               	goto	l3400
  8565  05D8                     l3412:	
  8566  05D8  082E               	movf	___awdiv@sign,w
  8567  05D9  1903               	btfsc	3,2
  8568  05DA  2DE0               	goto	l3416
  8569  05DB  09AF               	comf	___awdiv@quotient,f
  8570  05DC  09B0               	comf	___awdiv@quotient+1,f
  8571  05DD  0AAF               	incf	___awdiv@quotient,f
  8572  05DE  1903               	skipnz
  8573  05DF  0AB0               	incf	___awdiv@quotient+1,f
  8574  05E0                     l3416:	
  8575  05E0  0830               	movf	___awdiv@quotient+1,w
  8576  05E1  00AA               	movwf	?___awdiv+1
  8577  05E2  082F               	movf	___awdiv@quotient,w
  8578  05E3  00A9               	movwf	?___awdiv
  8579  05E4  0008               	return
  8580  05E5                     __end_of___awdiv:	
  8581  05E5                     __ptext34:	
  8582 ;; *************** function ___awmod *****************
  8583 ;; Defined at:
  8584 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  divisor         2    3[BANK0 ] int 
  8587 ;;  dividend        2    5[BANK0 ] int 
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;  sign            1    8[BANK0 ] unsigned char 
  8590 ;;  counter         1    7[BANK0 ] unsigned char 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;                  2    3[BANK0 ] int 
  8593 ;; Registers used:
  8594 ;;		wreg, status,2, status,0
  8595 ;; Tracked objects:
  8596 ;;		On entry : 300/0
  8597 ;;		On exit  : 300/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8600 ;;      Params:         0       4       0       0       0
  8601 ;;      Locals:         0       2       0       0       0
  8602 ;;      Temps:          0       0       0       0       0
  8603 ;;      Totals:         0       6       0       0       0
  8604 ;;Total ram usage:        6 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:    5
  8607 ;; This function calls:
  8608 ;;		Nothing
  8609 ;; This function is called by:
  8610 ;;		_Serial_Println_Int
  8611 ;;		_Serial_Print_Int
  8612 ;; This function uses a non-reentrant model
  8613 ;;
  8614                           
  8615                           
  8616                           ;psect for function ___awmod
  8617  05E5                     ___awmod:	
  8618                           
  8619                           ;incstack = 0
  8620                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8621  05E5  01A8               	clrf	___awmod@sign
  8622  05E6  1FA6               	btfss	___awmod@dividend+1,7
  8623  05E7  2DEF               	goto	l3428
  8624  05E8  09A5               	comf	___awmod@dividend,f
  8625  05E9  09A6               	comf	___awmod@dividend+1,f
  8626  05EA  0AA5               	incf	___awmod@dividend,f
  8627  05EB  1903               	skipnz
  8628  05EC  0AA6               	incf	___awmod@dividend+1,f
  8629  05ED  01A8               	clrf	___awmod@sign
  8630  05EE  0AA8               	incf	___awmod@sign,f
  8631  05EF                     l3428:	
  8632  05EF  1FA4               	btfss	___awmod@divisor+1,7
  8633  05F0  2DF6               	goto	l3432
  8634  05F1  09A3               	comf	___awmod@divisor,f
  8635  05F2  09A4               	comf	___awmod@divisor+1,f
  8636  05F3  0AA3               	incf	___awmod@divisor,f
  8637  05F4  1903               	skipnz
  8638  05F5  0AA4               	incf	___awmod@divisor+1,f
  8639  05F6                     l3432:	
  8640  05F6  0823               	movf	___awmod@divisor,w
  8641  05F7  0424               	iorwf	___awmod@divisor+1,w
  8642  05F8  1903               	btfsc	3,2
  8643  05F9  2E15               	goto	l3448
  8644  05FA  01A7               	clrf	___awmod@counter
  8645  05FB                     L31:	
  8646  05FB  0AA7               	incf	___awmod@counter,f
  8647  05FC  1BA4               	btfsc	___awmod@divisor+1,7
  8648  05FD  2E02               	goto	l3440
  8649  05FE  1003               	clrc
  8650  05FF  0DA3               	rlf	___awmod@divisor,f
  8651  0600  0DA4               	rlf	___awmod@divisor+1,f
  8652  0601  2DFB               	goto	L31
  8653  0602                     l3440:	
  8654  0602  0824               	movf	___awmod@divisor+1,w
  8655  0603  0226               	subwf	___awmod@dividend+1,w
  8656  0604  1D03               	skipz
  8657  0605  2E08               	goto	u4225
  8658  0606  0823               	movf	___awmod@divisor,w
  8659  0607  0225               	subwf	___awmod@dividend,w
  8660  0608                     u4225:	
  8661  0608  1C03               	skipc
  8662  0609  2E11               	goto	L32
  8663  060A  0823               	movf	___awmod@divisor,w
  8664  060B  02A5               	subwf	___awmod@dividend,f
  8665  060C  0824               	movf	___awmod@divisor+1,w
  8666  060D  1C03               	skipc
  8667  060E  03A6               	decf	___awmod@dividend+1,f
  8668  060F  02A6               	subwf	___awmod@dividend+1,f
  8669  0610  1003               	clrc
  8670  0611                     L32:	
  8671  0611  0CA4               	rrf	___awmod@divisor+1,f
  8672  0612  0CA3               	rrf	___awmod@divisor,f
  8673  0613  0BA7               	decfsz	___awmod@counter,f
  8674  0614  2E02               	goto	l3440
  8675  0615                     l3448:	
  8676  0615  0828               	movf	___awmod@sign,w
  8677  0616  1903               	btfsc	3,2
  8678  0617  2E1D               	goto	l3452
  8679  0618  09A5               	comf	___awmod@dividend,f
  8680  0619  09A6               	comf	___awmod@dividend+1,f
  8681  061A  0AA5               	incf	___awmod@dividend,f
  8682  061B  1903               	skipnz
  8683  061C  0AA6               	incf	___awmod@dividend+1,f
  8684  061D                     l3452:	
  8685  061D  0826               	movf	___awmod@dividend+1,w
  8686  061E  00A4               	movwf	?___awmod+1
  8687  061F  0825               	movf	___awmod@dividend,w
  8688  0620  00A3               	movwf	?___awmod
  8689  0621  0008               	return
  8690  0622                     __end_of___awmod:	
  8691  0622                     __ptext14:	
  8692 ;; *************** function ___lwtoft *****************
  8693 ;; Defined at:
  8694 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  c               2   11[BANK0 ] unsigned int 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;		None
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  3   11[BANK0 ] float 
  8701 ;; Registers used:
  8702 ;;		wreg, status,2, status,0, pclath, cstack
  8703 ;; Tracked objects:
  8704 ;;		On entry : 300/0
  8705 ;;		On exit  : 300/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8708 ;;      Params:         0       3       0       0       0
  8709 ;;      Locals:         0       0       0       0       0
  8710 ;;      Temps:          0       0       0       0       0
  8711 ;;      Totals:         0       3       0       0       0
  8712 ;;Total ram usage:        3 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    6
  8715 ;; This function calls:
  8716 ;;		___ftpack
  8717 ;; This function is called by:
  8718 ;;		_a2d_read
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           
  8723                           ;psect for function ___lwtoft
  8724  0622                     ___lwtoft:	
  8725                           
  8726                           ;incstack = 0
  8727                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  8728  0622  082B               	movf	___lwtoft@c,w
  8729  0623  00A3               	movwf	___ftpack@arg
  8730  0624  082C               	movf	___lwtoft@c+1,w
  8731  0625  00A4               	movwf	___ftpack@arg+1
  8732  0626  308E               	movlw	142
  8733  0627  01A5               	clrf	___ftpack@arg+2
  8734  0628  00A6               	movwf	___ftpack@exp
  8735  0629  01A7               	clrf	___ftpack@sign
  8736  062A  26C6               	fcall	___ftpack
  8737  062B  0823               	movf	?___ftpack,w
  8738  062C  00AB               	movwf	?___lwtoft
  8739  062D  0824               	movf	?___ftpack+1,w
  8740  062E  00AC               	movwf	?___lwtoft+1
  8741  062F  0825               	movf	?___ftpack+2,w
  8742  0630  00AD               	movwf	?___lwtoft+2
  8743  0631  0008               	return
  8744  0632                     __end_of___lwtoft:	
  8745  0632                     __ptext13:	
  8746 ;; *************** function ___wmul *****************
  8747 ;; Defined at:
  8748 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;  multiplier      2    3[BANK0 ] unsigned int 
  8751 ;;  multiplicand    2    5[BANK0 ] unsigned int 
  8752 ;; Auto vars:     Size  Location     Type
  8753 ;;  product         2    7[BANK0 ] unsigned int 
  8754 ;; Return value:  Size  Location     Type
  8755 ;;                  2    3[BANK0 ] unsigned int 
  8756 ;; Registers used:
  8757 ;;		wreg, status,2, status,0
  8758 ;; Tracked objects:
  8759 ;;		On entry : 300/0
  8760 ;;		On exit  : 300/0
  8761 ;;		Unchanged: 0/0
  8762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8763 ;;      Params:         0       4       0       0       0
  8764 ;;      Locals:         0       2       0       0       0
  8765 ;;      Temps:          0       0       0       0       0
  8766 ;;      Totals:         0       6       0       0       0
  8767 ;;Total ram usage:        6 bytes
  8768 ;; Hardware stack levels used:    1
  8769 ;; Hardware stack levels required when called:    5
  8770 ;; This function calls:
  8771 ;;		Nothing
  8772 ;; This function is called by:
  8773 ;;		_a2d_read
  8774 ;;		_printf
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           
  8779                           ;psect for function ___wmul
  8780  0632                     ___wmul:	
  8781                           
  8782                           ;incstack = 0
  8783                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8784  0632  01A7               	clrf	___wmul@product
  8785  0633  01A8               	clrf	___wmul@product+1
  8786  0634                     l3834:	
  8787  0634  1C23               	btfss	___wmul@multiplier,0
  8788  0635  2E3C               	goto	l3838
  8789  0636  0825               	movf	___wmul@multiplicand,w
  8790  0637  07A7               	addwf	___wmul@product,f
  8791  0638  1803               	skipnc
  8792  0639  0AA8               	incf	___wmul@product+1,f
  8793  063A  0826               	movf	___wmul@multiplicand+1,w
  8794  063B  07A8               	addwf	___wmul@product+1,f
  8795  063C                     l3838:	
  8796  063C  1003               	clrc
  8797  063D  0DA5               	rlf	___wmul@multiplicand,f
  8798  063E  0DA6               	rlf	___wmul@multiplicand+1,f
  8799  063F  1003               	clrc
  8800  0640  0CA4               	rrf	___wmul@multiplier+1,f
  8801  0641  0CA3               	rrf	___wmul@multiplier,f
  8802  0642  0823               	movf	___wmul@multiplier,w
  8803  0643  0424               	iorwf	___wmul@multiplier+1,w
  8804  0644  1D03               	btfss	3,2
  8805  0645  2E34               	goto	l3834
  8806  0646  0828               	movf	___wmul@product+1,w
  8807  0647  00A4               	movwf	?___wmul+1
  8808  0648  0827               	movf	___wmul@product,w
  8809  0649  00A3               	movwf	?___wmul
  8810  064A  0008               	return
  8811  064B                     __end_of___wmul:	
  8812  064B                     __ptext16:	
  8813 ;; *************** function ___ftmul *****************
  8814 ;; Defined at:
  8815 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  f1              3   14[BANK0 ] float 
  8818 ;;  f2              3   17[BANK0 ] float 
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;  f3_as_produc    3   24[BANK0 ] unsigned um
  8821 ;;  sign            1   28[BANK0 ] unsigned char 
  8822 ;;  cntr            1   27[BANK0 ] unsigned char 
  8823 ;;  exp             1   23[BANK0 ] unsigned char 
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  3   14[BANK0 ] float 
  8826 ;; Registers used:
  8827 ;;		wreg, status,2, status,0, pclath, cstack
  8828 ;; Tracked objects:
  8829 ;;		On entry : 300/0
  8830 ;;		On exit  : 300/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8833 ;;      Params:         0       6       0       0       0
  8834 ;;      Locals:         0       6       0       0       0
  8835 ;;      Temps:          0       3       0       0       0
  8836 ;;      Totals:         0      15       0       0       0
  8837 ;;Total ram usage:       15 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    6
  8840 ;; This function calls:
  8841 ;;		___ftpack
  8842 ;; This function is called by:
  8843 ;;		_a2d_read
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           
  8848                           ;psect for function ___ftmul
  8849  064B                     ___ftmul:	
  8850                           
  8851                           ;incstack = 0
  8852                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8853  064B  082E               	movf	___ftmul@f1,w
  8854  064C  00B4               	movwf	??___ftmul
  8855  064D  082F               	movf	___ftmul@f1+1,w
  8856  064E  00B5               	movwf	??___ftmul+1
  8857  064F  0830               	movf	___ftmul@f1+2,w
  8858  0650  00B6               	movwf	??___ftmul+2
  8859  0651  1003               	clrc
  8860  0652  0D35               	rlf	??___ftmul+1,w
  8861  0653  0D36               	rlf	??___ftmul+2,w
  8862  0654  00B7               	movwf	___ftmul@exp
  8863  0655  0837               	movf	___ftmul@exp,w
  8864  0656  1D03               	btfss	3,2
  8865  0657  2E5C               	goto	l3866
  8866  0658  01AE               	clrf	?___ftmul
  8867  0659  01AF               	clrf	?___ftmul+1
  8868  065A  01B0               	clrf	?___ftmul+2
  8869  065B  0008               	return
  8870  065C                     l3866:	
  8871  065C  0831               	movf	___ftmul@f2,w
  8872  065D  00B4               	movwf	??___ftmul
  8873  065E  0832               	movf	___ftmul@f2+1,w
  8874  065F  00B5               	movwf	??___ftmul+1
  8875  0660  0833               	movf	___ftmul@f2+2,w
  8876  0661  00B6               	movwf	??___ftmul+2
  8877  0662  1003               	clrc
  8878  0663  0D35               	rlf	??___ftmul+1,w
  8879  0664  0D36               	rlf	??___ftmul+2,w
  8880  0665  00BC               	movwf	___ftmul@sign
  8881  0666  083C               	movf	___ftmul@sign,w
  8882  0667  1D03               	btfss	3,2
  8883  0668  2E6D               	goto	l3870
  8884  0669  01AE               	clrf	?___ftmul
  8885  066A  01AF               	clrf	?___ftmul+1
  8886  066B  01B0               	clrf	?___ftmul+2
  8887  066C  0008               	return
  8888  066D                     l3870:	
  8889  066D  083C               	movf	___ftmul@sign,w
  8890  066E  3E7B               	addlw	123
  8891  066F  07B7               	addwf	___ftmul@exp,f
  8892  0670  0830               	movf	___ftmul@f1+2,w
  8893  0671  00BC               	movwf	___ftmul@sign
  8894  0672  0833               	movf	___ftmul@f2+2,w
  8895  0673  06BC               	xorwf	___ftmul@sign,f
  8896  0674  3080               	movlw	128
  8897  0675  05BC               	andwf	___ftmul@sign,f
  8898  0676  3007               	movlw	7
  8899  0677  17AF               	bsf	___ftmul@f1+1,7
  8900  0678  17B2               	bsf	___ftmul@f2+1,7
  8901  0679  01B3               	clrf	___ftmul@f2+2
  8902  067A  01B8               	clrf	___ftmul@f3_as_product
  8903  067B  01B9               	clrf	___ftmul@f3_as_product+1
  8904  067C  01BA               	clrf	___ftmul@f3_as_product+2
  8905  067D  00BB               	movwf	___ftmul@cntr
  8906  067E                     l3888:	
  8907  067E  1C2E               	btfss	___ftmul@f1,0
  8908  067F  2E8E               	goto	l3892
  8909  0680  0831               	movf	___ftmul@f2,w
  8910  0681  07B8               	addwf	___ftmul@f3_as_product,f
  8911  0682  0832               	movf	___ftmul@f2+1,w
  8912  0683  1103               	clrz
  8913  0684  1803               	skipnc
  8914  0685  0A32               	incf	___ftmul@f2+1,w
  8915  0686  1D03               	btfss	3,2
  8916  0687  07B9               	addwf	___ftmul@f3_as_product+1,f
  8917  0688  0833               	movf	___ftmul@f2+2,w
  8918  0689  1103               	clrz
  8919  068A  1803               	skipnc
  8920  068B  0A33               	incf	___ftmul@f2+2,w
  8921  068C  1D03               	btfss	3,2
  8922  068D  07BA               	addwf	___ftmul@f3_as_product+2,f
  8923  068E                     l3892:	
  8924  068E  1003               	clrc
  8925  068F  0CB0               	rrf	___ftmul@f1+2,f
  8926  0690  0CAF               	rrf	___ftmul@f1+1,f
  8927  0691  0CAE               	rrf	___ftmul@f1,f
  8928  0692  1003               	clrc
  8929  0693  0DB1               	rlf	___ftmul@f2,f
  8930  0694  0DB2               	rlf	___ftmul@f2+1,f
  8931  0695  0DB3               	rlf	___ftmul@f2+2,f
  8932  0696  0BBB               	decfsz	___ftmul@cntr,f
  8933  0697  2E7E               	goto	l3888
  8934  0698  3009               	movlw	9
  8935  0699  00BB               	movwf	___ftmul@cntr
  8936  069A                     l3900:	
  8937  069A  1C2E               	btfss	___ftmul@f1,0
  8938  069B  2EAA               	goto	l3904
  8939  069C  0831               	movf	___ftmul@f2,w
  8940  069D  07B8               	addwf	___ftmul@f3_as_product,f
  8941  069E  0832               	movf	___ftmul@f2+1,w
  8942  069F  1103               	clrz
  8943  06A0  1803               	skipnc
  8944  06A1  0A32               	incf	___ftmul@f2+1,w
  8945  06A2  1D03               	btfss	3,2
  8946  06A3  07B9               	addwf	___ftmul@f3_as_product+1,f
  8947  06A4  0833               	movf	___ftmul@f2+2,w
  8948  06A5  1103               	clrz
  8949  06A6  1803               	skipnc
  8950  06A7  0A33               	incf	___ftmul@f2+2,w
  8951  06A8  1D03               	btfss	3,2
  8952  06A9  07BA               	addwf	___ftmul@f3_as_product+2,f
  8953  06AA                     l3904:	
  8954  06AA  1003               	clrc
  8955  06AB  0CB0               	rrf	___ftmul@f1+2,f
  8956  06AC  0CAF               	rrf	___ftmul@f1+1,f
  8957  06AD  0CAE               	rrf	___ftmul@f1,f
  8958  06AE  1003               	clrc
  8959  06AF  0CBA               	rrf	___ftmul@f3_as_product+2,f
  8960  06B0  0CB9               	rrf	___ftmul@f3_as_product+1,f
  8961  06B1  0CB8               	rrf	___ftmul@f3_as_product,f
  8962  06B2  0BBB               	decfsz	___ftmul@cntr,f
  8963  06B3  2E9A               	goto	l3900
  8964  06B4  0838               	movf	___ftmul@f3_as_product,w
  8965  06B5  00A3               	movwf	___ftpack@arg
  8966  06B6  0839               	movf	___ftmul@f3_as_product+1,w
  8967  06B7  00A4               	movwf	___ftpack@arg+1
  8968  06B8  083A               	movf	___ftmul@f3_as_product+2,w
  8969  06B9  00A5               	movwf	___ftpack@arg+2
  8970  06BA  0837               	movf	___ftmul@exp,w
  8971  06BB  00A6               	movwf	___ftpack@exp
  8972  06BC  083C               	movf	___ftmul@sign,w
  8973  06BD  00A7               	movwf	___ftpack@sign
  8974  06BE  26C6               	fcall	___ftpack
  8975  06BF  0823               	movf	?___ftpack,w
  8976  06C0  00AE               	movwf	?___ftmul
  8977  06C1  0824               	movf	?___ftpack+1,w
  8978  06C2  00AF               	movwf	?___ftmul+1
  8979  06C3  0825               	movf	?___ftpack+2,w
  8980  06C4  00B0               	movwf	?___ftmul+2
  8981  06C5  0008               	return
  8982  06C6                     __end_of___ftmul:	
  8983  06C6                     __ptext17:	
  8984 ;; *************** function ___ftpack *****************
  8985 ;; Defined at:
  8986 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;  arg             3    3[BANK0 ] unsigned um
  8989 ;;  exp             1    6[BANK0 ] unsigned char 
  8990 ;;  sign            1    7[BANK0 ] unsigned char 
  8991 ;; Auto vars:     Size  Location     Type
  8992 ;;		None
  8993 ;; Return value:  Size  Location     Type
  8994 ;;                  3    3[BANK0 ] float 
  8995 ;; Registers used:
  8996 ;;		wreg, status,2, status,0
  8997 ;; Tracked objects:
  8998 ;;		On entry : 300/0
  8999 ;;		On exit  : 300/0
  9000 ;;		Unchanged: 0/0
  9001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9002 ;;      Params:         0       5       0       0       0
  9003 ;;      Locals:         0       0       0       0       0
  9004 ;;      Temps:          0       3       0       0       0
  9005 ;;      Totals:         0       8       0       0       0
  9006 ;;Total ram usage:        8 bytes
  9007 ;; Hardware stack levels used:    1
  9008 ;; Hardware stack levels required when called:    5
  9009 ;; This function calls:
  9010 ;;		Nothing
  9011 ;; This function is called by:
  9012 ;;		___ftmul
  9013 ;;		___lwtoft
  9014 ;; This function uses a non-reentrant model
  9015 ;;
  9016                           
  9017                           
  9018                           ;psect for function ___ftpack
  9019  06C6                     ___ftpack:	
  9020                           
  9021                           ;incstack = 0
  9022                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9023  06C6  0826               	movf	___ftpack@exp,w
  9024  06C7  1903               	btfsc	3,2
  9025  06C8  2ECE               	goto	l1097
  9026  06C9  0825               	movf	___ftpack@arg+2,w
  9027  06CA  0424               	iorwf	___ftpack@arg+1,w
  9028  06CB  0423               	iorwf	___ftpack@arg,w
  9029  06CC  1D03               	skipz
  9030  06CD  2ED7               	goto	l3358
  9031  06CE                     l1097:	
  9032  06CE  01A3               	clrf	?___ftpack
  9033  06CF  01A4               	clrf	?___ftpack+1
  9034  06D0  01A5               	clrf	?___ftpack+2
  9035  06D1  0008               	return
  9036  06D2                     l3356:	
  9037  06D2  0AA6               	incf	___ftpack@exp,f
  9038  06D3  1003               	clrc
  9039  06D4  0CA5               	rrf	___ftpack@arg+2,f
  9040  06D5  0CA4               	rrf	___ftpack@arg+1,f
  9041  06D6  0CA3               	rrf	___ftpack@arg,f
  9042  06D7                     l3358:	
  9043  06D7  30FE               	movlw	254
  9044  06D8  0525               	andwf	___ftpack@arg+2,w
  9045  06D9  1903               	btfsc	3,2
  9046  06DA  2EE6               	goto	l3362
  9047  06DB  2ED2               	goto	l3356
  9048  06DC                     l3360:	
  9049  06DC  0AA6               	incf	___ftpack@exp,f
  9050  06DD  0AA3               	incf	___ftpack@arg,f
  9051  06DE  1903               	skipnz
  9052  06DF  0AA4               	incf	___ftpack@arg+1,f
  9053  06E0  1903               	skipnz
  9054  06E1  0AA5               	incf	___ftpack@arg+2,f
  9055  06E2  1003               	clrc
  9056  06E3  0CA5               	rrf	___ftpack@arg+2,f
  9057  06E4  0CA4               	rrf	___ftpack@arg+1,f
  9058  06E5  0CA3               	rrf	___ftpack@arg,f
  9059  06E6                     l3362:	
  9060  06E6  30FF               	movlw	255
  9061  06E7  0525               	andwf	___ftpack@arg+2,w
  9062  06E8  1903               	btfsc	3,2
  9063  06E9  2EF4               	goto	l3366
  9064  06EA  2EDC               	goto	l3360
  9065  06EB                     l3368:	
  9066  06EB  3002               	movlw	2
  9067  06EC  0226               	subwf	___ftpack@exp,w
  9068  06ED  1C03               	btfss	3,0
  9069  06EE  2EF6               	goto	l1109
  9070  06EF  03A6               	decf	___ftpack@exp,f
  9071  06F0  1003               	clrc
  9072  06F1  0DA3               	rlf	___ftpack@arg,f
  9073  06F2  0DA4               	rlf	___ftpack@arg+1,f
  9074  06F3  0DA5               	rlf	___ftpack@arg+2,f
  9075  06F4                     l3366:	
  9076  06F4  1FA4               	btfss	___ftpack@arg+1,7
  9077  06F5  2EEB               	goto	l3368
  9078  06F6                     l1109:	
  9079  06F6  1C26               	btfss	___ftpack@exp,0
  9080  06F7  13A4               	bcf	___ftpack@arg+1,7
  9081  06F8  1003               	clrc
  9082  06F9  0CA6               	rrf	___ftpack@exp,f
  9083  06FA  0826               	movf	___ftpack@exp,w
  9084  06FB  00AA               	movwf	??___ftpack+2
  9085  06FC  01A9               	clrf	??___ftpack+1
  9086  06FD  01A8               	clrf	??___ftpack
  9087  06FE  0828               	movf	??___ftpack,w
  9088  06FF  04A3               	iorwf	___ftpack@arg,f
  9089  0700  0829               	movf	??___ftpack+1,w
  9090  0701  04A4               	iorwf	___ftpack@arg+1,f
  9091  0702  082A               	movf	??___ftpack+2,w
  9092  0703  04A5               	iorwf	___ftpack@arg+2,f
  9093  0704  0827               	movf	___ftpack@sign,w
  9094  0705  1D03               	btfss	3,2
  9095  0706  17A5               	bsf	___ftpack@arg+2,7
  9096  0707  0008               	return
  9097  0708                     __end_of___ftpack:	
  9098  0708                     __ptext15:	
  9099 ;; *************** function ___fttol *****************
  9100 ;; Defined at:
  9101 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;  f1              3   29[BANK0 ] float 
  9104 ;; Auto vars:     Size  Location     Type
  9105 ;;  lval            4   37[BANK0 ] unsigned long 
  9106 ;;  exp1            1   41[BANK0 ] unsigned char 
  9107 ;;  sign1           1   36[BANK0 ] unsigned char 
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  4   29[BANK0 ] long 
  9110 ;; Registers used:
  9111 ;;		wreg, status,2, status,0
  9112 ;; Tracked objects:
  9113 ;;		On entry : 300/0
  9114 ;;		On exit  : 300/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9117 ;;      Params:         0       4       0       0       0
  9118 ;;      Locals:         0       6       0       0       0
  9119 ;;      Temps:          0       3       0       0       0
  9120 ;;      Totals:         0      13       0       0       0
  9121 ;;Total ram usage:       13 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:    5
  9124 ;; This function calls:
  9125 ;;		Nothing
  9126 ;; This function is called by:
  9127 ;;		_a2d_read
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           
  9132                           ;psect for function ___fttol
  9133  0708                     ___fttol:	
  9134                           
  9135                           ;incstack = 0
  9136                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9137  0708  2790  120A  118A   	fcall	PL38	;call to abstracted procedure
  9138  070B  1003               	clrc
  9139  070C  0D42               	rlf	??___fttol+1,w
  9140  070D  0D43               	rlf	??___fttol+2,w
  9141  070E  00C9               	movwf	___fttol@exp1
  9142  070F  0849               	movf	___fttol@exp1,w
  9143  0710  1D03               	btfss	3,2
  9144  0711  2F17               	goto	l3918
  9145  0712                     l3916:	
  9146  0712  01BD               	clrf	?___fttol
  9147  0713  01BE               	clrf	?___fttol+1
  9148  0714  01BF               	clrf	?___fttol+2
  9149  0715  01C0               	clrf	?___fttol+3
  9150  0716  0008               	return
  9151  0717                     l3918:	
  9152  0717  2790  120A  118A   	fcall	PL38	;call to abstracted procedure
  9153  071A  3017               	movlw	23
  9154  071B                     u5075:	
  9155  071B  1003               	clrc
  9156  071C  0CC3               	rrf	??___fttol+2,f
  9157  071D  0CC2               	rrf	??___fttol+1,f
  9158  071E  0CC1               	rrf	??___fttol,f
  9159  071F  3EFF               	addlw	-1
  9160  0720  1D03               	skipz
  9161  0721  2F1B               	goto	u5075
  9162  0722  0841               	movf	??___fttol,w
  9163  0723  00C4               	movwf	___fttol@sign1
  9164  0724  17BE               	bsf	___fttol@f1+1,7
  9165  0725  01BF               	clrf	___fttol@f1+2
  9166  0726  083D               	movf	___fttol@f1,w
  9167  0727  00C5               	movwf	___fttol@lval
  9168  0728  083E               	movf	___fttol@f1+1,w
  9169  0729  00C6               	movwf	___fttol@lval+1
  9170  072A  083F               	movf	___fttol@f1+2,w
  9171  072B  00C7               	movwf	___fttol@lval+2
  9172  072C  308E               	movlw	142
  9173  072D  01C8               	clrf	___fttol@lval+3
  9174  072E  02C9               	subwf	___fttol@exp1,f
  9175  072F  1FC9               	btfss	___fttol@exp1,7
  9176  0730  2F3E               	goto	l3938
  9177  0731  0849               	movf	___fttol@exp1,w
  9178  0732  3A80               	xorlw	128
  9179  0733  3E8F               	addlw	143
  9180  0734  1C03               	btfss	3,0
  9181  0735  2F12               	goto	l3916
  9182  0736                     l3934:	
  9183  0736  1003               	clrc
  9184  0737  0CC8               	rrf	___fttol@lval+3,f
  9185  0738  0CC7               	rrf	___fttol@lval+2,f
  9186  0739  0CC6               	rrf	___fttol@lval+1,f
  9187  073A  0CC5               	rrf	___fttol@lval,f
  9188  073B  0FC9               	incfsz	___fttol@exp1,f
  9189  073C  2F36               	goto	l3934
  9190  073D  2F4C               	goto	l3946
  9191  073E                     l3938:	
  9192  073E  3018               	movlw	24
  9193  073F  0249               	subwf	___fttol@exp1,w
  9194  0740  1803               	btfsc	3,0
  9195  0741  2F12               	goto	l3916
  9196  0742                     l3944:	
  9197  0742  0849               	movf	___fttol@exp1,w
  9198  0743  1903               	btfsc	3,2
  9199  0744  2F4C               	goto	l3946
  9200  0745  1003               	clrc
  9201  0746  0DC5               	rlf	___fttol@lval,f
  9202  0747  0DC6               	rlf	___fttol@lval+1,f
  9203  0748  0DC7               	rlf	___fttol@lval+2,f
  9204  0749  0DC8               	rlf	___fttol@lval+3,f
  9205  074A  03C9               	decf	___fttol@exp1,f
  9206  074B  2F42               	goto	l3944
  9207  074C                     l3946:	
  9208  074C  0844               	movf	___fttol@sign1,w
  9209  074D  1903               	btfsc	3,2
  9210  074E  2F5A               	goto	l3950
  9211  074F  09C5               	comf	___fttol@lval,f
  9212  0750  09C6               	comf	___fttol@lval+1,f
  9213  0751  09C7               	comf	___fttol@lval+2,f
  9214  0752  09C8               	comf	___fttol@lval+3,f
  9215  0753  0AC5               	incf	___fttol@lval,f
  9216  0754  1903               	skipnz
  9217  0755  0AC6               	incf	___fttol@lval+1,f
  9218  0756  1903               	skipnz
  9219  0757  0AC7               	incf	___fttol@lval+2,f
  9220  0758  1903               	skipnz
  9221  0759  0AC8               	incf	___fttol@lval+3,f
  9222  075A                     l3950:	
  9223  075A  0848               	movf	___fttol@lval+3,w
  9224  075B  00C0               	movwf	?___fttol+3
  9225  075C  0847               	movf	___fttol@lval+2,w
  9226  075D  00BF               	movwf	?___fttol+2
  9227  075E  0846               	movf	___fttol@lval+1,w
  9228  075F  00BE               	movwf	?___fttol+1
  9229  0760  0845               	movf	___fttol@lval,w
  9230  0761  00BD               	movwf	?___fttol
  9231  0762  0008               	return
  9232  0763                     __end_of___fttol:	
  9233  0763                     PL4:	
  9234  0763  1283               	bcf	3,5	;RP0=0, select bank0
  9235  0764  1303               	bcf	3,6	;RP1=0, select bank0
  9236  0765  00A3               	movwf	___awmod@divisor
  9237  0766  01A4               	clrf	___awmod@divisor+1
  9238  0767  0832               	movf	Serial_Print_Int@val+1,w
  9239  0768  00A6               	movwf	___awmod@dividend+1
  9240  0769  0831               	movf	Serial_Print_Int@val,w
  9241  076A  00A5               	movwf	___awmod@dividend
  9242  076B  0008               	return
  9243  076C                     __end_ofPL4:	
  9244  076C                     PL12:	
  9245  076C  30E8               	movlw	232
  9246  076D  1283               	bcf	3,5	;RP0=0, select bank0
  9247  076E  1303               	bcf	3,6	;RP1=0, select bank0
  9248  076F  00A3               	movwf	___awmod@divisor
  9249  0770  3003               	movlw	3
  9250  0771  00A4               	movwf	___awmod@divisor+1
  9251  0772  0832               	movf	Serial_Print_Int@val+1,w
  9252  0773  00A6               	movwf	___awmod@dividend+1
  9253  0774  0831               	movf	Serial_Print_Int@val,w
  9254  0775  00A5               	movwf	___awmod@dividend
  9255  0776  0008               	return
  9256  0777                     __end_ofPL12:	
  9257  0777                     PL16:	
  9258  0777  3064               	movlw	100
  9259  0778  00A9               	movwf	___awdiv@divisor
  9260  0779  01AA               	clrf	___awdiv@divisor+1
  9261  077A  0832               	movf	Serial_Print_Int@val+1,w
  9262  077B  00AC               	movwf	___awdiv@dividend+1
  9263  077C  0831               	movf	Serial_Print_Int@val,w
  9264  077D  00AB               	movwf	___awdiv@dividend
  9265  077E  0008               	return
  9266  077F                     __end_ofPL16:	
  9267  077F                     PL20:	
  9268  077F  30E8               	movlw	232
  9269  0780  00A9               	movwf	___awdiv@divisor
  9270  0781  3003               	movlw	3
  9271  0782  00AA               	movwf	___awdiv@divisor+1
  9272  0783  0832               	movf	Serial_Print_Int@val+1,w
  9273  0784  00AC               	movwf	___awdiv@dividend+1
  9274  0785  0831               	movf	Serial_Print_Int@val,w
  9275  0786  00AB               	movwf	___awdiv@dividend
  9276  0787  0008               	return
  9277  0788                     __end_ofPL20:	
  9278  0788                     PL28:	
  9279  0788  1283               	bcf	3,5	;RP0=0, select bank0
  9280  0789  1303               	bcf	3,6	;RP1=0, select bank0
  9281  078A  0832               	movf	Serial_Print_Int@val+1,w
  9282  078B  3A80               	xorlw	128
  9283  078C  00FF               	movwf	127
  9284  078D  3080               	movlw	128
  9285  078E  027F               	subwf	127,w
  9286  078F  0008               	return
  9287  0790                     __end_ofPL28:	
  9288  0790                     PL38:	
  9289  0790  083D               	movf	___fttol@f1,w
  9290  0791  00C1               	movwf	??___fttol
  9291  0792  083E               	movf	___fttol@f1+1,w
  9292  0793  00C2               	movwf	??___fttol+1
  9293  0794  083F               	movf	___fttol@f1+2,w
  9294  0795  00C3               	movwf	??___fttol+2
  9295  0796  0008               	return
  9296  0797                     __end_ofPL38:	
  9297                           
  9298                           	psect	text40
  9299  1F19                     __ptext40:	
  9300 ;; *************** function _Calculate *****************
  9301 ;; Defined at:
  9302 ;;		line 559 in file "Automated Solar Panel Orientation Setter.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;		None               void
  9309 ;; Registers used:
  9310 ;;		wreg, status,2, status,0, pclath, cstack
  9311 ;; Tracked objects:
  9312 ;;		On entry : 300/0
  9313 ;;		On exit  : 300/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9316 ;;      Params:         0       0       0       0       0
  9317 ;;      Locals:         0       0       0       0       0
  9318 ;;      Temps:          0       2       0       0       0
  9319 ;;      Totals:         0       2       0       0       0
  9320 ;;Total ram usage:        2 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    6
  9323 ;; This function calls:
  9324 ;;		_RotateMotorLeft
  9325 ;;		_RotateMotorRight
  9326 ;; This function is called by:
  9327 ;;		_main
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           
  9332                           ;psect for function _Calculate
  9333  1F19                     _Calculate:	
  9334                           
  9335                           ;Automated Solar Panel Orientation Setter.c: 565: if(ldr1 > ldr2){
  9336                           
  9337                           ;incstack = 0
  9338                           ; Regs used in _Calculate: [wreg+status,2+status,0+pclath+cstack]
  9339  1F19  0855               	movf	_ldr1+1,w
  9340  1F1A  0257               	subwf	_ldr2+1,w
  9341  1F1B  1D03               	skipz
  9342  1F1C  2F1F               	goto	u6185
  9343  1F1D  0854               	movf	_ldr1,w
  9344  1F1E  0256               	subwf	_ldr2,w
  9345  1F1F                     u6185:	
  9346  1F1F  1803               	skipnc
  9347  1F20  2F34               	goto	l4684
  9348                           
  9349                           ;Automated Solar Panel Orientation Setter.c: 566: if(ldr1 - ldr2 > 25){
  9350  1F21  0856               	movf	_ldr2,w
  9351  1F22  0254               	subwf	_ldr1,w
  9352  1F23  00A9               	movwf	??_Calculate
  9353  1F24  0857               	movf	_ldr2+1,w
  9354  1F25  1C03               	skipc
  9355  1F26  0A57               	incf	_ldr2+1,w
  9356  1F27  0255               	subwf	_ldr1+1,w
  9357  1F28  00AA               	movwf	??_Calculate+1
  9358  1F29  3000               	movlw	0
  9359  1F2A  022A               	subwf	??_Calculate+1,w
  9360  1F2B  301A               	movlw	26
  9361  1F2C  1903               	skipnz
  9362  1F2D  0229               	subwf	??_Calculate,w
  9363  1F2E  1C03               	skipc
  9364  1F2F  0008               	return
  9365                           
  9366                           ;Automated Solar Panel Orientation Setter.c: 567: RotateMotorLeft(1);
  9367  1F30  01A3               	clrf	RotateMotorLeft@value
  9368  1F31  0AA3               	incf	RotateMotorLeft@value,f
  9369  1F32  01A4               	clrf	RotateMotorLeft@value+1
  9370  1F33  2F4F               	ljmp	l3756
  9371  1F34                     l4684:	
  9372                           
  9373                           ;Automated Solar Panel Orientation Setter.c: 570: else if (ldr2 > ldr1){
  9374  1F34  0857               	movf	_ldr2+1,w
  9375  1F35  0255               	subwf	_ldr1+1,w
  9376  1F36  1D03               	skipz
  9377  1F37  2F3A               	goto	u6205
  9378  1F38  0856               	movf	_ldr2,w
  9379  1F39  0254               	subwf	_ldr1,w
  9380  1F3A                     u6205:	
  9381  1F3A  1803               	skipnc
  9382  1F3B  0008               	return
  9383                           
  9384                           ;Automated Solar Panel Orientation Setter.c: 571: if(ldr2 - ldr1 > 25){
  9385  1F3C  0854               	movf	_ldr1,w
  9386  1F3D  0256               	subwf	_ldr2,w
  9387  1F3E  00A9               	movwf	??_Calculate
  9388  1F3F  0855               	movf	_ldr1+1,w
  9389  1F40  1C03               	skipc
  9390  1F41  0A55               	incf	_ldr1+1,w
  9391  1F42  0257               	subwf	_ldr2+1,w
  9392  1F43  00AA               	movwf	??_Calculate+1
  9393  1F44  3000               	movlw	0
  9394  1F45  022A               	subwf	??_Calculate+1,w
  9395  1F46  301A               	movlw	26
  9396  1F47  1903               	skipnz
  9397  1F48  0229               	subwf	??_Calculate,w
  9398  1F49  1C03               	skipc
  9399  1F4A  0008               	return
  9400                           
  9401                           ;Automated Solar Panel Orientation Setter.c: 572: RotateMotorRight(1);
  9402  1F4B  01A3               	clrf	RotateMotorRight@value
  9403  1F4C  0AA3               	incf	RotateMotorRight@value,f
  9404  1F4D  01A4               	clrf	RotateMotorRight@value+1
  9405  1F4E  2F96               	ljmp	l3788
  9406  1F4F                     __end_of_Calculate:	
  9407  1F4F                     __ptext42:	
  9408 ;; *************** function _RotateMotorLeft *****************
  9409 ;; Defined at:
  9410 ;;		line 516 in file "Automated Solar Panel Orientation Setter.c"
  9411 ;; Parameters:    Size  Location     Type
  9412 ;;  value           2    3[BANK0 ] int 
  9413 ;; Auto vars:     Size  Location     Type
  9414 ;;  i               2    7[BANK0 ] int 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;		None               void
  9417 ;; Registers used:
  9418 ;;		wreg, status,2, status,0
  9419 ;; Tracked objects:
  9420 ;;		On entry : 300/0
  9421 ;;		On exit  : 300/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9424 ;;      Params:         0       2       0       0       0
  9425 ;;      Locals:         0       2       0       0       0
  9426 ;;      Temps:          0       2       0       0       0
  9427 ;;      Totals:         0       6       0       0       0
  9428 ;;Total ram usage:        6 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:    5
  9431 ;; This function calls:
  9432 ;;		Nothing
  9433 ;; This function is called by:
  9434 ;;		_Calculate
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           
  9439                           ;psect for function _RotateMotorLeft
  9440  1F4F                     _RotateMotorLeft:	
  9441  1F4F                     l3756:	
  9442                           ;incstack = 0
  9443                           ; Regs used in _RotateMotorLeft: [wreg+status,2+status,0]
  9444                           
  9445                           
  9446                           ;Automated Solar Panel Orientation Setter.c: 518: int i=0;
  9447  1F4F  01A7               	clrf	RotateMotorLeft@i
  9448  1F50  01A8               	clrf	RotateMotorLeft@i+1
  9449                           
  9450                           ;Automated Solar Panel Orientation Setter.c: 519: for(i=0; i<value; i++){
  9451  1F51  01A7               	clrf	RotateMotorLeft@i
  9452  1F52  01A8               	clrf	RotateMotorLeft@i+1
  9453  1F53                     l3786:	
  9454  1F53  0828               	movf	RotateMotorLeft@i+1,w
  9455  1F54  3A80               	xorlw	128
  9456  1F55  00A5               	movwf	??_RotateMotorLeft
  9457  1F56  0824               	movf	RotateMotorLeft@value+1,w
  9458  1F57  3A80               	xorlw	128
  9459  1F58  0225               	subwf	??_RotateMotorLeft,w
  9460  1F59  1D03               	skipz
  9461  1F5A  2F5D               	goto	u4905
  9462  1F5B  0823               	movf	RotateMotorLeft@value,w
  9463  1F5C  0227               	subwf	RotateMotorLeft@i,w
  9464  1F5D                     u4905:	
  9465  1F5D  1803               	btfsc	3,0
  9466  1F5E  2F95               	goto	l595
  9467                           
  9468                           ;Automated Solar Panel Orientation Setter.c: 520: RB2=0; RB3=1; RB4=1; RB5=1;
  9469  1F5F  27EB  160A  158A   	fcall	PL32	;call to abstracted procedure
  9470                           
  9471                           ;Automated Solar Panel Orientation Setter.c: 521: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  9472  1F62  3014               	movlw	20
  9473  1F63  00A6               	movwf	??_RotateMotorLeft+1
  9474  1F64  3079               	movlw	121
  9475  1F65  00A5               	movwf	??_RotateMotorLeft
  9476  1F66                     u6857:	
  9477  1F66  0BA5               	decfsz	??_RotateMotorLeft,f
  9478  1F67  2F66               	goto	u6857
  9479  1F68  0BA6               	decfsz	??_RotateMotorLeft+1,f
  9480  1F69  2F66               	goto	u6857
  9481  1F6A  2F6B               	nop2
  9482                           
  9483                           ;Automated Solar Panel Orientation Setter.c: 522: RB2=1; RB3=0; RB4=1; RB5=1;
  9484  1F6B  27F9  160A  158A   	fcall	PL36	;call to abstracted procedure
  9485                           
  9486                           ;Automated Solar Panel Orientation Setter.c: 523: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  9487  1F6E  3014               	movlw	20
  9488  1F6F  00A6               	movwf	??_RotateMotorLeft+1
  9489  1F70  3079               	movlw	121
  9490  1F71  00A5               	movwf	??_RotateMotorLeft
  9491  1F72                     u6867:	
  9492  1F72  0BA5               	decfsz	??_RotateMotorLeft,f
  9493  1F73  2F72               	goto	u6867
  9494  1F74  0BA6               	decfsz	??_RotateMotorLeft+1,f
  9495  1F75  2F72               	goto	u6867
  9496  1F76  2F77               	nop2
  9497                           
  9498                           ;Automated Solar Panel Orientation Setter.c: 524: RB2=1; RB3=1; RB4=0; RB5=1;
  9499  1F77  27E4  160A  158A   	fcall	PL30	;call to abstracted procedure
  9500                           
  9501                           ;Automated Solar Panel Orientation Setter.c: 525: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  9502  1F7A  3014               	movlw	20
  9503  1F7B  00A6               	movwf	??_RotateMotorLeft+1
  9504  1F7C  3079               	movlw	121
  9505  1F7D  00A5               	movwf	??_RotateMotorLeft
  9506  1F7E                     u6877:	
  9507  1F7E  0BA5               	decfsz	??_RotateMotorLeft,f
  9508  1F7F  2F7E               	goto	u6877
  9509  1F80  0BA6               	decfsz	??_RotateMotorLeft+1,f
  9510  1F81  2F7E               	goto	u6877
  9511  1F82  2F83               	nop2
  9512                           
  9513                           ;Automated Solar Panel Orientation Setter.c: 526: RB2=1; RB3=1; RB4=1; RB5=0;
  9514  1F83  27F2  160A  158A   	fcall	PL34	;call to abstracted procedure
  9515                           
  9516                           ;Automated Solar Panel Orientation Setter.c: 527: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  9517  1F86  3014               	movlw	20
  9518  1F87  00A6               	movwf	??_RotateMotorLeft+1
  9519  1F88  3079               	movlw	121
  9520  1F89  00A5               	movwf	??_RotateMotorLeft
  9521  1F8A                     u6887:	
  9522  1F8A  0BA5               	decfsz	??_RotateMotorLeft,f
  9523  1F8B  2F8A               	goto	u6887
  9524  1F8C  0BA6               	decfsz	??_RotateMotorLeft+1,f
  9525  1F8D  2F8A               	goto	u6887
  9526  1F8E  2F8F               	nop2
  9527  1F8F  1283               	bcf	3,5	;RP0=0, select bank0
  9528  1F90  1303               	bcf	3,6	;RP1=0, select bank0
  9529  1F91  0AA7               	incf	RotateMotorLeft@i,f
  9530  1F92  1903               	skipnz
  9531  1F93  0AA8               	incf	RotateMotorLeft@i+1,f
  9532  1F94  2F53               	goto	l3786
  9533  1F95                     l595:	
  9534                           
  9535                           ;Automated Solar Panel Orientation Setter.c: 528: }
  9536                           ;Automated Solar Panel Orientation Setter.c: 529: RB2=1; RB3=1; RB4=1; RB5=1;
  9537  1F95  2FDD               	ljmp	PL26	;call to abstracted procedure
  9538  1F96                     __end_of_RotateMotorLeft:	
  9539  1F96                     __ptext41:	
  9540 ;; *************** function _RotateMotorRight *****************
  9541 ;; Defined at:
  9542 ;;		line 533 in file "Automated Solar Panel Orientation Setter.c"
  9543 ;; Parameters:    Size  Location     Type
  9544 ;;  value           2    3[BANK0 ] int 
  9545 ;; Auto vars:     Size  Location     Type
  9546 ;;  i               2    7[BANK0 ] int 
  9547 ;; Return value:  Size  Location     Type
  9548 ;;		None               void
  9549 ;; Registers used:
  9550 ;;		wreg, status,2, status,0
  9551 ;; Tracked objects:
  9552 ;;		On entry : 300/0
  9553 ;;		On exit  : 300/0
  9554 ;;		Unchanged: 0/0
  9555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9556 ;;      Params:         0       2       0       0       0
  9557 ;;      Locals:         0       2       0       0       0
  9558 ;;      Temps:          0       2       0       0       0
  9559 ;;      Totals:         0       6       0       0       0
  9560 ;;Total ram usage:        6 bytes
  9561 ;; Hardware stack levels used:    1
  9562 ;; Hardware stack levels required when called:    5
  9563 ;; This function calls:
  9564 ;;		Nothing
  9565 ;; This function is called by:
  9566 ;;		_Calculate
  9567 ;; This function uses a non-reentrant model
  9568 ;;
  9569                           
  9570                           
  9571                           ;psect for function _RotateMotorRight
  9572  1F96                     _RotateMotorRight:	
  9573  1F96                     l3788:	
  9574                           ;incstack = 0
  9575                           ; Regs used in _RotateMotorRight: [wreg+status,2+status,0]
  9576                           
  9577                           
  9578                           ;Automated Solar Panel Orientation Setter.c: 535: int i=0;
  9579  1F96  01A7               	clrf	RotateMotorRight@i
  9580  1F97  01A8               	clrf	RotateMotorRight@i+1
  9581                           
  9582                           ;Automated Solar Panel Orientation Setter.c: 536: for(i=0; i<value; i++){
  9583  1F98  01A7               	clrf	RotateMotorRight@i
  9584  1F99  01A8               	clrf	RotateMotorRight@i+1
  9585  1F9A                     l3818:	
  9586  1F9A  0828               	movf	RotateMotorRight@i+1,w
  9587  1F9B  3A80               	xorlw	128
  9588  1F9C  00A5               	movwf	??_RotateMotorRight
  9589  1F9D  0824               	movf	RotateMotorRight@value+1,w
  9590  1F9E  3A80               	xorlw	128
  9591  1F9F  0225               	subwf	??_RotateMotorRight,w
  9592  1FA0  1D03               	skipz
  9593  1FA1  2FA4               	goto	u4915
  9594  1FA2  0823               	movf	RotateMotorRight@value,w
  9595  1FA3  0227               	subwf	RotateMotorRight@i,w
  9596  1FA4                     u4915:	
  9597  1FA4  1803               	btfsc	3,0
  9598  1FA5  2FDC               	goto	l601
  9599                           
  9600                           ;Automated Solar Panel Orientation Setter.c: 537: RB2=1; RB3=1; RB4=1; RB5=0;
  9601  1FA6  27F2  160A  158A   	fcall	PL34	;call to abstracted procedure
  9602                           
  9603                           ;Automated Solar Panel Orientation Setter.c: 538: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  9604  1FA9  3014               	movlw	20
  9605  1FAA  00A6               	movwf	??_RotateMotorRight+1
  9606  1FAB  3079               	movlw	121
  9607  1FAC  00A5               	movwf	??_RotateMotorRight
  9608  1FAD                     u6817:	
  9609  1FAD  0BA5               	decfsz	??_RotateMotorRight,f
  9610  1FAE  2FAD               	goto	u6817
  9611  1FAF  0BA6               	decfsz	??_RotateMotorRight+1,f
  9612  1FB0  2FAD               	goto	u6817
  9613  1FB1  2FB2               	nop2
  9614                           
  9615                           ;Automated Solar Panel Orientation Setter.c: 539: RB2=1; RB3=1; RB4=0; RB5=1;
  9616  1FB2  27E4  160A  158A   	fcall	PL30	;call to abstracted procedure
  9617                           
  9618                           ;Automated Solar Panel Orientation Setter.c: 540: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  9619  1FB5  3014               	movlw	20
  9620  1FB6  00A6               	movwf	??_RotateMotorRight+1
  9621  1FB7  3079               	movlw	121
  9622  1FB8  00A5               	movwf	??_RotateMotorRight
  9623  1FB9                     u6827:	
  9624  1FB9  0BA5               	decfsz	??_RotateMotorRight,f
  9625  1FBA  2FB9               	goto	u6827
  9626  1FBB  0BA6               	decfsz	??_RotateMotorRight+1,f
  9627  1FBC  2FB9               	goto	u6827
  9628  1FBD  2FBE               	nop2
  9629                           
  9630                           ;Automated Solar Panel Orientation Setter.c: 541: RB2=1; RB3=0; RB4=1; RB5=1;
  9631  1FBE  27F9  160A  158A   	fcall	PL36	;call to abstracted procedure
  9632                           
  9633                           ;Automated Solar Panel Orientation Setter.c: 542: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  9634  1FC1  3014               	movlw	20
  9635  1FC2  00A6               	movwf	??_RotateMotorRight+1
  9636  1FC3  3079               	movlw	121
  9637  1FC4  00A5               	movwf	??_RotateMotorRight
  9638  1FC5                     u6837:	
  9639  1FC5  0BA5               	decfsz	??_RotateMotorRight,f
  9640  1FC6  2FC5               	goto	u6837
  9641  1FC7  0BA6               	decfsz	??_RotateMotorRight+1,f
  9642  1FC8  2FC5               	goto	u6837
  9643  1FC9  2FCA               	nop2
  9644                           
  9645                           ;Automated Solar Panel Orientation Setter.c: 543: RB2=0; RB3=1; RB4=1; RB5=1;
  9646  1FCA  27EB  160A  158A   	fcall	PL32	;call to abstracted procedure
  9647                           
  9648                           ;Automated Solar Panel Orientation Setter.c: 544: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  9649  1FCD  3014               	movlw	20
  9650  1FCE  00A6               	movwf	??_RotateMotorRight+1
  9651  1FCF  3079               	movlw	121
  9652  1FD0  00A5               	movwf	??_RotateMotorRight
  9653  1FD1                     u6847:	
  9654  1FD1  0BA5               	decfsz	??_RotateMotorRight,f
  9655  1FD2  2FD1               	goto	u6847
  9656  1FD3  0BA6               	decfsz	??_RotateMotorRight+1,f
  9657  1FD4  2FD1               	goto	u6847
  9658  1FD5  2FD6               	nop2
  9659  1FD6  1283               	bcf	3,5	;RP0=0, select bank0
  9660  1FD7  1303               	bcf	3,6	;RP1=0, select bank0
  9661  1FD8  0AA7               	incf	RotateMotorRight@i,f
  9662  1FD9  1903               	skipnz
  9663  1FDA  0AA8               	incf	RotateMotorRight@i+1,f
  9664  1FDB  2F9A               	goto	l3818
  9665  1FDC                     l601:	
  9666                           
  9667                           ;Automated Solar Panel Orientation Setter.c: 545: }
  9668                           ;Automated Solar Panel Orientation Setter.c: 546: RB2=1; RB3=1; RB4=1; RB5=1;
  9669  1FDC  2FDD               	ljmp	PL26	;call to abstracted procedure
  9670  1FDD                     __end_of_RotateMotorRight:	
  9671  1FDD                     PL26:	
  9672  1FDD  1283               	bcf	3,5	;RP0=0, select bank0
  9673  1FDE  1303               	bcf	3,6	;RP1=0, select bank0
  9674  1FDF  1506               	bsf	6,2	;volatile
  9675  1FE0  1586               	bsf	6,3	;volatile
  9676  1FE1  1606               	bsf	6,4	;volatile
  9677  1FE2  1686               	bsf	6,5	;volatile
  9678  1FE3  0008               	return
  9679  1FE4                     __end_ofPL26:	
  9680  1FE4                     PL30:	
  9681  1FE4  1283               	bcf	3,5	;RP0=0, select bank0
  9682  1FE5  1303               	bcf	3,6	;RP1=0, select bank0
  9683  1FE6  1506               	bsf	6,2	;volatile
  9684  1FE7  1586               	bsf	6,3	;volatile
  9685  1FE8  1206               	bcf	6,4	;volatile
  9686  1FE9  1686               	bsf	6,5	;volatile
  9687  1FEA  0008               	return
  9688  1FEB                     __end_ofPL30:	
  9689  1FEB                     PL32:	
  9690  1FEB  1283               	bcf	3,5	;RP0=0, select bank0
  9691  1FEC  1303               	bcf	3,6	;RP1=0, select bank0
  9692  1FED  1106               	bcf	6,2	;volatile
  9693  1FEE  1586               	bsf	6,3	;volatile
  9694  1FEF  1606               	bsf	6,4	;volatile
  9695  1FF0  1686               	bsf	6,5	;volatile
  9696  1FF1  0008               	return
  9697  1FF2                     __end_ofPL32:	
  9698  1FF2                     PL34:	
  9699  1FF2  1283               	bcf	3,5	;RP0=0, select bank0
  9700  1FF3  1303               	bcf	3,6	;RP1=0, select bank0
  9701  1FF4  1506               	bsf	6,2	;volatile
  9702  1FF5  1586               	bsf	6,3	;volatile
  9703  1FF6  1606               	bsf	6,4	;volatile
  9704  1FF7  1286               	bcf	6,5	;volatile
  9705  1FF8  0008               	return
  9706  1FF9                     __end_ofPL34:	
  9707  1FF9                     PL36:	
  9708  1FF9  1283               	bcf	3,5	;RP0=0, select bank0
  9709  1FFA  1303               	bcf	3,6	;RP1=0, select bank0
  9710  1FFB  1506               	bsf	6,2	;volatile
  9711  1FFC  1186               	bcf	6,3	;volatile
  9712  1FFD  1606               	bsf	6,4	;volatile
  9713  1FFE  1686               	bsf	6,5	;volatile
  9714  1FFF  0008               	return
  9715  2000                     __end_ofPL36:	
  9716                           
  9717                           	psect	text43
  9718  11F9                     __ptext43:	
  9719 ;; *************** function _isr *****************
  9720 ;; Defined at:
  9721 ;;		line 578 in file "Automated Solar Panel Orientation Setter.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;		None
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;		None
  9726 ;; Return value:  Size  Location     Type
  9727 ;;		None               void
  9728 ;; Registers used:
  9729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 300/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9735 ;;      Params:         0       0       0       0       0
  9736 ;;      Locals:         0       0       0       0       0
  9737 ;;      Temps:          0       3       0       0       0
  9738 ;;      Totals:         0       3       0       0       0
  9739 ;;Total ram usage:        3 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; Hardware stack levels required when called:    4
  9742 ;; This function calls:
  9743 ;;		i1_LCDTimeUpdate
  9744 ;;		i1_LCD_print_char
  9745 ;;		i1___lwmod
  9746 ;; This function is called by:
  9747 ;;		Interrupt level 1
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           
  9752                           ;psect for function _isr
  9753  11F9                     _isr:	
  9754                           
  9755                           ;Automated Solar Panel Orientation Setter.c: 579: if(TMR1IF==1){
  9756  11F9  1C0C               	btfss	12,0	;volatile
  9757  11FA  2A4C               	goto	i1l4906
  9758                           
  9759                           ;Automated Solar Panel Orientation Setter.c: 580: msecond ++;
  9760  11FB  0ADA               	incf	_msecond,f
  9761  11FC  1903               	skipnz
  9762  11FD  0ADB               	incf	_msecond+1,f
  9763                           
  9764                           ;Automated Solar Panel Orientation Setter.c: 581: if(msecond == 50){
  9765  11FE  3032               	movlw	50
  9766  11FF  065A               	xorwf	_msecond,w
  9767  1200  045B               	iorwf	_msecond+1,w
  9768  1201  1D03               	btfss	3,2
  9769  1202  2A47               	goto	i1l617
  9770                           
  9771                           ;Automated Solar Panel Orientation Setter.c: 582: second ++;
  9772  1203  0ADC               	incf	_second,f
  9773  1204  1903               	skipnz
  9774  1205  0ADD               	incf	_second+1,f
  9775                           
  9776                           ;Automated Solar Panel Orientation Setter.c: 585: if(BlinkDet) LCD_print_char(1,14,':');
  9777  1206  1C66               	btfss	_BlinkDet/(0+8),_BlinkDet& (0+7)
  9778  1207  2A0F               	goto	i1l4876
  9779  1208  300E               	movlw	14
  9780  1209  01F7               	clrf	i1LCD_print_char@row
  9781  120A  0AF7               	incf	i1LCD_print_char@row,f
  9782  120B  01F8               	clrf	i1LCD_print_char@row+1
  9783  120C  00F9               	movwf	i1LCD_print_char@column
  9784  120D  303A               	movlw	58
  9785  120E  2A15               	goto	L42
  9786  120F                     i1l4876:	
  9787  120F  300E               	movlw	14
  9788                           
  9789                           ;Automated Solar Panel Orientation Setter.c: 586: else LCD_print_char(1,14,' ');
  9790  1210  01F7               	clrf	i1LCD_print_char@row
  9791  1211  0AF7               	incf	i1LCD_print_char@row,f
  9792  1212  01F8               	clrf	i1LCD_print_char@row+1
  9793  1213  00F9               	movwf	i1LCD_print_char@column
  9794  1214  3020               	movlw	32
  9795  1215                     L42:	
  9796  1215  01FA               	clrf	i1LCD_print_char@column+1
  9797  1216  00FB               	movwf	i1LCD_print_char@print_value
  9798  1217  22D5  160A  118A   	fcall	i1_LCD_print_char
  9799                           
  9800                           ;Automated Solar Panel Orientation Setter.c: 587: BlinkDet = !BlinkDet;
  9801  121A  3001               	movlw	(0+1) shl (_BlinkDet& (0+7))
  9802  121B  1283               	bcf	3,5	;RP0=0, select bank0
  9803  121C  1303               	bcf	3,6	;RP1=0, select bank0
  9804  121D  06E6               	xorwf	_BlinkDet/(0+8),f
  9805                           
  9806                           ;Automated Solar Panel Orientation Setter.c: 589: RD6 = !RD6;
  9807  121E  3040               	movlw	64
  9808  121F  0688               	xorwf	8,f
  9809  1220  303C               	movlw	60
  9810                           
  9811                           ;Automated Solar Panel Orientation Setter.c: 590: msecond = 0;
  9812  1221  01DA               	clrf	_msecond
  9813  1222  01DB               	clrf	_msecond+1
  9814                           
  9815                           ;Automated Solar Panel Orientation Setter.c: 591: if( second == 60){
  9816  1223  065C               	xorwf	_second,w
  9817  1224  045D               	iorwf	_second+1,w
  9818  1225  1D03               	btfss	3,2
  9819  1226  2A47               	goto	i1l617
  9820                           
  9821                           ;Automated Solar Panel Orientation Setter.c: 592: LCDTimeUpdate();
  9822  1227  2278  160A  118A   	fcall	i1_LCDTimeUpdate
  9823                           
  9824                           ;Automated Solar Panel Orientation Setter.c: 598: minute ++;
  9825  122A  1283               	bcf	3,5	;RP0=0, select bank0
  9826  122B  1303               	bcf	3,6	;RP1=0, select bank0
  9827  122C  0AD8               	incf	_minute,f
  9828  122D  1903               	skipnz
  9829  122E  0AD9               	incf	_minute+1,f
  9830  122F  301E               	movlw	30
  9831                           
  9832                           ;Automated Solar Panel Orientation Setter.c: 599: second = 0;
  9833  1230  01DC               	clrf	_second
  9834  1231  01DD               	clrf	_second+1
  9835                           
  9836                           ;Automated Solar Panel Orientation Setter.c: 601: x = minute%30 ;
  9837  1232  00F0               	movwf	i1___lwmod@divisor
  9838  1233  01F1               	clrf	i1___lwmod@divisor+1
  9839  1234  0859               	movf	_minute+1,w
  9840  1235  00F3               	movwf	i1___lwmod@dividend+1
  9841  1236  0858               	movf	_minute,w
  9842  1237  00F2               	movwf	i1___lwmod@dividend
  9843  1238  22EF  160A  118A   	fcall	i1___lwmod
  9844  123B  0870               	movf	?i1___lwmod,w
  9845  123C  00E1               	movwf	_x
  9846                           
  9847                           ;Automated Solar Panel Orientation Setter.c: 605: }
  9848                           ;Automated Solar Panel Orientation Setter.c: 608: if( minute == 60){
  9849  123D  303C               	movlw	60
  9850  123E  0658               	xorwf	_minute,w
  9851  123F  0459               	iorwf	_minute+1,w
  9852  1240  1D03               	btfss	3,2
  9853  1241  2A47               	goto	i1l617
  9854                           
  9855                           ;Automated Solar Panel Orientation Setter.c: 609: minute = 0;
  9856  1242  01D8               	clrf	_minute
  9857  1243  01D9               	clrf	_minute+1
  9858                           
  9859                           ;Automated Solar Panel Orientation Setter.c: 610: hour ++;
  9860  1244  0AD2               	incf	_hour,f
  9861  1245  1903               	skipnz
  9862  1246  0AD3               	incf	_hour+1,f
  9863  1247                     i1l617:	
  9864                           
  9865                           ;Automated Solar Panel Orientation Setter.c: 612: }
  9866                           ;Automated Solar Panel Orientation Setter.c: 613: }
  9867                           ;Automated Solar Panel Orientation Setter.c: 614: }
  9868                           ;Automated Solar Panel Orientation Setter.c: 615: TMR1IF = 0;
  9869  1247  100C               	bcf	12,0	;volatile
  9870                           
  9871                           ;Automated Solar Panel Orientation Setter.c: 616: TMR1L = 0xB0;
  9872  1248  30B0               	movlw	176
  9873  1249  008E               	movwf	14	;volatile
  9874                           
  9875                           ;Automated Solar Panel Orientation Setter.c: 617: TMR1H = 0x3C;
  9876  124A  303C               	movlw	60
  9877  124B  008F               	movwf	15	;volatile
  9878  124C                     i1l4906:	
  9879                           
  9880                           ;Automated Solar Panel Orientation Setter.c: 618: }
  9881                           ;Automated Solar Panel Orientation Setter.c: 619: if( RCIF == 1){
  9882  124C  1E8C               	btfss	12,5	;volatile
  9883  124D  2A69               	goto	i1l4930
  9884                           
  9885                           ;Automated Solar Panel Orientation Setter.c: 620: if ((FERR == 0) && (OERR == 0))
  9886  124E  1D18               	btfss	24,2	;volatile
  9887  124F  1898               	btfsc	24,1	;volatile
  9888  1250  2A63               	goto	i1l625
  9889                           
  9890                           ;Automated Solar Panel Orientation Setter.c: 621: {
  9891                           ;Automated Solar Panel Orientation Setter.c: 622: wtmp = RCREG;
  9892  1251  081A               	movf	26,w	;volatile
  9893                           
  9894                           ;Automated Solar Panel Orientation Setter.c: 623: if( RCREG=='*' || j > 20-1 ){
  9895  1252  302A               	movlw	42
  9896  1253  061A               	xorwf	26,w
  9897  1254  1903               	btfsc	3,2
  9898  1255  2A5A               	goto	i1l4918
  9899  1256  3014               	movlw	20
  9900  1257  025E               	subwf	_j,w
  9901  1258  1C03               	skipc
  9902  1259  2A5B               	goto	i1l4920
  9903  125A                     i1l4918:	
  9904                           
  9905                           ;Automated Solar Panel Orientation Setter.c: 624: j=0;
  9906  125A  01DE               	clrf	_j
  9907  125B                     i1l4920:	
  9908                           
  9909                           ;Automated Solar Panel Orientation Setter.c: 625: }
  9910                           ;Automated Solar Panel Orientation Setter.c: 626: buffer[j] = RCREG;
  9911  125B  085E               	movf	_j,w
  9912  125C  3EA0               	addlw	(low (_buffer| 0))& (0+255)
  9913  125D  0084               	movwf	4
  9914  125E  081A               	movf	26,w	;volatile
  9915  125F  1383               	bcf	3,7	;select IRP bank1
  9916  1260  0080               	movwf	0
  9917                           
  9918                           ;Automated Solar Panel Orientation Setter.c: 627: j ++;
  9919  1261  0ADE               	incf	_j,f
  9920                           
  9921                           ;Automated Solar Panel Orientation Setter.c: 628: }
  9922  1262  2A68               	goto	i1l4928
  9923  1263                     i1l625:	
  9924                           
  9925                           ;Automated Solar Panel Orientation Setter.c: 629: else
  9926                           ;Automated Solar Panel Orientation Setter.c: 630: {
  9927                           ;Automated Solar Panel Orientation Setter.c: 631: CREN = 0;
  9928  1263  1218               	bcf	24,4	;volatile
  9929                           
  9930                           ;Automated Solar Panel Orientation Setter.c: 632: FERR = 0;
  9931  1264  1118               	bcf	24,2	;volatile
  9932                           
  9933                           ;Automated Solar Panel Orientation Setter.c: 633: wtmp = RCREG;
  9934  1265  081A               	movf	26,w	;volatile
  9935                           
  9936                           ;Automated Solar Panel Orientation Setter.c: 634: wtmp = RCREG;
  9937  1266  081A               	movf	26,w	;volatile
  9938                           
  9939                           ;Automated Solar Panel Orientation Setter.c: 635: CREN = 1;
  9940  1267  1618               	bsf	24,4	;volatile
  9941  1268                     i1l4928:	
  9942                           
  9943                           ;Automated Solar Panel Orientation Setter.c: 636: }
  9944                           ;Automated Solar Panel Orientation Setter.c: 637: RCIF = 0;
  9945  1268  128C               	bcf	12,5	;volatile
  9946  1269                     i1l4930:	
  9947                           
  9948                           ;Automated Solar Panel Orientation Setter.c: 638: }
  9949                           ;Automated Solar Panel Orientation Setter.c: 639: if(OERR == 1)
  9950  1269  1C98               	btfss	24,1	;volatile
  9951  126A  2A6F               	goto	i1l631
  9952                           
  9953                           ;Automated Solar Panel Orientation Setter.c: 640: {
  9954                           ;Automated Solar Panel Orientation Setter.c: 641: CREN = 0;
  9955  126B  1218               	bcf	24,4	;volatile
  9956                           
  9957                           ;Automated Solar Panel Orientation Setter.c: 643: wtmp = RCREG;
  9958  126C  081A               	movf	26,w	;volatile
  9959                           
  9960                           ;Automated Solar Panel Orientation Setter.c: 644: wtmp = RCREG;
  9961  126D  081A               	movf	26,w	;volatile
  9962                           
  9963                           ;Automated Solar Panel Orientation Setter.c: 645: CREN = 1;
  9964  126E  1618               	bsf	24,4	;volatile
  9965  126F                     i1l631:	
  9966  126F  0822               	movf	??_isr+2,w
  9967  1270  008A               	movwf	10
  9968  1271  0821               	movf	??_isr+1,w
  9969  1272  0084               	movwf	4
  9970  1273  0E20               	swapf	??_isr^0,w
  9971  1274  0083               	movwf	3
  9972  1275  0EFE               	swapf	126,f
  9973  1276  0E7E               	swapf	126,w
  9974  1277  0009               	retfie
  9975  1278                     __end_of_isr:	
  9976  1278                     __ptext44:	
  9977 ;; *************** function i1_LCDTimeUpdate *****************
  9978 ;; Defined at:
  9979 ;;		line 734 in file "Automated Solar Panel Orientation Setter.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;		None
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;		None
  9984 ;; Return value:  Size  Location     Type
  9985 ;;		None               void
  9986 ;; Registers used:
  9987 ;;		wreg, status,2, status,0, pclath, cstack
  9988 ;; Tracked objects:
  9989 ;;		On entry : 300/0
  9990 ;;		On exit  : 0/0
  9991 ;;		Unchanged: 0/0
  9992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9993 ;;      Params:         0       0       0       0       0
  9994 ;;      Locals:         0       0       0       0       0
  9995 ;;      Temps:          0       0       0       0       0
  9996 ;;      Totals:         0       0       0       0       0
  9997 ;;Total ram usage:        0 bytes
  9998 ;; Hardware stack levels used:    1
  9999 ;; Hardware stack levels required when called:    3
 10000 ;; This function calls:
 10001 ;;		i1_LCD_print_char
 10002 ;;		i1___lwdiv
 10003 ;;		i1___lwmod
 10004 ;; This function is called by:
 10005 ;;		_isr
 10006 ;; This function uses a non-reentrant model
 10007 ;;
 10008                           
 10009                           
 10010                           ;psect for function i1_LCDTimeUpdate
 10011  1278                     i1_LCDTimeUpdate:	
 10012                           
 10013                           ;incstack = 0
 10014 ;; hardware stack exceeded
 10015                           ; Regs used in i1_LCDTimeUpdate: [wreg+status,2+status,0+pclath+cstack]
 10016  1278  300C               	movlw	12
 10017                           
 10018                           ;Automated Solar Panel Orientation Setter.c: 735: LCD_print_char(1,12,hour/10+48);
 10019  1279  01F7               	clrf	i1LCD_print_char@row
 10020  127A  0AF7               	incf	i1LCD_print_char@row,f
 10021  127B  01F8               	clrf	i1LCD_print_char@row+1
 10022  127C  00F9               	movwf	i1LCD_print_char@column
 10023  127D  300A               	movlw	10
 10024  127E  01FA               	clrf	i1LCD_print_char@column+1
 10025  127F  00F0               	movwf	i1___lwdiv@divisor
 10026  1280  01F1               	clrf	i1___lwdiv@divisor+1
 10027  1281  0853               	movf	_hour+1,w
 10028  1282  00F3               	movwf	i1___lwdiv@dividend+1
 10029  1283  0852               	movf	_hour,w
 10030  1284  00F2               	movwf	i1___lwdiv@dividend
 10031  1285  2313  160A  118A   	fcall	i1___lwdiv
 10032  1288  0870               	movf	?i1___lwdiv,w
 10033  1289  3E30               	addlw	48
 10034  128A  00FB               	movwf	i1LCD_print_char@print_value
 10035  128B  22D5  160A  118A   	fcall	i1_LCD_print_char
 10036  128E  300D               	movlw	13
 10037                           
 10038                           ;Automated Solar Panel Orientation Setter.c: 736: LCD_print_char(1,13,hour%10+48);
 10039  128F  01F7               	clrf	i1LCD_print_char@row
 10040  1290  0AF7               	incf	i1LCD_print_char@row,f
 10041  1291  01F8               	clrf	i1LCD_print_char@row+1
 10042  1292  00F9               	movwf	i1LCD_print_char@column
 10043  1293  300A               	movlw	10
 10044  1294  01FA               	clrf	i1LCD_print_char@column+1
 10045  1295  00F0               	movwf	i1___lwmod@divisor
 10046  1296  01F1               	clrf	i1___lwmod@divisor+1
 10047  1297  1283               	bcf	3,5	;RP0=0, select bank0
 10048  1298  1303               	bcf	3,6	;RP1=0, select bank0
 10049  1299  0853               	movf	_hour+1,w
 10050  129A  00F3               	movwf	i1___lwmod@dividend+1
 10051  129B  0852               	movf	_hour,w
 10052  129C  00F2               	movwf	i1___lwmod@dividend
 10053  129D  22EF  160A  118A   	fcall	i1___lwmod
 10054  12A0  0870               	movf	?i1___lwmod,w
 10055  12A1  3E30               	addlw	48
 10056  12A2  00FB               	movwf	i1LCD_print_char@print_value
 10057  12A3  22D5  160A  118A   	fcall	i1_LCD_print_char
 10058  12A6  300F               	movlw	15
 10059                           
 10060                           ;Automated Solar Panel Orientation Setter.c: 737: LCD_print_char(1,15,minute/10+48);
 10061  12A7  01F7               	clrf	i1LCD_print_char@row
 10062  12A8  0AF7               	incf	i1LCD_print_char@row,f
 10063  12A9  01F8               	clrf	i1LCD_print_char@row+1
 10064  12AA  00F9               	movwf	i1LCD_print_char@column
 10065  12AB  300A               	movlw	10
 10066  12AC  01FA               	clrf	i1LCD_print_char@column+1
 10067  12AD  00F0               	movwf	i1___lwdiv@divisor
 10068  12AE  01F1               	clrf	i1___lwdiv@divisor+1
 10069  12AF  1283               	bcf	3,5	;RP0=0, select bank0
 10070  12B0  1303               	bcf	3,6	;RP1=0, select bank0
 10071  12B1  0859               	movf	_minute+1,w
 10072  12B2  00F3               	movwf	i1___lwdiv@dividend+1
 10073  12B3  0858               	movf	_minute,w
 10074  12B4  00F2               	movwf	i1___lwdiv@dividend
 10075  12B5  2313  160A  118A   	fcall	i1___lwdiv
 10076  12B8  0870               	movf	?i1___lwdiv,w
 10077  12B9  3E30               	addlw	48
 10078  12BA  00FB               	movwf	i1LCD_print_char@print_value
 10079  12BB  22D5  160A  118A   	fcall	i1_LCD_print_char
 10080  12BE  3010               	movlw	16
 10081                           
 10082                           ;Automated Solar Panel Orientation Setter.c: 738: LCD_print_char(1,16,minute%10+48);
 10083  12BF  01F7               	clrf	i1LCD_print_char@row
 10084  12C0  0AF7               	incf	i1LCD_print_char@row,f
 10085  12C1  01F8               	clrf	i1LCD_print_char@row+1
 10086  12C2  00F9               	movwf	i1LCD_print_char@column
 10087  12C3  300A               	movlw	10
 10088  12C4  01FA               	clrf	i1LCD_print_char@column+1
 10089  12C5  00F0               	movwf	i1___lwmod@divisor
 10090  12C6  01F1               	clrf	i1___lwmod@divisor+1
 10091  12C7  1283               	bcf	3,5	;RP0=0, select bank0
 10092  12C8  1303               	bcf	3,6	;RP1=0, select bank0
 10093  12C9  0859               	movf	_minute+1,w
 10094  12CA  00F3               	movwf	i1___lwmod@dividend+1
 10095  12CB  0858               	movf	_minute,w
 10096  12CC  00F2               	movwf	i1___lwmod@dividend
 10097  12CD  22EF  160A  118A   	fcall	i1___lwmod
 10098  12D0  0870               	movf	?i1___lwmod,w
 10099  12D1  3E30               	addlw	48
 10100  12D2  00FB               	movwf	i1LCD_print_char@print_value
 10101  12D3  22D5               	fcall	i1_LCD_print_char
 10102  12D4  0008               	return
 10103  12D5                     __end_ofi1_LCDTimeUpdate:	
 10104  12D5                     __ptext47:	
 10105 ;; *************** function i1_LCD_print_char *****************
 10106 ;; Defined at:
 10107 ;;		line 174 in file "lcdv2.h"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  row             2    7[COMMON] int 
 10110 ;;  column          2    9[COMMON] int 
 10111 ;;  print_value     1   11[COMMON] unsigned char 
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;		None
 10114 ;; Return value:  Size  Location     Type
 10115 ;;		None               void
 10116 ;; Registers used:
 10117 ;;		wreg, status,2, status,0, pclath, cstack
 10118 ;; Tracked objects:
 10119 ;;		On entry : 300/0
 10120 ;;		On exit  : 0/0
 10121 ;;		Unchanged: 0/0
 10122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10123 ;;      Params:         5       0       0       0       0
 10124 ;;      Locals:         0       0       0       0       0
 10125 ;;      Temps:          1       0       0       0       0
 10126 ;;      Totals:         6       0       0       0       0
 10127 ;;Total ram usage:        6 bytes
 10128 ;; Hardware stack levels used:    1
 10129 ;; Hardware stack levels required when called:    2
 10130 ;; This function calls:
 10131 ;;		i1_lcd_add
 10132 ;;		i1_position
 10133 ;; This function is called by:
 10134 ;;		_isr
 10135 ;;		i1_LCDTimeUpdate
 10136 ;; This function uses a non-reentrant model
 10137 ;;
 10138                           
 10139                           
 10140                           ;psect for function i1_LCD_print_char
 10141  12D5                     i1_LCD_print_char:	
 10142                           
 10143                           ;lcdv2.h: 175: position(row,column);
 10144                           
 10145                           ;incstack = 0
 10146                           ; Regs used in i1_LCD_print_char: [wreg+status,2+status,0+pclath+cstack]
 10147  12D5  0879               	movf	i1LCD_print_char@column,w
 10148  12D6  00F1               	movwf	i1position@collum
 10149  12D7  0877               	movf	i1LCD_print_char@row,w
 10150  12D8  23F8  160A  118A   	fcall	i1_position
 10151                           
 10152                           ;lcdv2.h: 176: RC2 = 1;
 10153  12DB  1283               	bcf	3,5	;RP0=0, select bank0
 10154  12DC  1303               	bcf	3,6	;RP1=0, select bank0
 10155  12DD  1507               	bsf	7,2	;volatile
 10156                           
 10157                           ;lcdv2.h: 177: _delay(20);
 10158  12DE  3006               	movlw	6
 10159  12DF  00FC               	movwf	??i1_LCD_print_char
 10160  12E0                     u689_27:	
 10161  12E0  0BFC               	decfsz	??i1_LCD_print_char,f
 10162  12E1  2AE0               	goto	u689_27
 10163  12E2  0000               	nop
 10164                           
 10165                           ;lcdv2.h: 178: lcd_data = print_value;
 10166  12E3  087B               	movf	i1LCD_print_char@print_value,w
 10167  12E4  1283               	bcf	3,5	;RP0=0, select bank0
 10168  12E5  1303               	bcf	3,6	;RP1=0, select bank0
 10169  12E6  00DF               	movwf	_lcd_data
 10170                           
 10171                           ;lcdv2.h: 179: lcd_add();
 10172  12E7  233D  160A  118A   	fcall	i1_lcd_add
 10173                           
 10174                           ;lcdv2.h: 180: _delay(100);
 10175  12EA  3021               	movlw	33
 10176  12EB  00FC               	movwf	??i1_LCD_print_char
 10177  12EC                     u690_27:	
 10178  12EC  0BFC               	decfsz	??i1_LCD_print_char,f
 10179  12ED  2AEC               	goto	u690_27
 10180  12EE  0008               	return
 10181  12EF                     __end_ofi1_LCD_print_char:	
 10182  12EF                     __ptext45:	
 10183 ;; *************** function i1___lwmod *****************
 10184 ;; Defined at:
 10185 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 10186 ;; Parameters:    Size  Location     Type
 10187 ;;  divisor         2    0[COMMON] unsigned int 
 10188 ;;  dividend        2    2[COMMON] unsigned int 
 10189 ;; Auto vars:     Size  Location     Type
 10190 ;;  __lwmod         1    4[COMMON] unsigned char 
 10191 ;; Return value:  Size  Location     Type
 10192 ;;                  2    0[COMMON] unsigned int 
 10193 ;; Registers used:
 10194 ;;		wreg, status,2, status,0
 10195 ;; Tracked objects:
 10196 ;;		On entry : 300/0
 10197 ;;		On exit  : 300/0
 10198 ;;		Unchanged: 300/0
 10199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10200 ;;      Params:         4       0       0       0       0
 10201 ;;      Locals:         1       0       0       0       0
 10202 ;;      Temps:          0       0       0       0       0
 10203 ;;      Totals:         5       0       0       0       0
 10204 ;;Total ram usage:        5 bytes
 10205 ;; Hardware stack levels used:    1
 10206 ;; This function calls:
 10207 ;;		Nothing
 10208 ;; This function is called by:
 10209 ;;		_isr
 10210 ;;		i1_LCDTimeUpdate
 10211 ;; This function uses a non-reentrant model
 10212 ;;
 10213                           
 10214                           
 10215                           ;psect for function i1___lwmod
 10216  12EF                     i1___lwmod:	
 10217                           
 10218                           ;incstack = 0
 10219                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
 10220  12EF  0870               	movf	i1___lwmod@divisor,w
 10221  12F0  0471               	iorwf	i1___lwmod@divisor+1,w
 10222  12F1  1903               	btfsc	3,2
 10223  12F2  2B0E               	goto	i1l4056
 10224  12F3  01F4               	clrf	i1___lwmod@counter
 10225  12F4                     L43:	
 10226  12F4  0AF4               	incf	i1___lwmod@counter,f
 10227  12F5  1BF1               	btfsc	i1___lwmod@divisor+1,7
 10228  12F6  2AFB               	goto	i1l4048
 10229  12F7  1003               	clrc
 10230  12F8  0DF0               	rlf	i1___lwmod@divisor,f
 10231  12F9  0DF1               	rlf	i1___lwmod@divisor+1,f
 10232  12FA  2AF4               	goto	L43
 10233  12FB                     i1l4048:	
 10234  12FB  0871               	movf	i1___lwmod@divisor+1,w
 10235  12FC  0273               	subwf	i1___lwmod@dividend+1,w
 10236  12FD  1D03               	skipz
 10237  12FE  2B01               	goto	u528_25
 10238  12FF  0870               	movf	i1___lwmod@divisor,w
 10239  1300  0272               	subwf	i1___lwmod@dividend,w
 10240  1301                     u528_25:	
 10241  1301  1C03               	skipc
 10242  1302  2B0A               	goto	L44
 10243  1303  0870               	movf	i1___lwmod@divisor,w
 10244  1304  02F2               	subwf	i1___lwmod@dividend,f
 10245  1305  0871               	movf	i1___lwmod@divisor+1,w
 10246  1306  1C03               	skipc
 10247  1307  03F3               	decf	i1___lwmod@dividend+1,f
 10248  1308  02F3               	subwf	i1___lwmod@dividend+1,f
 10249  1309  1003               	clrc
 10250  130A                     L44:	
 10251  130A  0CF1               	rrf	i1___lwmod@divisor+1,f
 10252  130B  0CF0               	rrf	i1___lwmod@divisor,f
 10253  130C  0BF4               	decfsz	i1___lwmod@counter,f
 10254  130D  2AFB               	goto	i1l4048
 10255  130E                     i1l4056:	
 10256  130E  0873               	movf	i1___lwmod@dividend+1,w
 10257  130F  00F1               	movwf	?i1___lwmod+1
 10258  1310  0872               	movf	i1___lwmod@dividend,w
 10259  1311  00F0               	movwf	?i1___lwmod
 10260  1312  0008               	return
 10261  1313                     __end_ofi1___lwmod:	
 10262  1313                     __ptext46:	
 10263 ;; *************** function i1___lwdiv *****************
 10264 ;; Defined at:
 10265 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 10266 ;; Parameters:    Size  Location     Type
 10267 ;;  divisor         2    0[COMMON] unsigned int 
 10268 ;;  dividend        2    2[COMMON] unsigned int 
 10269 ;; Auto vars:     Size  Location     Type
 10270 ;;  __lwdiv         2    4[COMMON] unsigned int 
 10271 ;;  __lwdiv         1    6[COMMON] unsigned char 
 10272 ;; Return value:  Size  Location     Type
 10273 ;;                  2    0[COMMON] unsigned int 
 10274 ;; Registers used:
 10275 ;;		wreg, status,2, status,0
 10276 ;; Tracked objects:
 10277 ;;		On entry : 300/0
 10278 ;;		On exit  : 300/0
 10279 ;;		Unchanged: 300/0
 10280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10281 ;;      Params:         4       0       0       0       0
 10282 ;;      Locals:         3       0       0       0       0
 10283 ;;      Temps:          0       0       0       0       0
 10284 ;;      Totals:         7       0       0       0       0
 10285 ;;Total ram usage:        7 bytes
 10286 ;; Hardware stack levels used:    1
 10287 ;; This function calls:
 10288 ;;		Nothing
 10289 ;; This function is called by:
 10290 ;;		i1_LCDTimeUpdate
 10291 ;; This function uses a non-reentrant model
 10292 ;;
 10293                           
 10294                           
 10295                           ;psect for function i1___lwdiv
 10296  1313                     i1___lwdiv:	
 10297                           
 10298                           ;incstack = 0
 10299                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 10300  1313  01F4               	clrf	i1___lwdiv@quotient
 10301  1314  01F5               	clrf	i1___lwdiv@quotient+1
 10302  1315  0870               	movf	i1___lwdiv@divisor,w
 10303  1316  0471               	iorwf	i1___lwdiv@divisor+1,w
 10304  1317  1903               	btfsc	3,2
 10305  1318  2B38               	goto	i1l4036
 10306  1319  01F6               	clrf	i1___lwdiv@counter
 10307  131A                     L45:	
 10308  131A  0AF6               	incf	i1___lwdiv@counter,f
 10309  131B  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 10310  131C  2B21               	goto	i1l4024
 10311  131D  1003               	clrc
 10312  131E  0DF0               	rlf	i1___lwdiv@divisor,f
 10313  131F  0DF1               	rlf	i1___lwdiv@divisor+1,f
 10314  1320  2B1A               	goto	L45
 10315  1321                     i1l4024:	
 10316  1321  1003               	clrc
 10317  1322  0DF4               	rlf	i1___lwdiv@quotient,f
 10318  1323  0DF5               	rlf	i1___lwdiv@quotient+1,f
 10319  1324  0871               	movf	i1___lwdiv@divisor+1,w
 10320  1325  0273               	subwf	i1___lwdiv@dividend+1,w
 10321  1326  1D03               	skipz
 10322  1327  2B2A               	goto	u524_25
 10323  1328  0870               	movf	i1___lwdiv@divisor,w
 10324  1329  0272               	subwf	i1___lwdiv@dividend,w
 10325  132A                     u524_25:	
 10326  132A  1C03               	skipc
 10327  132B  2B34               	goto	L46
 10328  132C  0870               	movf	i1___lwdiv@divisor,w
 10329  132D  02F2               	subwf	i1___lwdiv@dividend,f
 10330  132E  0871               	movf	i1___lwdiv@divisor+1,w
 10331  132F  1C03               	skipc
 10332  1330  03F3               	decf	i1___lwdiv@dividend+1,f
 10333  1331  02F3               	subwf	i1___lwdiv@dividend+1,f
 10334  1332  1474               	bsf	i1___lwdiv@quotient,0
 10335  1333  1003               	clrc
 10336  1334                     L46:	
 10337  1334  0CF1               	rrf	i1___lwdiv@divisor+1,f
 10338  1335  0CF0               	rrf	i1___lwdiv@divisor,f
 10339  1336  0BF6               	decfsz	i1___lwdiv@counter,f
 10340  1337  2B21               	goto	i1l4024
 10341  1338                     i1l4036:	
 10342  1338  0875               	movf	i1___lwdiv@quotient+1,w
 10343  1339  00F1               	movwf	?i1___lwdiv+1
 10344  133A  0874               	movf	i1___lwdiv@quotient,w
 10345  133B  00F0               	movwf	?i1___lwdiv
 10346  133C  0008               	return
 10347  133D                     __end_ofi1___lwdiv:	
 10348  133D                     __ptext49:	
 10349 ;; *************** function i1_lcd_add *****************
 10350 ;; Defined at:
 10351 ;;		line 224 in file "lcdv2.h"
 10352 ;; Parameters:    Size  Location     Type
 10353 ;;		None
 10354 ;; Auto vars:     Size  Location     Type
 10355 ;;		None
 10356 ;; Return value:  Size  Location     Type
 10357 ;;		None               void
 10358 ;; Registers used:
 10359 ;;		wreg, status,2, status,0
 10360 ;; Tracked objects:
 10361 ;;		On entry : 300/0
 10362 ;;		On exit  : 0/0
 10363 ;;		Unchanged: 0/0
 10364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10365 ;;      Params:         0       0       0       0       0
 10366 ;;      Locals:         0       0       0       0       0
 10367 ;;      Temps:          1       0       0       0       0
 10368 ;;      Totals:         1       0       0       0       0
 10369 ;;Total ram usage:        1 bytes
 10370 ;; Hardware stack levels used:    1
 10371 ;; This function calls:
 10372 ;;		Nothing
 10373 ;; This function is called by:
 10374 ;;		i1_LCD_print_char
 10375 ;;		i1_position
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           
 10380                           ;psect for function i1_lcd_add
 10381  133D                     i1_lcd_add:	
 10382                           
 10383                           ;lcdv2.h: 230: bit0 = lcd_data;
 10384                           
 10385                           ;incstack = 0
 10386                           ; Regs used in i1_lcd_add: [wreg+status,2+status,0]
 10387  133D  107D               	bcf	_bit0/(0+8),_bit0& (0+7)
 10388  133E  185F               	btfsc	_lcd_data,0
 10389  133F  147D               	bsf	_bit0/(0+8),_bit0& (0+7)
 10390                           
 10391                           ;lcdv2.h: 231: bit1 = lcd_data>>1;
 10392  1340  1283               	bcf	3,5	;RP0=0, select bank0
 10393  1341  1303               	bcf	3,6	;RP1=0, select bank0
 10394  1342  085F               	movf	_lcd_data,w
 10395  1343  00F0               	movwf	??i1_lcd_add
 10396  1344  1003               	clrc
 10397  1345  0CF0               	rrf	??i1_lcd_add,f
 10398  1346  10FD               	bcf	_bit1/(0+8),_bit1& (0+7)
 10399  1347  1870               	btfsc	??i1_lcd_add,0
 10400  1348  14FD               	bsf	_bit1/(0+8),_bit1& (0+7)
 10401                           
 10402                           ;lcdv2.h: 232: bit2 = lcd_data>>2;
 10403  1349  1283               	bcf	3,5	;RP0=0, select bank0
 10404  134A  1303               	bcf	3,6	;RP1=0, select bank0
 10405  134B  085F               	movf	_lcd_data,w
 10406  134C  00F0               	movwf	??i1_lcd_add
 10407  134D  1003               	clrc
 10408  134E  0CF0               	rrf	??i1_lcd_add,f
 10409  134F  1003               	clrc
 10410  1350  0CF0               	rrf	??i1_lcd_add,f
 10411  1351  117D               	bcf	_bit2/(0+8),_bit2& (0+7)
 10412  1352  1870               	btfsc	??i1_lcd_add,0
 10413  1353  157D               	bsf	_bit2/(0+8),_bit2& (0+7)
 10414                           
 10415                           ;lcdv2.h: 233: bit3 = lcd_data>>3;
 10416  1354  1283               	bcf	3,5	;RP0=0, select bank0
 10417  1355  1303               	bcf	3,6	;RP1=0, select bank0
 10418  1356  085F               	movf	_lcd_data,w
 10419  1357  00F0               	movwf	??i1_lcd_add
 10420  1358  1003               	clrc
 10421  1359  0CF0               	rrf	??i1_lcd_add,f
 10422  135A  1003               	clrc
 10423  135B  0CF0               	rrf	??i1_lcd_add,f
 10424  135C  1003               	clrc
 10425  135D  0CF0               	rrf	??i1_lcd_add,f
 10426  135E  11FD               	bcf	_bit3/(0+8),_bit3& (0+7)
 10427  135F  1870               	btfsc	??i1_lcd_add,0
 10428  1360  15FD               	bsf	_bit3/(0+8),_bit3& (0+7)
 10429                           
 10430                           ;lcdv2.h: 234: bit4 = lcd_data>>4;
 10431  1361  1283               	bcf	3,5	;RP0=0, select bank0
 10432  1362  1303               	bcf	3,6	;RP1=0, select bank0
 10433  1363  085F               	movf	_lcd_data,w
 10434  1364  00F0               	movwf	??i1_lcd_add
 10435  1365  3004               	movlw	4
 10436  1366                     u353_25:	
 10437  1366  1003               	clrc
 10438  1367  0CF0               	rrf	??i1_lcd_add,f
 10439  1368  3EFF               	addlw	-1
 10440  1369  1D03               	skipz
 10441  136A  2B66               	goto	u353_25
 10442  136B  127D               	bcf	_bit4/(0+8),_bit4& (0+7)
 10443  136C  1870               	btfsc	??i1_lcd_add,0
 10444  136D  167D               	bsf	_bit4/(0+8),_bit4& (0+7)
 10445                           
 10446                           ;lcdv2.h: 235: bit5 = lcd_data>>5;
 10447  136E  1283               	bcf	3,5	;RP0=0, select bank0
 10448  136F  1303               	bcf	3,6	;RP1=0, select bank0
 10449  1370  085F               	movf	_lcd_data,w
 10450  1371  00F0               	movwf	??i1_lcd_add
 10451  1372  3005               	movlw	5
 10452  1373                     u355_25:	
 10453  1373  1003               	clrc
 10454  1374  0CF0               	rrf	??i1_lcd_add,f
 10455  1375  3EFF               	addlw	-1
 10456  1376  1D03               	skipz
 10457  1377  2B73               	goto	u355_25
 10458  1378  12FD               	bcf	_bit5/(0+8),_bit5& (0+7)
 10459  1379  1870               	btfsc	??i1_lcd_add,0
 10460  137A  16FD               	bsf	_bit5/(0+8),_bit5& (0+7)
 10461                           
 10462                           ;lcdv2.h: 236: bit6 = lcd_data>>6;
 10463  137B  1283               	bcf	3,5	;RP0=0, select bank0
 10464  137C  1303               	bcf	3,6	;RP1=0, select bank0
 10465  137D  085F               	movf	_lcd_data,w
 10466  137E  00F0               	movwf	??i1_lcd_add
 10467  137F  3006               	movlw	6
 10468  1380                     u357_25:	
 10469  1380  1003               	clrc
 10470  1381  0CF0               	rrf	??i1_lcd_add,f
 10471  1382  3EFF               	addlw	-1
 10472  1383  1D03               	skipz
 10473  1384  2B80               	goto	u357_25
 10474  1385  137D               	bcf	_bit6/(0+8),_bit6& (0+7)
 10475  1386  1870               	btfsc	??i1_lcd_add,0
 10476  1387  177D               	bsf	_bit6/(0+8),_bit6& (0+7)
 10477                           
 10478                           ;lcdv2.h: 237: bit7 = lcd_data>>7;
 10479  1388  1283               	bcf	3,5	;RP0=0, select bank0
 10480  1389  1303               	bcf	3,6	;RP1=0, select bank0
 10481  138A  085F               	movf	_lcd_data,w
 10482  138B  00F0               	movwf	??i1_lcd_add
 10483  138C  3007               	movlw	7
 10484  138D                     u359_25:	
 10485  138D  1003               	clrc
 10486  138E  0CF0               	rrf	??i1_lcd_add,f
 10487  138F  3EFF               	addlw	-1
 10488  1390  1D03               	skipz
 10489  1391  2B8D               	goto	u359_25
 10490  1392  1166               	bcf	_bit7/(0+8),_bit7& (0+7)
 10491  1393  1870               	btfsc	??i1_lcd_add,0
 10492  1394  1566               	bsf	_bit7/(0+8),_bit7& (0+7)
 10493                           
 10494                           ;lcdv2.h: 239: RC3 = 0;
 10495  1395  1283               	bcf	3,5	;RP0=0, select bank0
 10496  1396  1303               	bcf	3,6	;RP1=0, select bank0
 10497  1397  1187               	bcf	7,3	;volatile
 10498                           
 10499                           ;lcdv2.h: 240: _delay(1);
 10500  1398  0000               	nop
 10501                           
 10502                           ;lcdv2.h: 241: RC3 = 1;
 10503  1399  1283               	bcf	3,5	;RP0=0, select bank0
 10504  139A  1303               	bcf	3,6	;RP1=0, select bank0
 10505  139B  1587               	bsf	7,3	;volatile
 10506                           
 10507                           ;lcdv2.h: 242: _delay(1);
 10508  139C  0000               	nop
 10509                           
 10510                           ;lcdv2.h: 244: RC1 = bit4;
 10511  139D  1E7D               	btfss	_bit4/(0+8),_bit4& (0+7)
 10512  139E  2BA3               	goto	u361_20
 10513  139F  1283               	bcf	3,5	;RP0=0, select bank0
 10514  13A0  1303               	bcf	3,6	;RP1=0, select bank0
 10515  13A1  1487               	bsf	7,1	;volatile
 10516  13A2  2BA6               	goto	i1l3192
 10517  13A3                     u361_20:	
 10518  13A3  1283               	bcf	3,5	;RP0=0, select bank0
 10519  13A4  1303               	bcf	3,6	;RP1=0, select bank0
 10520  13A5  1087               	bcf	7,1	;volatile
 10521  13A6                     i1l3192:	
 10522                           
 10523                           ;lcdv2.h: 245: RD0 = bit5;
 10524  13A6  1EFD               	btfss	_bit5/(0+8),_bit5& (0+7)
 10525  13A7  2BAC               	goto	u363_20
 10526  13A8  1283               	bcf	3,5	;RP0=0, select bank0
 10527  13A9  1303               	bcf	3,6	;RP1=0, select bank0
 10528  13AA  1408               	bsf	8,0	;volatile
 10529  13AB  2BAF               	goto	i1l3194
 10530  13AC                     u363_20:	
 10531  13AC  1283               	bcf	3,5	;RP0=0, select bank0
 10532  13AD  1303               	bcf	3,6	;RP1=0, select bank0
 10533  13AE  1008               	bcf	8,0	;volatile
 10534  13AF                     i1l3194:	
 10535                           
 10536                           ;lcdv2.h: 246: RC0 = bit6;
 10537  13AF  1F7D               	btfss	_bit6/(0+8),_bit6& (0+7)
 10538  13B0  2BB5               	goto	u365_20
 10539  13B1  1283               	bcf	3,5	;RP0=0, select bank0
 10540  13B2  1303               	bcf	3,6	;RP1=0, select bank0
 10541  13B3  1407               	bsf	7,0	;volatile
 10542  13B4  2BB8               	goto	i1l3196
 10543  13B5                     u365_20:	
 10544  13B5  1283               	bcf	3,5	;RP0=0, select bank0
 10545  13B6  1303               	bcf	3,6	;RP1=0, select bank0
 10546  13B7  1007               	bcf	7,0	;volatile
 10547  13B8                     i1l3196:	
 10548                           
 10549                           ;lcdv2.h: 247: RD1 = bit7;
 10550  13B8  1D66               	btfss	_bit7/(0+8),_bit7& (0+7)
 10551  13B9  2BBE               	goto	u367_20
 10552  13BA  1283               	bcf	3,5	;RP0=0, select bank0
 10553  13BB  1303               	bcf	3,6	;RP1=0, select bank0
 10554  13BC  1488               	bsf	8,1	;volatile
 10555  13BD  2BC1               	goto	i1l3198
 10556  13BE                     u367_20:	
 10557  13BE  1283               	bcf	3,5	;RP0=0, select bank0
 10558  13BF  1303               	bcf	3,6	;RP1=0, select bank0
 10559  13C0  1088               	bcf	8,1	;volatile
 10560  13C1                     i1l3198:	
 10561                           
 10562                           ;lcdv2.h: 249: _delay(1);
 10563  13C1  0000               	nop
 10564                           
 10565                           ;lcdv2.h: 250: RC3 = 0;
 10566  13C2  1283               	bcf	3,5	;RP0=0, select bank0
 10567  13C3  1303               	bcf	3,6	;RP1=0, select bank0
 10568  13C4  1187               	bcf	7,3	;volatile
 10569                           
 10570                           ;lcdv2.h: 251: _delay(1);
 10571  13C5  0000               	nop
 10572                           
 10573                           ;lcdv2.h: 255: RC3 = 0;
 10574  13C6  1283               	bcf	3,5	;RP0=0, select bank0
 10575  13C7  1303               	bcf	3,6	;RP1=0, select bank0
 10576  13C8  1187               	bcf	7,3	;volatile
 10577                           
 10578                           ;lcdv2.h: 256: _delay(1);
 10579  13C9  0000               	nop
 10580                           
 10581                           ;lcdv2.h: 257: RC3 = 1;
 10582  13CA  1283               	bcf	3,5	;RP0=0, select bank0
 10583  13CB  1303               	bcf	3,6	;RP1=0, select bank0
 10584  13CC  1587               	bsf	7,3	;volatile
 10585                           
 10586                           ;lcdv2.h: 258: _delay(1);
 10587  13CD  0000               	nop
 10588                           
 10589                           ;lcdv2.h: 260: RC1 = bit0;
 10590  13CE  1C7D               	btfss	_bit0/(0+8),_bit0& (0+7)
 10591  13CF  2BD4               	goto	u369_20
 10592  13D0  1283               	bcf	3,5	;RP0=0, select bank0
 10593  13D1  1303               	bcf	3,6	;RP1=0, select bank0
 10594  13D2  1487               	bsf	7,1	;volatile
 10595  13D3  2BD7               	goto	i1l3214
 10596  13D4                     u369_20:	
 10597  13D4  1283               	bcf	3,5	;RP0=0, select bank0
 10598  13D5  1303               	bcf	3,6	;RP1=0, select bank0
 10599  13D6  1087               	bcf	7,1	;volatile
 10600  13D7                     i1l3214:	
 10601                           
 10602                           ;lcdv2.h: 261: RD0 = bit1;
 10603  13D7  1CFD               	btfss	_bit1/(0+8),_bit1& (0+7)
 10604  13D8  2BDD               	goto	u371_20
 10605  13D9  1283               	bcf	3,5	;RP0=0, select bank0
 10606  13DA  1303               	bcf	3,6	;RP1=0, select bank0
 10607  13DB  1408               	bsf	8,0	;volatile
 10608  13DC  2BE0               	goto	i1l3216
 10609  13DD                     u371_20:	
 10610  13DD  1283               	bcf	3,5	;RP0=0, select bank0
 10611  13DE  1303               	bcf	3,6	;RP1=0, select bank0
 10612  13DF  1008               	bcf	8,0	;volatile
 10613  13E0                     i1l3216:	
 10614                           
 10615                           ;lcdv2.h: 262: RC0 = bit2;
 10616  13E0  1D7D               	btfss	_bit2/(0+8),_bit2& (0+7)
 10617  13E1  2BE6               	goto	u373_20
 10618  13E2  1283               	bcf	3,5	;RP0=0, select bank0
 10619  13E3  1303               	bcf	3,6	;RP1=0, select bank0
 10620  13E4  1407               	bsf	7,0	;volatile
 10621  13E5  2BE9               	goto	i1l3218
 10622  13E6                     u373_20:	
 10623  13E6  1283               	bcf	3,5	;RP0=0, select bank0
 10624  13E7  1303               	bcf	3,6	;RP1=0, select bank0
 10625  13E8  1007               	bcf	7,0	;volatile
 10626  13E9                     i1l3218:	
 10627                           
 10628                           ;lcdv2.h: 263: RD1 = bit3;
 10629  13E9  1DFD               	btfss	_bit3/(0+8),_bit3& (0+7)
 10630  13EA  2BEF               	goto	u375_20
 10631  13EB  1283               	bcf	3,5	;RP0=0, select bank0
 10632  13EC  1303               	bcf	3,6	;RP1=0, select bank0
 10633  13ED  1488               	bsf	8,1	;volatile
 10634  13EE  2BF2               	goto	i1l3220
 10635  13EF                     u375_20:	
 10636  13EF  1283               	bcf	3,5	;RP0=0, select bank0
 10637  13F0  1303               	bcf	3,6	;RP1=0, select bank0
 10638  13F1  1088               	bcf	8,1	;volatile
 10639  13F2                     i1l3220:	
 10640                           
 10641                           ;lcdv2.h: 265: _delay(1);
 10642  13F2  0000               	nop
 10643                           
 10644                           ;lcdv2.h: 266: RC3 = 0;
 10645  13F3  1283               	bcf	3,5	;RP0=0, select bank0
 10646  13F4  1303               	bcf	3,6	;RP1=0, select bank0
 10647  13F5  1187               	bcf	7,3	;volatile
 10648                           
 10649                           ;lcdv2.h: 267: _delay(1);
 10650  13F6  0000               	nop
 10651  13F7  0008               	return
 10652  13F8                     __end_ofi1_lcd_add:	
 10653  007E                     btemp	set	126	;btemp
 10654  007E                     wtemp	set	126
 10655  007E                     wtemp0	set	126
 10656  0080                     wtemp1	set	128
 10657  0082                     wtemp2	set	130
 10658  0084                     wtemp3	set	132
 10659  0086                     wtemp4	set	134
 10660  0088                     wtemp5	set	136
 10661  007F                     wtemp6	set	127
 10662  007E                     ttemp	set	126
 10663  007E                     ttemp0	set	126
 10664  0081                     ttemp1	set	129
 10665  0084                     ttemp2	set	132
 10666  0087                     ttemp3	set	135
 10667  007F                     ttemp4	set	127
 10668  007E                     ltemp	set	126
 10669  007E                     ltemp0	set	126
 10670  0082                     ltemp1	set	130
 10671  0086                     ltemp2	set	134
 10672  0080                     ltemp3	set	128
 10673  13F8                     __ptext48:	
 10674 ;; *************** function i1_position *****************
 10675 ;; Defined at:
 10676 ;;		line 208 in file "lcdv2.h"
 10677 ;; Parameters:    Size  Location     Type
 10678 ;;  row             1    wreg     unsigned char 
 10679 ;;  collum          1    1[COMMON] unsigned char 
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;  row             1    5[COMMON] unsigned char 
 10682 ;;  position        1    4[COMMON] unsigned char 
 10683 ;; Return value:  Size  Location     Type
 10684 ;;		None               void
 10685 ;; Registers used:
 10686 ;;		wreg, status,2, status,0, pclath, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : 300/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10692 ;;      Params:         1       0       0       0       0
 10693 ;;      Locals:         2       0       0       0       0
 10694 ;;      Temps:          2       0       0       0       0
 10695 ;;      Totals:         5       0       0       0       0
 10696 ;;Total ram usage:        5 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:    1
 10699 ;; This function calls:
 10700 ;;		i1_lcd_add
 10701 ;; This function is called by:
 10702 ;;		i1_LCD_print_char
 10703 ;; This function uses a non-reentrant model
 10704 ;;
 10705                           
 10706                           
 10707                           ;psect for function i1_position
 10708  13F8                     i1_position:	
 10709                           
 10710                           ;incstack = 0
 10711                           ; Regs used in i1_position: [wreg+status,2+status,0+pclath+cstack]
 10712                           ;i1position@row stored from wreg
 10713  13F8  00F5               	movwf	i1position@row
 10714                           
 10715                           ;lcdv2.h: 210: char post ;
 10716                           ;lcdv2.h: 211: if( row == 1 ) row = 128;
 10717  13F9  0B75               	decfsz	i1position@row,w
 10718  13FA  2BFD               	goto	i1l3460
 10719  13FB  3080               	movlw	128
 10720  13FC  00F5               	movwf	i1position@row
 10721  13FD                     i1l3460:	
 10722                           
 10723                           ;lcdv2.h: 212: if( row == 2 ) row = 192;
 10724  13FD  3002               	movlw	2
 10725  13FE  0675               	xorwf	i1position@row,w
 10726  13FF  1D03               	btfss	3,2
 10727  1400  2C03               	goto	i1l3464
 10728  1401  30C0               	movlw	192
 10729  1402  00F5               	movwf	i1position@row
 10730  1403                     i1l3464:	
 10731                           
 10732                           ;lcdv2.h: 213: post = row + collum - 1;
 10733  1403  0871               	movf	i1position@collum,w
 10734  1404  0775               	addwf	i1position@row,w
 10735  1405  3EFF               	addlw	255
 10736  1406  00F4               	movwf	i1position@post
 10737                           
 10738                           ;lcdv2.h: 214: RC2 = 0;
 10739  1407  1107               	bcf	7,2	;volatile
 10740                           
 10741                           ;lcdv2.h: 215: _delay(20);
 10742  1408  3006               	movlw	6
 10743  1409  00F2               	movwf	??i1_position
 10744  140A                     u691_27:	
 10745  140A  0BF2               	decfsz	??i1_position,f
 10746  140B  2C0A               	goto	u691_27
 10747  140C  0000               	nop
 10748                           
 10749                           ;lcdv2.h: 216: lcd_data = post ;
 10750  140D  0874               	movf	i1position@post,w
 10751  140E  1283               	bcf	3,5	;RP0=0, select bank0
 10752  140F  1303               	bcf	3,6	;RP1=0, select bank0
 10753  1410  00DF               	movwf	_lcd_data
 10754                           
 10755                           ;lcdv2.h: 217: lcd_add();
 10756  1411  233D  160A  118A   	fcall	i1_lcd_add
 10757                           
 10758                           ;lcdv2.h: 218: _delay((unsigned long)((10)*(4000000/4000.0)));
 10759  1414  300D               	movlw	13
 10760  1415  00F3               	movwf	??i1_position+1
 10761  1416  30FB               	movlw	251
 10762  1417  00F2               	movwf	??i1_position
 10763  1418                     u692_27:	
 10764  1418  0BF2               	decfsz	??i1_position,f
 10765  1419  2C18               	goto	u692_27
 10766  141A  0BF3               	decfsz	??i1_position+1,f
 10767  141B  2C18               	goto	u692_27
 10768  141C  2C1D               	nop2
 10769  141D  0008               	return
 10770  141E                     __end_ofi1_position:	
 10771                           
 10772                           	psect	intentry
 10773  0004                     __pintentry:	
 10774                           ;incstack = 0
 10775 ;; hardware stack exceeded
 10776                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10777                           
 10778  0004                     interrupt_function:	
 10779  007E                     saved_w	set	btemp
 10780  0004  00FE               	movwf	btemp
 10781  0005  0E03               	swapf	3,w
 10782  0006  1283               	bcf	3,5	;RP0=0, select bank0
 10783  0007  1303               	bcf	3,6	;RP1=0, select bank0
 10784  0008  00A0               	movwf	??_isr
 10785  0009  0804               	movf	4,w
 10786  000A  00A1               	movwf	??_isr+1
 10787  000B  080A               	movf	10,w
 10788  000C  00A2               	movwf	??_isr+2
 10789  000D  160A  118A  29F9   	ljmp	_isr


Data Sizes:
    Strings     197
    Constant    30
    Data        0
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     45      71
    BANK1            80      0      20
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf$355	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_15(CODE[17]), STR_14(CODE[17]), 

    printf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[18]), STR_3(CODE[18]), STR_2(CODE[18]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    Serial_Print@a	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_13(CODE[20]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_LCD_print_char
    i1_LCDTimeUpdate->i1_LCD_print_char
    i1_LCD_print_char->i1___lwdiv
    i1_position->i1_lcd_add

Critical Paths under _main in BANK0

    _printf->___lwmod
    _putch->_lcd_add
    _clr_display->_lcd_add
    _a2d_read->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _Serial_Print_Int->___awdiv
    _LCDTimeUpdate->_LCD_print_char
    ___lwmod->___lwdiv
    _LCD_print_char->___lwmod
    _position->_lcd_add
    _CheckMode->_Serial_Println_Int
    _Serial_Println_Int->___awdiv
    ___awdiv->___wmul
    _CheckKeyPad->_RowNo
    _Calculate->_RotateMotorLeft
    _Calculate->_RotateMotorRight

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   59821
                                             42 BANK0      3     3      0
                          _Calculate
                          _CheckMode
                      _LCDTimeUpdate
                     _LCD_print_char
                        _Serial_Init
                     _Serial_NewLine
                       _Serial_Print
                   _Serial_Print_Int
                      _Setup_IOports
                        _Timer1_Init
                            ___ltdiv
                            ___ltmod
                           _a2d_read
                          _atod_init
                        _clr_display
                        _eeprom_read
                       _eeprom_write
                    _enableInterrupt
                           _lcd_init
                                _nop
                           _position
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              28    26      2    4449
                                             15 BANK0     24    22      2
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      22
                                              4 BANK0      2     2      0
                            _lcd_add
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     145
                                              3 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     230
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _enableInterrupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         2     1      1      97
                                              3 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          1     1      0      22
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _clr_display                                          2     2      0       0
                                              4 BANK0      2     2      0
                            _lcd_add
 ---------------------------------------------------------------------------------
 (1) _atod_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _a2d_read                                             0     0      0    7162
                            ___awdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                             ___wmul
                     _read_a2d_value
 ---------------------------------------------------------------------------------
 (2) _read_a2d_value                                       6     4      2      48
                                              3 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     410
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    1704
                                             11 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     305
                                             29 BANK0     13     9      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2063
                                             14 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1629
                                              3 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) ___ltmod                                              7     1      6     371
                                              3 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) ___ltdiv                                             10     4      6     374
                                              3 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup_IOports                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Serial_Print_Int                                     3     1      2    5865
                                             17 BANK0      3     1      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Serial_NewLine                                       1     1      0       0
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serial_Init                                          3     3      0       0
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCDTimeUpdate                                        0     0      0   17254
                     _LCD_print_char
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     531
                                             10 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     692
                                              3 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCD_print_char                                       6     1      5   16031
                                             15 BANK0      6     1      5
                            ___ltdiv (ARG)
                            ___ltmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                            _lcd_add
                           _position
 ---------------------------------------------------------------------------------
 (1) _position                                             5     4      1     539
                                              4 BANK0      5     4      1
                            _lcd_add
 ---------------------------------------------------------------------------------
 (3) _lcd_add                                              1     1      0       0
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckMode                                            1     1      0    6967
                                             20 BANK0      1     1      0
                        _CheckKeyPad
                       _Serial_Print
                 _Serial_Println_Int
                                _nop
 ---------------------------------------------------------------------------------
 (1) _nop                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Serial_Println_Int                                   3     1      2    5706
                                             17 BANK0      3     1      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2416
                                              3 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2632
                                              9 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Serial_Print                                         2     2      0     180
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyPad                                          5     5      0    1047
                                              7 BANK0      5     5      0
                           _ColomnNo
                              _RowNo
 ---------------------------------------------------------------------------------
 (3) _RowNo                                                4     2      2      27
                                              3 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _ColomnNo                                             2     0      2     141
                                              3 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Calculate                                            2     2      0     280
                                              9 BANK0      2     2      0
                    _RotateMotorLeft
                   _RotateMotorRight
 ---------------------------------------------------------------------------------
 (2) _RotateMotorRight                                     6     4      2     140
                                              3 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _RotateMotorLeft                                      6     4      2     140
                                              3 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  3     3      0    2246
                                              0 BANK0      3     3      0
                    i1_LCDTimeUpdate
                   i1_LCD_print_char
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (6) i1_LCDTimeUpdate                                      0     0      0    1256
                   i1_LCD_print_char
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (6) i1___lwmod                                            5     1      4     315
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (7) i1___lwdiv                                            7     3      4     266
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (6) i1_LCD_print_char                                     6     1      5     675
                                              7 COMMON     6     1      5
                          i1___lwdiv (ARG)
                          i1___lwmod (ARG)
                          i1_lcd_add
                         i1_position
 ---------------------------------------------------------------------------------
 (7) i1_position                                           5     4      1     141
                                              1 COMMON     5     4      1
                          i1_lcd_add
 ---------------------------------------------------------------------------------
 (8) i1_lcd_add                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Calculate
     _RotateMotorLeft
     _RotateMotorRight
   _CheckMode
     _CheckKeyPad
       _ColomnNo
       _RowNo
     _Serial_Print
     _Serial_Println_Int
       ___awdiv
         ___wmul (ARG)
       ___awmod
     _nop
   _LCDTimeUpdate
     _LCD_print_char
       ___ltdiv (ARG)
       ___ltmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       _lcd_add (ARG)
       _position (ARG)
         _lcd_add
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _LCD_print_char
     ___ltdiv (ARG)
     ___ltmod (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     _lcd_add (ARG)
     _position (ARG)
       _lcd_add
   _Serial_Init
   _Serial_NewLine
   _Serial_Print
   _Serial_Print_Int
     ___awdiv
       ___wmul (ARG)
     ___awmod
   _Setup_IOports
   _Timer1_Init
   ___ltdiv
   ___ltmod
   _a2d_read
     ___awdiv
       ___wmul (ARG)
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     ___wmul
     _read_a2d_value
   _atod_init
   _clr_display
     _lcd_add
   _eeprom_read
   _eeprom_write
   _enableInterrupt
   _lcd_init
   _nop
   _position
     _lcd_add
   _printf
     ___bmul
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcd_add

 _isr (ROOT)
   i1_LCDTimeUpdate
     i1_LCD_print_char
       i1___lwdiv (ARG)
       i1___lwmod (ARG)
       i1_lcd_add (ARG)
       i1_position (ARG)
         i1_lcd_add
     i1___lwdiv
     i1___lwmod
   i1_LCD_print_char
     i1___lwdiv (ARG)
     i1___lwmod (ARG)
     i1_lcd_add (ARG)
     i1_position (ARG)
       i1_lcd_add
   i1___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      69       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2D      47       5       88.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      14       7       25.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      69      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Mar 08 00:47:25 2016

          ?_Serial_Print_Int 0031                            _j 005E                            _x 0061  
                          pc 0002               ___bmul@product 0024                           PL2 07E1  
                         PL4 0763                           PL6 17BC                           PL8 17CB  
                         _GO 00FA                           _RD 0C60                           _WR 0C61  
               ___awdiv@sign 002E                           fsr 0004           ??_Serial_Print_Int 0033  
        ___wmul@multiplicand 0025                          PL10 07F5                          PL20 077F  
                        PL12 076C                          PL30 1FE4                          PL22 17E9  
                        PL14 17D4                          PL40 17FA                          PL32 1FEB  
                        PL24 17F1                          PL16 0777                          PL34 1FF2  
                        PL26 1FDD                          PL18 17DF                          PL36 1FF9  
                        PL28 0788                          PL38 0790                          l303 044C  
                        l320 0513                          l312 04BB                          l306 0473  
         _Serial_Println_Int 0430                          l331 056B                          l323 0536  
                        l317 04EC                          l309 0498                          l342 058B  
                        l262 0302                          l336 057B                          l328 0546  
                        l280 1001                          l601 1FDC                          l273 0268  
                        l345 0595                          l530 019A                          l362 0330  
                        l339 0580                          l283 100C                          l371 038A  
                        l540 01AA                          l365 0357                          l390 0413  
                        l382 03EB                          l358 0316                          l535 01A2  
                        l552 01C8                          l376 03B6                          l368 0370  
                        l545 01B2                          l554 01D2                          l714 14F2  
                        l555 01DC                          l299 0432                          l395 041F  
                        l387 03F7                          l379 03D1                          l581 024F  
                        l469 0FD8                          l398 0424                          l718 14F4  
                        l719 14F5                          l744 15A7                          l816 1786  
                        l577 0247                          l753 15E3                          l595 1F95  
                        l579 024B                          l851 084E                          l691 143E  
                        l829 0837                          l773 1686                          l749 15C5  
                        l693 1440                          l694 1442                          l695 1444  
                        l697 145A                          l789 16C7                          _GIE 005F  
                        _RC0 0038                          _RB2 0032                          _RC1 0039  
                        _RB3 0033                          _RD0 0040                          _RC2 003A  
                        _RB4 0034                          _RD1 0041                          _RC3 003B  
                        _RB5 0035                          _RD2 0042                          _RC4 003C  
                        _RD3 0043                          _RC5 003D                          _RD4 0044  
                        _RD5 0045                          _RD6 0046                          _RD7 0047  
                        _RX9 00C6                          _TX9 04C6                _LCDTimeUpdate 1050  
                        _Nop 0331                          _isr 11F9                          _nop 00B6  
                        fsr0 0004                          indf 0000                 ___awmod@sign 0028  
               __CFG_FOSC$HS 0000          ?_Serial_Println_Int 0031                         l1109 06F6  
                       l1097 06CE                         l3150 119A                         l3230 11D6  
                       l4102 07BA                         l3400 05C1                         l3144 117F  
                       l3170 11C2                         l3146 1188                         l3234 11DC  
                       l4122 07D9                         l3308 0204                         l3260 0254  
                       l3412 05D8                         l3172 11CB                         l3148 1191  
                       l3166 11B0                         l4230 0416                         l4214 03EE  
                       l4310 14D0                         l3328 0222                         l3280 01D8  
                       l3272 01C4                         l3416 05E0                         l3440 0602  
                       l3432 05F6                         l3168 11B9                         l3360 06DC  
                       l4320 14F7                         l3522 025E                         l3362 06E6  
                       l4082 07E7                         l4330 151B                         l3284 01E2  
                       l3348 023F                         l3276 01CE                         l3452 061D  
                       l3428 05EF                         l3532 0441                         l4164 0325  
                       l3356 06D2                         l4500 16B8                         l4340 1530  
                       l4332 151D                         l4316 14D1                         l4260 1439  
                       l3710 0165                         l3390 05B3                         l3366 06F4  
                       l3358 06D7                         l4510 16CD                         l4350 154C  
                       l4326 150C                         l4318 14F0                         l4262 1445  
                       l5142 0C88                         l3288 01E6                         l3704 0159  
                       l3384 05AA                         l3376 05A0                         l3448 0615  
                       l3560 04DF                         l4192 03A9                         l3368 06EB  
                       l4504 16C1                         l4360 1565                         l4352 1558  
                       l4336 1520                         l4344 153A                         l4280 146B  
                       l4272 1446                         l3722 017C                         l3650 00F1  
                       l3554 04BD                         l3490 10AC                         l4186 038C  
                       l4522 16EA                         l4514 16D9                         l4450 1642  
                       l4442 162F                         l4426 1601                         l4338 1524  
                       l5146 0E3C                         l5090 09D1                         l3740 019D  
                       l3716 0170                         l3644 00E6                         l4700 08AE  
                       l3900 069A                         l4540 173E                         l4436 1623  
                       l4428 160F                         l4356 155F                         l4348 1548  
                       l4364 1568                         l4276 145D                         l5148 0E42  
                       l5084 09CB                         l5156 0FD8                         l3734 0194  
                       l3662 0107                         l3582 0539                         l4526 16EF  
                       l4470 167E                         l4462 1669                         l4382 159E  
                       l4366 158A                         l5094 0B65                         l5086 09CD  
                       l3744 01A5                         l3752 01B4                         l3728 0188  
                       l3680 012A                         l3656 00FC                         l3736 0196  
                       l4712 08CF                         l3904 06AA                         l4552 177C  
                       l4544 1758                         l4536 1733                         l4528 1712  
                       l4464 166D                         l4456 1650                         l4448 163E  
                       l4296 14B1                         l4288 149C                         l5088 09CF  
                       l3818 1F9A                         l3674 011E                         l3834 0634  
                       l3850 17B0                         l4546 1766                         l4490 16A2  
                       l4378 159B                         l3756 1F4F                         l3748 01AD  
                       l3692 0141                         l3668 0112                         l4724 087A  
                       l4732 0896                         l3916 0712                         l3828 17AC  
                       l4548 176A                         l4468 167A                         l4556 1423  
                       l3686 0136                         l3598 056E                         l3870 066D  
                       l3950 075A                         l3934 0736                         l3918 0717  
                       l3838 063C                         l4486 169B                         l4478 168A  
                       l3944 0742                         l4496 16B3                         l3786 1F53  
                       l3698 014D                         l3866 065C                         l3946 074C  
                       l3938 073E                         l3788 1F96                         l4684 1F34  
                       l3964 10D6                         l3892 068E                         l4950 003C  
                       _ADIE 0466                         l3976 10ED                         l3888 067E  
                       l4938 00B6                         l3988 10FE                         l3996 1111  
                       ?_isr 0070                         ?_nop 0070                         _ADON 00F8  
                       _EEIE 046C                         STR_1 186E                         STR_2 185C  
                       STR_3 184A                         STR_4 1838                         STR_5 18A2  
                       STR_6 18B3                         STR_7 18D5                         STR_8 18C4  
                       STR_9 18E6                         _BRGH 04C2                         _T0IE 005D  
                       _CREN 00C4                         _FERR 00C2                         u3410 11AD  
                       u3330 117C                         u3315 1166                         u3430 11B6  
                       u3350 1185                         u3255 113F                         u4225 0608  
                       u3450 11BF                         u3370 118E                         u4155 05CA  
                       u3275 114C                         u4325 044A                         u5205 1104  
                       u3470 11C8                         u3390 1197                         u4415 0544  
                       u3295 1159                         u5075 071B                         _PEIE 005E  
                       u6205 1F3A                         u4445 0579                         u5165 10DF  
                       _INTE 005C                         u4375 04EA                         u6151 0835  
                       _RBIE 005B                         u5515 041D                         _RCIE 0465  
                       _RCIF 0065                         u5445 03B4                         u6245 08BC  
                       u6095 177A                         u4905 1F5D                         u6185 1F1F  
                       u4915 1FA4                         u5395 032E                         u6507 1037  
                       u5635 1505                         u5485 03F5                         u6285 0884  
                       u6517 1047                         u5645 1512                         u6437 091D  
                       u6607 0406                         u6527 02FC                         u6447 0948  
                       u6617 042D                         u6537 031C                         u6457 0973  
                       _OERR 00C1                         u6707 0460                         u6627 1007  
                       u6547 0344                         u5755 15C2                         u6467 09AB  
                       u6717 0485                         u6637 1014                         u6557 0364  
                       u6477 0BB1                         u6807 0274                         u6727 04A9  
                       u6647 0829                         u6567 037D                         u6487 178D  
                       u5775 15E0                         u6817 1FAD                         u6737 04CC  
                       u6657 10B7                         u6577 039B                         u6497 179D  
                       u6827 1FB9                         u6747 0500                         u6667 10C5  
                       u6587 03C5                         u5795 15FE                         u6837 1FC5  
                       u6757 0524                         u6677 11E3                         u6597 03DE  
                       u6847 1FD1                         u6767 0559                         u6687 11F3  
                       u5895 1660                         u6857 1F66                         u6777 0589  
                       u6697 0438                         u6867 1F72                         u6787 0593  
                       u6877 1F7E                         u6797 059D                         u6887 1F8A  
                       _SPEN 00C7                         _TXIE 0464                         _WREN 0C62  
                       _TXEN 04C5                         _TXIF 0064                         _SYNC 04C4  
             ??_eeprom_write 0024                         _bit0 03E8                         _bit1 03E9  
                       _bit2 03EA                         _bit3 03EB                         _bit4 03EC  
                       _bit5 03ED                         _bit6 03EE                         _bit7 0332  
                       _ldr1 0054                         _ldr2 0056                         _main 08D6  
               ___ftpack@arg 0023                         _hour 0052                 ___ftpack@exp 0026  
                       btemp 007E                         ltemp 007E              _enableInterrupt 0804  
   __size_of_RotateMotorLeft 0047                         start 0010                         ttemp 007E  
                       wtemp 007E            ___bmul@multiplier 0025                   i1_position 13F8  
               ___ftmul@cntr 003B                 ___ftmul@sign 003C         ??_Serial_Println_Int 0033  
                _CheckKeyPad 00BB                 ___fttol@exp1 0049                 ___fttol@lval 0045  
                      ??_isr 0020                        ??_nop 0023                        _ADDEN 00C3  
                      ?_main 0070                        _BCLIE 046B              __end_of___awdiv 05E5  
                      _EEADR 010D                        STR_10 18E6                        STR_11 18E6  
                      STR_12 18E6                        STR_13 1824                        STR_14 1880  
                      STR_15 1891                __CFG_WDTE$OFF 0000              __end_of___awmod 0622  
             ?_LCDTimeUpdate 0070                        _CARRY 0018              __end_of___ftmul 06C6  
            ___awdiv@divisor 0029              __end_of___fttol 0763              __end_of___ltdiv 08D6  
            __end_of___lwdiv 10F2              __end_of___ltmod 089D              __end_of___lwmod 1116  
                      i1l631 126F                        i1l625 1263                        i1l617 1247  
            ___awdiv@counter 002D                        _RCREG 001A                        _C_Bat 0062  
                      _TMR1H 000F                        _TMR1L 000E                        _SPBRG 0099  
                      _PORTA 0005                        _PORTB 0006                        _PORTC 0007  
                      _PORTD 0008                        _PORTE 0009                        _PSPIE 0467  
              i1position@row 0075                        _TRISA 0085                        _TRISB 0086  
                      _TRISC 0087                        _TRISD 0088                        _SSPIE 0463  
                      _TRISE 0089                        _TXREG 0019                        _V_Bat 0064  
              __CFG_PWRTE$ON 0000              __end_of_lcd_add 11D1                        _RowNo 0242  
         i1___lwmod@dividend 0072              __end_of_dpowers 181C              __end_of_isdigit 17AE  
              ___ftpack@sign 0027                        _state 0060                        _putch 1787  
               position@post 0027               __pbitbssCOMMON 03E8               __CFG_BOREN$OFF 0000  
                      pclath 000A                        ltemp0 007E                        ltemp1 0082  
                      ltemp2 0086                        ltemp3 0080               _Serial_NewLine 1001  
                      ttemp0 007E                        ttemp1 0081                        ttemp2 0084  
                      ttemp3 0087                        ttemp4 007F                        status 0003  
                      wtemp0 007E                        wtemp1 0080                        wtemp2 0082  
                      wtemp3 0084                        wtemp4 0086                        wtemp5 0088  
                      wtemp6 007F           __size_ofi1___lwdiv 002A           __size_ofi1___lwmod 0024  
           __end_of_a2d_read 02EF              __initialization 0013           __size_ofi1_lcd_add 00BB  
           __end_of_ColomnNo 0242           __size_of_Calculate 0036                 __end_of_main 1000  
         __size_of_CheckMode 008E     __end_of_RotateMotorRight 1FDD            ?i1_LCD_print_char 0077  
                     ??_main 004A                ___fttol@sign1 0044      __size_of_LCD_print_char 001C  
         ??i1_LCD_print_char 007C                       ?_RowNo 0023                       _ADCON0 001F  
                     _ADCON1 009F              i1_LCDTimeUpdate 1278                       _CCP1IE 0462  
                     _CCP2IE 0468                       _ADRESH 001E                       _ADRESL 009E  
                     _EEDATA 010C                       _EECON1 018C                       _EECON2 018D  
     __end_of_Serial_NewLine 101A      __end_of_enableInterrupt 0815             ___awdiv@dividend 002B  
                     ?_putch 0070             __end_of___ftpack 0708                       i1l3220 13F2  
                     i1l3214 13D7                       i1l3216 13E0                       i1l4024 1321  
                     i1l3218 13E9                       i1l4036 1338                       i1l3192 13A6  
                     i1l4048 12FB                       i1l4056 130E                       i1l3194 13AF  
                     i1l3196 13B8                       i1l3460 13FD                       i1l3198 13C1  
                     i1l3464 1403                       i1l4920 125B                       i1l4930 1269  
                     i1l4906 124C                       i1l4918 125A                       i1l4928 1268  
                     i1l4876 120F                       u361_20 13A3                       u353_25 1366  
           __end_of___lwtoft 0632                       u371_20 13DD                       u363_20 13AC  
                     u355_25 1373                       u524_25 132A                       u373_20 13E6  
                     u365_20 13B5                       u357_25 1380                       u375_20 13EF  
                     u367_20 13BE                       u359_25 138D                       u528_25 1301  
                     u369_20 13D4                       u690_27 12EC                       u691_27 140A  
                     u692_27 1418                       _TMR1IE 0460                       _TMR1IF 0060  
                     _TMR1CS 0081                       _TMR2IE 0461                       _TMR1ON 0080  
                     u689_27 12E0         __size_of_clr_display 001C               i1position@post 0074  
              ??_Serial_Init 0023                       _V_Bat2 004D                ??_Timer1_Init 0023  
                ?i1_position 0071         __size_of_eeprom_read 001C             __end_of_lcd_init 07E1  
                     ___bmul 17AE                       ___wmul 0632                    ??___awdiv 002D  
                  ??___awmod 0027                    ??___ftmul 0034                    ??___fttol 0041  
                  ??___ltdiv 0029            ??_RotateMotorLeft 0025                    ??___lwdiv 0027  
                  ??___ltmod 0029                    ??___lwmod 002E                       _buffer 00A0  
            ??_LCDTimeUpdate 0035             ___awdiv@quotient 002F                       _minute 0058  
                     _second 005C              ___awmod@divisor 0023         __end_of_eeprom_write 086C  
            ___awmod@counter 0027                       _printf 141E                    ??_lcd_add 0023  
      ___ftmul@f3_as_product 0038    LCD_print_char@print_value 0033            __end_ofi1___lwdiv 133D  
          __end_ofi1___lwmod 1313                    ??_isdigit 0023                       saved_w 007E  
           __end_of_position 11F9            __end_ofi1_lcd_add 13F8            __end_of_Calculate 1F4F  
          __end_of_CheckMode 00B6        __end_of_Setup_IOports 1034              ?_Serial_NewLine 0070  
    __end_of__initialization 0024              eeprom_read@addr 0023          ___bmul@multiplicand 0023  
                 ___ftmul@f1 002E                   ___ftmul@f2 0031                   ___fttol@f1 003D  
             __pcstackCOMMON 0070                __end_of_RowNo 025B          __end_of_Serial_Init 0831  
              __end_of_putch 17A0        RotateMotorRight@value 0023          __end_of_Timer1_Init 1F19  
                 __end_ofPL2 07F5                   __end_ofPL4 076C                   __end_ofPL6 17CB  
                 __end_ofPL8 17D4                   ___lwtoft@c 002B      __end_ofi1_LCDTimeUpdate 12D5  
        i1LCD_print_char@row 0077                    ?_a2d_read 0070            eeprom_write@value 0023  
                    ??_RowNo 0025           __size_of_atod_init 0006    __size_of_Serial_Print_Int 011C  
        __size_ofi1_position 0026                    ?_ColomnNo 0023                      ??_putch 0024  
           ?_enableInterrupt 0070                   __pbssBANK0 004D                   __pbssBANK1 00A0  
              ?_Serial_Print 0070          Serial_Print_Int@val 0031      __size_of_read_a2d_value 0025  
i1LCD_print_char@print_value 007B                   __pmaintext 08D6                      ?___bmul 0023  
                    ?___wmul 0023                 ?_CheckKeyPad 0070                   __pintentry 0004  
                  ?___ftpack 0023               _LCD_print_char 10AC                      ?_printf 002F  
                    _T1CKPS0 0084                      _T1CKPS1 0085                    ?___lwtoft 002B  
                    _T1OSCEN 0083                   ??_a2d_read 004A                    ?_lcd_init 0070  
                 ??_ColomnNo 0025               ??_Serial_Print 0023                   __stringtab 1800  
     i1LCD_print_char@column 0079                  _Serial_Init 0815                Serial_Print@a 0024  
                _Timer1_Init 1F0B        __size_of_eeprom_write 001F            __end_of_atod_init 1F03  
__size_of_Serial_Println_Int 0170              __size_of___bmul 000E                      ___awdiv 05A0  
                    ___awmod 05E5                    ?_position 0024              __size_of___wmul 0019  
                    ___ftmul 064B                      ___fttol 0708                      ___ltdiv 089D  
     __end_of_LCD_print_char 10C8                      ___lwdiv 10C8                      ___ltmod 086C  
                    ___lwmod 10F2            ?_RotateMotorRight 0023                   ??___ftpack 0028  
                    __ptext1 141E                      __ptext2 1787                      __ptext3 17A0  
                    __ptext4 17AE                      __ptext5 0797                      __ptext6 0804  
                    __ptext7 084D                      __ptext8 0831                      __ptext9 1034  
                    _lcd_add 1116              __size_of_printf 0369           ??_RotateMotorRight 0025  
                 ??___lwtoft 002E            __end_of_hexpowers 1824             ?i1_LCDTimeUpdate 0070  
                    _dpowers 1812            i1___lwdiv@divisor 0070                      _isdigit 17A0  
               __size_of_isr 007F                 __size_of_nop 0005            i1___lwdiv@counter 0076  
           ___awmod@dividend 0025                      _msecond 005A               position@collum 0024  
                    clrloop0 1F04                   ??_lcd_init 0023         end_of_initialization 0024  
          __end_of_octpowers 1812    __size_ofi1_LCD_print_char 001A         LCD_print_char@column 0031  
               _eeprom_write 084D              _RotateMotorLeft 1F4F          CheckMode@pressedKey 0034  
           ___ltdiv@dividend 0026                 ??i1_position 0072                      printf@c 0044  
                    printf@f 0041                   ??_position 0025              ?_LCD_print_char 002F  
                 _printf$355 003A                   _printf$348 0034                   _printf$349 0036  
      Serial_Println_Int@val 0031             ??_Serial_NewLine 0023             ___ltdiv@quotient 0029  
           _Serial_Print_Int 0314                    i1___lwdiv 1313                    i1___lwmod 12EF  
              ??_clr_display 0024           __end_ofi1_position 141E          CheckKeyPad@colomnNo 0028  
                  i1_lcd_add 133D             putch@print_value 0025               _read_a2d_value 02EF  
                  _Calculate 1F19                    _CheckMode 0028                ??_eeprom_read 0023  
                printf@width 0042                  ___ftmul@exp 0037               __end_of___bmul 17BC  
       __end_of_Serial_Print 027A               __end_of___wmul 064B         __size_of_CheckKeyPad 00FB  
          i1___lwmod@divisor 0070                __pbitbssBANK0 0330        __end_of_LCDTimeUpdate 10AC  
          i1___lwmod@counter 0074                  position@row 0028               __end_of_printf 1787  
                __end_ofPL10 07FB                  __end_ofPL20 0788                  __end_ofPL12 0777  
                __end_ofPL30 1FEB                  __end_ofPL22 17F1                  __end_ofPL14 17DF  
                __end_ofPL40 1800                  __end_ofPL32 1FF2                  __end_ofPL24 17FA  
                __end_ofPL16 077F                  __end_ofPL34 1FF9                  __end_ofPL26 1FE4  
                __end_ofPL18 17E9                  __end_ofPL36 2000                  __end_ofPL28 0790  
                __end_ofPL38 0797          start_initialization 0013         RotateMotorLeft@value 0023  
                __end_of_isr 1278                  __end_of_nop 00BB      __end_of_RotateMotorLeft 1F96  
                 ?i1___lwdiv 0070                   ?i1___lwmod 0070            __size_of_a2d_read 0075  
     __end_of_read_a2d_value 0314                   ?i1_lcd_add 0070                   ?_Calculate 0070  
          __size_of_ColomnNo 008C                   ?_CheckMode 0070          __end_of_clr_display 1050  
                   ??___bmul 0024                     ??___wmul 0027          __end_of_eeprom_read 084D  
     __size_of_Setup_IOports 001A                     ??_printf 0031            __size_of___ftpack 0042  
                  ___latbits 0002            __size_of___lwtoft 0010                __pcstackBANK0 0020  
            ?_read_a2d_value 0023             i1_LCD_print_char 12D5             eeprom_write@addr 0024  
          __size_of_lcd_init 004A                 ?_Serial_Init 0070     __size_of_enableInterrupt 0011  
               ?_Timer1_Init 0070             ___lwdiv@dividend 0025      read_a2d_value@a2d_value 0027  
                   ?___awdiv 0029                     ?___awmod 0023                     ?___ftmul 002E  
                   ?___fttol 003D                     ?___ltdiv 0023                     ?___lwdiv 0023  
                   ?___ltmod 0023                     ?___lwmod 002A                    _atod_init 1EFD  
          __size_of_position 0028                    __pstrings 1800                     ?_lcd_add 0070  
                   ?_isdigit 0070        read_a2d_value@channel 0026               __size_of_RowNo 0019  
                  _hexpowers 181C             ___lwdiv@quotient 0027                  ??i1___lwdiv 0074  
           ?_RotateMotorLeft 0023                  ??i1___lwmod 0074    __size_of_RotateMotorRight 0047  
                _clr_display 1034               __size_of_putch 0019                _Setup_IOports 101A  
                ??i1_lcd_add 0070             ___ltmod@dividend 0026                  ??_Calculate 0029  
          interrupt_function 0004                  ??_CheckMode 0034               ___wmul@product 0027  
                  clear_ram0 1F03                    _octpowers 1806                  _eeprom_read 0831  
           ??_LCD_print_char 0034   __end_of_Serial_Println_Int 05A0              ___ltdiv@divisor 0023  
      __size_of_Serial_Print 001F              ___ltdiv@counter 002C             i1position@collum 0071  
   __end_of_Serial_Print_Int 0430                   ?_atod_init 0070                  __stringbase 1805  
          ___wmul@multiplier 0023                   printf@flag 0045                   printf@prec 0040  
                   _BlinkDet 0330                     _a2d_read 027A               ?_Setup_IOports 0070  
                   _ColomnNo 01B6     __size_ofi1_LCDTimeUpdate 005D                 _Serial_Print 025B  
                   RowNo@row 0025             lcd_init@DelayLCD 0023             __size_of___awdiv 0045  
           __size_of___awmod 003D             __size_of___ftmul 007B             __size_of___fttol 005B  
          ??_enableInterrupt 0023             __size_of___ltdiv 0039             __size_of___lwdiv 002A  
           __size_of___ltmod 0031             __size_of___lwmod 0024                     ___ftpack 06C6  
         __end_of__stringtab 1806                  _isdigit$559 0023                     ___lwtoft 0622  
           __size_of_lcd_add 00BB                  _currentMode 0050             __size_of_isdigit 000E  
            ___lwdiv@divisor 0023              ___lwdiv@counter 0029                     __ptext10 1EFD  
                   __ptext11 027A                     __ptext20 1F0B                     __ptext12 02EF  
                   __ptext21 101A                     __ptext13 0632                     __ptext30 1116  
                   __ptext22 0314                     __ptext14 0622                     __ptext31 0028  
                   __ptext23 1001                     __ptext15 0708                     __ptext40 1F19  
                   __ptext32 00B6                     __ptext24 0815                     __ptext16 064B  
                   __ptext41 1F96                     __ptext33 0430                     __ptext25 1050  
                   __ptext17 06C6                     __ptext42 1F4F                     __ptext34 05E5  
                   __ptext26 10F2                     __ptext18 086C                     __ptext43 11F9  
                   __ptext35 05A0                     __ptext27 10C8                     __ptext19 089D  
                   __ptext44 1278                     __ptext36 025B                     __ptext28 10AC  
                   __ptext45 12EF                     __ptext37 00BB                     __ptext29 11D1  
                   __ptext46 1313                     __ptext38 0242                     __ptext47 12D5  
                   __ptext39 01B6                     __ptext48 13F8                     __ptext49 133D  
                   _lcd_data 005F                     _lcd_init 0797           i1___lwdiv@dividend 0072  
              __size_of_main 072A              ___ltmod@divisor 0023              ___ltmod@counter 0029  
       __size_of_Serial_Init 001C                ??_CheckKeyPad 0027         __size_of_Timer1_Init 000E  
                   _position 11D1                    printf@idx 0039                    printf@len 003B  
                  printf@val 003E     __end_ofi1_LCD_print_char 12EF                  ??_atod_init 0023  
              ColomnNo@rowNo 0023           i1___lwdiv@quotient 0074             ??_read_a2d_value 0025  
            ??_Setup_IOports 0023                     isdigit@c 0024             _RotateMotorRight 1F96  
                   intlevel1 0000      __size_of_Serial_NewLine 0019             ___lwmod@dividend 002C  
     __size_of_LCDTimeUpdate 005C            ??i1_LCDTimeUpdate 007D                    stringcode 1800  
          LCD_print_char@row 002F                     printf@ap 003D                     printf@cp 0038  
           CheckKeyPad@rowNo 002A            RotateMotorRight@i 0027          __end_of_CheckKeyPad 01B6  
            ___lwmod@divisor 002A              ___lwmod@counter 002E                     stringdir 1800  
                   stringtab 1800             RotateMotorLeft@i 0027                 ?_clr_display 0070  
              ?_eeprom_write 0023                 ?_eeprom_read 0070         CheckKeyPad@charactor 0027  
