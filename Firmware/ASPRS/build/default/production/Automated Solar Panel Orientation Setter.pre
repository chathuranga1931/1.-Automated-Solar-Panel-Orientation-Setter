
# 1 "Automated Solar Panel Orientation Setter.c"

# 26 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\htc.h"
extern const char __xc8_OPTIM_SPEED;


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 49 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic16f877a.h"
extern volatile unsigned char INDF @ 0x000;

asm("INDF equ 00h");



extern volatile unsigned char TMR0 @ 0x001;

asm("TMR0 equ 01h");



extern volatile unsigned char PCL @ 0x002;

asm("PCL equ 02h");



extern volatile unsigned char STATUS @ 0x003;

asm("STATUS equ 03h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
};
struct {
unsigned :2;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0x003;

# 154
extern volatile unsigned char FSR @ 0x004;

asm("FSR equ 04h");



extern volatile unsigned char PORTA @ 0x005;

asm("PORTA equ 05h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0x005;

# 209
extern volatile unsigned char PORTB @ 0x006;

asm("PORTB equ 06h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0x006;

# 270
extern volatile unsigned char PORTC @ 0x007;

asm("PORTC equ 07h");


typedef union {
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits @ 0x007;

# 331
extern volatile unsigned char PORTD @ 0x008;

asm("PORTD equ 08h");


typedef union {
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits @ 0x008;

# 392
extern volatile unsigned char PORTE @ 0x009;

asm("PORTE equ 09h");


typedef union {
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
};
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits @ 0x009;

# 423
extern volatile unsigned char PCLATH @ 0x00A;

asm("PCLATH equ 0Ah");


typedef union {
struct {
unsigned PCLATH :5;
};
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits @ 0x00A;

# 442
extern volatile unsigned char INTCON @ 0x00B;

asm("INTCON equ 0Bh");


typedef union {
struct {
unsigned RBIF :1;
unsigned INTF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INTE :1;
unsigned TMR0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :2;
unsigned T0IF :1;
unsigned :2;
unsigned T0IE :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0x00B;

# 519
extern volatile unsigned char PIR1 @ 0x00C;

asm("PIR1 equ 0Ch");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned SSPIF :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned ADIF :1;
unsigned PSPIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0x00C;

# 580
extern volatile unsigned char PIR2 @ 0x00D;

asm("PIR2 equ 0Dh");


typedef union {
struct {
unsigned CCP2IF :1;
unsigned :2;
unsigned BCLIF :1;
unsigned EEIF :1;
unsigned :1;
unsigned CMIF :1;
};
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits @ 0x00D;

# 619
extern volatile unsigned short TMR1 @ 0x00E;

asm("TMR1 equ 0Eh");



extern volatile unsigned char TMR1L @ 0x00E;

asm("TMR1L equ 0Eh");



extern volatile unsigned char TMR1H @ 0x00F;

asm("TMR1H equ 0Fh");



extern volatile unsigned char T1CON @ 0x010;

asm("T1CON equ 010h");


typedef union {
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
};
struct {
unsigned :2;
unsigned T1SYNC :1;
unsigned :1;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
struct {
unsigned :2;
unsigned T1INSYNC :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0x010;

# 711
extern volatile unsigned char TMR2 @ 0x011;

asm("TMR2 equ 011h");



extern volatile unsigned char T2CON @ 0x012;

asm("T2CON equ 012h");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0x012;

# 787
extern volatile unsigned char SSPBUF @ 0x013;

asm("SSPBUF equ 013h");



extern volatile unsigned char SSPCON @ 0x014;

asm("SSPCON equ 014h");


typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
} SSPCONbits_t;
extern volatile SSPCONbits_t SSPCONbits @ 0x014;

# 862
extern volatile unsigned short CCPR1 @ 0x015;

asm("CCPR1 equ 015h");



extern volatile unsigned char CCPR1L @ 0x015;

asm("CCPR1L equ 015h");



extern volatile unsigned char CCPR1H @ 0x016;

asm("CCPR1H equ 016h");



extern volatile unsigned char CCP1CON @ 0x017;

asm("CCP1CON equ 017h");


typedef union {
struct {
unsigned CCP1M :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0x017;

# 937
extern volatile unsigned char RCSTA @ 0x018;

asm("RCSTA equ 018h");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned RCD8 :1;
unsigned :5;
unsigned RC9 :1;
};
struct {
unsigned :6;
unsigned nRC8 :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0x018;

# 1031
extern volatile unsigned char TXREG @ 0x019;

asm("TXREG equ 019h");



extern volatile unsigned char RCREG @ 0x01A;

asm("RCREG equ 01Ah");



extern volatile unsigned short CCPR2 @ 0x01B;

asm("CCPR2 equ 01Bh");



extern volatile unsigned char CCPR2L @ 0x01B;

asm("CCPR2L equ 01Bh");



extern volatile unsigned char CCPR2H @ 0x01C;

asm("CCPR2H equ 01Ch");



extern volatile unsigned char CCP2CON @ 0x01D;

asm("CCP2CON equ 01Dh");


typedef union {
struct {
unsigned CCP2M :4;
unsigned CCP2Y :1;
unsigned CCP2X :1;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
};
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits @ 0x01D;

# 1118
extern volatile unsigned char ADRESH @ 0x01E;

asm("ADRESH equ 01Eh");



extern volatile unsigned char ADCON0 @ 0x01F;

asm("ADCON0 equ 01Fh");


typedef union {
struct {
unsigned ADON :1;
unsigned :1;
unsigned GO_nDONE :1;
unsigned CHS :3;
unsigned ADCS :2;
};
struct {
unsigned :2;
unsigned GO :1;
unsigned CHS0 :1;
unsigned CHS1 :1;
unsigned CHS2 :1;
unsigned ADCS0 :1;
unsigned ADCS1 :1;
};
struct {
unsigned :2;
unsigned nDONE :1;
};
struct {
unsigned :2;
unsigned GO_DONE :1;
};
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits @ 0x01F;

# 1219
extern volatile unsigned char OPTION_REG @ 0x081;

asm("OPTION_REG equ 081h");


typedef union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nRBPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;

# 1288
extern volatile unsigned char TRISA @ 0x085;

asm("TRISA equ 085h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0x085;

# 1337
extern volatile unsigned char TRISB @ 0x086;

asm("TRISB equ 086h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0x086;

# 1398
extern volatile unsigned char TRISC @ 0x087;

asm("TRISC equ 087h");


typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits @ 0x087;

# 1459
extern volatile unsigned char TRISD @ 0x088;

asm("TRISD equ 088h");


typedef union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits @ 0x088;

# 1520
extern volatile unsigned char TRISE @ 0x089;

asm("TRISE equ 089h");


typedef union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
unsigned :1;
unsigned PSPMODE :1;
unsigned IBOV :1;
unsigned OBF :1;
unsigned IBF :1;
};
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits @ 0x089;

# 1576
extern volatile unsigned char PIE1 @ 0x08C;

asm("PIE1 equ 08Ch");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned SSPIE :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned ADIE :1;
unsigned PSPIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0x08C;

# 1637
extern volatile unsigned char PIE2 @ 0x08D;

asm("PIE2 equ 08Dh");


typedef union {
struct {
unsigned CCP2IE :1;
unsigned :2;
unsigned BCLIE :1;
unsigned EEIE :1;
unsigned :1;
unsigned CMIE :1;
};
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits @ 0x08D;

# 1676
extern volatile unsigned char PCON @ 0x08E;

asm("PCON equ 08Eh");


typedef union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
};
struct {
unsigned nBO :1;
};
} PCONbits_t;
extern volatile PCONbits_t PCONbits @ 0x08E;

# 1709
extern volatile unsigned char SSPCON2 @ 0x091;

asm("SSPCON2 equ 091h");


typedef union {
struct {
unsigned SEN :1;
unsigned RSEN :1;
unsigned PEN :1;
unsigned RCEN :1;
unsigned ACKEN :1;
unsigned ACKDT :1;
unsigned ACKSTAT :1;
unsigned GCEN :1;
};
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits @ 0x091;

# 1770
extern volatile unsigned char PR2 @ 0x092;

asm("PR2 equ 092h");



extern volatile unsigned char SSPADD @ 0x093;

asm("SSPADD equ 093h");



extern volatile unsigned char SSPSTAT @ 0x094;

asm("SSPSTAT equ 094h");


typedef union {
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DATA :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits @ 0x094;

# 1950
extern volatile unsigned char TXSTA @ 0x098;

asm("TXSTA equ 098h");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TXD8 :1;
unsigned :5;
unsigned nTX8 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0x098;

# 2030
extern volatile unsigned char SPBRG @ 0x099;

asm("SPBRG equ 099h");



extern volatile unsigned char CMCON @ 0x09C;

asm("CMCON equ 09Ch");


typedef union {
struct {
unsigned CM :3;
unsigned CIS :1;
unsigned C1INV :1;
unsigned C2INV :1;
unsigned C1OUT :1;
unsigned C2OUT :1;
};
struct {
unsigned CM0 :1;
unsigned CM1 :1;
unsigned CM2 :1;
};
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits @ 0x09C;

# 2105
extern volatile unsigned char CVRCON @ 0x09D;

asm("CVRCON equ 09Dh");


typedef union {
struct {
unsigned CVR :4;
unsigned :1;
unsigned CVRR :1;
unsigned CVROE :1;
unsigned CVREN :1;
};
struct {
unsigned CVR0 :1;
unsigned CVR1 :1;
unsigned CVR2 :1;
unsigned CVR3 :1;
};
} CVRCONbits_t;
extern volatile CVRCONbits_t CVRCONbits @ 0x09D;

# 2169
extern volatile unsigned char ADRESL @ 0x09E;

asm("ADRESL equ 09Eh");



extern volatile unsigned char ADCON1 @ 0x09F;

asm("ADCON1 equ 09Fh");


typedef union {
struct {
unsigned PCFG :4;
unsigned :2;
unsigned ADCS2 :1;
unsigned ADFM :1;
};
struct {
unsigned PCFG0 :1;
unsigned PCFG1 :1;
unsigned PCFG2 :1;
unsigned PCFG3 :1;
};
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits @ 0x09F;

# 2233
extern volatile unsigned char EEDATA @ 0x10C;

asm("EEDATA equ 010Ch");



extern volatile unsigned char EEADR @ 0x10D;

asm("EEADR equ 010Dh");



extern volatile unsigned char EEDATH @ 0x10E;

asm("EEDATH equ 010Eh");



extern volatile unsigned char EEADRH @ 0x10F;

asm("EEADRH equ 010Fh");



extern volatile unsigned char EECON1 @ 0x18C;

asm("EECON1 equ 018Ch");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
unsigned :3;
unsigned EEPGD :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0x18C;

# 2301
extern volatile unsigned char EECON2 @ 0x18D;

asm("EECON2 equ 018Dh");

# 2313
extern volatile __bit ACKDT @ (((unsigned) &SSPCON2)*8) + 5;

extern volatile __bit ACKEN @ (((unsigned) &SSPCON2)*8) + 4;

extern volatile __bit ACKSTAT @ (((unsigned) &SSPCON2)*8) + 6;

extern volatile __bit ADCS0 @ (((unsigned) &ADCON0)*8) + 6;

extern volatile __bit ADCS1 @ (((unsigned) &ADCON0)*8) + 7;

extern volatile __bit ADCS2 @ (((unsigned) &ADCON1)*8) + 6;

extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADFM @ (((unsigned) &ADCON1)*8) + 7;

extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;

extern volatile __bit BCLIE @ (((unsigned) &PIE2)*8) + 3;

extern volatile __bit BCLIF @ (((unsigned) &PIR2)*8) + 3;

extern volatile __bit BF @ (((unsigned) &SSPSTAT)*8) + 0;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit C1INV @ (((unsigned) &CMCON)*8) + 4;

extern volatile __bit C1OUT @ (((unsigned) &CMCON)*8) + 6;

extern volatile __bit C2INV @ (((unsigned) &CMCON)*8) + 5;

extern volatile __bit C2OUT @ (((unsigned) &CMCON)*8) + 7;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit CCP2IE @ (((unsigned) &PIE2)*8) + 0;

extern volatile __bit CCP2IF @ (((unsigned) &PIR2)*8) + 0;

extern volatile __bit CCP2M0 @ (((unsigned) &CCP2CON)*8) + 0;

extern volatile __bit CCP2M1 @ (((unsigned) &CCP2CON)*8) + 1;

extern volatile __bit CCP2M2 @ (((unsigned) &CCP2CON)*8) + 2;

extern volatile __bit CCP2M3 @ (((unsigned) &CCP2CON)*8) + 3;

extern volatile __bit CCP2X @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit CCP2Y @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 3;

extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 4;

extern volatile __bit CHS2 @ (((unsigned) &ADCON0)*8) + 5;

extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;

extern volatile __bit CKE @ (((unsigned) &SSPSTAT)*8) + 6;

extern volatile __bit CKP @ (((unsigned) &SSPCON)*8) + 4;

extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMIE @ (((unsigned) &PIE2)*8) + 6;

extern volatile __bit CMIF @ (((unsigned) &PIR2)*8) + 6;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit CVR0 @ (((unsigned) &CVRCON)*8) + 0;

extern volatile __bit CVR1 @ (((unsigned) &CVRCON)*8) + 1;

extern volatile __bit CVR2 @ (((unsigned) &CVRCON)*8) + 2;

extern volatile __bit CVR3 @ (((unsigned) &CVRCON)*8) + 3;

extern volatile __bit CVREN @ (((unsigned) &CVRCON)*8) + 7;

extern volatile __bit CVROE @ (((unsigned) &CVRCON)*8) + 6;

extern volatile __bit CVRR @ (((unsigned) &CVRCON)*8) + 5;

extern volatile __bit DATA_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit D_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit D_nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit EEIE @ (((unsigned) &PIE2)*8) + 4;

extern volatile __bit EEIF @ (((unsigned) &PIR2)*8) + 4;

extern volatile __bit EEPGD @ (((unsigned) &EECON1)*8) + 7;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit GCEN @ (((unsigned) &SSPCON2)*8) + 7;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit I2C_DATA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit I2C_READ @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit I2C_START @ (((unsigned) &SSPSTAT)*8) + 3;

extern volatile __bit I2C_STOP @ (((unsigned) &SSPSTAT)*8) + 4;

extern volatile __bit IBF @ (((unsigned) &TRISE)*8) + 7;

extern volatile __bit IBOV @ (((unsigned) &TRISE)*8) + 5;

extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;

extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;

extern volatile __bit OBF @ (((unsigned) &TRISE)*8) + 6;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit PCFG0 @ (((unsigned) &ADCON1)*8) + 0;

extern volatile __bit PCFG1 @ (((unsigned) &ADCON1)*8) + 1;

extern volatile __bit PCFG2 @ (((unsigned) &ADCON1)*8) + 2;

extern volatile __bit PCFG3 @ (((unsigned) &ADCON1)*8) + 3;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PEN @ (((unsigned) &SSPCON2)*8) + 2;

extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;

extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;

extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;

extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;

extern volatile __bit PSPIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit PSPIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit PSPMODE @ (((unsigned) &TRISE)*8) + 4;

extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RC0 @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit RC1 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit RC2 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit RC3 @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit RC4 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit RC5 @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit RC6 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit RC7 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RC8_9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RC9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RCD8 @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit RCEN @ (((unsigned) &SSPCON2)*8) + 3;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit RD0 @ (((unsigned) &PORTD)*8) + 0;

extern volatile __bit RD1 @ (((unsigned) &PORTD)*8) + 1;

extern volatile __bit RD2 @ (((unsigned) &PORTD)*8) + 2;

extern volatile __bit RD3 @ (((unsigned) &PORTD)*8) + 3;

extern volatile __bit RD4 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit RD5 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit RD6 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit RD7 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit RE0 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit RE1 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit RE2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit READ_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;

extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;

extern volatile __bit RSEN @ (((unsigned) &SSPCON2)*8) + 1;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit R_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit R_nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit SEN @ (((unsigned) &SSPCON2)*8) + 0;

extern volatile __bit SMP @ (((unsigned) &SSPSTAT)*8) + 7;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SSPEN @ (((unsigned) &SSPCON)*8) + 5;

extern volatile __bit SSPIE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit SSPIF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit SSPM0 @ (((unsigned) &SSPCON)*8) + 0;

extern volatile __bit SSPM1 @ (((unsigned) &SSPCON)*8) + 1;

extern volatile __bit SSPM2 @ (((unsigned) &SSPCON)*8) + 2;

extern volatile __bit SSPM3 @ (((unsigned) &SSPCON)*8) + 3;

extern volatile __bit SSPOV @ (((unsigned) &SSPCON)*8) + 6;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1INSYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRISC0 @ (((unsigned) &TRISC)*8) + 0;

extern volatile __bit TRISC1 @ (((unsigned) &TRISC)*8) + 1;

extern volatile __bit TRISC2 @ (((unsigned) &TRISC)*8) + 2;

extern volatile __bit TRISC3 @ (((unsigned) &TRISC)*8) + 3;

extern volatile __bit TRISC4 @ (((unsigned) &TRISC)*8) + 4;

extern volatile __bit TRISC5 @ (((unsigned) &TRISC)*8) + 5;

extern volatile __bit TRISC6 @ (((unsigned) &TRISC)*8) + 6;

extern volatile __bit TRISC7 @ (((unsigned) &TRISC)*8) + 7;

extern volatile __bit TRISD0 @ (((unsigned) &TRISD)*8) + 0;

extern volatile __bit TRISD1 @ (((unsigned) &TRISD)*8) + 1;

extern volatile __bit TRISD2 @ (((unsigned) &TRISD)*8) + 2;

extern volatile __bit TRISD3 @ (((unsigned) &TRISD)*8) + 3;

extern volatile __bit TRISD4 @ (((unsigned) &TRISD)*8) + 4;

extern volatile __bit TRISD5 @ (((unsigned) &TRISD)*8) + 5;

extern volatile __bit TRISD6 @ (((unsigned) &TRISD)*8) + 6;

extern volatile __bit TRISD7 @ (((unsigned) &TRISD)*8) + 7;

extern volatile __bit TRISE0 @ (((unsigned) &TRISE)*8) + 0;

extern volatile __bit TRISE1 @ (((unsigned) &TRISE)*8) + 1;

extern volatile __bit TRISE2 @ (((unsigned) &TRISE)*8) + 2;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TX8_9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXD8 @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit UA @ (((unsigned) &SSPSTAT)*8) + 1;

extern volatile __bit WCOL @ (((unsigned) &SSPCON)*8) + 7;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nBO @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;

extern volatile __bit nRC8 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;

extern volatile __bit nTX8 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit nWRITE @ (((unsigned) &SSPSTAT)*8) + 2;


# 27 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 149 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic.h"
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;


# 9 "Automated Solar Panel Orientation Setter.c"
#pragma config FOSC = HS
#pragma config WDTE = OFF
#pragma config PWRTE = OFF
#pragma config BOREN = OFF
#pragma config LVP = OFF
#pragma config CPD = OFF
#pragma config WRT = OFF
#pragma config CP = OFF

# 48 "setup.h"
bit Nop;

void nop(){
Nop = !Nop;
}

void Setup_IOports();

void Setup_IOports(){

TRISA = 0b11111111;
PORTA = 0b00000000;

TRISB = 0b11000000;
PORTB = 0b00000000;

TRISC = 0b10000000;
PORTC = 0b00000000;

TRISD = 0b11001100;
PORTD = 0b00000000;

TRISE = 0b10000000;
PORTE = 0b00000000;
}

# 8 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 24 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdio.h"
extern int errno;

# 55
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 100 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 192
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 42 "lcdv2.h"
unsigned char lcd_data;
unsigned char lcd_data_high;
unsigned char lcd_data_low;
unsigned char lcd_bus;

bit bit0,bit1,bit2,bit3,bit4,bit5,bit6,bit7;

void lcd_init();
void lcd_add();
void position( char row, char collum);
void clr_display();
void curser( char on );
void row2();
void enable4bitMode();
void enable8bitMode();
void pulseEnable();
void LCD_print_char( int row, int column,char print_value );

void lcd_init()
{

RC3 = 0;

unsigned int DelayLCD;

RC2 = 0;
RD1 = 0;
RC0 = 0;
RD0 = 1;
RC1 = 0;
RC3 = 1;
RC3 = 0;
RD1 = 1;
RC0 = 0;
RD0 = 0;
RC1 = 0;
RC3 = 1;
RC3 = 0;
for(DelayLCD=0;DelayLCD<2500;DelayLCD++);


RC2 = 0;
RD1 = 0;
RC0 = 0;
RD0 = 1;
RC1 = 0;
RC3 = 1;
RC3 = 0;
RD1 = 1;
RC0 = 0;
RD0 = 0;
RC1 = 0;
RC3 = 1;
RC3 = 0;
for(DelayLCD=0;DelayLCD<2500;DelayLCD++);


RC2 = 0;
RD1 = 0;
RC0 = 0;
RD0 = 0;
RC1 = 0;
RC3 = 1;
RC3 = 0;
RD1 = 0;
RC0 = 1;
RD0 = 1;
RC1 = 0;
RC3 = 1;
RC3 = 0;
for(DelayLCD=0;DelayLCD<2500;DelayLCD++);


RC2 = 0;
RD1 = 0;
RC0 = 0;
RD0 = 0;
RC1 = 0;
RC3 = 1;
RC3 = 0;
RD1 = 1;
RC0 = 1;
RD0 = 0;
RC1 = 0;
RC3 = 1;
RC3 = 0;
for(DelayLCD=0;DelayLCD<2500;DelayLCD++);


RC2 = 0;
RD1 = 0;
RC0 = 0;
RD0 = 0;
RC1 = 0;
RC3 = 1;
RC3 = 0;
RD1 = 0;
RC0 = 0;
RD0 = 0;
RC1 = 1;
RC3 = 1;
RC3 = 0;
for(DelayLCD=0;DelayLCD<2500;DelayLCD++);


}

void enable4bitMode()
{
RC2 = 0;
_delay(20);
RD1 = 0; RC0 = 0; RD0 = 1; RC1 = 0;
pulseEnable();
}

void enable8bitMode()
{
RC2 = 0;
_delay(20);
RD1 = 0; RC0 = 0; RD0 = 1; RC1 = 1;
pulseEnable();
}


void putch( char print_value ){
RC2 = 1;
_delay(20);
lcd_data = print_value;
lcd_add();
_delay(100);
}

void LCD_print_char( int row, int column,char print_value ){
position(row,column);
RC2 = 1;
_delay(20);
lcd_data = print_value;
lcd_add();
_delay(100);
}

void clr_display()
{
RC2 = 0;
_delay(20);
lcd_data = 0b00000001;
lcd_add();
_delay((unsigned long)((10)*(4000000/4000.0)));
RC2 = 1;
}
void curser( char on )
{
RC2 = 0;
if (on == 0)
{
lcd_data = 0b00001000;
lcd_add();
_delay((unsigned long)((10)*(4000000/4000.0)));
}
else if (on == 1)
{
lcd_data = 0b00001010;
lcd_add();
_delay((unsigned long)((10)*(4000000/4000.0)));
}
RC2 = 1;
}

void position( char row, char collum)
{
char post ;
if( row == 1 ) row = 128;
if( row == 2 ) row = 192;
post = row + collum - 1;
RC2 = 0;
_delay(20);
lcd_data = post ;
lcd_add();
_delay((unsigned long)((10)*(4000000/4000.0)));
row = 0;
collum = 0;
}


void lcd_add()
{
lcd_data_high = lcd_data >> 4;
lcd_data_low = lcd_data << 4;
lcd_data_low = lcd_data_low >> 4;

bit0 = lcd_data;
bit1 = lcd_data>>1;
bit2 = lcd_data>>2;
bit3 = lcd_data>>3;
bit4 = lcd_data>>4;
bit5 = lcd_data>>5;
bit6 = lcd_data>>6;
bit7 = lcd_data>>7;

RC3 = 0;
_delay(1);
RC3 = 1;
_delay(1);

RC1 = bit4;
RD0 = bit5;
RC0 = bit6;
RD1 = bit7;

_delay(1);
RC3 = 0;
_delay(1);



RC3 = 0;
_delay(1);
RC3 = 1;
_delay(1);

RC1 = bit0;
RD0 = bit1;
RC0 = bit2;
RD1 = bit3;

_delay(1);
RC3 = 0;
_delay(1);
}
void pulseEnable(){

RC3 = 0;
_delay(1);
RC3 = 1;
_delay(1);
RC3 = 0;
_delay(100);
}

# 5 "a2d.h"
unsigned int read_a2d_value( char channel );
void atod_init();

void atod_init(){
ADCON0 = 0b01000010;
ADCON1 = 0b10000100;
}

unsigned int read_a2d_value( char channel ){
unsigned int a2d_value;
channel = channel << 3;
ADCON0 = ADCON0 & 0b11000111;
ADCON0 = ADCON0 | channel;
ADON = 1;
_delay(50);
GO = 1;
while( GO == 1 );
a2d_value = ADRESH;
a2d_value = a2d_value << 8;
a2d_value = a2d_value + ADRESL;
return a2d_value;
}

# 2 "serialv2.h"
void Serial_Init();
bit Serial_Print( const char *a );
void Serial_NewLine();
bit Serial_Println( const char *a );
bit Serial_Println_Int(int val);
bit Serial_Print_Int(int val);
bit Serial_Println_Char(char val);

void Serial_Init(){


SPEN = 1;
RX9 = 0;
CREN = 1;
TX9 = 0;
TXEN = 1;
SYNC = 0;
BRGH = 1;
SPBRG = 129;
RCIE = 1;
TXIE = 0;
ADDEN = 0;
_delay((unsigned long)((500)*(4000000/4000.0)));
}

bit Serial_Print(const char *a){
while( *a!='\0'){
while(!TXIF);
TXREG = *a;
_delay(10);
a = a+1;
}
return 1;
}

void Serial_NewLine(){
while(!TXIF);
TXREG = 13;
_delay((unsigned long)((1)*(4000000/4000.0)));
while(!TXIF);
TXREG = 10;
_delay((unsigned long)((1)*(4000000/4000.0)));
}

bit Serial_Println(const char *a){
while( *a!='\0'){
while(!TXIF);
TXREG = *a;
_delay(10);
a = a+1;
}
Serial_NewLine();
return 1;
}


bit Serial_Println_Int(int val){


if(val < 0){
while(!TXIF);
TXREG = '-';
_delay(10);
val = -val;
}
if(val > 9999){
while(!TXIF);
TXREG = val/10000+48;
_delay(10);
val = val%10000;

while(!TXIF);
TXREG = val/1000+48;
_delay(10);
val = val%1000;

while(!TXIF);
TXREG = val/100+48;
_delay(10);
val = val%100;

while(!TXIF);
TXREG = val/10+48;
_delay(10);
val = val%10;
}
else if(val > 999){
while(!TXIF);
TXREG = val/1000+48;
_delay(10);
val = val%1000;

while(!TXIF);
TXREG = val/100+48;
_delay(10);
val = val%100;

while(!TXIF);
TXREG = val/10+48;
_delay(10);
val = val%10;
}
else if(val > 99){
while(!TXIF);
TXREG = val/100+48;
_delay(10);
val = val%100;

while(!TXIF);
TXREG = val/10+48;
_delay(10);
val = val%10;
}
else if(val > 9){
while(!TXIF);
TXREG = val/10+48;
_delay(10);
val = val%10;
}
while(!TXIF);
TXREG = val+48;
_delay(10);
while(!TXIF);
TXREG = 13;
_delay(10);
while(!TXIF);
TXREG = 10;
_delay(10);
return 1;
}



void Serial_Print_Char(char character){
while(!TXIF);
TXREG = character;
_delay(10);
}

bit Serial_Print_Int(int val){


if(val < 0){
while(!TXIF);
TXREG = '-';
_delay(10);
val = -val;
}
if(val > 9999){
while(!TXIF);
TXREG = val/10000+48;
_delay(10);
val = val%10000;

while(!TXIF);
TXREG = val/1000+48;
_delay(10);
val = val%1000;

while(!TXIF);
TXREG = val/100+48;
_delay(10);
val = val%100;

while(!TXIF);
TXREG = val/10+48;
_delay(10);
val = val%10;
}
else if(val > 999){
while(!TXIF);
TXREG = val/1000+48;
_delay(10);
val = val%1000;

while(!TXIF);
TXREG = val/100+48;
_delay(10);
val = val%100;

while(!TXIF);
TXREG = val/10+48;
_delay(10);
val = val%10;
}
else if(val > 99){
while(!TXIF);
TXREG = val/100+48;
_delay(10);
val = val%100;

while(!TXIF);
TXREG = val/10+48;
_delay(10);
val = val%10;
}
else if(val > 9){
while(!TXIF);
TXREG = val/10+48;
_delay(10);
val = val%10;
}
while(!TXIF);
TXREG = val+48;
_delay(10);

return 1;
}

# 2 "interrupts.h"
void interruptTimer1();
void enableInterrupt();
void interruptSPI();
void interrupt isr();

void enableInterrupt(){

RBIE = 0;
INTE = 0;

PSPIE = 0;
ADIE = 0;

TXIE = 0;
RCIE = 1;

SSPIE = 0;
CCP1IE = 0;

TMR1IE = 1;
TMR2IE = 0;
T0IE = 0;

EEIE = 0;
BCLIE = 0;
CCP2IE = 0;


GIE = 1;
PEIE = 1;
}

# 2 "timer1.h"
void Timer1_Init();

void Timer1_Init(){

T1CKPS1 = 0;
T1CKPS0 = 1;
TMR1CS = 0;
TMR1ON = 1;
T1OSCEN = 0;
TMR1L = 0xB0;
TMR1H = 60;
TMR1IE = 1;
}

# 26 "Automated Solar Panel Orientation Setter.c"
unsigned char v,y,z,w;
unsigned char x,bed_nu = 1;
unsigned char i = 1;


void a2d_read();
unsigned int ldr1,ldr2,V_Bat,C_Bat;
unsigned short long V_Bat2,C_Bat2;
void Calculate();


unsigned int msecond;
unsigned int second;
unsigned int minute;
unsigned int hour;
unsigned char j;



void bdnu_unid();
char buffer[20];
unsigned char rc[9];
unsigned char wtmp;

unsigned char state=0;

# 58
unsigned int currentMode = 0;
bit BlinkDet;
bit timeChanged;
bit angleChanged;
int angleCount;
bit TimeBlink_on;
unsigned int sterpper_counts=0;
int stepsto_turn = 0;

void check_pc();
void ClrBuffer();

void RotateMotorRight(int value);
void RotateMotorLeft(int value);

char CheckKeyPad();
int RowNo();
int ColomnNo(int rowNo);
void CheckMode();
void KeyToSerial();
void LCDTimeUpdate();
void main(){

char pressedKey;

Setup_IOports();
atod_init();
lcd_init();
clr_display();

Serial_Init();
Timer1_Init();
enableInterrupt();

lcd_init();

clr_display();
state = 91;

while(RA4 == 1){
sterpper_counts = 1;
RotateMotorRight(1);
}
sterpper_counts = 0;

# 108
nop();

hour = 0;
minute = 0;
TimeBlink_on = 1;
LCDTimeUpdate();

nop();


int tmp=0;
for(tmp=0; tmp<12; tmp++){
eeprom_write(tmp, tmp*15 );
}

while(1){
switch (state){



case 0:

break;

case 1:
state = 91;
break;
case 2:
state = 92;
break;
case 3:
state = 93;
break;
case 4:
state = 94;
break;

case 90:

break;

case 95:
clr_display();
TimeBlink_on = 0;
position(1,1);
printf("TIME: HH:MM     ");
position(2,1);
printf("      00:00     ");
state = 41;
break;

case 41:

TimeBlink_on = 0;
timeChanged = 1;
int newTimeHr,newTimeMin;
while(timeChanged){
pressedKey = CheckKeyPad();
if( pressedKey>=48 && pressedKey<=50 ){
newTimeHr = (pressedKey-48)*10;
LCD_print_char(2,7,pressedKey);
while(timeChanged){
pressedKey = CheckKeyPad();
if( pressedKey>=48 && pressedKey<58 ){
newTimeHr = newTimeHr + (pressedKey-48);
LCD_print_char(2,8,pressedKey);
pressedKey = '@';
while(timeChanged){
pressedKey = CheckKeyPad();
if( pressedKey>=48 && pressedKey<=53 ){
newTimeMin = (pressedKey-48)*10;
LCD_print_char(2,10,pressedKey);
pressedKey = '@';
while(timeChanged){
pressedKey = CheckKeyPad();
if( pressedKey>=48 && pressedKey<58 ){
LCD_print_char(2,11,pressedKey);
newTimeMin = newTimeMin + (pressedKey-48);
timeChanged = 0;
pressedKey = '@';
}
}
}
}
}
}
}
}
hour = newTimeHr;
minute = newTimeMin;
state = 1;


TimeBlink_on = 1;
LCDTimeUpdate();
break;

case 96:
clr_display();
TimeBlink_on = 0;
position(1,1);
printf("Time  - 06:00   ");
position(2,1);
printf("Angle - 000D    ");
state = 42;
break;

case 42:

TimeBlink_on = 0;

angleCount = 12;
int angle_old;
int angle;

angleChanged = 1;

angle_old = eeprom_read(12-angleCount);
LCD_print_char(2,9,angle_old/100+48);
LCD_print_char(2,10,angle_old%100/10+48);
LCD_print_char(2,11,angle_old%100%10+48);

while(angleCount){
pressedKey = CheckKeyPad();
if( pressedKey>=48 && pressedKey<58 ){
LCD_print_char(2,9,pressedKey);
angle = (pressedKey-48)*100;

pressedKey = '@';
while(angleChanged){
pressedKey = CheckKeyPad();
if( pressedKey>=48 && pressedKey<58 ){
LCD_print_char(2,10,pressedKey);
angle = angle + (pressedKey-48)*10;
pressedKey = '@';
while(angleChanged){
pressedKey = CheckKeyPad();
if( pressedKey>=48 && pressedKey<58 ){
LCD_print_char(2,11,pressedKey);

LCD_print_char(1,9,(48+(7+12-angleCount)/10));
LCD_print_char(1,10,(48+(7+12-angleCount)%10));

_delay((unsigned long)((1000)*(4000000/4000.0)));

angle = angle + (pressedKey-48);
eeprom_write(12-angleCount, angle );
angleCount--;

angle_old = eeprom_read(12-angleCount);

LCD_print_char(2,9,angle_old/100+48);
LCD_print_char(2,10,angle_old%100/10+48);
LCD_print_char(2,11,angle_old%100%10+48);



angleChanged = 0;
pressedKey = '@';
}
}
}
}
}
angleChanged = 1;
}

state = 1;
TimeBlink_on = 1;
break;


case 91:

position(1,1);
printf("MODE1,000D,00:00");
position(2,1);
printf("00.0V,0.0A,00.0W");
LCDTimeUpdate();


state = 10;
break;
case 10 :

a2d_read();

Serial_Print_Int(ldr1);
Serial_Print(", ");
Serial_Print_Int(ldr2);
Serial_Print(", ");
Serial_Print_Int(V_Bat);
Serial_Print(", ");
Serial_Print_Int(C_Bat);
Serial_Print(", ");
Serial_NewLine();
_delay((unsigned long)((50)*(4000000/4000.0)));
nop();


double tmp_angle_display = (double)(sterpper_counts/0.55);
int angle_display = (int)tmp_angle_display;

LCD_print_char(1,7,angle_display/100+48);
LCD_print_char(1,8,angle_display%100/10+48);
LCD_print_char(1,9,angle_display%100%10+48);


LCD_print_char(2,1,V_Bat2/10+48);
LCD_print_char(2,2,V_Bat2%10+48);
LCD_print_char(2,4,'0');


LCD_print_char(2,7,'0');
LCD_print_char(2,9,'0');


LCD_print_char(2,12,'0');
LCD_print_char(2,13,'0');
LCD_print_char(2,15,'0');




CheckMode();

Calculate();

break;


case 92 :


a2d_read();
position(1,1);
printf("MODE2,000D,00:00");
position(2,1);
printf("00.0V,0.0A,00.0W");
LCDTimeUpdate();

state = 20;
break;
case 20 :a2d_read();

Serial_Print_Int(ldr1);
Serial_Print(", ");
Serial_Print_Int(ldr2);
Serial_Print(", ");
Serial_Print_Int(V_Bat);
Serial_Print(", ");
Serial_Print_Int(C_Bat);
Serial_Print(", ");
Serial_NewLine();
_delay((unsigned long)((50)*(4000000/4000.0)));
nop();


double tmp_angle_display = (double)(sterpper_counts/0.55);
int angle_display = (int)tmp_angle_display;

LCD_print_char(1,7,angle_display/100+48);
LCD_print_char(1,8,angle_display%100/10+48);
LCD_print_char(1,9,angle_display%100%10+48);


LCD_print_char(2,1,V_Bat2/10+48);
LCD_print_char(2,2,V_Bat2%10+48);
LCD_print_char(2,4,'0');


LCD_print_char(2,7,'0');
LCD_print_char(2,9,'0');


LCD_print_char(2,12,'0');
LCD_print_char(2,13,'0');
LCD_print_char(2,15,'0');


if(hour >= 6 && hour <=18 ){

double tmp_stepsto_turn =(eeprom_read( hour-6 )*0.56;
int stepsto_turn = (int)tmp_stepsto_turn;
while( !(sterpper_counts == stepsto_turn)){
if( stepsto_turn > sterpper_counts ){
RotateMotorLeft(1);
}
else{
RotateMotorRight(1);
}
}
}

# 406
CheckMode();



break;

case 93 :

position(1,1);
printf("MODE3,000D,00:00");
position(2,1);
printf("00.0V,0.0A,00.0W");
LCDTimeUpdate();



state = 30;
break;
case 30 :

a2d_read();
Serial_Print_Int(ldr1);
Serial_Print(", ");
Serial_Print_Int(ldr2);
Serial_Print(", ");
Serial_Print_Int(V_Bat);
Serial_Print(", ");
Serial_Print_Int(C_Bat);
Serial_Print(", ");
Serial_NewLine();
_delay((unsigned long)((50)*(4000000/4000.0)));
nop();


double tmp_angle_display = (double)(sterpper_counts/0.55);
int angle_display = (int)tmp_angle_display;

LCD_print_char(1,7,angle_display/100+48);
LCD_print_char(1,8,angle_display%100/10+48);
LCD_print_char(1,9,angle_display%100%10+48);


LCD_print_char(2,1,V_Bat2/10+48);
LCD_print_char(2,2,V_Bat2%10+48);
LCD_print_char(2,4,'0');


LCD_print_char(2,7,'0');
LCD_print_char(2,9,'0');


LCD_print_char(2,12,'0');
LCD_print_char(2,13,'0');
LCD_print_char(2,15,'0');

# 467
pressedKey = CheckKeyPad();
if(pressedKey == 'A'){
RotateMotorLeft(1);
}
else if(pressedKey == 'B'){
RotateMotorRight(1);
}
else if (pressedKey == '*'){
state = 4;
}



break;

case 94 :

position(1,1);
printf("MODE*,000D,00:00");
position(2,1);
printf("00.0V,0.0A,00.0W");
LCDTimeUpdate();
state = 40;
break;

case 40 :
pressedKey = CheckKeyPad();
if( pressedKey=='*' ){
currentMode++;
if (currentMode>4) currentMode = 1;
state = currentMode;

RC1 = 1;
Serial_Print("Switched to Mode : ");
Serial_Println_Int((int)state);
RC1 = 0;

; nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();;
}

# 509
else if(pressedKey=='C'){

RC1 = 1;
Serial_Print("Switched to Mode : ");
Serial_Println_Int((int)state);
RC1 = 0;

state = 96;
}

# 521
else if(pressedKey=='D'){

RC1 = 1;
Serial_Print("Switched to Mode : ");
Serial_Println_Int((int)state);
RC1 = 0;

state = 95;
}
break;
default:


break;
}
}
}

void CheckMode(){
char pressedKey;
pressedKey = CheckKeyPad();

if( pressedKey=='*' ){
currentMode++;
if (currentMode>4) currentMode = 1;
state = currentMode;

RC1 = 1;
Serial_Print("Switched to Mode : ");
Serial_Println_Int((int)state);
RC1 = 0;

; nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();;
}
}

void KeyToSerial(){
char pressedKey = CheckKeyPad();
if( pressedKey!='$'){

RC1 = 1;
Serial_Print_Char(pressedKey);
RC1 = 0;

; nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();;
nop();
}
}

char CheckKeyPad(){
RC4 = 0; RD5 = 0; RC5=0; RD4=0;
char charactor = '$';
int colomnNo = 0;
int rowNo = RowNo();
if (rowNo != 0){
colomnNo = ColomnNo(rowNo);
RC4 = 0; RD5 = 0; RC5=0; RD4=0;
if(colomnNo==1 && rowNo == 1) charactor = '1';
else if(colomnNo==1 && rowNo == 2) charactor = '2';
else if(colomnNo==1 && rowNo == 3) charactor = '3';
else if(colomnNo==1 && rowNo == 4) charactor = 'A';

else if(colomnNo==2 && rowNo == 1) charactor = '4';
else if(colomnNo==2 && rowNo == 2) charactor = '5';
else if(colomnNo==2 && rowNo == 3) charactor = '6';
else if(colomnNo==2 && rowNo == 4) charactor = 'B';

else if(colomnNo==3 && rowNo == 1) charactor = '7';
else if(colomnNo==3 && rowNo == 2) charactor = '8';
else if(colomnNo==3 && rowNo == 3) charactor = '9';
else if(colomnNo==3 && rowNo == 4) charactor = 'C';

else if(colomnNo==4 && rowNo == 1) charactor = '*';
else if(colomnNo==4 && rowNo == 2) charactor = '0';
else if(colomnNo==4 && rowNo == 3) charactor = '#';
else if(colomnNo==4 && rowNo == 4) charactor = 'D';

else charactor = '@';
}

# 604
if(rowNo==1) while(RD2==0);
else if(rowNo==2) while(RD7==0);
else if(rowNo==3) while(RD3==0);
else if(rowNo==4) while(RD6==0);


return charactor;
}

int ColomnNo(int rowNo){
RC4 = 0; RD5 = 0; RC5=0; RD4=0;
if(rowNo==1){
RC4 = 1;
_delay(1);
if(RD2==1){
return 1;
}
RD5 = 1;
_delay(1);
if(RD2==1){
return 2;
}
RC5 = 1;
_delay(1);
if(RD2==1){
return 3;
}
RD4 = 1;
_delay(1);
if(RD2==1){
return 4;
}
}
else if(rowNo==2){
RC4 = 1;
_delay(1);
if(RD7==1){
return 1;
}
RD5 = 1;
_delay(1);
if(RD7==1){
return 2;
}
RC5 = 1;
_delay(1);
if(RD7==1){
return 3;
}
RD4 = 1;
_delay(1);
if(RD7==1){
return 4;
}
}
else if(rowNo==3){
RC4 = 1;
_delay(1);
if(RD3==1){
return 1;
}
RD5 = 1;
_delay(1);
if(RD3==1){
return 2;
}
RC5 = 1;
_delay(1);
if(RD3==1){
return 3;
}
RD4 = 1;
_delay(1);
if(RD3==1){
return 4;
}
}
else if(rowNo==4){
RC4 = 1;
_delay(1);
if(RD6==1){
return 1;
}
RD5 = 1;
_delay(1);
if(RD6==1){
return 2;
}
RC5 = 1;
_delay(1);
if(RD6==1){
return 3;
}
RD4 = 1;
_delay(1);
if(RD6==1){
return 4;
}
}
return 0;
}

int RowNo(){
int row;
if( RD2!=1){
row = 1;
}
else if( RD7!=1 ){
row = 2;
}
else if( RD3!=1 ){
row = 3;
}
else if( RD6!=1 ){
row = 4;
}
else{
row = 0;
}
return row;
}

void Rotation(int rotationCount, char direction){
if(direction == 1){

RotateMotorLeft(rotationCount);
}

else{
RotateMotorRight(rotationCount);
}
}

void RotateMotorLeft(int value){

if(sterpper_counts < 100 ){
for(i=0; i<value; i++){
RB2=0; RB3=1; RB4=1; RB5=1;
_delay((unsigned long)((15)*(4000000/4000.0)));
RB2=1; RB3=0; RB4=1; RB5=1;
_delay((unsigned long)((15)*(4000000/4000.0)));
RB2=1; RB3=1; RB4=0; RB5=1;
_delay((unsigned long)((15)*(4000000/4000.0)));
RB2=1; RB3=1; RB4=1; RB5=0;
_delay((unsigned long)((15)*(4000000/4000.0)));
sterpper_counts++;
}
}
RB2=1; RB3=1; RB4=1; RB5=1;
}

void RotateMotorRight(int value){


int i=0;
if(sterpper_counts > 0 ){
for(i=0; i<value; i++){
RB2=1; RB3=1; RB4=1; RB5=0;
_delay((unsigned long)((15)*(4000000/4000.0)));
RB2=1; RB3=1; RB4=0; RB5=1;
_delay((unsigned long)((15)*(4000000/4000.0)));
RB2=1; RB3=0; RB4=1; RB5=1;
_delay((unsigned long)((15)*(4000000/4000.0)));
RB2=0; RB3=1; RB4=1; RB5=1;
_delay((unsigned long)((15)*(4000000/4000.0)));
sterpper_counts--;
}
}
else{

}
RB2=1; RB3=1; RB4=1; RB5=1;
}

void a2d_read(){
ldr1 = read_a2d_value(0);
ldr2 = read_a2d_value(1);
ldr2 = ldr2 + (int)(ldr2*0.35);
V_Bat = read_a2d_value(2);
V_Bat2 = (int)V_Bat*5*11/1023;
C_Bat = read_a2d_value(3);
C_Bat2 = (int)C_Bat*5*11/1023;
}

void Calculate(){

# 794
if(ldr1 > ldr2){
if(ldr1 - ldr2 > 25){
RotateMotorLeft(1);
}
}
else if (ldr2 > ldr1){
if(ldr2 - ldr1 > 25){
RotateMotorRight(1);
}
}
}


void interrupt isr(){
if(TMR1IF==1){
msecond ++;
if(msecond == 50){
second ++;

if(TimeBlink_on){
if(BlinkDet){
LCD_print_char(1,14,':');
}
else{
LCD_print_char(1,14,' ');
}
LCDTimeUpdate();
BlinkDet = !BlinkDet;
}

RD6 = !RD6;
msecond = 0;
if( second == 60){

# 833
minute ++;
second = 0;

x = minute%30 ;
if ( x == 0){


}


if( minute == 60){
minute = 0;
hour ++;
if( hour == 24) hour == 0;
}
}
}
TMR1IF = 0;
TMR1L = 0xB0;
TMR1H = 0x3C;
}
if( RCIF == 1){
if ((FERR == 0) && (OERR == 0)){
wtmp = RCREG;
if( RCREG=='*' || j > 20-1 ){
j=0;
}
buffer[j] = RCREG;
j ++;
}
else{

CREN = 0;
FERR = 0;
wtmp = RCREG;
wtmp = RCREG;
CREN = 1;
}
RCIF = 0;
}
if(OERR == 1){
CREN = 0;

wtmp = RCREG;
wtmp = RCREG;
CREN = 1;
}

}

void check_pc(){

}

void bdnu_unid(){

}

void ClrBuffer(){
int i;
for(i=0; i<20; i++){
buffer[i] = 0;
}
}

void LCDTimeUpdate(){
LCD_print_char(1,12,hour/10+48);
_delay((unsigned long)((10)*(4000000/4000.0)));
LCD_print_char(1,13,hour%10+48);
_delay((unsigned long)((10)*(4000000/4000.0)));
LCD_print_char(1,15,minute/10+48);
_delay((unsigned long)((10)*(4000000/4000.0)));
LCD_print_char(1,16,minute%10+48);
_delay((unsigned long)((10)*(4000000/4000.0)));
}
