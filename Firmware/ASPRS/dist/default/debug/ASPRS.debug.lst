

Microchip Technology PIC PRO Macro Assembler V1.34 build -361300703 
                                                                                               Sun Mar 20 01:50:18 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text15,local,class=CODE,merge=1,delta=2
    23                           	psect	text16,local,class=CODE,merge=1,delta=2
    24                           	psect	text17,local,class=CODE,merge=1,delta=2
    25                           	psect	text20,local,class=CODE,merge=1,delta=2
    26                           	psect	text21,local,class=CODE,merge=1,delta=2
    27                           	psect	text22,local,class=CODE,merge=1,delta=2
    28                           	psect	text24,local,class=CODE,merge=1,delta=2
    29                           	psect	text25,local,class=CODE,merge=1,delta=2
    30                           	psect	text32,local,class=CODE,merge=1,delta=2
    31                           	psect	text41,local,class=CODE,merge=1,delta=2
    32                           	psect	text44,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	pa_nodes,global,class=CODE,delta=2
    35                           	psect	maintext_split_1,global,class=CODE,split=1,delta=2
    36                           	psect	maintext_split_2,global,class=CODE,split=1,delta=2
    37                           	psect	maintext_split_3,global,class=CODE,split=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  000D                     	;# 
    53  000E                     	;# 
    54  000E                     	;# 
    55  000F                     	;# 
    56  0010                     	;# 
    57  0011                     	;# 
    58  0012                     	;# 
    59  0013                     	;# 
    60  0014                     	;# 
    61  0015                     	;# 
    62  0015                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001B                     	;# 
    70  001C                     	;# 
    71  001D                     	;# 
    72  001E                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  0086                     	;# 
    77  0087                     	;# 
    78  0088                     	;# 
    79  0089                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  008E                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0094                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  009F                     	;# 
    93  010C                     	;# 
    94  010D                     	;# 
    95  010E                     	;# 
    96  010F                     	;# 
    97  018C                     	;# 
    98  018D                     	;# 
    99                           
   100                           	psect	idataBANK1
   101  0000                     __pidataBANK1:	
   102  001F                     _ADCON0	set	31
   103  001E                     _ADRESH	set	30
   104  0005                     _PORTA	set	5
   105  0006                     _PORTB	set	6
   106  0007                     _PORTC	set	7
   107  0008                     _PORTD	set	8
   108  0009                     _PORTE	set	9
   109  001A                     _RCREG	set	26
   110  000F                     _TMR1H	set	15
   111  000E                     _TMR1L	set	14
   112  0019                     _TXREG	set	25
   113  00C3                     _ADDEN	set	195
   114  00F8                     _ADON	set	248
   115  0018                     _CARRY	set	24
   116  00C4                     _CREN	set	196
   117  00C2                     _FERR	set	194
   118  005F                     _GIE	set	95
   119  00FA                     _GO	set	250
   120  005C                     _INTE	set	92
   121  00C1                     _OERR	set	193
   122  005E                     _PEIE	set	94
   123  002C                     _RA4	set	44
   124  0032                     _RB2	set	50
   125  0033                     _RB3	set	51
   126  0034                     _RB4	set	52
   127  0035                     _RB5	set	53
   128  005B                     _RBIE	set	91
   129  0038                     _RC0	set	56
   130  0039                     _RC1	set	57
   131  003A                     _RC2	set	58
   132  003B                     _RC3	set	59
   133  003C                     _RC4	set	60
   134  003D                     _RC5	set	61
   135  0065                     _RCIF	set	101
   136  0040                     _RD0	set	64
   137  0041                     _RD1	set	65
   138  0042                     _RD2	set	66
   139  0043                     _RD3	set	67
   140  0044                     _RD4	set	68
   141  0045                     _RD5	set	69
   142  0046                     _RD6	set	70
   143  0047                     _RD7	set	71
   144  00C6                     _RX9	set	198
   145  00C7                     _SPEN	set	199
   146  005D                     _T0IE	set	93
   147  0084                     _T1CKPS0	set	132
   148  0085                     _T1CKPS1	set	133
   149  0083                     _T1OSCEN	set	131
   150  0081                     _TMR1CS	set	129
   151  0060                     _TMR1IF	set	96
   152  0080                     _TMR1ON	set	128
   153  0064                     _TXIF	set	100
   154  009F                     _ADCON1	set	159
   155  009E                     _ADRESL	set	158
   156  0099                     _SPBRG	set	153
   157  0085                     _TRISA	set	133
   158  0086                     _TRISB	set	134
   159  0087                     _TRISC	set	135
   160  0088                     _TRISD	set	136
   161  0089                     _TRISE	set	137
   162  0466                     _ADIE	set	1126
   163  046B                     _BCLIE	set	1131
   164  04C2                     _BRGH	set	1218
   165  0462                     _CCP1IE	set	1122
   166  0468                     _CCP2IE	set	1128
   167  046C                     _EEIE	set	1132
   168  0467                     _PSPIE	set	1127
   169  0465                     _RCIE	set	1125
   170  0463                     _SSPIE	set	1123
   171  04C4                     _SYNC	set	1220
   172  0460                     _TMR1IE	set	1120
   173  0461                     _TMR2IE	set	1121
   174  04C6                     _TX9	set	1222
   175  04C5                     _TXEN	set	1221
   176  0464                     _TXIE	set	1124
   177  010D                     _EEADR	set	269
   178  010C                     _EEDATA	set	268
   179  018C                     _EECON1	set	396
   180  018D                     _EECON2	set	397
   181  0C60                     _RD	set	3168
   182  0C61                     _WR	set	3169
   183  0C62                     _WREN	set	3170
   184                           
   185                           	psect	strings
   186  1000                     __pstrings:	
   187  1000                     stringtab:	
   188  1000                     __stringtab:	
   189  1000                     stringcode:	
   190                           ;	String table - string pointers are 1 byte each
   191                           
   192  1000                     stringdir:	
   193  1000  3010               	movlw	high stringdir
   194  1001  008A               	movwf	10
   195  1002  0804               	movf	4,w
   196  1003  0A84               	incf	4,f
   197  1004  0782               	addwf	2,f
   198  1005                     __stringbase:	
   199  1005  3400               	retlw	0
   200  1006                     __end_of__stringtab:	
   201  1006                     STR_25:	
   202  1006  3453               	retlw	83	;'S'
   203  1007  3477               	retlw	119	;'w'
   204  1008  3469               	retlw	105	;'i'
   205  1009  3474               	retlw	116	;'t'
   206  100A  3463               	retlw	99	;'c'
   207  100B  3468               	retlw	104	;'h'
   208  100C  3465               	retlw	101	;'e'
   209  100D  3464               	retlw	100	;'d'
   210  100E  3420               	retlw	32	;' '
   211  100F  3474               	retlw	116	;'t'
   212  1010  346F               	retlw	111	;'o'
   213  1011  3420               	retlw	32	;' '
   214  1012  344D               	retlw	77	;'M'
   215  1013  346F               	retlw	111	;'o'
   216  1014  3464               	retlw	100	;'d'
   217  1015  3465               	retlw	101	;'e'
   218  1016  3420               	retlw	32	;' '
   219  1017  343A               	retlw	58	;':'
   220  1018  3420               	retlw	32	;' '
   221  1019  3400               	retlw	0
   222  101A                     STR_2:	
   223  101A  3420               	retlw	32	;' '
   224  101B  3420               	retlw	32	;' '
   225  101C  3420               	retlw	32	;' '
   226  101D  3420               	retlw	32	;' '
   227  101E  3420               	retlw	32	;' '
   228  101F  3420               	retlw	32	;' '
   229  1020  3430               	retlw	48	;'0'
   230  1021  3430               	retlw	48	;'0'
   231  1022  343A               	retlw	58	;':'
   232  1023  3430               	retlw	48	;'0'
   233  1024  3430               	retlw	48	;'0'
   234  1025  3420               	retlw	32	;' '
   235  1026  3420               	retlw	32	;' '
   236  1027  3420               	retlw	32	;' '
   237  1028  3420               	retlw	32	;' '
   238  1029  3420               	retlw	32	;' '
   239  102A  3400               	retlw	0
   240  102B                     STR_1:	
   241  102B  3454               	retlw	84	;'T'
   242  102C  3449               	retlw	73	;'I'
   243  102D  344D               	retlw	77	;'M'
   244  102E  3445               	retlw	69	;'E'
   245  102F  343A               	retlw	58	;':'
   246  1030  3420               	retlw	32	;' '
   247  1031  3448               	retlw	72	;'H'
   248  1032  3448               	retlw	72	;'H'
   249  1033  343A               	retlw	58	;':'
   250  1034  344D               	retlw	77	;'M'
   251  1035  344D               	retlw	77	;'M'
   252  1036  3420               	retlw	32	;' '
   253  1037  3420               	retlw	32	;' '
   254  1038  3420               	retlw	32	;' '
   255  1039  3420               	retlw	32	;' '
   256  103A  3420               	retlw	32	;' '
   257  103B  3400               	retlw	0
   258  103C                     STR_4:	
   259  103C  3441               	retlw	65	;'A'
   260  103D  346E               	retlw	110	;'n'
   261  103E  3467               	retlw	103	;'g'
   262  103F  346C               	retlw	108	;'l'
   263  1040  3465               	retlw	101	;'e'
   264  1041  3420               	retlw	32	;' '
   265  1042  342D               	retlw	45	;'-'
   266  1043  3420               	retlw	32	;' '
   267  1044  3430               	retlw	48	;'0'
   268  1045  3430               	retlw	48	;'0'
   269  1046  3430               	retlw	48	;'0'
   270  1047  3444               	retlw	68	;'D'
   271  1048  3420               	retlw	32	;' '
   272  1049  3420               	retlw	32	;' '
   273  104A  3420               	retlw	32	;' '
   274  104B  3420               	retlw	32	;' '
   275  104C  3400               	retlw	0
   276  104D                     STR_3:	
   277  104D  3454               	retlw	84	;'T'
   278  104E  3469               	retlw	105	;'i'
   279  104F  346D               	retlw	109	;'m'
   280  1050  3465               	retlw	101	;'e'
   281  1051  3420               	retlw	32	;' '
   282  1052  3420               	retlw	32	;' '
   283  1053  342D               	retlw	45	;'-'
   284  1054  3420               	retlw	32	;' '
   285  1055  3430               	retlw	48	;'0'
   286  1056  3436               	retlw	54	;'6'
   287  1057  343A               	retlw	58	;':'
   288  1058  3430               	retlw	48	;'0'
   289  1059  3430               	retlw	48	;'0'
   290  105A  3420               	retlw	32	;' '
   291  105B  3420               	retlw	32	;' '
   292  105C  3420               	retlw	32	;' '
   293  105D  3400               	retlw	0
   294  105E                     STR_23:	
   295  105E  344D               	retlw	77	;'M'
   296  105F  344F               	retlw	79	;'O'
   297  1060  3444               	retlw	68	;'D'
   298  1061  3445               	retlw	69	;'E'
   299  1062  342A               	retlw	42	;'*'
   300  1063  342C               	retlw	44	;','
   301  1064  3430               	retlw	48	;'0'
   302  1065  3430               	retlw	48	;'0'
   303  1066  3430               	retlw	48	;'0'
   304  1067  3444               	retlw	68	;'D'
   305  1068  342C               	retlw	44	;','
   306  1069  3430               	retlw	48	;'0'
   307  106A  3430               	retlw	48	;'0'
   308  106B  343A               	retlw	58	;':'
   309  106C  3430               	retlw	48	;'0'
   310  106D  3430               	retlw	48	;'0'
   311  106E  3400               	retlw	0
   312  106F                     STR_5:	
   313  106F  344D               	retlw	77	;'M'
   314  1070  344F               	retlw	79	;'O'
   315  1071  3444               	retlw	68	;'D'
   316  1072  3445               	retlw	69	;'E'
   317  1073  3431               	retlw	49	;'1'
   318  1074  342C               	retlw	44	;','
   319  1075  3430               	retlw	48	;'0'
   320  1076  3430               	retlw	48	;'0'
   321  1077  3430               	retlw	48	;'0'
   322  1078  3444               	retlw	68	;'D'
   323  1079  342C               	retlw	44	;','
   324  107A  3430               	retlw	48	;'0'
   325  107B  3430               	retlw	48	;'0'
   326  107C  343A               	retlw	58	;':'
   327  107D  3430               	retlw	48	;'0'
   328  107E  3430               	retlw	48	;'0'
   329  107F  3400               	retlw	0
   330  1080                     STR_11:	
   331  1080  344D               	retlw	77	;'M'
   332  1081  344F               	retlw	79	;'O'
   333  1082  3444               	retlw	68	;'D'
   334  1083  3445               	retlw	69	;'E'
   335  1084  3432               	retlw	50	;'2'
   336  1085  342C               	retlw	44	;','
   337  1086  3430               	retlw	48	;'0'
   338  1087  3430               	retlw	48	;'0'
   339  1088  3430               	retlw	48	;'0'
   340  1089  3444               	retlw	68	;'D'
   341  108A  342C               	retlw	44	;','
   342  108B  3430               	retlw	48	;'0'
   343  108C  3430               	retlw	48	;'0'
   344  108D  343A               	retlw	58	;':'
   345  108E  3430               	retlw	48	;'0'
   346  108F  3430               	retlw	48	;'0'
   347  1090  3400               	retlw	0
   348  1091                     STR_17:	
   349  1091  344D               	retlw	77	;'M'
   350  1092  344F               	retlw	79	;'O'
   351  1093  3444               	retlw	68	;'D'
   352  1094  3445               	retlw	69	;'E'
   353  1095  3433               	retlw	51	;'3'
   354  1096  342C               	retlw	44	;','
   355  1097  3430               	retlw	48	;'0'
   356  1098  3430               	retlw	48	;'0'
   357  1099  3430               	retlw	48	;'0'
   358  109A  3444               	retlw	68	;'D'
   359  109B  342C               	retlw	44	;','
   360  109C  3430               	retlw	48	;'0'
   361  109D  3430               	retlw	48	;'0'
   362  109E  343A               	retlw	58	;':'
   363  109F  3430               	retlw	48	;'0'
   364  10A0  3430               	retlw	48	;'0'
   365  10A1  3400               	retlw	0
   366  10A2                     STR_6:	
   367  10A2  3430               	retlw	48	;'0'
   368  10A3  3430               	retlw	48	;'0'
   369  10A4  342E               	retlw	46	;'.'
   370  10A5  3430               	retlw	48	;'0'
   371  10A6  3456               	retlw	86	;'V'
   372  10A7  342C               	retlw	44	;','
   373  10A8  3430               	retlw	48	;'0'
   374  10A9  342E               	retlw	46	;'.'
   375  10AA  3430               	retlw	48	;'0'
   376  10AB  3441               	retlw	65	;'A'
   377  10AC  342C               	retlw	44	;','
   378  10AD  3430               	retlw	48	;'0'
   379  10AE  3430               	retlw	48	;'0'
   380  10AF  342E               	retlw	46	;'.'
   381  10B0  3430               	retlw	48	;'0'
   382  10B1  3457               	retlw	87	;'W'
   383  10B2  3400               	retlw	0
   384  10B3                     STR_7:	
   385  10B3  342C               	retlw	44	;','
   386  10B4  3420               	retlw	32	;' '
   387  10B5  3400               	retlw	0
   388  10B3                     
   389                           ; #config settings
   390  0000                     
   391                           	psect	cinit
   392  07EA                     start_initialization:	
   393  07EA                     __initialization:	
   394  07EA  30A0               	movlw	low __pbssBANK1
   395                           
   396                           ; Clear objects allocated to BITBANK0
   397  07EB  01D1               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   398  07EC  01D2               	clrf	((__pbitbssBANK0/(0+8)+1))& (0+127)
   399                           
   400                           ; Clear objects allocated to BANK0
   401  07ED  01D3               	clrf	__pbssBANK0& (0+127)
   402  07EE  01D4               	clrf	(__pbssBANK0+1)& (0+127)
   403  07EF  01D5               	clrf	(__pbssBANK0+2)& (0+127)
   404  07F0  01D6               	clrf	(__pbssBANK0+3)& (0+127)
   405  07F1  01D7               	clrf	(__pbssBANK0+4)& (0+127)
   406  07F2  01D8               	clrf	(__pbssBANK0+5)& (0+127)
   407                           
   408                           ; Clear objects allocated to BANK1
   409  07F3  1383               	bcf	3,7	;select IRP bank0
   410  07F4  0084               	movwf	4
   411  07F5  30CB               	movlw	low (__pbssBANK1+43)
   412  07F6  160A  118A  20B8   	fcall	clear_ram0
   413                           
   414                           ; Initialize objects allocated to BANK1
   415  07F9  1683               	bsf	3,5	;RP0=1, select bank1
   416                           
   417                           ;initializer for _i
   418  07FA  3001               	movlw	1
   419  07FB  00E2               	movwf	__pdataBANK1& (0+127)
   420  07FC                     end_of_initialization:	
   421                           ;End of C runtime variable initialization code
   422                           
   423  07FC                     __end_of__initialization:	
   424  07FC  0183               	clrf	3
   425  07FD  120A  118A  283A   	ljmp	_main	;jump to C main() function
   426                           
   427                           	psect	bitbssBANK0
   428  0288                     __pbitbssBANK0:	
   429  0288                     _BlinkDet:	
   430  0288                     	ds	1
   431  0289                     _Nop:	
   432  0289                     	ds	1
   433  028A                     _TimeBlink_on:	
   434  028A                     	ds	1
   435  028B                     _angleChanged:	
   436  028B                     	ds	1
   437  028C                     _bit0:	
   438  028C                     	ds	1
   439  028D                     _bit1:	
   440  028D                     	ds	1
   441  028E                     _bit2:	
   442  028E                     	ds	1
   443  028F                     _bit3:	
   444  028F                     	ds	1
   445  0290                     _bit4:	
   446  0290                     	ds	1
   447  0291                     _bit5:	
   448  0291                     	ds	1
   449  0292                     _bit6:	
   450  0292                     	ds	1
   451  0293                     _bit7:	
   452  0293                     	ds	1
   453  0294                     _timeChanged:	
   454  0294                     	ds	1
   455                           
   456                           	psect	bssBANK0
   457  0053                     __pbssBANK0:	
   458  0053                     _hour:	
   459  0053                     	ds	2
   460  0055                     _ldr2:	
   461  0055                     	ds	2
   462  0057                     _lcd_data:	
   463  0057                     	ds	1
   464  0058                     _state:	
   465  0058                     	ds	1
   466                           
   467                           	psect	bssBANK1
   468  00A0                     __pbssBANK1:	
   469  00A0                     _buffer:	
   470  00A0                     	ds	20
   471  00B4                     _V_Bat2:	
   472  00B4                     	ds	3
   473  00B7                     _angleCount:	
   474  00B7                     	ds	2
   475  00B9                     _currentMode:	
   476  00B9                     	ds	2
   477  00BB                     _ldr1:	
   478  00BB                     	ds	2
   479  00BD                     _minute:	
   480  00BD                     	ds	2
   481  00BF                     _msecond:	
   482  00BF                     	ds	2
   483  00C1                     _second:	
   484  00C1                     	ds	2
   485  00C3                     _sterpper_counts:	
   486  00C3                     	ds	2
   487  00C5                     _j:	
   488  00C5                     	ds	1
   489  00C6                     _x:	
   490  00C6                     	ds	1
   491  00C7                     _C_Bat:	
   492  00C7                     	ds	2
   493  00C9                     _V_Bat:	
   494  00C9                     	ds	2
   495                           
   496                           	psect	dataBANK1
   497  00E2                     __pdataBANK1:	
   498  00E2                     _i:	
   499  00E2                     	ds	1
   500                           
   501                           	psect	clrtext
   502  10B8                     clear_ram0:	
   503                           ;	Called with FSR containing the base address, and
   504                           ;	W with the last address+1
   505                           
   506  10B8  0064               	clrwdt	;clear the watchdog before getting into this loop
   507  10B9                     clrloop0:	
   508  10B9  0180               	clrf	0	;clear RAM location pointed to by FSR
   509  10BA  0A84               	incf	4,f	;increment pointer
   510  10BB  0604               	xorwf	4,w	;XOR with final address
   511  10BC  1903               	btfsc	3,2	;have we reached the end yet?
   512  10BD  3400               	retlw	0	;all done for this memory range, return
   513  10BE  0604               	xorwf	4,w	;XOR again to restore value
   514  10BF  28B9               	goto	clrloop0	;do the next byte
   515                           
   516                           	psect	cstackBANK1
   517  00CB                     __pcstackBANK1:	
   518  00CB                     main@tmp_stepsto_turn:	
   519                           
   520                           ; 3 bytes @ 0x0
   521  00CB                     	ds	3
   522  00CE                     main@stepsto_turn:	
   523                           
   524                           ; 2 bytes @ 0x3
   525  00CE                     	ds	2
   526  00D0                     main@newTimeHr:	
   527                           
   528                           ; 2 bytes @ 0x5
   529  00D0                     	ds	2
   530  00D2                     main@newTimeMin:	
   531                           
   532                           ; 2 bytes @ 0x7
   533  00D2                     	ds	2
   534  00D4                     main@tmp_angle_display:	
   535                           
   536                           ; 3 bytes @ 0x9
   537  00D4                     	ds	3
   538  00D7                     main@angle:	
   539                           
   540                           ; 2 bytes @ 0xC
   541  00D7                     	ds	2
   542  00D9                     main@tmp:	
   543                           
   544                           ; 2 bytes @ 0xE
   545  00D9                     	ds	2
   546  00DB                     _main$814:	
   547                           
   548                           ; 2 bytes @ 0x10
   549  00DB                     	ds	2
   550  00DD                     main@angle_old:	
   551                           
   552                           ; 2 bytes @ 0x12
   553  00DD                     	ds	2
   554  00DF                     main@angle_display:	
   555                           
   556                           ; 2 bytes @ 0x14
   557  00DF                     	ds	2
   558  00E1                     main@pressedKey:	
   559                           
   560                           ; 1 bytes @ 0x16
   561  00E1                     	ds	1
   562                           
   563                           	psect	cstackCOMMON
   564  0071                     __pcstackCOMMON:	
   565  0071                     ?_lcd_add:	
   566  0071                     ?_LCDTimeUpdate:	
   567                           ; 0 bytes @ 0x0
   568                           
   569  0071                     ?_a2d_read:	
   570                           ; 0 bytes @ 0x0
   571                           
   572  0071                     ?_CheckMode:	
   573                           ; 0 bytes @ 0x0
   574                           
   575  0071                     ?_Calculate:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  0071                     ?_nop:	
   579                           ; 0 bytes @ 0x0
   580                           
   581  0071                     ?_Setup_IOports:	
   582                           ; 0 bytes @ 0x0
   583                           
   584  0071                     ?_lcd_init:	
   585                           ; 0 bytes @ 0x0
   586                           
   587  0071                     ?_putch:	
   588                           ; 0 bytes @ 0x0
   589                           
   590  0071                     ?_clr_display:	
   591                           ; 0 bytes @ 0x0
   592                           
   593  0071                     ?_atod_init:	
   594                           ; 0 bytes @ 0x0
   595                           
   596  0071                     ?_Serial_Init:	
   597                           ; 0 bytes @ 0x0
   598                           
   599  0071                     ?_Serial_Print:	
   600                           ; 0 bytes @ 0x0
   601                           
   602  0071                     ?_Serial_NewLine:	
   603                           ; 1 bit 
   604                           
   605  0071                     ?_enableInterrupt:	
   606                           ; 0 bytes @ 0x0
   607                           
   608  0071                     ?_Timer1_Init:	
   609                           ; 0 bytes @ 0x0
   610                           
   611  0071                     ?_main:	
   612                           ; 0 bytes @ 0x0
   613                           
   614  0071                     ?_isr:	
   615                           ; 0 bytes @ 0x0
   616                           
   617  0071                     ?i1_lcd_add:	
   618                           ; 0 bytes @ 0x0
   619                           
   620  0071                     ??i1_lcd_add:	
   621                           ; 0 bytes @ 0x0
   622                           
   623  0071                     ?i1_LCDTimeUpdate:	
   624                           ; 0 bytes @ 0x0
   625                           
   626  0071                     ?_CheckKeyPad:	
   627                           ; 0 bytes @ 0x0
   628                           
   629  0071                     ?_eeprom_read:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0071                     ?_printf:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0071                     ?i1___lwdiv:	
   636                           ; 2 bytes @ 0x0
   637                           
   638  0071                     ?i1___lwmod:	
   639                           ; 2 bytes @ 0x0
   640                           
   641  0071                     i1___lwdiv@divisor:	
   642                           ; 2 bytes @ 0x0
   643                           
   644  0071                     i1___lwmod@divisor:	
   645                           ; 2 bytes @ 0x0
   646                           
   647                           
   648                           ; 2 bytes @ 0x0
   649  0071                     	ds	1
   650  0072                     ?i1_position:	
   651  0072                     i1position@collum:	
   652                           ; 0 bytes @ 0x1
   653                           
   654                           
   655                           ; 1 bytes @ 0x1
   656  0072                     	ds	1
   657  0073                     ??i1_position:	
   658  0073                     i1___lwdiv@dividend:	
   659                           ; 0 bytes @ 0x2
   660                           
   661  0073                     i1___lwmod@dividend:	
   662                           ; 2 bytes @ 0x2
   663                           
   664                           
   665                           ; 2 bytes @ 0x2
   666  0073                     	ds	2
   667  0075                     ??i1___lwdiv:	
   668  0075                     ??i1___lwmod:	
   669                           ; 0 bytes @ 0x4
   670                           
   671  0075                     i1position@post:	
   672                           ; 0 bytes @ 0x4
   673                           
   674  0075                     i1___lwmod@counter:	
   675                           ; 1 bytes @ 0x4
   676                           
   677  0075                     i1___lwdiv@quotient:	
   678                           ; 1 bytes @ 0x4
   679                           
   680                           
   681                           ; 2 bytes @ 0x4
   682  0075                     	ds	1
   683  0076                     i1position@row:	
   684                           
   685                           ; 1 bytes @ 0x5
   686  0076                     	ds	1
   687  0077                     i1___lwdiv@counter:	
   688                           
   689                           ; 1 bytes @ 0x6
   690  0077                     	ds	1
   691  0078                     ?i1_LCD_print_char:	
   692  0078                     i1LCD_print_char@row:	
   693                           ; 0 bytes @ 0x7
   694                           
   695                           
   696                           ; 2 bytes @ 0x7
   697  0078                     	ds	2
   698  007A                     i1LCD_print_char@column:	
   699                           
   700                           ; 2 bytes @ 0x9
   701  007A                     	ds	2
   702  007C                     i1LCD_print_char@print_value:	
   703                           
   704                           ; 1 bytes @ 0xB
   705  007C                     	ds	1
   706  007D                     ??i1_LCD_print_char:	
   707                           
   708                           ; 0 bytes @ 0xC
   709  007D                     	ds	1
   710                           
   711                           	psect	cstackBANK0
   712  0020                     __pcstackBANK0:	
   713  0020                     ??i1_LCDTimeUpdate:	
   714                           
   715                           ; 0 bytes @ 0x0
   716  0020                     	ds	2
   717  0022                     ??_isr:	
   718                           
   719                           ; 0 bytes @ 0x2
   720  0022                     	ds	3
   721  0025                     ??_lcd_add:	
   722  0025                     ?_RotateMotorRight:	
   723                           ; 0 bytes @ 0x5
   724                           
   725  0025                     ??_eeprom_read:	
   726                           ; 0 bytes @ 0x5
   727                           
   728  0025                     ?_RotateMotorLeft:	
   729                           ; 0 bytes @ 0x5
   730                           
   731  0025                     ??_nop:	
   732                           ; 0 bytes @ 0x5
   733                           
   734  0025                     ??_Setup_IOports:	
   735                           ; 0 bytes @ 0x5
   736                           
   737  0025                     ??_lcd_init:	
   738                           ; 0 bytes @ 0x5
   739                           
   740  0025                     ??_atod_init:	
   741                           ; 0 bytes @ 0x5
   742                           
   743  0025                     ??_Serial_Init:	
   744                           ; 0 bytes @ 0x5
   745                           
   746  0025                     ??_Serial_Print:	
   747                           ; 0 bytes @ 0x5
   748                           
   749  0025                     ??_Serial_NewLine:	
   750                           ; 0 bytes @ 0x5
   751                           
   752  0025                     ??_enableInterrupt:	
   753                           ; 0 bytes @ 0x5
   754                           
   755  0025                     ??_Timer1_Init:	
   756                           ; 0 bytes @ 0x5
   757                           
   758  0025                     ?___bmul:	
   759                           ; 0 bytes @ 0x5
   760                           
   761  0025                     ?_RowNo:	
   762                           ; 1 bytes @ 0x5
   763                           
   764  0025                     ?_ColomnNo:	
   765                           ; 2 bytes @ 0x5
   766                           
   767  0025                     ?_read_a2d_value:	
   768                           ; 2 bytes @ 0x5
   769                           
   770  0025                     ?___wmul:	
   771                           ; 2 bytes @ 0x5
   772                           
   773  0025                     ?___awmod:	
   774                           ; 2 bytes @ 0x5
   775                           
   776  0025                     ?___lwdiv:	
   777                           ; 2 bytes @ 0x5
   778                           
   779  0025                     ?___lwmod:	
   780                           ; 2 bytes @ 0x5
   781                           
   782  0025                     ?___ftpack:	
   783                           ; 2 bytes @ 0x5
   784                           
   785  0025                     ?___ltdiv:	
   786                           ; 3 bytes @ 0x5
   787                           
   788  0025                     ?___ltmod:	
   789                           ; 3 bytes @ 0x5
   790                           
   791  0025                     eeprom_read@addr:	
   792                           ; 3 bytes @ 0x5
   793                           
   794  0025                     ___bmul@multiplicand:	
   795                           ; 1 bytes @ 0x5
   796                           
   797  0025                     lcd_init@DelayLCD:	
   798                           ; 1 bytes @ 0x5
   799                           
   800  0025                     ColomnNo@rowNo:	
   801                           ; 2 bytes @ 0x5
   802                           
   803  0025                     RotateMotorLeft@value:	
   804                           ; 2 bytes @ 0x5
   805                           
   806  0025                     RotateMotorRight@value:	
   807                           ; 2 bytes @ 0x5
   808                           
   809  0025                     ___wmul@multiplier:	
   810                           ; 2 bytes @ 0x5
   811                           
   812  0025                     ___awmod@divisor:	
   813                           ; 2 bytes @ 0x5
   814                           
   815  0025                     ___lwdiv@divisor:	
   816                           ; 2 bytes @ 0x5
   817                           
   818  0025                     ___lwmod@divisor:	
   819                           ; 2 bytes @ 0x5
   820                           
   821  0025                     ___ftpack@arg:	
   822                           ; 2 bytes @ 0x5
   823                           
   824  0025                     ___ltdiv@divisor:	
   825                           ; 3 bytes @ 0x5
   826                           
   827  0025                     ___ltmod@divisor:	
   828                           ; 3 bytes @ 0x5
   829                           
   830                           
   831                           ; 3 bytes @ 0x5
   832  0025                     	ds	1
   833  0026                     ?_position:	
   834  0026                     ??_putch:	
   835                           ; 0 bytes @ 0x6
   836                           
   837  0026                     ??_clr_display:	
   838                           ; 0 bytes @ 0x6
   839                           
   840  0026                     ??___bmul:	
   841                           ; 0 bytes @ 0x6
   842                           
   843  0026                     position@collum:	
   844                           ; 0 bytes @ 0x6
   845                           
   846  0026                     Serial_Print@a:	
   847                           ; 1 bytes @ 0x6
   848                           
   849  0026                     ___bmul@product:	
   850                           ; 1 bytes @ 0x6
   851                           
   852                           
   853                           ; 1 bytes @ 0x6
   854  0026                     	ds	1
   855  0027                     ??_position:	
   856  0027                     ??_RotateMotorRight:	
   857                           ; 0 bytes @ 0x7
   858                           
   859  0027                     ??_RotateMotorLeft:	
   860                           ; 0 bytes @ 0x7
   861                           
   862  0027                     ??_RowNo:	
   863                           ; 0 bytes @ 0x7
   864                           
   865  0027                     ??_ColomnNo:	
   866                           ; 0 bytes @ 0x7
   867                           
   868  0027                     ??_read_a2d_value:	
   869                           ; 0 bytes @ 0x7
   870                           
   871  0027                     putch@print_value:	
   872                           ; 0 bytes @ 0x7
   873                           
   874  0027                     ___bmul@multiplier:	
   875                           ; 1 bytes @ 0x7
   876                           
   877  0027                     RowNo@row:	
   878                           ; 1 bytes @ 0x7
   879                           
   880  0027                     ___wmul@multiplicand:	
   881                           ; 2 bytes @ 0x7
   882                           
   883  0027                     ___awmod@dividend:	
   884                           ; 2 bytes @ 0x7
   885                           
   886  0027                     ___lwdiv@dividend:	
   887                           ; 2 bytes @ 0x7
   888                           
   889  0027                     ___lwmod@dividend:	
   890                           ; 2 bytes @ 0x7
   891                           
   892                           
   893                           ; 2 bytes @ 0x7
   894  0027                     	ds	1
   895  0028                     ?_eeprom_write:	
   896  0028                     ??_printf:	
   897                           ; 0 bytes @ 0x8
   898                           
   899  0028                     read_a2d_value@channel:	
   900                           ; 0 bytes @ 0x8
   901                           
   902  0028                     printf@c:	
   903                           ; 1 bytes @ 0x8
   904                           
   905  0028                     eeprom_write@value:	
   906                           ; 1 bytes @ 0x8
   907                           
   908  0028                     ___ftpack@exp:	
   909                           ; 1 bytes @ 0x8
   910                           
   911  0028                     ___ltdiv@dividend:	
   912                           ; 1 bytes @ 0x8
   913                           
   914  0028                     ___ltmod@dividend:	
   915                           ; 3 bytes @ 0x8
   916                           
   917                           
   918                           ; 3 bytes @ 0x8
   919  0028                     	ds	1
   920  0029                     ??_eeprom_write:	
   921  0029                     ??_CheckKeyPad:	
   922                           ; 0 bytes @ 0x9
   923                           
   924  0029                     ??___wmul:	
   925                           ; 0 bytes @ 0x9
   926                           
   927  0029                     ??___awmod:	
   928                           ; 0 bytes @ 0x9
   929                           
   930  0029                     ??___lwdiv:	
   931                           ; 0 bytes @ 0x9
   932                           
   933  0029                     ??___lwmod:	
   934                           ; 0 bytes @ 0x9
   935                           
   936  0029                     position@post:	
   937                           ; 0 bytes @ 0x9
   938                           
   939  0029                     CheckKeyPad@charactor:	
   940                           ; 1 bytes @ 0x9
   941                           
   942  0029                     printf@f:	
   943                           ; 1 bytes @ 0x9
   944                           
   945  0029                     eeprom_write@addr:	
   946                           ; 1 bytes @ 0x9
   947                           
   948  0029                     ___awmod@counter:	
   949                           ; 1 bytes @ 0x9
   950                           
   951  0029                     ___ftpack@sign:	
   952                           ; 1 bytes @ 0x9
   953                           
   954  0029                     ___lwdiv@counter:	
   955                           ; 1 bytes @ 0x9
   956                           
   957  0029                     ___lwmod@counter:	
   958                           ; 1 bytes @ 0x9
   959                           
   960  0029                     read_a2d_value@a2d_value:	
   961                           ; 1 bytes @ 0x9
   962                           
   963  0029                     RotateMotorRight@i:	
   964                           ; 2 bytes @ 0x9
   965                           
   966  0029                     ___wmul@product:	
   967                           ; 2 bytes @ 0x9
   968                           
   969                           
   970                           ; 2 bytes @ 0x9
   971  0029                     	ds	1
   972  002A                     ??___ftpack:	
   973  002A                     position@row:	
   974                           ; 0 bytes @ 0xA
   975                           
   976  002A                     ___awmod@sign:	
   977                           ; 1 bytes @ 0xA
   978                           
   979  002A                     CheckKeyPad@colomnNo:	
   980                           ; 1 bytes @ 0xA
   981                           
   982  002A                     ___lwdiv@quotient:	
   983                           ; 2 bytes @ 0xA
   984                           
   985                           
   986                           ; 2 bytes @ 0xA
   987  002A                     	ds	1
   988  002B                     ??_Calculate:	
   989  002B                     ??___ltdiv:	
   990                           ; 0 bytes @ 0xB
   991                           
   992  002B                     ??___ltmod:	
   993                           ; 0 bytes @ 0xB
   994                           
   995  002B                     ?___awdiv:	
   996                           ; 0 bytes @ 0xB
   997                           
   998  002B                     ___ltmod@counter:	
   999                           ; 2 bytes @ 0xB
  1000                           
  1001  002B                     ___awdiv@divisor:	
  1002                           ; 1 bytes @ 0xB
  1003                           
  1004  002B                     ___ltdiv@quotient:	
  1005                           ; 2 bytes @ 0xB
  1006                           
  1007                           
  1008                           ; 3 bytes @ 0xB
  1009  002B                     	ds	1
  1010  002C                     CheckKeyPad@rowNo:	
  1011                           
  1012                           ; 2 bytes @ 0xC
  1013  002C                     	ds	1
  1014  002D                     ?___lbtoft:	
  1015  002D                     ?___lwtoft:	
  1016                           ; 3 bytes @ 0xD
  1017                           
  1018  002D                     ___awdiv@dividend:	
  1019                           ; 3 bytes @ 0xD
  1020                           
  1021  002D                     ___lwtoft@c:	
  1022                           ; 2 bytes @ 0xD
  1023                           
  1024                           
  1025                           ; 2 bytes @ 0xD
  1026  002D                     	ds	1
  1027  002E                     ___ltdiv@counter:	
  1028                           
  1029                           ; 1 bytes @ 0xE
  1030  002E                     	ds	1
  1031  002F                     ??___awdiv:	
  1032  002F                     ___awdiv@counter:	
  1033                           ; 0 bytes @ 0xF
  1034                           
  1035                           
  1036                           ; 1 bytes @ 0xF
  1037  002F                     	ds	1
  1038  0030                     ??___lwtoft:	
  1039  0030                     ?___ftdiv:	
  1040                           ; 0 bytes @ 0x10
  1041                           
  1042  0030                     ___awdiv@sign:	
  1043                           ; 3 bytes @ 0x10
  1044                           
  1045  0030                     ___ftdiv@f2:	
  1046                           ; 1 bytes @ 0x10
  1047                           
  1048                           
  1049                           ; 3 bytes @ 0x10
  1050  0030                     	ds	1
  1051  0031                     ??___lbtoft:	
  1052  0031                     ___lbtoft@c:	
  1053                           ; 0 bytes @ 0x11
  1054                           
  1055  0031                     ___awdiv@quotient:	
  1056                           ; 1 bytes @ 0x11
  1057                           
  1058                           
  1059                           ; 2 bytes @ 0x11
  1060  0031                     	ds	1
  1061  0032                     ?___ftmul:	
  1062  0032                     ___ftmul@f1:	
  1063                           ; 3 bytes @ 0x12
  1064                           
  1065                           
  1066                           ; 3 bytes @ 0x12
  1067  0032                     	ds	1
  1068  0033                     ?_LCD_print_char:	
  1069  0033                     ?_Serial_Println_Int:	
  1070                           ; 0 bytes @ 0x13
  1071                           
  1072  0033                     ?_Serial_Print_Int:	
  1073                           ; 1 bit 
  1074                           
  1075  0033                     LCD_print_char@row:	
  1076                           ; 1 bit 
  1077                           
  1078  0033                     Serial_Println_Int@val:	
  1079                           ; 2 bytes @ 0x13
  1080                           
  1081  0033                     Serial_Print_Int@val:	
  1082                           ; 2 bytes @ 0x13
  1083                           
  1084  0033                     ___ftdiv@f1:	
  1085                           ; 2 bytes @ 0x13
  1086                           
  1087                           
  1088                           ; 3 bytes @ 0x13
  1089  0033                     	ds	2
  1090  0035                     ??_Serial_Println_Int:	
  1091  0035                     ??_Serial_Print_Int:	
  1092                           ; 0 bytes @ 0x15
  1093                           
  1094  0035                     LCD_print_char@column:	
  1095                           ; 0 bytes @ 0x15
  1096                           
  1097  0035                     ___ftmul@f2:	
  1098                           ; 2 bytes @ 0x15
  1099                           
  1100                           
  1101                           ; 3 bytes @ 0x15
  1102  0035                     	ds	1
  1103  0036                     ??_CheckMode:	
  1104  0036                     ??___ftdiv:	
  1105                           ; 0 bytes @ 0x16
  1106                           
  1107  0036                     CheckMode@pressedKey:	
  1108                           ; 0 bytes @ 0x16
  1109                           
  1110                           
  1111                           ; 1 bytes @ 0x16
  1112  0036                     	ds	1
  1113  0037                     LCD_print_char@print_value:	
  1114                           
  1115                           ; 1 bytes @ 0x17
  1116  0037                     	ds	1
  1117  0038                     ??_LCD_print_char:	
  1118  0038                     ??___ftmul:	
  1119                           ; 0 bytes @ 0x18
  1120                           
  1121                           
  1122                           ; 0 bytes @ 0x18
  1123  0038                     	ds	1
  1124  0039                     ??_LCDTimeUpdate:	
  1125  0039                     ___ftdiv@cntr:	
  1126                           ; 0 bytes @ 0x19
  1127                           
  1128                           
  1129                           ; 1 bytes @ 0x19
  1130  0039                     	ds	1
  1131  003A                     ___ftdiv@f3:	
  1132                           
  1133                           ; 3 bytes @ 0x1A
  1134  003A                     	ds	1
  1135  003B                     ___ftmul@exp:	
  1136                           
  1137                           ; 1 bytes @ 0x1B
  1138  003B                     	ds	1
  1139  003C                     ___ftmul@f3_as_product:	
  1140                           
  1141                           ; 3 bytes @ 0x1C
  1142  003C                     	ds	1
  1143  003D                     ___ftdiv@exp:	
  1144                           
  1145                           ; 1 bytes @ 0x1D
  1146  003D                     	ds	1
  1147  003E                     ___ftdiv@sign:	
  1148                           
  1149                           ; 1 bytes @ 0x1E
  1150  003E                     	ds	1
  1151  003F                     ___ftmul@cntr:	
  1152                           
  1153                           ; 1 bytes @ 0x1F
  1154  003F                     	ds	1
  1155  0040                     ___ftmul@sign:	
  1156                           
  1157                           ; 1 bytes @ 0x20
  1158  0040                     	ds	1
  1159  0041                     ?___fttol:	
  1160  0041                     ___fttol@f1:	
  1161                           ; 4 bytes @ 0x21
  1162                           
  1163                           
  1164                           ; 3 bytes @ 0x21
  1165  0041                     	ds	4
  1166  0045                     ??___fttol:	
  1167                           
  1168                           ; 0 bytes @ 0x25
  1169  0045                     	ds	3
  1170  0048                     ___fttol@sign1:	
  1171                           
  1172                           ; 1 bytes @ 0x28
  1173  0048                     	ds	1
  1174  0049                     ___fttol@lval:	
  1175                           
  1176                           ; 4 bytes @ 0x29
  1177  0049                     	ds	4
  1178  004D                     ___fttol@exp1:	
  1179                           
  1180                           ; 1 bytes @ 0x2D
  1181  004D                     	ds	1
  1182  004E                     ??_a2d_read:	
  1183  004E                     ??_main:	
  1184                           ; 0 bytes @ 0x2E
  1185                           
  1186                           
  1187                           ; 0 bytes @ 0x2E
  1188  004E                     	ds	3
  1189                           
  1190                           	psect	maintext
  1191  003A                     __pmaintext:	
  1192 ;;
  1193 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1194 ;;
  1195 ;; *************** function _main *****************
  1196 ;; Defined at:
  1197 ;;		line 79 in file "Automated Solar Panel Orientation Setter.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;		None
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  tmp_stepsto_    3    0[BANK1 ] PTR const unsigned char 
  1202 ;;  stepsto_turn    2    3[BANK1 ] int 
  1203 ;;  tmp_angle_di    3    9[BANK1 ] int 
  1204 ;;  angle_displa    2   20[BANK1 ] int 
  1205 ;;  angle_old       2   18[BANK1 ] int 
  1206 ;;  angle           2   12[BANK1 ] int 
  1207 ;;  newTimeMin      2    7[BANK1 ] int 
  1208 ;;  newTimeHr       2    5[BANK1 ] int 
  1209 ;;  tmp             2   14[BANK1 ] int 
  1210 ;;  pressedKey      1   22[BANK1 ] unsigned char 
  1211 ;; Return value:  Size  Location     Type
  1212 ;;		None               void
  1213 ;; Registers used:
  1214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1215 ;; Tracked objects:
  1216 ;;		On entry : B00/0
  1217 ;;		On exit  : 300/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1220 ;;      Params:         0       0       0       0       0
  1221 ;;      Locals:         0       0      23       0       0
  1222 ;;      Temps:          0       3       0       0       0
  1223 ;;      Totals:         0       3      23       0       0
  1224 ;;Total ram usage:       26 bytes
  1225 ;; Hardware stack levels required when called:    9
  1226 ;; This function calls:
  1227 ;;		_Calculate
  1228 ;;		_CheckKeyPad
  1229 ;;		_CheckMode
  1230 ;;		_LCDTimeUpdate
  1231 ;;		_LCD_print_char
  1232 ;;		_RotateMotorLeft
  1233 ;;		_RotateMotorRight
  1234 ;;		_Serial_Init
  1235 ;;		_Serial_NewLine
  1236 ;;		_Serial_Print
  1237 ;;		_Serial_Print_Int
  1238 ;;		_Serial_Println_Int
  1239 ;;		_Setup_IOports
  1240 ;;		_Timer1_Init
  1241 ;;		___awdiv
  1242 ;;		___awmod
  1243 ;;		___bmul
  1244 ;;		___ftdiv
  1245 ;;		___ftmul
  1246 ;;		___fttol
  1247 ;;		___lbtoft
  1248 ;;		___ltdiv
  1249 ;;		___ltmod
  1250 ;;		___lwtoft
  1251 ;;		___wmul
  1252 ;;		_a2d_read
  1253 ;;		_atod_init
  1254 ;;		_clr_display
  1255 ;;		_eeprom_read
  1256 ;;		_eeprom_write
  1257 ;;		_enableInterrupt
  1258 ;;		_lcd_init
  1259 ;;		_nop
  1260 ;;		_position
  1261 ;;		_printf
  1262 ;; This function is called by:
  1263 ;;		Startup code after reset
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           
  1268                           ;psect for function _main
  1269  003A                     _main:	
  1270                           
  1271                           ;Automated Solar Panel Orientation Setter.c: 81: char pressedKey;
  1272                           ;Automated Solar Panel Orientation Setter.c: 83: Setup_IOports();
  1273                           
  1274                           ;incstack = 0
  1275 ;; hardware stack exceeded
  1276                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1277  003A  160A  158A  22FC  120A  118A  	fcall	_Setup_IOports
  1278                           
  1279                           ;Automated Solar Panel Orientation Setter.c: 84: atod_init();
  1280  003F  120A  118A  2014  120A  118A  	fcall	_atod_init
  1281                           
  1282                           ;Automated Solar Panel Orientation Setter.c: 85: lcd_init();
  1283  0044  160A  158A  239B  120A  118A  	fcall	_lcd_init
  1284                           
  1285                           ;Automated Solar Panel Orientation Setter.c: 86: clr_display();
  1286  0049  160A  118A  2107  120A  118A  	fcall	_clr_display
  1287                           
  1288                           ;Automated Solar Panel Orientation Setter.c: 88: Serial_Init();
  1289  004E  160A  118A  20C0  120A  118A  	fcall	_Serial_Init
  1290                           
  1291                           ;Automated Solar Panel Orientation Setter.c: 89: Timer1_Init();
  1292  0053  160A  158A  22C4  120A  118A  	fcall	_Timer1_Init
  1293                           
  1294                           ;Automated Solar Panel Orientation Setter.c: 90: enableInterrupt();
  1295  0058  160A  158A  22D2  120A  118A  	fcall	_enableInterrupt
  1296                           
  1297                           ;Automated Solar Panel Orientation Setter.c: 92: lcd_init();
  1298  005D  160A  158A  239B  120A  118A  	fcall	_lcd_init
  1299                           
  1300                           ;Automated Solar Panel Orientation Setter.c: 94: clr_display();
  1301  0062  160A  118A  2107  120A  118A  	fcall	_clr_display
  1302                           
  1303                           ;Automated Solar Panel Orientation Setter.c: 95: state = 91;
  1304  0067  305B               	movlw	91
  1305  0068  00D8               	movwf	_state
  1306  0069                     l6413:	
  1307                           ;Automated Solar Panel Orientation Setter.c: 97: while(RA4 == 1){
  1308                           
  1309  0069  1E05               	btfss	5,4	;volatile
  1310  006A  2879               	goto	l6415
  1311                           
  1312                           ;Automated Solar Panel Orientation Setter.c: 98: sterpper_counts = 1;
  1313  006B  1683               	bsf	3,5	;RP0=1, select bank1
  1314  006C  01C3               	clrf	_sterpper_counts^(0+128)
  1315  006D  0AC3               	incf	_sterpper_counts^(0+128),f
  1316  006E  01C4               	clrf	(_sterpper_counts+1)^(0+128)
  1317                           
  1318                           ;Automated Solar Panel Orientation Setter.c: 99: RotateMotorRight(1);
  1319  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0070  01A5               	clrf	RotateMotorRight@value
  1321  0071  0AA5               	incf	RotateMotorRight@value,f
  1322  0072  01A6               	clrf	RotateMotorRight@value+1
  1323  0073  160A  158A  248F  120A  118A  	fcall	_RotateMotorRight
  1324  0078  2869               	goto	l6413
  1325  0079                     l6415:	
  1326                           
  1327                           ;Automated Solar Panel Orientation Setter.c: 100: }
  1328                           ;Automated Solar Panel Orientation Setter.c: 101: sterpper_counts = 0;
  1329  0079  1683               	bsf	3,5	;RP0=1, select bank1
  1330  007A  01C3               	clrf	_sterpper_counts^(0+128)
  1331  007B  01C4               	clrf	(_sterpper_counts+1)^(0+128)
  1332                           
  1333                           ;Automated Solar Panel Orientation Setter.c: 108: nop();
  1334  007C  120A  158A  209F  120A  118A  	fcall	_nop
  1335                           
  1336                           ;Automated Solar Panel Orientation Setter.c: 110: hour = 0;
  1337  0081  01D3               	clrf	_hour
  1338  0082  01D4               	clrf	_hour+1
  1339                           
  1340                           ;Automated Solar Panel Orientation Setter.c: 111: minute = 0;
  1341  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1342  0084  01BD               	clrf	_minute^(0+128)
  1343  0085  01BE               	clrf	(_minute+1)^(0+128)
  1344                           
  1345                           ;Automated Solar Panel Orientation Setter.c: 112: TimeBlink_on = 1;
  1346  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1347  0087  1551               	bsf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  1348                           
  1349                           ;Automated Solar Panel Orientation Setter.c: 113: LCDTimeUpdate();
  1350  0088  160A  118A  2123  120A  118A  	fcall	_LCDTimeUpdate
  1351                           
  1352                           ;Automated Solar Panel Orientation Setter.c: 115: nop();
  1353  008D  120A  158A  209F  120A  118A  	fcall	_nop
  1354                           
  1355                           ;Automated Solar Panel Orientation Setter.c: 119: for(tmp=0; tmp<12; tmp++){
  1356  0092  1683               	bsf	3,5	;RP0=1, select bank1
  1357  0093  01D9               	clrf	main@tmp^(0+128)
  1358  0094  01DA               	clrf	(main@tmp+1)^(0+128)
  1359  0095                     l6433:	
  1360  0095  085A               	movf	(main@tmp+1)^(0+128),w
  1361  0096  3A80               	xorlw	128
  1362  0097  00FF               	movwf	127
  1363  0098  3080               	movlw	128
  1364  0099  027F               	subwf	127,w
  1365  009A  1D03               	skipz
  1366  009B  289E               	goto	u8245
  1367  009C  300C               	movlw	12
  1368  009D  0259               	subwf	main@tmp^(0+128),w
  1369  009E                     u8245:	
  1370  009E  120A  118A  1803   	btfsc	3,0
  1371  00A1  2F8E               	goto	l6933
  1372                           
  1373                           ;Automated Solar Panel Orientation Setter.c: 120: eeprom_write(tmp, tmp*15 );
  1374  00A2  300F               	movlw	15
  1375  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1376  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  1377  00A5  00A5               	movwf	___bmul@multiplicand
  1378  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  1379  00A7  0859               	movf	main@tmp^(0+128),w
  1380  00A8  120A  158A  2000  120A  118A  	fcall	___bmul
  1381  00AD  00A8               	movwf	eeprom_write@value
  1382  00AE  1683               	bsf	3,5	;RP0=1, select bank1
  1383  00AF  0859               	movf	main@tmp^(0+128),w
  1384  00B0  120A  118A  201A  120A  118A  	fcall	_eeprom_write
  1385  00B5  1303               	bcf	3,6	;RP1=0, select bank1
  1386  00B6  0AD9               	incf	main@tmp^(0+128),f
  1387  00B7  1903               	skipnz
  1388  00B8  0ADA               	incf	(main@tmp+1)^(0+128),f
  1389  00B9  2895               	goto	l6433
  1390  00BA                     l6443:	
  1391                           
  1392                           ;Automated Solar Panel Orientation Setter.c: 133: state = 91;
  1393  00BA  305B               	movlw	91
  1394  00BB                     L30:	
  1395  00BB  120A  118A  2F8D   	goto	L1
  1396  00BE                     l6445:	
  1397                           ;Automated Solar Panel Orientation Setter.c: 134: break;
  1398                           
  1399                           
  1400                           ;Automated Solar Panel Orientation Setter.c: 136: state = 92;
  1401  00BE  305C               	movlw	92
  1402  00BF  28BB               	goto	L30
  1403  00C0                     l6447:	
  1404                           ;Automated Solar Panel Orientation Setter.c: 137: break;
  1405                           
  1406                           
  1407                           ;Automated Solar Panel Orientation Setter.c: 139: state = 93;
  1408  00C0  305D               	movlw	93
  1409  00C1  28BB               	goto	L30
  1410  00C2                     l6449:	
  1411                           ;Automated Solar Panel Orientation Setter.c: 140: break;
  1412                           
  1413                           
  1414                           ;Automated Solar Panel Orientation Setter.c: 142: state = 94;
  1415  00C2  305E               	movlw	94
  1416  00C3  28BB               	goto	L30
  1417  00C4                     l6451:	
  1418                           ;Automated Solar Panel Orientation Setter.c: 143: break;
  1419                           
  1420                           
  1421                           ;Automated Solar Panel Orientation Setter.c: 150: clr_display();
  1422  00C4  160A  118A  2107  120A  118A  	fcall	_clr_display
  1423  00C9  3001               	movlw	1
  1424                           
  1425                           ;Automated Solar Panel Orientation Setter.c: 151: TimeBlink_on = 0;
  1426  00CA  1151               	bcf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  1427                           
  1428                           ;Automated Solar Panel Orientation Setter.c: 152: position(1,1);
  1429  00CB  01A6               	clrf	position@collum
  1430  00CC  0AA6               	incf	position@collum,f
  1431  00CD  160A  118A  22DF  120A  118A  	fcall	_position
  1432                           
  1433                           ;Automated Solar Panel Orientation Setter.c: 153: printf("TIME: HH:MM     ");
  1434  00D2  3026               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1435  00D3  160A  118A  20DC  120A  118A  	fcall	_printf
  1436  00D8  3002               	movlw	2
  1437                           
  1438                           ;Automated Solar Panel Orientation Setter.c: 154: position(2,1);
  1439  00D9  01A6               	clrf	position@collum
  1440  00DA  0AA6               	incf	position@collum,f
  1441  00DB  160A  118A  22DF  120A  118A  	fcall	_position
  1442                           
  1443                           ;Automated Solar Panel Orientation Setter.c: 155: printf("      00:00     ");
  1444  00E0  3015               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1445  00E1  160A  118A  20DC  120A  118A  	fcall	_printf
  1446                           
  1447                           ;Automated Solar Panel Orientation Setter.c: 156: state = 41;
  1448  00E6  3029               	movlw	41
  1449  00E7  28BB               	goto	L30
  1450  00E8                     l486:	
  1451                           ;Automated Solar Panel Orientation Setter.c: 159: case 41:
  1452                           
  1453                           ;Automated Solar Panel Orientation Setter.c: 157: break;
  1454                           
  1455                           
  1456                           ;Automated Solar Panel Orientation Setter.c: 161: TimeBlink_on = 0;
  1457  00E8  1151               	bcf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  1458                           
  1459                           ;Automated Solar Panel Orientation Setter.c: 162: timeChanged = 1;
  1460  00E9  1652               	bsf	_timeChanged/(0+8),_timeChanged& (0+7)
  1461  00EA                     l487:	
  1462                           ;Automated Solar Panel Orientation Setter.c: 163: int newTimeHr,newTimeMin;
  1463                           ;Automated Solar Panel Orientation Setter.c: 164: while(timeChanged){
  1464                           
  1465  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1466  00EB  160A  118A  1E52   	btfss	_timeChanged/(0+8),_timeChanged& (0+7)
  1467  00EE  2D6C               	goto	l6507
  1468                           
  1469                           ;Automated Solar Panel Orientation Setter.c: 165: pressedKey = CheckKeyPad();
  1470  00EF  120A  158A  20A4  120A  118A  	fcall	_CheckKeyPad
  1471  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  1472  00F5  00E1               	movwf	main@pressedKey^(0+128)
  1473                           
  1474                           ;Automated Solar Panel Orientation Setter.c: 166: if( pressedKey>=48 && pressedKey<=50 )
      +                          {
  1475  00F6  3030               	movlw	48
  1476  00F7  0261               	subwf	main@pressedKey^(0+128),w
  1477  00F8  1C03               	skipc
  1478  00F9  28EA               	goto	l487
  1479  00FA  3033               	movlw	51
  1480  00FB  0261               	subwf	main@pressedKey^(0+128),w
  1481  00FC  1803               	skipnc
  1482  00FD  28EA               	goto	l487
  1483                           
  1484                           ;Automated Solar Panel Orientation Setter.c: 167: newTimeHr = (pressedKey-48)*10;
  1485  00FE  0861               	movf	main@pressedKey^(0+128),w
  1486  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1487  0100  00A5               	movwf	___wmul@multiplier
  1488  0101  30D0               	movlw	-48
  1489  0102  01A6               	clrf	___wmul@multiplier+1
  1490  0103  07A5               	addwf	___wmul@multiplier,f
  1491  0104  1C03               	skipc
  1492  0105  03A6               	decf	___wmul@multiplier+1,f
  1493  0106  300A               	movlw	10
  1494  0107  00A7               	movwf	___wmul@multiplicand
  1495  0108  01A8               	clrf	___wmul@multiplicand+1
  1496  0109  120A  158A  238E  120A  118A  	fcall	___wmul
  1497  010E  0826               	movf	?___wmul+1,w
  1498  010F  1683               	bsf	3,5	;RP0=1, select bank1
  1499  0110  00D1               	movwf	(main@newTimeHr+1)^(0+128)
  1500  0111  1283               	bcf	3,5	;RP0=0, select bank0
  1501  0112  0825               	movf	?___wmul,w
  1502  0113  1683               	bsf	3,5	;RP0=1, select bank1
  1503  0114  00D0               	movwf	main@newTimeHr^(0+128)
  1504                           
  1505                           ;Automated Solar Panel Orientation Setter.c: 168: LCD_print_char(2,7,pressedKey);
  1506  0115  3002               	movlw	2
  1507  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1508  0117  00B3               	movwf	LCD_print_char@row
  1509  0118  3007               	movlw	7
  1510  0119  01B4               	clrf	LCD_print_char@row+1
  1511  011A  00B5               	movwf	LCD_print_char@column
  1512  011B  01B6               	clrf	LCD_print_char@column+1
  1513  011C  1683               	bsf	3,5	;RP0=1, select bank1
  1514  011D  0861               	movf	main@pressedKey^(0+128),w
  1515  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1516  011F  00B7               	movwf	LCD_print_char@print_value
  1517  0120  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
  1518  0125                     l490:	
  1519                           ;Automated Solar Panel Orientation Setter.c: 169: while(timeChanged){
  1520                           
  1521  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1522  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1523  0127  1E52               	btfss	_timeChanged/(0+8),_timeChanged& (0+7)
  1524  0128  28EA               	goto	l487
  1525                           
  1526                           ;Automated Solar Panel Orientation Setter.c: 170: pressedKey = CheckKeyPad();
  1527  0129  120A  158A  20A4  120A  118A  	fcall	_CheckKeyPad
  1528  012E  1683               	bsf	3,5	;RP0=1, select bank1
  1529  012F  00E1               	movwf	main@pressedKey^(0+128)
  1530                           
  1531                           ;Automated Solar Panel Orientation Setter.c: 171: if( pressedKey>=48 && pressedKey<58 ){
  1532  0130  3030               	movlw	48
  1533  0131  0261               	subwf	main@pressedKey^(0+128),w
  1534  0132  1C03               	skipc
  1535  0133  2925               	goto	l490
  1536  0134  303A               	movlw	58
  1537  0135  0261               	subwf	main@pressedKey^(0+128),w
  1538  0136  1803               	skipnc
  1539  0137  2925               	goto	l490
  1540                           
  1541                           ;Automated Solar Panel Orientation Setter.c: 172: newTimeHr = newTimeHr + (pressedKey-48
      +                          );
  1542  0138  0861               	movf	main@pressedKey^(0+128),w
  1543  0139  0750               	addwf	main@newTimeHr^(0+128),w
  1544  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1545  013B  00CE               	movwf	??_main
  1546  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1547  013D  0851               	movf	(main@newTimeHr+1)^(0+128),w
  1548  013E  1803               	skipnc
  1549  013F  0A51               	incf	(main@newTimeHr+1)^(0+128),w
  1550  0140  1283               	bcf	3,5	;RP0=0, select bank0
  1551  0141  00CF               	movwf	??_main+1
  1552  0142  084E               	movf	??_main,w
  1553  0143  3ED0               	addlw	208
  1554  0144  1683               	bsf	3,5	;RP0=1, select bank1
  1555  0145  00D0               	movwf	main@newTimeHr^(0+128)
  1556  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1557  0147  084F               	movf	??_main+1,w
  1558  0148  1803               	skipnc
  1559  0149  3E01               	addlw	1
  1560  014A  3EFF               	addlw	255
  1561  014B  1683               	bsf	3,5	;RP0=1, select bank1
  1562  014C  00D1               	movwf	(main@newTimeHr+1)^(0+128)
  1563                           
  1564                           ;Automated Solar Panel Orientation Setter.c: 173: LCD_print_char(2,8,pressedKey);
  1565  014D  3002               	movlw	2
  1566  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1567  014F  00B3               	movwf	LCD_print_char@row
  1568  0150  3008               	movlw	8
  1569  0151  01B4               	clrf	LCD_print_char@row+1
  1570  0152  00B5               	movwf	LCD_print_char@column
  1571  0153  01B6               	clrf	LCD_print_char@column+1
  1572  0154  1683               	bsf	3,5	;RP0=1, select bank1
  1573  0155  0861               	movf	main@pressedKey^(0+128),w
  1574  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1575  0157  00B7               	movwf	LCD_print_char@print_value
  1576  0158  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
  1577                           
  1578                           ;Automated Solar Panel Orientation Setter.c: 174: pressedKey = '@';
  1579  015D  3040               	movlw	64
  1580  015E  1683               	bsf	3,5	;RP0=1, select bank1
  1581  015F  1303               	bcf	3,6	;RP1=0, select bank1
  1582  0160  00E1               	movwf	main@pressedKey^(0+128)
  1583  0161                     l493:	
  1584                           ;Automated Solar Panel Orientation Setter.c: 175: while(timeChanged){
  1585                           
  1586  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1587  0162  1E52               	btfss	_timeChanged/(0+8),_timeChanged& (0+7)
  1588  0163  2925               	goto	l490
  1589                           
  1590                           ;Automated Solar Panel Orientation Setter.c: 176: pressedKey = CheckKeyPad();
  1591  0164  120A  158A  20A4  120A  118A  	fcall	_CheckKeyPad
  1592  0169  1683               	bsf	3,5	;RP0=1, select bank1
  1593  016A  00E1               	movwf	main@pressedKey^(0+128)
  1594                           
  1595                           ;Automated Solar Panel Orientation Setter.c: 177: if( pressedKey>=48 && pressedKey<=53 )
      +                          {
  1596  016B  3030               	movlw	48
  1597  016C  0261               	subwf	main@pressedKey^(0+128),w
  1598  016D  1C03               	skipc
  1599  016E  2961               	goto	l493
  1600  016F  3036               	movlw	54
  1601  0170  0261               	subwf	main@pressedKey^(0+128),w
  1602  0171  1803               	skipnc
  1603  0172  2961               	goto	l493
  1604                           
  1605                           ;Automated Solar Panel Orientation Setter.c: 178: newTimeMin = (pressedKey-48)*10;
  1606  0173  0861               	movf	main@pressedKey^(0+128),w
  1607  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1608  0175  00A5               	movwf	___wmul@multiplier
  1609  0176  30D0               	movlw	-48
  1610  0177  01A6               	clrf	___wmul@multiplier+1
  1611  0178  07A5               	addwf	___wmul@multiplier,f
  1612  0179  1C03               	skipc
  1613  017A  03A6               	decf	___wmul@multiplier+1,f
  1614  017B  300A               	movlw	10
  1615  017C  00A7               	movwf	___wmul@multiplicand
  1616  017D  01A8               	clrf	___wmul@multiplicand+1
  1617  017E  120A  158A  238E  120A  118A  	fcall	___wmul
  1618  0183  0826               	movf	?___wmul+1,w
  1619  0184  1683               	bsf	3,5	;RP0=1, select bank1
  1620  0185  00D3               	movwf	(main@newTimeMin+1)^(0+128)
  1621  0186  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0187  0825               	movf	?___wmul,w
  1623  0188  1683               	bsf	3,5	;RP0=1, select bank1
  1624  0189  00D2               	movwf	main@newTimeMin^(0+128)
  1625                           
  1626                           ;Automated Solar Panel Orientation Setter.c: 179: LCD_print_char(2,10,pressedKey);
  1627  018A  3002               	movlw	2
  1628  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1629  018C  00B3               	movwf	LCD_print_char@row
  1630  018D  300A               	movlw	10
  1631  018E  01B4               	clrf	LCD_print_char@row+1
  1632  018F  00B5               	movwf	LCD_print_char@column
  1633  0190  01B6               	clrf	LCD_print_char@column+1
  1634  0191  1683               	bsf	3,5	;RP0=1, select bank1
  1635  0192  0861               	movf	main@pressedKey^(0+128),w
  1636  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1637  0194  00B7               	movwf	LCD_print_char@print_value
  1638  0195  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
  1639  019A                     l6489:	
  1640                           ;Automated Solar Panel Orientation Setter.c: 181: while(timeChanged){
  1641                           
  1642                           
  1643                           ;Automated Solar Panel Orientation Setter.c: 180: pressedKey = '@';
  1644  019A  3040               	movlw	64
  1645  019B  1683               	bsf	3,5	;RP0=1, select bank1
  1646  019C  1303               	bcf	3,6	;RP1=0, select bank1
  1647  019D  00E1               	movwf	main@pressedKey^(0+128)
  1648  019E                     l6505:	
  1649  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1650  019F  1E52               	btfss	_timeChanged/(0+8),_timeChanged& (0+7)
  1651  01A0  2961               	goto	l493
  1652                           
  1653                           ;Automated Solar Panel Orientation Setter.c: 182: pressedKey = CheckKeyPad();
  1654  01A1  120A  158A  20A4  120A  118A  	fcall	_CheckKeyPad
  1655  01A6  1683               	bsf	3,5	;RP0=1, select bank1
  1656  01A7  00E1               	movwf	main@pressedKey^(0+128)
  1657                           
  1658                           ;Automated Solar Panel Orientation Setter.c: 183: if( pressedKey>=48 && pressedKey<58 ){
  1659  01A8  3030               	movlw	48
  1660  01A9  0261               	subwf	main@pressedKey^(0+128),w
  1661  01AA  1C03               	skipc
  1662  01AB  299E               	goto	l6505
  1663  01AC  303A               	movlw	58
  1664  01AD  0261               	subwf	main@pressedKey^(0+128),w
  1665  01AE  1803               	skipnc
  1666  01AF  299E               	goto	l6505
  1667                           
  1668                           ;Automated Solar Panel Orientation Setter.c: 184: LCD_print_char(2,11,pressedKey);
  1669  01B0  3002               	movlw	2
  1670  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1671  01B2  00B3               	movwf	LCD_print_char@row
  1672  01B3  300B               	movlw	11
  1673  01B4  01B4               	clrf	LCD_print_char@row+1
  1674  01B5  00B5               	movwf	LCD_print_char@column
  1675  01B6  01B6               	clrf	LCD_print_char@column+1
  1676  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  1677  01B8  0861               	movf	main@pressedKey^(0+128),w
  1678  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1679  01BA  00B7               	movwf	LCD_print_char@print_value
  1680  01BB  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
  1681                           
  1682                           ;Automated Solar Panel Orientation Setter.c: 185: newTimeMin = newTimeMin + (pressedKey-
      +                          48);
  1683  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  1684  01C1  1303               	bcf	3,6	;RP1=0, select bank1
  1685  01C2  0861               	movf	main@pressedKey^(0+128),w
  1686  01C3  0752               	addwf	main@newTimeMin^(0+128),w
  1687  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1688  01C5  00CE               	movwf	??_main
  1689  01C6  1683               	bsf	3,5	;RP0=1, select bank1
  1690  01C7  0853               	movf	(main@newTimeMin+1)^(0+128),w
  1691  01C8  1803               	skipnc
  1692  01C9  0A53               	incf	(main@newTimeMin+1)^(0+128),w
  1693  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  1694  01CB  00CF               	movwf	??_main+1
  1695  01CC  084E               	movf	??_main,w
  1696  01CD  3ED0               	addlw	208
  1697  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  1698  01CF  00D2               	movwf	main@newTimeMin^(0+128)
  1699  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1700  01D1  084F               	movf	??_main+1,w
  1701  01D2  1803               	skipnc
  1702  01D3  3E01               	addlw	1
  1703  01D4  3EFF               	addlw	255
  1704  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  1705  01D6  00D3               	movwf	(main@newTimeMin+1)^(0+128)
  1706                           
  1707                           ;Automated Solar Panel Orientation Setter.c: 186: timeChanged = 0;
  1708  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1709  01D8  1252               	bcf	_timeChanged/(0+8),_timeChanged& (0+7)
  1710  01D9  299A               	goto	l6489
  1711                           
  1712                           	psect	text1
  1713  10DC                     __ptext1:	
  1714 ;; *************** function _printf *****************
  1715 ;; Defined at:
  1716 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;  f               1    wreg     PTR const unsigned char 
  1719 ;;		 -> STR_24(17), STR_23(17), STR_18(17), STR_17(17), 
  1720 ;;		 -> STR_12(17), STR_11(17), STR_6(17), STR_5(17), 
  1721 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  1724 ;;		 -> STR_24(17), STR_23(17), STR_18(17), STR_17(17), 
  1725 ;;		 -> STR_12(17), STR_11(17), STR_6(17), STR_5(17), 
  1726 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  1727 ;;  tmpval          4    0        struct .
  1728 ;;  cp              2    0        PTR const unsigned char 
  1729 ;;  len             2    0        unsigned int 
  1730 ;;  val             2    0        unsigned int 
  1731 ;;  c               1    8[BANK0 ] char 
  1732 ;;  flag            1    0        unsigned char 
  1733 ;;  prec            1    0        char 
  1734 ;;  ap              1    0        PTR void [1]
  1735 ;;		 -> ?_printf(2), 
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  2  130[None  ] int 
  1738 ;; Registers used:
  1739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 300/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1745 ;;      Params:         0       0       0       0       0
  1746 ;;      Locals:         0       2       0       0       0
  1747 ;;      Temps:          0       0       0       0       0
  1748 ;;      Totals:         0       2       0       0       0
  1749 ;;Total ram usage:        2 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    7
  1752 ;; This function calls:
  1753 ;;		_putch
  1754 ;; This function is called by:
  1755 ;;		_main
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           
  1760                           ;psect for function _printf
  1761  10DC                     _printf:	
  1762                           
  1763                           ;incstack = 0
  1764 ;; using string table level
  1765                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1766                           ;printf@f stored from wreg
  1767  10DC  1283               	bcf	3,5	;RP0=0, select bank0
  1768  10DD  1303               	bcf	3,6	;RP1=0, select bank0
  1769  10DE  00A9               	movwf	printf@f
  1770  10DF                     l6185:	
  1771                           ;doprnt.c: 542: continue;
  1772                           
  1773                           ;doprnt.c: 536: while(c = *f++) {
  1774                           
  1775  10DF  1283               	bcf	3,5	;RP0=0, select bank0
  1776  10E0  1303               	bcf	3,6	;RP1=0, select bank0
  1777  10E1  0829               	movf	printf@f,w
  1778  10E2  0AA9               	incf	printf@f,f
  1779  10E3  0084               	movwf	4
  1780  10E4  160A  118A  2000  160A  118A  	fcall	stringdir
  1781  10E9  00A8               	movwf	printf@c
  1782  10EA  0828               	movf	printf@c,w
  1783  10EB  1903               	btfsc	3,2
  1784  10EC  0008               	return
  1785                           
  1786                           ;doprnt.c: 540: {
  1787                           ;doprnt.c: 541: (putch(c) );
  1788  10ED  0828               	movf	printf@c,w
  1789  10EE  20F2  160A  118A   	fcall	_putch
  1790  10F1  28DF               	goto	l6185
  1791  10F2                     __end_of_printf:	
  1792  10F2                     __ptext2:	
  1793 ;; *************** function _putch *****************
  1794 ;; Defined at:
  1795 ;;		line 166 in file "lcdv2.h"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;  print_value     1    wreg     unsigned char 
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;  print_value     1    7[BANK0 ] unsigned char 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;		None               void
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0, pclath, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : 300/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1809 ;;      Params:         0       0       0       0       0
  1810 ;;      Locals:         0       1       0       0       0
  1811 ;;      Temps:          0       1       0       0       0
  1812 ;;      Totals:         0       2       0       0       0
  1813 ;;Total ram usage:        2 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    6
  1816 ;; This function calls:
  1817 ;;		_lcd_add
  1818 ;; This function is called by:
  1819 ;;		_printf
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           
  1824                           ;psect for function _putch
  1825  10F2                     _putch:	
  1826                           
  1827                           ;incstack = 0
  1828                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  1829                           ;putch@print_value stored from wreg
  1830  10F2  00A7               	movwf	putch@print_value
  1831                           
  1832                           ;lcdv2.h: 167: RC2 = 1;
  1833  10F3  1507               	bsf	7,2	;volatile
  1834                           
  1835                           ;lcdv2.h: 168: _delay(20);
  1836  10F4  3006               	movlw	6
  1837  10F5  00A6               	movwf	??_putch
  1838  10F6                     u8617:	
  1839  10F6  0BA6               	decfsz	??_putch,f
  1840  10F7  28F6               	goto	u8617
  1841  10F8  0000               	nop
  1842                           
  1843                           ;lcdv2.h: 169: lcd_data = print_value;
  1844  10F9  1283               	bcf	3,5	;RP0=0, select bank0
  1845  10FA  1303               	bcf	3,6	;RP1=0, select bank0
  1846  10FB  0827               	movf	putch@print_value,w
  1847  10FC  00D7               	movwf	_lcd_data
  1848                           
  1849                           ;lcdv2.h: 170: lcd_add();
  1850  10FD  2220  160A  118A   	fcall	_lcd_add
  1851                           
  1852                           ;lcdv2.h: 171: _delay(100);
  1853  1100  3021               	movlw	33
  1854  1101  1283               	bcf	3,5	;RP0=0, select bank0
  1855  1102  1303               	bcf	3,6	;RP1=0, select bank0
  1856  1103  00A6               	movwf	??_putch
  1857  1104                     u8627:	
  1858  1104  0BA6               	decfsz	??_putch,f
  1859  1105  2904               	goto	u8627
  1860  1106  0008               	return
  1861  1107                     __end_of_putch:	
  1862  1107                     __ptext7:	
  1863 ;; *************** function _clr_display *****************
  1864 ;; Defined at:
  1865 ;;		line 183 in file "lcdv2.h"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;		None               void
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0, pclath, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : 300/0
  1876 ;;		On exit  : 300/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1879 ;;      Params:         0       0       0       0       0
  1880 ;;      Locals:         0       0       0       0       0
  1881 ;;      Temps:          0       2       0       0       0
  1882 ;;      Totals:         0       2       0       0       0
  1883 ;;Total ram usage:        2 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    6
  1886 ;; This function calls:
  1887 ;;		_lcd_add
  1888 ;; This function is called by:
  1889 ;;		_main
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           
  1894                           ;psect for function _clr_display
  1895  1107                     _clr_display:	
  1896                           
  1897                           ;lcdv2.h: 185: RC2 = 0;
  1898                           
  1899                           ;incstack = 0
  1900                           ; Regs used in _clr_display: [wreg+status,2+status,0+pclath+cstack]
  1901  1107  1107               	bcf	7,2	;volatile
  1902                           
  1903                           ;lcdv2.h: 186: _delay(20);
  1904  1108  3006               	movlw	6
  1905  1109  00A6               	movwf	??_clr_display
  1906  110A                     u8637:	
  1907  110A  0BA6               	decfsz	??_clr_display,f
  1908  110B  290A               	goto	u8637
  1909  110C  0000               	nop
  1910                           
  1911                           ;lcdv2.h: 187: lcd_data = 0b00000001;
  1912  110D  1283               	bcf	3,5	;RP0=0, select bank0
  1913  110E  1303               	bcf	3,6	;RP1=0, select bank0
  1914  110F  01D7               	clrf	_lcd_data
  1915  1110  0AD7               	incf	_lcd_data,f
  1916                           
  1917                           ;lcdv2.h: 188: lcd_add();
  1918  1111  2220  160A  118A   	fcall	_lcd_add
  1919                           
  1920                           ;lcdv2.h: 189: _delay((unsigned long)((10)*(4000000/4000.0)));
  1921  1114  300D               	movlw	13
  1922  1115  1283               	bcf	3,5	;RP0=0, select bank0
  1923  1116  1303               	bcf	3,6	;RP1=0, select bank0
  1924  1117  00A7               	movwf	??_clr_display+1
  1925  1118  30FB               	movlw	251
  1926  1119  00A6               	movwf	??_clr_display
  1927  111A                     u8647:	
  1928  111A  0BA6               	decfsz	??_clr_display,f
  1929  111B  291A               	goto	u8647
  1930  111C  0BA7               	decfsz	??_clr_display+1,f
  1931  111D  291A               	goto	u8647
  1932  111E  291F               	nop2
  1933                           
  1934                           ;lcdv2.h: 190: RC2 = 1;
  1935  111F  1283               	bcf	3,5	;RP0=0, select bank0
  1936  1120  1303               	bcf	3,6	;RP1=0, select bank0
  1937  1121  1507               	bsf	7,2	;volatile
  1938  1122  0008               	return
  1939  1123                     __end_of_clr_display:	
  1940  1123                     __ptext26:	
  1941 ;; *************** function _LCDTimeUpdate *****************
  1942 ;; Defined at:
  1943 ;;		line 898 in file "Automated Solar Panel Orientation Setter.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;		None
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;		None
  1948 ;; Return value:  Size  Location     Type
  1949 ;;		None               void
  1950 ;; Registers used:
  1951 ;;		wreg, status,2, status,0, pclath, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 300/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1957 ;;      Params:         0       0       0       0       0
  1958 ;;      Locals:         0       0       0       0       0
  1959 ;;      Temps:          0       2       0       0       0
  1960 ;;      Totals:         0       2       0       0       0
  1961 ;;Total ram usage:        2 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    8
  1964 ;; This function calls:
  1965 ;;		_LCD_print_char
  1966 ;;		___lwdiv
  1967 ;;		___lwmod
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           
  1974                           ;psect for function _LCDTimeUpdate
  1975  1123                     _LCDTimeUpdate:	
  1976                           
  1977                           ;incstack = 0
  1978 ;; hardware stack exceeded
  1979                           ; Regs used in _LCDTimeUpdate: [wreg+status,2+status,0+pclath+cstack]
  1980  1123  300C               	movlw	12
  1981                           
  1982                           ;Automated Solar Panel Orientation Setter.c: 899: LCD_print_char(1,12,hour/10+48);
  1983  1124  01B3               	clrf	LCD_print_char@row
  1984  1125  0AB3               	incf	LCD_print_char@row,f
  1985  1126  01B4               	clrf	LCD_print_char@row+1
  1986  1127  00B5               	movwf	LCD_print_char@column
  1987  1128  300A               	movlw	10
  1988  1129  01B6               	clrf	LCD_print_char@column+1
  1989  112A  00A5               	movwf	___lwdiv@divisor
  1990  112B  01A6               	clrf	___lwdiv@divisor+1
  1991  112C  0854               	movf	_hour+1,w
  1992  112D  00A8               	movwf	___lwdiv@dividend+1
  1993  112E  0853               	movf	_hour,w
  1994  112F  00A7               	movwf	___lwdiv@dividend
  1995  1130  21D2  160A  118A   	fcall	___lwdiv
  1996  1133  0825               	movf	?___lwdiv,w
  1997  1134  3E30               	addlw	48
  1998  1135  00B7               	movwf	LCD_print_char@print_value
  1999  1136  21B6  160A  118A   	fcall	_LCD_print_char
  2000                           
  2001                           ;Automated Solar Panel Orientation Setter.c: 900: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  2002  1139  300D               	movlw	13
  2003  113A  1283               	bcf	3,5	;RP0=0, select bank0
  2004  113B  1303               	bcf	3,6	;RP1=0, select bank0
  2005  113C  00BA               	movwf	??_LCDTimeUpdate+1
  2006  113D  30FB               	movlw	251
  2007  113E  00B9               	movwf	??_LCDTimeUpdate
  2008  113F                     u8787:	
  2009  113F  0BB9               	decfsz	??_LCDTimeUpdate,f
  2010  1140  293F               	goto	u8787
  2011  1141  0BBA               	decfsz	??_LCDTimeUpdate+1,f
  2012  1142  293F               	goto	u8787
  2013  1143  2944               	nop2
  2014                           
  2015                           ;Automated Solar Panel Orientation Setter.c: 901: LCD_print_char(1,13,hour%10+48);
  2016  1144  1283               	bcf	3,5	;RP0=0, select bank0
  2017  1145  1303               	bcf	3,6	;RP1=0, select bank0
  2018  1146  300D               	movlw	13
  2019  1147  01B3               	clrf	LCD_print_char@row
  2020  1148  0AB3               	incf	LCD_print_char@row,f
  2021  1149  01B4               	clrf	LCD_print_char@row+1
  2022  114A  00B5               	movwf	LCD_print_char@column
  2023  114B  300A               	movlw	10
  2024  114C  01B6               	clrf	LCD_print_char@column+1
  2025  114D  00A5               	movwf	___lwmod@divisor
  2026  114E  01A6               	clrf	___lwmod@divisor+1
  2027  114F  0854               	movf	_hour+1,w
  2028  1150  00A8               	movwf	___lwmod@dividend+1
  2029  1151  0853               	movf	_hour,w
  2030  1152  00A7               	movwf	___lwmod@dividend
  2031  1153  21FC  160A  118A   	fcall	___lwmod
  2032  1156  0825               	movf	?___lwmod,w
  2033  1157  3E30               	addlw	48
  2034  1158  00B7               	movwf	LCD_print_char@print_value
  2035  1159  21B6  160A  118A   	fcall	_LCD_print_char
  2036                           
  2037                           ;Automated Solar Panel Orientation Setter.c: 902: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  2038  115C  300D               	movlw	13
  2039  115D  1283               	bcf	3,5	;RP0=0, select bank0
  2040  115E  1303               	bcf	3,6	;RP1=0, select bank0
  2041  115F  00BA               	movwf	??_LCDTimeUpdate+1
  2042  1160  30FB               	movlw	251
  2043  1161  00B9               	movwf	??_LCDTimeUpdate
  2044  1162                     u8797:	
  2045  1162  0BB9               	decfsz	??_LCDTimeUpdate,f
  2046  1163  2962               	goto	u8797
  2047  1164  0BBA               	decfsz	??_LCDTimeUpdate+1,f
  2048  1165  2962               	goto	u8797
  2049  1166  2967               	nop2
  2050                           
  2051                           ;Automated Solar Panel Orientation Setter.c: 903: LCD_print_char(1,15,minute/10+48);
  2052  1167  1283               	bcf	3,5	;RP0=0, select bank0
  2053  1168  1303               	bcf	3,6	;RP1=0, select bank0
  2054  1169  300F               	movlw	15
  2055  116A  01B3               	clrf	LCD_print_char@row
  2056  116B  0AB3               	incf	LCD_print_char@row,f
  2057  116C  01B4               	clrf	LCD_print_char@row+1
  2058  116D  00B5               	movwf	LCD_print_char@column
  2059  116E  300A               	movlw	10
  2060  116F  01B6               	clrf	LCD_print_char@column+1
  2061  1170  00A5               	movwf	___lwdiv@divisor
  2062  1171  01A6               	clrf	___lwdiv@divisor+1
  2063  1172  1683               	bsf	3,5	;RP0=1, select bank1
  2064  1173  083E               	movf	(_minute+1)^(0+128),w
  2065  1174  1283               	bcf	3,5	;RP0=0, select bank0
  2066  1175  00A8               	movwf	___lwdiv@dividend+1
  2067  1176  1683               	bsf	3,5	;RP0=1, select bank1
  2068  1177  083D               	movf	_minute^(0+128),w
  2069  1178  1283               	bcf	3,5	;RP0=0, select bank0
  2070  1179  00A7               	movwf	___lwdiv@dividend
  2071  117A  21D2  160A  118A   	fcall	___lwdiv
  2072  117D  0825               	movf	?___lwdiv,w
  2073  117E  3E30               	addlw	48
  2074  117F  00B7               	movwf	LCD_print_char@print_value
  2075  1180  21B6  160A  118A   	fcall	_LCD_print_char
  2076                           
  2077                           ;Automated Solar Panel Orientation Setter.c: 904: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  2078  1183  300D               	movlw	13
  2079  1184  1283               	bcf	3,5	;RP0=0, select bank0
  2080  1185  1303               	bcf	3,6	;RP1=0, select bank0
  2081  1186  00BA               	movwf	??_LCDTimeUpdate+1
  2082  1187  30FB               	movlw	251
  2083  1188  00B9               	movwf	??_LCDTimeUpdate
  2084  1189                     u8807:	
  2085  1189  0BB9               	decfsz	??_LCDTimeUpdate,f
  2086  118A  2989               	goto	u8807
  2087  118B  0BBA               	decfsz	??_LCDTimeUpdate+1,f
  2088  118C  2989               	goto	u8807
  2089  118D  298E               	nop2
  2090                           
  2091                           ;Automated Solar Panel Orientation Setter.c: 905: LCD_print_char(1,16,minute%10+48);
  2092  118E  1283               	bcf	3,5	;RP0=0, select bank0
  2093  118F  1303               	bcf	3,6	;RP1=0, select bank0
  2094  1190  3010               	movlw	16
  2095  1191  01B3               	clrf	LCD_print_char@row
  2096  1192  0AB3               	incf	LCD_print_char@row,f
  2097  1193  01B4               	clrf	LCD_print_char@row+1
  2098  1194  00B5               	movwf	LCD_print_char@column
  2099  1195  300A               	movlw	10
  2100  1196  01B6               	clrf	LCD_print_char@column+1
  2101  1197  00A5               	movwf	___lwmod@divisor
  2102  1198  01A6               	clrf	___lwmod@divisor+1
  2103  1199  1683               	bsf	3,5	;RP0=1, select bank1
  2104  119A  083E               	movf	(_minute+1)^(0+128),w
  2105  119B  1283               	bcf	3,5	;RP0=0, select bank0
  2106  119C  00A8               	movwf	___lwmod@dividend+1
  2107  119D  1683               	bsf	3,5	;RP0=1, select bank1
  2108  119E  083D               	movf	_minute^(0+128),w
  2109  119F  1283               	bcf	3,5	;RP0=0, select bank0
  2110  11A0  00A7               	movwf	___lwmod@dividend
  2111  11A1  21FC  160A  118A   	fcall	___lwmod
  2112  11A4  0825               	movf	?___lwmod,w
  2113  11A5  3E30               	addlw	48
  2114  11A6  00B7               	movwf	LCD_print_char@print_value
  2115  11A7  21B6  160A  118A   	fcall	_LCD_print_char
  2116                           
  2117                           ;Automated Solar Panel Orientation Setter.c: 906: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  2118  11AA  300D               	movlw	13
  2119  11AB  1283               	bcf	3,5	;RP0=0, select bank0
  2120  11AC  1303               	bcf	3,6	;RP1=0, select bank0
  2121  11AD  00BA               	movwf	??_LCDTimeUpdate+1
  2122  11AE  30FB               	movlw	251
  2123  11AF  00B9               	movwf	??_LCDTimeUpdate
  2124  11B0                     u8817:	
  2125  11B0  0BB9               	decfsz	??_LCDTimeUpdate,f
  2126  11B1  29B0               	goto	u8817
  2127  11B2  0BBA               	decfsz	??_LCDTimeUpdate+1,f
  2128  11B3  29B0               	goto	u8817
  2129  11B4  29B5               	nop2
  2130  11B5  0008               	return
  2131  11B6                     __end_of_LCDTimeUpdate:	
  2132  11B6                     __ptext29:	
  2133 ;; *************** function _LCD_print_char *****************
  2134 ;; Defined at:
  2135 ;;		line 174 in file "lcdv2.h"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  row             2   19[BANK0 ] int 
  2138 ;;  column          2   21[BANK0 ] int 
  2139 ;;  print_value     1   23[BANK0 ] unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;		None
  2142 ;; Return value:  Size  Location     Type
  2143 ;;		None               void
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0, pclath, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 300/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2151 ;;      Params:         0       5       0       0       0
  2152 ;;      Locals:         0       0       0       0       0
  2153 ;;      Temps:          0       1       0       0       0
  2154 ;;      Totals:         0       6       0       0       0
  2155 ;;Total ram usage:        6 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    7
  2158 ;; This function calls:
  2159 ;;		_lcd_add
  2160 ;;		_position
  2161 ;; This function is called by:
  2162 ;;		_main
  2163 ;;		_LCDTimeUpdate
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           
  2168                           ;psect for function _LCD_print_char
  2169  11B6                     _LCD_print_char:	
  2170                           
  2171                           ;lcdv2.h: 175: position(row,column);
  2172                           
  2173                           ;incstack = 0
  2174                           ; Regs used in _LCD_print_char: [wreg+status,2+status,0+pclath+cstack]
  2175  11B6  0835               	movf	LCD_print_char@column,w
  2176  11B7  00A6               	movwf	position@collum
  2177  11B8  0833               	movf	LCD_print_char@row,w
  2178  11B9  22DF  160A  118A   	fcall	_position
  2179                           
  2180                           ;lcdv2.h: 176: RC2 = 1;
  2181  11BC  1283               	bcf	3,5	;RP0=0, select bank0
  2182  11BD  1303               	bcf	3,6	;RP1=0, select bank0
  2183  11BE  1507               	bsf	7,2	;volatile
  2184                           
  2185                           ;lcdv2.h: 177: _delay(20);
  2186  11BF  3006               	movlw	6
  2187  11C0  00B8               	movwf	??_LCD_print_char
  2188  11C1                     u8827:	
  2189  11C1  0BB8               	decfsz	??_LCD_print_char,f
  2190  11C2  29C1               	goto	u8827
  2191  11C3  0000               	nop
  2192                           
  2193                           ;lcdv2.h: 178: lcd_data = print_value;
  2194  11C4  1283               	bcf	3,5	;RP0=0, select bank0
  2195  11C5  1303               	bcf	3,6	;RP1=0, select bank0
  2196  11C6  0837               	movf	LCD_print_char@print_value,w
  2197  11C7  00D7               	movwf	_lcd_data
  2198                           
  2199                           ;lcdv2.h: 179: lcd_add();
  2200  11C8  2220  160A  118A   	fcall	_lcd_add
  2201                           
  2202                           ;lcdv2.h: 180: _delay(100);
  2203  11CB  3021               	movlw	33
  2204  11CC  1283               	bcf	3,5	;RP0=0, select bank0
  2205  11CD  1303               	bcf	3,6	;RP1=0, select bank0
  2206  11CE  00B8               	movwf	??_LCD_print_char
  2207  11CF                     u8837:	
  2208  11CF  0BB8               	decfsz	??_LCD_print_char,f
  2209  11D0  29CF               	goto	u8837
  2210  11D1  0008               	return
  2211  11D2                     __end_of_LCD_print_char:	
  2212  11D2                     __ptext28:	
  2213 ;; *************** function ___lwdiv *****************
  2214 ;; Defined at:
  2215 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  divisor         2    5[BANK0 ] unsigned int 
  2218 ;;  dividend        2    7[BANK0 ] unsigned int 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  quotient        2   10[BANK0 ] unsigned int 
  2221 ;;  counter         1    9[BANK0 ] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  2    5[BANK0 ] unsigned int 
  2224 ;; Registers used:
  2225 ;;		wreg, status,2, status,0
  2226 ;; Tracked objects:
  2227 ;;		On entry : 300/0
  2228 ;;		On exit  : 300/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2231 ;;      Params:         0       4       0       0       0
  2232 ;;      Locals:         0       3       0       0       0
  2233 ;;      Temps:          0       0       0       0       0
  2234 ;;      Totals:         0       7       0       0       0
  2235 ;;Total ram usage:        7 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    5
  2238 ;; This function calls:
  2239 ;;		Nothing
  2240 ;; This function is called by:
  2241 ;;		_LCDTimeUpdate
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           
  2246                           ;psect for function ___lwdiv
  2247  11D2                     ___lwdiv:	
  2248                           
  2249                           ;incstack = 0
  2250                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2251  11D2  01AA               	clrf	___lwdiv@quotient
  2252  11D3  01AB               	clrf	___lwdiv@quotient+1
  2253  11D4  0825               	movf	___lwdiv@divisor,w
  2254  11D5  0426               	iorwf	___lwdiv@divisor+1,w
  2255  11D6  1903               	btfsc	3,2
  2256  11D7  29F7               	goto	l5927
  2257  11D8  01A9               	clrf	___lwdiv@counter
  2258  11D9                     L12:	
  2259  11D9  0AA9               	incf	___lwdiv@counter,f
  2260  11DA  1BA6               	btfsc	___lwdiv@divisor+1,7
  2261  11DB  29E0               	goto	l5915
  2262  11DC  1003               	clrc
  2263  11DD  0DA5               	rlf	___lwdiv@divisor,f
  2264  11DE  0DA6               	rlf	___lwdiv@divisor+1,f
  2265  11DF  29D9               	goto	L12
  2266  11E0                     l5915:	
  2267  11E0  1003               	clrc
  2268  11E1  0DAA               	rlf	___lwdiv@quotient,f
  2269  11E2  0DAB               	rlf	___lwdiv@quotient+1,f
  2270  11E3  0826               	movf	___lwdiv@divisor+1,w
  2271  11E4  0228               	subwf	___lwdiv@dividend+1,w
  2272  11E5  1D03               	skipz
  2273  11E6  29E9               	goto	u7685
  2274  11E7  0825               	movf	___lwdiv@divisor,w
  2275  11E8  0227               	subwf	___lwdiv@dividend,w
  2276  11E9                     u7685:	
  2277  11E9  1C03               	skipc
  2278  11EA  29F3               	goto	L13
  2279  11EB  0825               	movf	___lwdiv@divisor,w
  2280  11EC  02A7               	subwf	___lwdiv@dividend,f
  2281  11ED  0826               	movf	___lwdiv@divisor+1,w
  2282  11EE  1C03               	skipc
  2283  11EF  03A8               	decf	___lwdiv@dividend+1,f
  2284  11F0  02A8               	subwf	___lwdiv@dividend+1,f
  2285  11F1  142A               	bsf	___lwdiv@quotient,0
  2286  11F2  1003               	clrc
  2287  11F3                     L13:	
  2288  11F3  0CA6               	rrf	___lwdiv@divisor+1,f
  2289  11F4  0CA5               	rrf	___lwdiv@divisor,f
  2290  11F5  0BA9               	decfsz	___lwdiv@counter,f
  2291  11F6  29E0               	goto	l5915
  2292  11F7                     l5927:	
  2293  11F7  082B               	movf	___lwdiv@quotient+1,w
  2294  11F8  00A6               	movwf	?___lwdiv+1
  2295  11F9  082A               	movf	___lwdiv@quotient,w
  2296  11FA  00A5               	movwf	?___lwdiv
  2297  11FB  0008               	return
  2298  11FC                     __end_of___lwdiv:	
  2299  11FC                     __ptext27:	
  2300 ;; *************** function ___lwmod *****************
  2301 ;; Defined at:
  2302 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  divisor         2    5[BANK0 ] unsigned int 
  2305 ;;  dividend        2    7[BANK0 ] unsigned int 
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;  counter         1    9[BANK0 ] unsigned char 
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  2    5[BANK0 ] unsigned int 
  2310 ;; Registers used:
  2311 ;;		wreg, status,2, status,0
  2312 ;; Tracked objects:
  2313 ;;		On entry : 300/0
  2314 ;;		On exit  : 300/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2317 ;;      Params:         0       4       0       0       0
  2318 ;;      Locals:         0       1       0       0       0
  2319 ;;      Temps:          0       0       0       0       0
  2320 ;;      Totals:         0       5       0       0       0
  2321 ;;Total ram usage:        5 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:    5
  2324 ;; This function calls:
  2325 ;;		Nothing
  2326 ;; This function is called by:
  2327 ;;		_LCDTimeUpdate
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           
  2332                           ;psect for function ___lwmod
  2333  11FC                     ___lwmod:	
  2334                           
  2335                           ;incstack = 0
  2336                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2337  11FC  0825               	movf	___lwmod@divisor,w
  2338  11FD  0426               	iorwf	___lwmod@divisor+1,w
  2339  11FE  1903               	btfsc	3,2
  2340  11FF  2A1B               	goto	l5947
  2341  1200  01A9               	clrf	___lwmod@counter
  2342  1201                     L10:	
  2343  1201  0AA9               	incf	___lwmod@counter,f
  2344  1202  1BA6               	btfsc	___lwmod@divisor+1,7
  2345  1203  2A08               	goto	l5939
  2346  1204  1003               	clrc
  2347  1205  0DA5               	rlf	___lwmod@divisor,f
  2348  1206  0DA6               	rlf	___lwmod@divisor+1,f
  2349  1207  2A01               	goto	L10
  2350  1208                     l5939:	
  2351  1208  0826               	movf	___lwmod@divisor+1,w
  2352  1209  0228               	subwf	___lwmod@dividend+1,w
  2353  120A  1D03               	skipz
  2354  120B  2A0E               	goto	u7725
  2355  120C  0825               	movf	___lwmod@divisor,w
  2356  120D  0227               	subwf	___lwmod@dividend,w
  2357  120E                     u7725:	
  2358  120E  1C03               	skipc
  2359  120F  2A17               	goto	L11
  2360  1210  0825               	movf	___lwmod@divisor,w
  2361  1211  02A7               	subwf	___lwmod@dividend,f
  2362  1212  0826               	movf	___lwmod@divisor+1,w
  2363  1213  1C03               	skipc
  2364  1214  03A8               	decf	___lwmod@dividend+1,f
  2365  1215  02A8               	subwf	___lwmod@dividend+1,f
  2366  1216  1003               	clrc
  2367  1217                     L11:	
  2368  1217  0CA6               	rrf	___lwmod@divisor+1,f
  2369  1218  0CA5               	rrf	___lwmod@divisor,f
  2370  1219  0BA9               	decfsz	___lwmod@counter,f
  2371  121A  2A08               	goto	l5939
  2372  121B                     l5947:	
  2373  121B  0828               	movf	___lwmod@dividend+1,w
  2374  121C  00A6               	movwf	?___lwmod+1
  2375  121D  0827               	movf	___lwmod@dividend,w
  2376  121E  00A5               	movwf	?___lwmod
  2377  121F  0008               	return
  2378  1220                     __end_of___lwmod:	
  2379  1220                     __ptext31:	
  2380 ;; *************** function _lcd_add *****************
  2381 ;; Defined at:
  2382 ;;		line 226 in file "lcdv2.h"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;		None               void
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0
  2391 ;; Tracked objects:
  2392 ;;		On entry : 300/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2396 ;;      Params:         0       0       0       0       0
  2397 ;;      Locals:         0       0       0       0       0
  2398 ;;      Temps:          0       1       0       0       0
  2399 ;;      Totals:         0       1       0       0       0
  2400 ;;Total ram usage:        1 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    5
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_putch
  2407 ;;		_LCD_print_char
  2408 ;;		_clr_display
  2409 ;;		_position
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           
  2414                           ;psect for function _lcd_add
  2415  1220                     _lcd_add:	
  2416                           
  2417                           ;lcdv2.h: 232: bit0 = lcd_data;
  2418                           
  2419                           ;incstack = 0
  2420                           ; Regs used in _lcd_add: [wreg+status,2+status,0]
  2421  1220  1251               	bcf	_bit0/(0+8),_bit0& (0+7)
  2422  1221  1857               	btfsc	_lcd_data,0
  2423  1222  1651               	bsf	_bit0/(0+8),_bit0& (0+7)
  2424                           
  2425                           ;lcdv2.h: 233: bit1 = lcd_data>>1;
  2426  1223  1283               	bcf	3,5	;RP0=0, select bank0
  2427  1224  1303               	bcf	3,6	;RP1=0, select bank0
  2428  1225  0857               	movf	_lcd_data,w
  2429  1226  00A5               	movwf	??_lcd_add
  2430  1227  1003               	clrc
  2431  1228  0CA5               	rrf	??_lcd_add,f
  2432  1229  12D1               	bcf	_bit1/(0+8),_bit1& (0+7)
  2433  122A  1825               	btfsc	??_lcd_add,0
  2434  122B  16D1               	bsf	_bit1/(0+8),_bit1& (0+7)
  2435                           
  2436                           ;lcdv2.h: 234: bit2 = lcd_data>>2;
  2437  122C  1283               	bcf	3,5	;RP0=0, select bank0
  2438  122D  1303               	bcf	3,6	;RP1=0, select bank0
  2439  122E  0857               	movf	_lcd_data,w
  2440  122F  00A5               	movwf	??_lcd_add
  2441  1230  1003               	clrc
  2442  1231  0CA5               	rrf	??_lcd_add,f
  2443  1232  1003               	clrc
  2444  1233  0CA5               	rrf	??_lcd_add,f
  2445  1234  1351               	bcf	_bit2/(0+8),_bit2& (0+7)
  2446  1235  1825               	btfsc	??_lcd_add,0
  2447  1236  1751               	bsf	_bit2/(0+8),_bit2& (0+7)
  2448                           
  2449                           ;lcdv2.h: 235: bit3 = lcd_data>>3;
  2450  1237  1283               	bcf	3,5	;RP0=0, select bank0
  2451  1238  1303               	bcf	3,6	;RP1=0, select bank0
  2452  1239  0857               	movf	_lcd_data,w
  2453  123A  00A5               	movwf	??_lcd_add
  2454  123B  1003               	clrc
  2455  123C  0CA5               	rrf	??_lcd_add,f
  2456  123D  1003               	clrc
  2457  123E  0CA5               	rrf	??_lcd_add,f
  2458  123F  1003               	clrc
  2459  1240  0CA5               	rrf	??_lcd_add,f
  2460  1241  13D1               	bcf	_bit3/(0+8),_bit3& (0+7)
  2461  1242  1825               	btfsc	??_lcd_add,0
  2462  1243  17D1               	bsf	_bit3/(0+8),_bit3& (0+7)
  2463                           
  2464                           ;lcdv2.h: 236: bit4 = lcd_data>>4;
  2465  1244  1283               	bcf	3,5	;RP0=0, select bank0
  2466  1245  1303               	bcf	3,6	;RP1=0, select bank0
  2467  1246  0857               	movf	_lcd_data,w
  2468  1247  00A5               	movwf	??_lcd_add
  2469  1248  3004               	movlw	4
  2470  1249                     u6095:	
  2471  1249  1003               	clrc
  2472  124A  0CA5               	rrf	??_lcd_add,f
  2473  124B  3EFF               	addlw	-1
  2474  124C  1D03               	skipz
  2475  124D  2A49               	goto	u6095
  2476  124E  1052               	bcf	_bit4/(0+8),_bit4& (0+7)
  2477  124F  1825               	btfsc	??_lcd_add,0
  2478  1250  1452               	bsf	_bit4/(0+8),_bit4& (0+7)
  2479                           
  2480                           ;lcdv2.h: 237: bit5 = lcd_data>>5;
  2481  1251  1283               	bcf	3,5	;RP0=0, select bank0
  2482  1252  1303               	bcf	3,6	;RP1=0, select bank0
  2483  1253  0857               	movf	_lcd_data,w
  2484  1254  00A5               	movwf	??_lcd_add
  2485  1255  3005               	movlw	5
  2486  1256                     u6115:	
  2487  1256  1003               	clrc
  2488  1257  0CA5               	rrf	??_lcd_add,f
  2489  1258  3EFF               	addlw	-1
  2490  1259  1D03               	skipz
  2491  125A  2A56               	goto	u6115
  2492  125B  10D2               	bcf	_bit5/(0+8),_bit5& (0+7)
  2493  125C  1825               	btfsc	??_lcd_add,0
  2494  125D  14D2               	bsf	_bit5/(0+8),_bit5& (0+7)
  2495                           
  2496                           ;lcdv2.h: 238: bit6 = lcd_data>>6;
  2497  125E  1283               	bcf	3,5	;RP0=0, select bank0
  2498  125F  1303               	bcf	3,6	;RP1=0, select bank0
  2499  1260  0857               	movf	_lcd_data,w
  2500  1261  00A5               	movwf	??_lcd_add
  2501  1262  3006               	movlw	6
  2502  1263                     u6135:	
  2503  1263  1003               	clrc
  2504  1264  0CA5               	rrf	??_lcd_add,f
  2505  1265  3EFF               	addlw	-1
  2506  1266  1D03               	skipz
  2507  1267  2A63               	goto	u6135
  2508  1268  1152               	bcf	_bit6/(0+8),_bit6& (0+7)
  2509  1269  1825               	btfsc	??_lcd_add,0
  2510  126A  1552               	bsf	_bit6/(0+8),_bit6& (0+7)
  2511                           
  2512                           ;lcdv2.h: 239: bit7 = lcd_data>>7;
  2513  126B  1283               	bcf	3,5	;RP0=0, select bank0
  2514  126C  1303               	bcf	3,6	;RP1=0, select bank0
  2515  126D  0857               	movf	_lcd_data,w
  2516  126E  00A5               	movwf	??_lcd_add
  2517  126F  3007               	movlw	7
  2518  1270                     u6155:	
  2519  1270  1003               	clrc
  2520  1271  0CA5               	rrf	??_lcd_add,f
  2521  1272  3EFF               	addlw	-1
  2522  1273  1D03               	skipz
  2523  1274  2A70               	goto	u6155
  2524  1275  11D2               	bcf	_bit7/(0+8),_bit7& (0+7)
  2525  1276  1825               	btfsc	??_lcd_add,0
  2526  1277  15D2               	bsf	_bit7/(0+8),_bit7& (0+7)
  2527                           
  2528                           ;lcdv2.h: 241: RC3 = 0;
  2529  1278  1283               	bcf	3,5	;RP0=0, select bank0
  2530  1279  1303               	bcf	3,6	;RP1=0, select bank0
  2531  127A  1187               	bcf	7,3	;volatile
  2532                           
  2533                           ;lcdv2.h: 242: _delay(1);
  2534  127B  0000               	nop
  2535                           
  2536                           ;lcdv2.h: 243: RC3 = 1;
  2537  127C  1283               	bcf	3,5	;RP0=0, select bank0
  2538  127D  1303               	bcf	3,6	;RP1=0, select bank0
  2539  127E  1587               	bsf	7,3	;volatile
  2540                           
  2541                           ;lcdv2.h: 244: _delay(1);
  2542  127F  0000               	nop
  2543                           
  2544                           ;lcdv2.h: 246: RC1 = bit4;
  2545  1280  1283               	bcf	3,5	;RP0=0, select bank0
  2546  1281  1303               	bcf	3,6	;RP1=0, select bank0
  2547  1282  1C52               	btfss	_bit4/(0+8),_bit4& (0+7)
  2548  1283  2A88               	goto	u6170
  2549  1284  1283               	bcf	3,5	;RP0=0, select bank0
  2550  1285  1303               	bcf	3,6	;RP1=0, select bank0
  2551  1286  1487               	bsf	7,1	;volatile
  2552  1287  2A8B               	goto	l5187
  2553  1288                     u6170:	
  2554  1288  1283               	bcf	3,5	;RP0=0, select bank0
  2555  1289  1303               	bcf	3,6	;RP1=0, select bank0
  2556  128A  1087               	bcf	7,1	;volatile
  2557  128B                     l5187:	
  2558                           
  2559                           ;lcdv2.h: 247: RD0 = bit5;
  2560  128B  1CD2               	btfss	_bit5/(0+8),_bit5& (0+7)
  2561  128C  2A91               	goto	u6190
  2562  128D  1283               	bcf	3,5	;RP0=0, select bank0
  2563  128E  1303               	bcf	3,6	;RP1=0, select bank0
  2564  128F  1408               	bsf	8,0	;volatile
  2565  1290  2A94               	goto	l5189
  2566  1291                     u6190:	
  2567  1291  1283               	bcf	3,5	;RP0=0, select bank0
  2568  1292  1303               	bcf	3,6	;RP1=0, select bank0
  2569  1293  1008               	bcf	8,0	;volatile
  2570  1294                     l5189:	
  2571                           
  2572                           ;lcdv2.h: 248: RC0 = bit6;
  2573  1294  1D52               	btfss	_bit6/(0+8),_bit6& (0+7)
  2574  1295  2A9A               	goto	u6210
  2575  1296  1283               	bcf	3,5	;RP0=0, select bank0
  2576  1297  1303               	bcf	3,6	;RP1=0, select bank0
  2577  1298  1407               	bsf	7,0	;volatile
  2578  1299  2A9D               	goto	l5191
  2579  129A                     u6210:	
  2580  129A  1283               	bcf	3,5	;RP0=0, select bank0
  2581  129B  1303               	bcf	3,6	;RP1=0, select bank0
  2582  129C  1007               	bcf	7,0	;volatile
  2583  129D                     l5191:	
  2584                           
  2585                           ;lcdv2.h: 249: RD1 = bit7;
  2586  129D  1DD2               	btfss	_bit7/(0+8),_bit7& (0+7)
  2587  129E  2AA3               	goto	u6230
  2588  129F  1283               	bcf	3,5	;RP0=0, select bank0
  2589  12A0  1303               	bcf	3,6	;RP1=0, select bank0
  2590  12A1  1488               	bsf	8,1	;volatile
  2591  12A2  2AA6               	goto	l5193
  2592  12A3                     u6230:	
  2593  12A3  1283               	bcf	3,5	;RP0=0, select bank0
  2594  12A4  1303               	bcf	3,6	;RP1=0, select bank0
  2595  12A5  1088               	bcf	8,1	;volatile
  2596  12A6                     l5193:	
  2597                           
  2598                           ;lcdv2.h: 251: _delay(1);
  2599  12A6  0000               	nop
  2600                           
  2601                           ;lcdv2.h: 252: RC3 = 0;
  2602  12A7  1283               	bcf	3,5	;RP0=0, select bank0
  2603  12A8  1303               	bcf	3,6	;RP1=0, select bank0
  2604  12A9  1187               	bcf	7,3	;volatile
  2605                           
  2606                           ;lcdv2.h: 253: _delay(1);
  2607  12AA  0000               	nop
  2608                           
  2609                           ;lcdv2.h: 257: RC3 = 0;
  2610  12AB  1283               	bcf	3,5	;RP0=0, select bank0
  2611  12AC  1303               	bcf	3,6	;RP1=0, select bank0
  2612  12AD  1187               	bcf	7,3	;volatile
  2613                           
  2614                           ;lcdv2.h: 258: _delay(1);
  2615  12AE  0000               	nop
  2616                           
  2617                           ;lcdv2.h: 259: RC3 = 1;
  2618  12AF  1283               	bcf	3,5	;RP0=0, select bank0
  2619  12B0  1303               	bcf	3,6	;RP1=0, select bank0
  2620  12B1  1587               	bsf	7,3	;volatile
  2621                           
  2622                           ;lcdv2.h: 260: _delay(1);
  2623  12B2  0000               	nop
  2624                           
  2625                           ;lcdv2.h: 262: RC1 = bit0;
  2626  12B3  1283               	bcf	3,5	;RP0=0, select bank0
  2627  12B4  1303               	bcf	3,6	;RP1=0, select bank0
  2628  12B5  1E51               	btfss	_bit0/(0+8),_bit0& (0+7)
  2629  12B6  2ABB               	goto	u6250
  2630  12B7  1283               	bcf	3,5	;RP0=0, select bank0
  2631  12B8  1303               	bcf	3,6	;RP1=0, select bank0
  2632  12B9  1487               	bsf	7,1	;volatile
  2633  12BA  2ABE               	goto	l5209
  2634  12BB                     u6250:	
  2635  12BB  1283               	bcf	3,5	;RP0=0, select bank0
  2636  12BC  1303               	bcf	3,6	;RP1=0, select bank0
  2637  12BD  1087               	bcf	7,1	;volatile
  2638  12BE                     l5209:	
  2639                           
  2640                           ;lcdv2.h: 263: RD0 = bit1;
  2641  12BE  1ED1               	btfss	_bit1/(0+8),_bit1& (0+7)
  2642  12BF  2AC4               	goto	u6270
  2643  12C0  1283               	bcf	3,5	;RP0=0, select bank0
  2644  12C1  1303               	bcf	3,6	;RP1=0, select bank0
  2645  12C2  1408               	bsf	8,0	;volatile
  2646  12C3  2AC7               	goto	l5211
  2647  12C4                     u6270:	
  2648  12C4  1283               	bcf	3,5	;RP0=0, select bank0
  2649  12C5  1303               	bcf	3,6	;RP1=0, select bank0
  2650  12C6  1008               	bcf	8,0	;volatile
  2651  12C7                     l5211:	
  2652                           
  2653                           ;lcdv2.h: 264: RC0 = bit2;
  2654  12C7  1F51               	btfss	_bit2/(0+8),_bit2& (0+7)
  2655  12C8  2ACD               	goto	u6290
  2656  12C9  1283               	bcf	3,5	;RP0=0, select bank0
  2657  12CA  1303               	bcf	3,6	;RP1=0, select bank0
  2658  12CB  1407               	bsf	7,0	;volatile
  2659  12CC  2AD0               	goto	l5213
  2660  12CD                     u6290:	
  2661  12CD  1283               	bcf	3,5	;RP0=0, select bank0
  2662  12CE  1303               	bcf	3,6	;RP1=0, select bank0
  2663  12CF  1007               	bcf	7,0	;volatile
  2664  12D0                     l5213:	
  2665                           
  2666                           ;lcdv2.h: 265: RD1 = bit3;
  2667  12D0  1FD1               	btfss	_bit3/(0+8),_bit3& (0+7)
  2668  12D1  2AD6               	goto	u6310
  2669  12D2  1283               	bcf	3,5	;RP0=0, select bank0
  2670  12D3  1303               	bcf	3,6	;RP1=0, select bank0
  2671  12D4  1488               	bsf	8,1	;volatile
  2672  12D5  2AD9               	goto	l5215
  2673  12D6                     u6310:	
  2674  12D6  1283               	bcf	3,5	;RP0=0, select bank0
  2675  12D7  1303               	bcf	3,6	;RP1=0, select bank0
  2676  12D8  1088               	bcf	8,1	;volatile
  2677  12D9                     l5215:	
  2678                           
  2679                           ;lcdv2.h: 267: _delay(1);
  2680  12D9  0000               	nop
  2681                           
  2682                           ;lcdv2.h: 268: RC3 = 0;
  2683  12DA  1283               	bcf	3,5	;RP0=0, select bank0
  2684  12DB  1303               	bcf	3,6	;RP1=0, select bank0
  2685  12DC  1187               	bcf	7,3	;volatile
  2686                           
  2687                           ;lcdv2.h: 269: _delay(1);
  2688  12DD  0000               	nop
  2689  12DE  0008               	return
  2690  12DF                     __end_of_lcd_add:	
  2691  12DF                     __ptext30:	
  2692 ;; *************** function _position *****************
  2693 ;; Defined at:
  2694 ;;		line 210 in file "lcdv2.h"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;  row             1    wreg     unsigned char 
  2697 ;;  collum          1    6[BANK0 ] unsigned char 
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;  row             1   10[BANK0 ] unsigned char 
  2700 ;;  post            1    9[BANK0 ] unsigned char 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;		None               void
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0, pclath, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 300/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2710 ;;      Params:         0       1       0       0       0
  2711 ;;      Locals:         0       2       0       0       0
  2712 ;;      Temps:          0       2       0       0       0
  2713 ;;      Totals:         0       5       0       0       0
  2714 ;;Total ram usage:        5 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    6
  2717 ;; This function calls:
  2718 ;;		_lcd_add
  2719 ;; This function is called by:
  2720 ;;		_LCD_print_char
  2721 ;;		_main
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           
  2726                           ;psect for function _position
  2727  12DF                     _position:	
  2728                           
  2729                           ;incstack = 0
  2730                           ; Regs used in _position: [wreg+status,2+status,0+pclath+cstack]
  2731                           ;position@row stored from wreg
  2732  12DF  00AA               	movwf	position@row
  2733                           
  2734                           ;lcdv2.h: 212: char post ;
  2735                           ;lcdv2.h: 213: if( row == 1 ) row = 128;
  2736  12E0  0B2A               	decfsz	position@row,w
  2737  12E1  2AE4               	goto	l5225
  2738  12E2  3080               	movlw	128
  2739  12E3  00AA               	movwf	position@row
  2740  12E4                     l5225:	
  2741                           
  2742                           ;lcdv2.h: 214: if( row == 2 ) row = 192;
  2743  12E4  3002               	movlw	2
  2744  12E5  062A               	xorwf	position@row,w
  2745  12E6  1D03               	btfss	3,2
  2746  12E7  2AEA               	goto	l5229
  2747  12E8  30C0               	movlw	192
  2748  12E9  00AA               	movwf	position@row
  2749  12EA                     l5229:	
  2750                           
  2751                           ;lcdv2.h: 215: post = row + collum - 1;
  2752  12EA  0826               	movf	position@collum,w
  2753  12EB  072A               	addwf	position@row,w
  2754  12EC  3EFF               	addlw	255
  2755  12ED  00A9               	movwf	position@post
  2756                           
  2757                           ;lcdv2.h: 216: RC2 = 0;
  2758  12EE  1107               	bcf	7,2	;volatile
  2759                           
  2760                           ;lcdv2.h: 217: _delay(20);
  2761  12EF  3006               	movlw	6
  2762  12F0  00A7               	movwf	??_position
  2763  12F1                     u8847:	
  2764  12F1  0BA7               	decfsz	??_position,f
  2765  12F2  2AF1               	goto	u8847
  2766  12F3  0000               	nop
  2767                           
  2768                           ;lcdv2.h: 218: lcd_data = post ;
  2769  12F4  1283               	bcf	3,5	;RP0=0, select bank0
  2770  12F5  1303               	bcf	3,6	;RP1=0, select bank0
  2771  12F6  0829               	movf	position@post,w
  2772  12F7  00D7               	movwf	_lcd_data
  2773                           
  2774                           ;lcdv2.h: 219: lcd_add();
  2775  12F8  2220  160A  118A   	fcall	_lcd_add
  2776                           
  2777                           ;lcdv2.h: 220: _delay((unsigned long)((10)*(4000000/4000.0)));
  2778  12FB  300D               	movlw	13
  2779  12FC  1283               	bcf	3,5	;RP0=0, select bank0
  2780  12FD  1303               	bcf	3,6	;RP1=0, select bank0
  2781  12FE  00A8               	movwf	??_position+1
  2782  12FF  30FB               	movlw	251
  2783  1300  00A7               	movwf	??_position
  2784  1301                     u8857:	
  2785  1301  0BA7               	decfsz	??_position,f
  2786  1302  2B01               	goto	u8857
  2787  1303  0BA8               	decfsz	??_position+1,f
  2788  1304  2B01               	goto	u8857
  2789  1305  2B06               	nop2
  2790  1306  0008               	return
  2791  1307                     __end_of_position:	
  2792                           
  2793                           	psect	text3
  2794  1B9B                     __ptext3:	
  2795 ;; *************** function _lcd_init *****************
  2796 ;; Defined at:
  2797 ;;		line 60 in file "lcdv2.h"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;  DelayLCD        2    5[BANK0 ] unsigned int 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;		None               void
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0
  2806 ;; Tracked objects:
  2807 ;;		On entry : 300/100
  2808 ;;		On exit  : 300/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2811 ;;      Params:         0       0       0       0       0
  2812 ;;      Locals:         0       2       0       0       0
  2813 ;;      Temps:          0       0       0       0       0
  2814 ;;      Totals:         0       2       0       0       0
  2815 ;;Total ram usage:        2 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    5
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_main
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           
  2826                           ;psect for function _lcd_init
  2827  1B9B                     _lcd_init:	
  2828                           
  2829                           ;lcdv2.h: 63: RC3 = 0;
  2830                           
  2831                           ;incstack = 0
  2832                           ; Regs used in _lcd_init: [wreg+status,2+status,0]
  2833  1B9B  1283               	bcf	3,5	;RP0=0, select bank0
  2834  1B9C  1187               	bcf	7,3	;volatile
  2835                           
  2836                           ;lcdv2.h: 65: unsigned int DelayLCD;
  2837                           ;lcdv2.h: 67: RC2 = 0;
  2838  1B9D  1107               	bcf	7,2	;volatile
  2839                           
  2840                           ;lcdv2.h: 68: RD1 = 0;
  2841  1B9E  1088               	bcf	8,1	;volatile
  2842                           
  2843                           ;lcdv2.h: 69: RC0 = 0;
  2844  1B9F  1007               	bcf	7,0	;volatile
  2845                           
  2846                           ;lcdv2.h: 70: RD0 = 1;
  2847  1BA0  1408               	bsf	8,0	;volatile
  2848                           
  2849                           ;lcdv2.h: 71: RC1 = 0;
  2850  1BA1  1087               	bcf	7,1	;volatile
  2851                           
  2852                           ;lcdv2.h: 72: RC3 = 1;
  2853  1BA2  1587               	bsf	7,3	;volatile
  2854                           
  2855                           ;lcdv2.h: 73: RC3 = 0;
  2856  1BA3  1187               	bcf	7,3	;volatile
  2857                           
  2858                           ;lcdv2.h: 74: RD1 = 1;
  2859  1BA4  1488               	bsf	8,1	;volatile
  2860                           
  2861                           ;lcdv2.h: 75: RC0 = 0;
  2862  1BA5  1007               	bcf	7,0	;volatile
  2863                           
  2864                           ;lcdv2.h: 76: RD0 = 0;
  2865                           
  2866                           ;lcdv2.h: 77: RC1 = 0;
  2867                           
  2868                           ;lcdv2.h: 78: RC3 = 1;
  2869                           
  2870                           ;lcdv2.h: 79: RC3 = 0;
  2871                           
  2872                           ;lcdv2.h: 80: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  2873                           
  2874                           ;lcdv2.h: 83: RC2 = 0;
  2875                           
  2876                           ;lcdv2.h: 84: RD1 = 0;
  2877                           
  2878                           ;lcdv2.h: 85: RC0 = 0;
  2879  1BA6  23E5  160A  158A   	fcall	PL2	;call to abstracted procedure
  2880                           
  2881                           ;lcdv2.h: 86: RD0 = 1;
  2882  1BA9  1408               	bsf	8,0	;volatile
  2883                           
  2884                           ;lcdv2.h: 87: RC1 = 0;
  2885  1BAA  1087               	bcf	7,1	;volatile
  2886                           
  2887                           ;lcdv2.h: 88: RC3 = 1;
  2888  1BAB  1587               	bsf	7,3	;volatile
  2889                           
  2890                           ;lcdv2.h: 89: RC3 = 0;
  2891  1BAC  1187               	bcf	7,3	;volatile
  2892                           
  2893                           ;lcdv2.h: 90: RD1 = 1;
  2894  1BAD  1488               	bsf	8,1	;volatile
  2895                           
  2896                           ;lcdv2.h: 91: RC0 = 0;
  2897  1BAE  1007               	bcf	7,0	;volatile
  2898                           
  2899                           ;lcdv2.h: 92: RD0 = 0;
  2900                           
  2901                           ;lcdv2.h: 93: RC1 = 0;
  2902                           
  2903                           ;lcdv2.h: 94: RC3 = 1;
  2904                           
  2905                           ;lcdv2.h: 95: RC3 = 0;
  2906                           
  2907                           ;lcdv2.h: 96: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  2908                           
  2909                           ;lcdv2.h: 99: RC2 = 0;
  2910                           
  2911                           ;lcdv2.h: 100: RD1 = 0;
  2912                           
  2913                           ;lcdv2.h: 101: RC0 = 0;
  2914  1BAF  23E5  160A  158A   	fcall	PL2	;call to abstracted procedure
  2915                           
  2916                           ;lcdv2.h: 102: RD0 = 0;
  2917  1BB2  1008               	bcf	8,0	;volatile
  2918                           
  2919                           ;lcdv2.h: 103: RC1 = 0;
  2920  1BB3  1087               	bcf	7,1	;volatile
  2921                           
  2922                           ;lcdv2.h: 104: RC3 = 1;
  2923  1BB4  1587               	bsf	7,3	;volatile
  2924                           
  2925                           ;lcdv2.h: 105: RC3 = 0;
  2926  1BB5  1187               	bcf	7,3	;volatile
  2927                           
  2928                           ;lcdv2.h: 106: RD1 = 0;
  2929  1BB6  1088               	bcf	8,1	;volatile
  2930                           
  2931                           ;lcdv2.h: 107: RC0 = 1;
  2932  1BB7  1407               	bsf	7,0	;volatile
  2933                           
  2934                           ;lcdv2.h: 108: RD0 = 1;
  2935  1BB8  1408               	bsf	8,0	;volatile
  2936                           
  2937                           ;lcdv2.h: 109: RC1 = 0;
  2938  1BB9  1087               	bcf	7,1	;volatile
  2939                           
  2940                           ;lcdv2.h: 110: RC3 = 1;
  2941  1BBA  1587               	bsf	7,3	;volatile
  2942                           
  2943                           ;lcdv2.h: 111: RC3 = 0;
  2944  1BBB  1187               	bcf	7,3	;volatile
  2945                           
  2946                           ;lcdv2.h: 112: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  2947  1BBC  01A5               	clrf	lcd_init@DelayLCD
  2948  1BBD  01A6               	clrf	lcd_init@DelayLCD+1
  2949  1BBE                     l5997:	
  2950  1BBE  23F9  160A  158A   	fcall	PL8	;call to abstracted procedure
  2951  1BC1  1903               	skipnz
  2952  1BC2  0225               	subwf	lcd_init@DelayLCD,w
  2953  1BC3  1C03               	skipc
  2954  1BC4  2BBE               	goto	l5997
  2955                           
  2956                           ;lcdv2.h: 115: RC2 = 0;
  2957  1BC5  1107               	bcf	7,2	;volatile
  2958                           
  2959                           ;lcdv2.h: 116: RD1 = 0;
  2960  1BC6  1088               	bcf	8,1	;volatile
  2961                           
  2962                           ;lcdv2.h: 117: RC0 = 0;
  2963  1BC7  1007               	bcf	7,0	;volatile
  2964                           
  2965                           ;lcdv2.h: 118: RD0 = 0;
  2966  1BC8  1008               	bcf	8,0	;volatile
  2967                           
  2968                           ;lcdv2.h: 119: RC1 = 0;
  2969  1BC9  1087               	bcf	7,1	;volatile
  2970                           
  2971                           ;lcdv2.h: 120: RC3 = 1;
  2972  1BCA  1587               	bsf	7,3	;volatile
  2973                           
  2974                           ;lcdv2.h: 121: RC3 = 0;
  2975  1BCB  1187               	bcf	7,3	;volatile
  2976                           
  2977                           ;lcdv2.h: 122: RD1 = 1;
  2978  1BCC  1488               	bsf	8,1	;volatile
  2979                           
  2980                           ;lcdv2.h: 123: RC0 = 1;
  2981  1BCD  1407               	bsf	7,0	;volatile
  2982                           
  2983                           ;lcdv2.h: 124: RD0 = 0;
  2984                           
  2985                           ;lcdv2.h: 125: RC1 = 0;
  2986                           
  2987                           ;lcdv2.h: 126: RC3 = 1;
  2988                           
  2989                           ;lcdv2.h: 127: RC3 = 0;
  2990                           
  2991                           ;lcdv2.h: 128: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  2992                           
  2993                           ;lcdv2.h: 131: RC2 = 0;
  2994                           
  2995                           ;lcdv2.h: 132: RD1 = 0;
  2996                           
  2997                           ;lcdv2.h: 133: RC0 = 0;
  2998  1BCE  23E5  160A  158A   	fcall	PL2	;call to abstracted procedure
  2999                           
  3000                           ;lcdv2.h: 134: RD0 = 0;
  3001  1BD1  1008               	bcf	8,0	;volatile
  3002                           
  3003                           ;lcdv2.h: 135: RC1 = 0;
  3004  1BD2  1087               	bcf	7,1	;volatile
  3005                           
  3006                           ;lcdv2.h: 136: RC3 = 1;
  3007  1BD3  1587               	bsf	7,3	;volatile
  3008                           
  3009                           ;lcdv2.h: 137: RC3 = 0;
  3010  1BD4  1187               	bcf	7,3	;volatile
  3011                           
  3012                           ;lcdv2.h: 138: RD1 = 0;
  3013  1BD5  1088               	bcf	8,1	;volatile
  3014                           
  3015                           ;lcdv2.h: 139: RC0 = 0;
  3016  1BD6  1007               	bcf	7,0	;volatile
  3017                           
  3018                           ;lcdv2.h: 140: RD0 = 0;
  3019  1BD7  1008               	bcf	8,0	;volatile
  3020                           
  3021                           ;lcdv2.h: 141: RC1 = 1;
  3022  1BD8  1487               	bsf	7,1	;volatile
  3023                           
  3024                           ;lcdv2.h: 142: RC3 = 1;
  3025  1BD9  1587               	bsf	7,3	;volatile
  3026                           
  3027                           ;lcdv2.h: 143: RC3 = 0;
  3028  1BDA  1187               	bcf	7,3	;volatile
  3029                           
  3030                           ;lcdv2.h: 144: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  3031  1BDB  01A5               	clrf	lcd_init@DelayLCD
  3032  1BDC  01A6               	clrf	lcd_init@DelayLCD+1
  3033  1BDD                     l6017:	
  3034  1BDD  23F9  160A  158A   	fcall	PL8	;call to abstracted procedure
  3035  1BE0  1903               	skipnz
  3036  1BE1  0225               	subwf	lcd_init@DelayLCD,w
  3037  1BE2  1803               	btfsc	3,0
  3038  1BE3  0008               	return
  3039  1BE4  2BDD               	goto	l6017
  3040  1BE5                     __end_of_lcd_init:	
  3041  1BE5                     PL2:	
  3042  1BE5  1008               	bcf	8,0	;volatile
  3043  1BE6  1087               	bcf	7,1	;volatile
  3044  1BE7  1587               	bsf	7,3	;volatile
  3045  1BE8  1187               	bcf	7,3	;volatile
  3046  1BE9  01A5               	clrf	lcd_init@DelayLCD
  3047  1BEA  01A6               	clrf	lcd_init@DelayLCD+1
  3048  1BEB                     l5977:	
  3049  1BEB  0AA5               	incf	lcd_init@DelayLCD,f
  3050  1BEC  1903               	skipnz
  3051  1BED  0AA6               	incf	lcd_init@DelayLCD+1,f
  3052  1BEE  3009               	movlw	9
  3053  1BEF  0226               	subwf	lcd_init@DelayLCD+1,w
  3054  1BF0  30C4               	movlw	196
  3055  1BF1  1903               	skipnz
  3056  1BF2  0225               	subwf	lcd_init@DelayLCD,w
  3057  1BF3  1C03               	skipc
  3058  1BF4  2BEB               	goto	l5977
  3059  1BF5  1107               	bcf	7,2	;volatile
  3060  1BF6  1088               	bcf	8,1	;volatile
  3061  1BF7  1007               	bcf	7,0	;volatile
  3062  1BF8  0008               	return
  3063  1BF9                     __end_ofPL2:	
  3064  1BF9                     PL8:	
  3065  1BF9  0AA5               	incf	lcd_init@DelayLCD,f
  3066  1BFA  1903               	skipnz
  3067  1BFB  0AA6               	incf	lcd_init@DelayLCD+1,f
  3068  1BFC  3009               	movlw	9
  3069  1BFD  0226               	subwf	lcd_init@DelayLCD+1,w
  3070  1BFE  34C4               	retlw	196
  3071  1BFF                     __end_ofPL8:	
  3072                           
  3073                           	psect	text4
  3074  1AD2                     __ptext4:	
  3075 ;; *************** function _enableInterrupt *****************
  3076 ;; Defined at:
  3077 ;;		line 7 in file "interrupts.h"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;		None
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;		None
  3082 ;; Return value:  Size  Location     Type
  3083 ;;		None               void
  3084 ;; Registers used:
  3085 ;;		None
  3086 ;; Tracked objects:
  3087 ;;		On entry : 300/100
  3088 ;;		On exit  : 300/100
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3091 ;;      Params:         0       0       0       0       0
  3092 ;;      Locals:         0       0       0       0       0
  3093 ;;      Temps:          0       0       0       0       0
  3094 ;;      Totals:         0       0       0       0       0
  3095 ;;Total ram usage:        0 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    5
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_main
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function _enableInterrupt
  3107  1AD2                     _enableInterrupt:	
  3108                           
  3109                           ;interrupts.h: 9: RBIE = 0;
  3110                           
  3111                           ;incstack = 0
  3112                           ; Regs used in _enableInterrupt: []
  3113  1AD2  118B               	bcf	11,3	;volatile
  3114                           
  3115                           ;interrupts.h: 10: INTE = 0;
  3116  1AD3  120B               	bcf	11,4	;volatile
  3117                           
  3118                           ;interrupts.h: 12: PSPIE = 0;
  3119  1AD4  138C               	bcf	12,7	;volatile
  3120                           
  3121                           ;interrupts.h: 13: ADIE = 0;
  3122  1AD5  130C               	bcf	12,6	;volatile
  3123                           
  3124                           ;interrupts.h: 15: TXIE = 0;
  3125  1AD6  120C               	bcf	12,4	;volatile
  3126                           
  3127                           ;interrupts.h: 16: RCIE = 1;
  3128  1AD7  168C               	bsf	12,5	;volatile
  3129                           
  3130                           ;interrupts.h: 18: SSPIE = 0;
  3131  1AD8  118C               	bcf	12,3	;volatile
  3132                           
  3133                           ;interrupts.h: 19: CCP1IE = 0;
  3134  1AD9  110C               	bcf	12,2	;volatile
  3135                           
  3136                           ;interrupts.h: 21: TMR1IE = 1;
  3137  1ADA  140C               	bsf	12,0	;volatile
  3138                           
  3139                           ;interrupts.h: 22: TMR2IE = 0;
  3140  1ADB  108C               	bcf	12,1	;volatile
  3141                           
  3142                           ;interrupts.h: 23: T0IE = 0;
  3143  1ADC  128B               	bcf	11,5	;volatile
  3144                           
  3145                           ;interrupts.h: 25: EEIE = 0;
  3146  1ADD  120D               	bcf	13,4	;volatile
  3147                           
  3148                           ;interrupts.h: 26: BCLIE = 0;
  3149  1ADE  118D               	bcf	13,3	;volatile
  3150                           
  3151                           ;interrupts.h: 27: CCP2IE = 0;
  3152  1ADF  100D               	bcf	13,0	;volatile
  3153                           
  3154                           ;interrupts.h: 30: GIE = 1;
  3155  1AE0  178B               	bsf	11,7	;volatile
  3156                           
  3157                           ;interrupts.h: 31: PEIE = 1;
  3158  1AE1  170B               	bsf	11,6	;volatile
  3159  1AE2  0008               	return
  3160  1AE3                     __end_of_enableInterrupt:	
  3161                           
  3162                           	psect	text5
  3163  001A                     __ptext5:	
  3164 ;; *************** function _eeprom_write *****************
  3165 ;; Defined at:
  3166 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic\eewrite.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;  addr            1    wreg     unsigned char 
  3169 ;;  value           1    8[BANK0 ] unsigned char 
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;  addr            1    9[BANK0 ] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;		None               void
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0
  3176 ;; Tracked objects:
  3177 ;;		On entry : 300/100
  3178 ;;		On exit  : 300/300
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3181 ;;      Params:         0       1       0       0       0
  3182 ;;      Locals:         0       1       0       0       0
  3183 ;;      Temps:          0       0       0       0       0
  3184 ;;      Totals:         0       2       0       0       0
  3185 ;;Total ram usage:        2 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    5
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_main
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function _eeprom_write
  3197  001A                     _eeprom_write:	
  3198                           
  3199                           ;incstack = 0
  3200                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3201                           ;eeprom_write@addr stored from wreg
  3202  001A  1283               	bcf	3,5	;RP0=0, select bank0
  3203  001B  00A9               	movwf	eeprom_write@addr
  3204  001C                     l755:	
  3205  001C  1683               	bsf	3,5	;RP0=1, select bank3
  3206  001D  1703               	bsf	3,6	;RP1=1, select bank3
  3207  001E  188C               	btfsc	12,1	;volsfr
  3208  001F  281C               	goto	l755
  3209  0020  1283               	bcf	3,5	;RP0=0, select bank0
  3210  0021  1303               	bcf	3,6	;RP1=0, select bank0
  3211  0022  0829               	movf	eeprom_write@addr,w
  3212  0023  1703               	bsf	3,6	;RP1=1, select bank2
  3213  0024  008D               	movwf	13	;volatile
  3214  0025  1303               	bcf	3,6	;RP1=0, select bank0
  3215  0026  0828               	movf	eeprom_write@value,w
  3216  0027  1703               	bsf	3,6	;RP1=1, select bank2
  3217  0028  008C               	movwf	12	;volatile
  3218  0029  303F               	movlw	63
  3219  002A  1683               	bsf	3,5	;RP0=1, select bank3
  3220  002B  058C               	andwf	12,f	;volsfr
  3221  002C  1003               	bcf	3,0	;volatile
  3222  002D  1B8B               	btfsc	11,7	;volatile
  3223  002E  1403               	bsf	3,0	;volatile
  3224  002F  138B               	bcf	11,7	;volatile
  3225  0030  150C               	bsf	12,2	;volsfr
  3226  0031  3055               	movlw	85
  3227  0032  008D               	movwf	13	;volsfr
  3228  0033  30AA               	movlw	170
  3229  0034  008D               	movwf	13	;volsfr
  3230  0035  148C               	bsf	12,1	;volsfr
  3231  0036  110C               	bcf	12,2	;volsfr
  3232  0037  1803               	btfsc	3,0	;volatile
  3233  0038  178B               	bsf	11,7	;volatile
  3234  0039  0008               	return
  3235  003A                     __end_of_eeprom_write:	
  3236                           
  3237                           	psect	text6
  3238  1B16                     __ptext6:	
  3239 ;; *************** function _eeprom_read *****************
  3240 ;; Defined at:
  3241 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic\eeread.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  addr            1    wreg     unsigned char 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  addr            1    5[BANK0 ] unsigned char 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      unsigned char 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0
  3250 ;; Tracked objects:
  3251 ;;		On entry : 200/100
  3252 ;;		On exit  : 300/200
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3255 ;;      Params:         0       0       0       0       0
  3256 ;;      Locals:         0       1       0       0       0
  3257 ;;      Temps:          0       0       0       0       0
  3258 ;;      Totals:         0       1       0       0       0
  3259 ;;Total ram usage:        1 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    5
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_main
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           
  3270                           ;psect for function _eeprom_read
  3271  1B16                     _eeprom_read:	
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  3275                           ;eeprom_read@addr stored from wreg
  3276  1B16  1283               	bcf	3,5	;RP0=0, select bank0
  3277  1B17  00A5               	movwf	eeprom_read@addr
  3278  1B18  2B1B               	goto	l733
  3279  1B19                     u8021:	
  3280  1B19  1283               	bcf	3,5	;RP0=0, select bank0
  3281  1B1A  1303               	bcf	3,6	;RP1=0, select bank0
  3282  1B1B                     l733:	
  3283  1B1B  0064               	clrwdt	;# 
  3284  1B1C  1683               	bsf	3,5	;RP0=1, select bank3
  3285  1B1D  1703               	bsf	3,6	;RP1=1, select bank3
  3286  1B1E  188C               	btfsc	12,1	;volsfr
  3287  1B1F  2B19               	goto	u8021
  3288  1B20  1283               	bcf	3,5	;RP0=0, select bank0
  3289  1B21  1303               	bcf	3,6	;RP1=0, select bank0
  3290  1B22  0825               	movf	eeprom_read@addr,w
  3291  1B23  1703               	bsf	3,6	;RP1=1, select bank2
  3292  1B24  008D               	movwf	13	;volatile
  3293  1B25  303F               	movlw	63
  3294  1B26  1683               	bsf	3,5	;RP0=1, select bank3
  3295  1B27  058C               	andwf	12,f	;volsfr
  3296  1B28  140C               	bsf	12,0	;volsfr
  3297  1B29  1003               	clrc
  3298  1B2A  180C               	btfsc	12,0	;volsfr
  3299  1B2B  1403               	setc
  3300  1B2C  1803               	skipnc
  3301  1B2D  3001               	movlw	1
  3302  1B2E  1283               	bcf	3,5	;RP0=0, select bank2
  3303  1B2F  080C               	movf	12,w	;volatile
  3304  1B30  0008               	return
  3305  1B31                     __end_of_eeprom_read:	
  3306                           
  3307                           	psect	text8
  3308  0014                     __ptext8:	
  3309 ;; *************** function _atod_init *****************
  3310 ;; Defined at:
  3311 ;;		line 8 in file "a2d.h"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;		None               void
  3318 ;; Registers used:
  3319 ;;		wreg
  3320 ;; Tracked objects:
  3321 ;;		On entry : B00/0
  3322 ;;		On exit  : B00/100
  3323 ;;		Unchanged: 800/0
  3324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3325 ;;      Params:         0       0       0       0       0
  3326 ;;      Locals:         0       0       0       0       0
  3327 ;;      Temps:          0       0       0       0       0
  3328 ;;      Totals:         0       0       0       0       0
  3329 ;;Total ram usage:        0 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    5
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_main
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           
  3340                           ;psect for function _atod_init
  3341  0014                     _atod_init:	
  3342                           
  3343                           ;a2d.h: 9: ADCON0 = 0b01000010;
  3344                           
  3345                           ;incstack = 0
  3346                           ; Regs used in _atod_init: [wreg]
  3347  0014  3042               	movlw	66
  3348  0015  009F               	movwf	31	;volatile
  3349                           
  3350                           ;a2d.h: 10: ADCON1 = 0b10000100;
  3351  0016  3084               	movlw	132
  3352  0017  1683               	bsf	3,5	;RP0=1, select bank1
  3353  0018  009F               	movwf	31	;volatile
  3354  0019  0008               	return
  3355  001A                     __end_of_atod_init:	
  3356                           
  3357                           	psect	text15
  3358  1B31                     __ptext15:	
  3359 ;; *************** function ___ltmod *****************
  3360 ;; Defined at:
  3361 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ltmod.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  divisor         3    5[BANK0 ] unsigned um
  3364 ;;  dividend        3    8[BANK0 ] unsigned um
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  counter         1   11[BANK0 ] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  3    5[BANK0 ] unsigned um
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0
  3371 ;; Tracked objects:
  3372 ;;		On entry : 300/0
  3373 ;;		On exit  : 300/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3376 ;;      Params:         0       6       0       0       0
  3377 ;;      Locals:         0       1       0       0       0
  3378 ;;      Temps:          0       0       0       0       0
  3379 ;;      Totals:         0       7       0       0       0
  3380 ;;Total ram usage:        7 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    5
  3383 ;; This function calls:
  3384 ;;		Nothing
  3385 ;; This function is called by:
  3386 ;;		_main
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           
  3391                           ;psect for function ___ltmod
  3392  1B31                     ___ltmod:	
  3393                           
  3394                           ;incstack = 0
  3395                           ; Regs used in ___ltmod: [wreg+status,2+status,0]
  3396  1B31  0827               	movf	___ltmod@divisor+2,w
  3397  1B32  0426               	iorwf	___ltmod@divisor+1,w
  3398  1B33  0425               	iorwf	___ltmod@divisor,w
  3399  1B34  1903               	skipnz
  3400  1B35  2B5B               	goto	l6397
  3401  1B36  01AB               	clrf	___ltmod@counter
  3402  1B37                     L5:	
  3403  1B37  0AAB               	incf	___ltmod@counter,f
  3404  1B38  1BA7               	btfsc	___ltmod@divisor+2,7
  3405  1B39  2B3F               	goto	l6389
  3406  1B3A  1003               	clrc
  3407  1B3B  0DA5               	rlf	___ltmod@divisor,f
  3408  1B3C  0DA6               	rlf	___ltmod@divisor+1,f
  3409  1B3D  0DA7               	rlf	___ltmod@divisor+2,f
  3410  1B3E  2B37               	goto	L5
  3411  1B3F                     l6389:	
  3412  1B3F  0827               	movf	___ltmod@divisor+2,w
  3413  1B40  022A               	subwf	___ltmod@dividend+2,w
  3414  1B41  1D03               	skipz
  3415  1B42  2B49               	goto	u8215
  3416  1B43  0826               	movf	___ltmod@divisor+1,w
  3417  1B44  0229               	subwf	___ltmod@dividend+1,w
  3418  1B45  1D03               	skipz
  3419  1B46  2B49               	goto	u8215
  3420  1B47  0825               	movf	___ltmod@divisor,w
  3421  1B48  0228               	subwf	___ltmod@dividend,w
  3422  1B49                     u8215:	
  3423  1B49  1C03               	skipc
  3424  1B4A  2B56               	goto	L6
  3425  1B4B  0825               	movf	___ltmod@divisor,w
  3426  1B4C  02A8               	subwf	___ltmod@dividend,f
  3427  1B4D  0826               	movf	___ltmod@divisor+1,w
  3428  1B4E  1C03               	skipc
  3429  1B4F  0F26               	incfsz	___ltmod@divisor+1,w
  3430  1B50  02A9               	subwf	___ltmod@dividend+1,f
  3431  1B51  0827               	movf	___ltmod@divisor+2,w
  3432  1B52  1C03               	skipc
  3433  1B53  0A27               	incf	___ltmod@divisor+2,w
  3434  1B54  02AA               	subwf	___ltmod@dividend+2,f
  3435  1B55  1003               	clrc
  3436  1B56                     L6:	
  3437  1B56  0CA7               	rrf	___ltmod@divisor+2,f
  3438  1B57  0CA6               	rrf	___ltmod@divisor+1,f
  3439  1B58  0CA5               	rrf	___ltmod@divisor,f
  3440  1B59  0BAB               	decfsz	___ltmod@counter,f
  3441  1B5A  2B3F               	goto	l6389
  3442  1B5B                     l6397:	
  3443  1B5B  0828               	movf	___ltmod@dividend,w
  3444  1B5C  00A5               	movwf	?___ltmod
  3445  1B5D  0829               	movf	___ltmod@dividend+1,w
  3446  1B5E  00A6               	movwf	?___ltmod+1
  3447  1B5F  082A               	movf	___ltmod@dividend+2,w
  3448  1B60  00A7               	movwf	?___ltmod+2
  3449  1B61  0008               	return
  3450  1B62                     __end_of___ltmod:	
  3451                           
  3452                           	psect	text16
  3453  1B62                     __ptext16:	
  3454 ;; *************** function ___ltdiv *****************
  3455 ;; Defined at:
  3456 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ltdiv.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  divisor         3    5[BANK0 ] unsigned um
  3459 ;;  dividend        3    8[BANK0 ] unsigned um
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  quotient        3   11[BANK0 ] unsigned um
  3462 ;;  counter         1   14[BANK0 ] unsigned char 
  3463 ;; Return value:  Size  Location     Type
  3464 ;;                  3    5[BANK0 ] unsigned um
  3465 ;; Registers used:
  3466 ;;		wreg, status,2, status,0
  3467 ;; Tracked objects:
  3468 ;;		On entry : 300/0
  3469 ;;		On exit  : 300/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3472 ;;      Params:         0       6       0       0       0
  3473 ;;      Locals:         0       4       0       0       0
  3474 ;;      Temps:          0       0       0       0       0
  3475 ;;      Totals:         0      10       0       0       0
  3476 ;;Total ram usage:       10 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:    5
  3479 ;; This function calls:
  3480 ;;		Nothing
  3481 ;; This function is called by:
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function ___ltdiv
  3488  1B62                     ___ltdiv:	
  3489                           
  3490                           ;incstack = 0
  3491                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  3492  1B62  01AB               	clrf	___ltdiv@quotient
  3493  1B63  01AC               	clrf	___ltdiv@quotient+1
  3494  1B64  01AD               	clrf	___ltdiv@quotient+2
  3495  1B65  0827               	movf	___ltdiv@divisor+2,w
  3496  1B66  0426               	iorwf	___ltdiv@divisor+1,w
  3497  1B67  0425               	iorwf	___ltdiv@divisor,w
  3498  1B68  1903               	skipnz
  3499  1B69  2B94               	goto	l6377
  3500  1B6A  01AE               	clrf	___ltdiv@counter
  3501  1B6B                     L7:	
  3502  1B6B  0AAE               	incf	___ltdiv@counter,f
  3503  1B6C  1BA7               	btfsc	___ltdiv@divisor+2,7
  3504  1B6D  2B73               	goto	l6365
  3505  1B6E  1003               	clrc
  3506  1B6F  0DA5               	rlf	___ltdiv@divisor,f
  3507  1B70  0DA6               	rlf	___ltdiv@divisor+1,f
  3508  1B71  0DA7               	rlf	___ltdiv@divisor+2,f
  3509  1B72  2B6B               	goto	L7
  3510  1B73                     l6365:	
  3511  1B73  1003               	clrc
  3512  1B74  0DAB               	rlf	___ltdiv@quotient,f
  3513  1B75  0DAC               	rlf	___ltdiv@quotient+1,f
  3514  1B76  0DAD               	rlf	___ltdiv@quotient+2,f
  3515  1B77  0827               	movf	___ltdiv@divisor+2,w
  3516  1B78  022A               	subwf	___ltdiv@dividend+2,w
  3517  1B79  1D03               	skipz
  3518  1B7A  2B81               	goto	u8175
  3519  1B7B  0826               	movf	___ltdiv@divisor+1,w
  3520  1B7C  0229               	subwf	___ltdiv@dividend+1,w
  3521  1B7D  1D03               	skipz
  3522  1B7E  2B81               	goto	u8175
  3523  1B7F  0825               	movf	___ltdiv@divisor,w
  3524  1B80  0228               	subwf	___ltdiv@dividend,w
  3525  1B81                     u8175:	
  3526  1B81  1C03               	skipc
  3527  1B82  2B8F               	goto	L8
  3528  1B83  0825               	movf	___ltdiv@divisor,w
  3529  1B84  02A8               	subwf	___ltdiv@dividend,f
  3530  1B85  0826               	movf	___ltdiv@divisor+1,w
  3531  1B86  1C03               	skipc
  3532  1B87  0F26               	incfsz	___ltdiv@divisor+1,w
  3533  1B88  02A9               	subwf	___ltdiv@dividend+1,f
  3534  1B89  0827               	movf	___ltdiv@divisor+2,w
  3535  1B8A  1C03               	skipc
  3536  1B8B  0A27               	incf	___ltdiv@divisor+2,w
  3537  1B8C  02AA               	subwf	___ltdiv@dividend+2,f
  3538  1B8D  142B               	bsf	___ltdiv@quotient,0
  3539  1B8E  1003               	clrc
  3540  1B8F                     L8:	
  3541  1B8F  0CA7               	rrf	___ltdiv@divisor+2,f
  3542  1B90  0CA6               	rrf	___ltdiv@divisor+1,f
  3543  1B91  0CA5               	rrf	___ltdiv@divisor,f
  3544  1B92  0BAE               	decfsz	___ltdiv@counter,f
  3545  1B93  2B73               	goto	l6365
  3546  1B94                     l6377:	
  3547  1B94  082B               	movf	___ltdiv@quotient,w
  3548  1B95  00A5               	movwf	?___ltdiv
  3549  1B96  082C               	movf	___ltdiv@quotient+1,w
  3550  1B97  00A6               	movwf	?___ltdiv+1
  3551  1B98  082D               	movf	___ltdiv@quotient+2,w
  3552  1B99  00A7               	movwf	?___ltdiv+2
  3553  1B9A  0008               	return
  3554  1B9B                     __end_of___ltdiv:	
  3555                           
  3556                           	psect	text17
  3557  0A63                     __ptext17:	
  3558 ;; *************** function ___lbtoft *****************
  3559 ;; Defined at:
  3560 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  c               1    wreg     unsigned char 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  c               1   17[BANK0 ] unsigned char 
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  3   13[BANK0 ] float 
  3567 ;; Registers used:
  3568 ;;		wreg, status,2, status,0, pclath, cstack
  3569 ;; Tracked objects:
  3570 ;;		On entry : 300/200
  3571 ;;		On exit  : 300/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3574 ;;      Params:         0       4       0       0       0
  3575 ;;      Locals:         0       1       0       0       0
  3576 ;;      Temps:          0       0       0       0       0
  3577 ;;      Totals:         0       5       0       0       0
  3578 ;;Total ram usage:        5 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; Hardware stack levels required when called:    6
  3581 ;; This function calls:
  3582 ;;		___ftpack
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           
  3589                           ;psect for function ___lbtoft
  3590  0A63                     ___lbtoft:	
  3591                           
  3592                           ;incstack = 0
  3593                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3594                           ;___lbtoft@c stored from wreg
  3595  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  3596  0A64  00B1               	movwf	___lbtoft@c
  3597  0A65  00A5               	movwf	___ftpack@arg
  3598  0A66  308E               	movlw	142
  3599  0A67  01A6               	clrf	___ftpack@arg+1
  3600  0A68  01A7               	clrf	___ftpack@arg+2
  3601  0A69  00A8               	movwf	___ftpack@exp
  3602  0A6A  01A9               	clrf	___ftpack@sign
  3603  0A6B  248D               	fcall	___ftpack
  3604  0A6C  0825               	movf	?___ftpack,w
  3605  0A6D  00AD               	movwf	?___lbtoft
  3606  0A6E  0826               	movf	?___ftpack+1,w
  3607  0A6F  00AE               	movwf	?___lbtoft+1
  3608  0A70  0827               	movf	?___ftpack+2,w
  3609  0A71  00AF               	movwf	?___lbtoft+2
  3610  0A72  0008               	return
  3611  0A73                     __end_of___lbtoft:	
  3612  0A73                     __ptext18:	
  3613 ;; *************** function ___ftdiv *****************
  3614 ;; Defined at:
  3615 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  f2              3   16[BANK0 ] float 
  3618 ;;  f1              3   19[BANK0 ] float 
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  f3              3   26[BANK0 ] float 
  3621 ;;  sign            1   30[BANK0 ] unsigned char 
  3622 ;;  exp             1   29[BANK0 ] unsigned char 
  3623 ;;  cntr            1   25[BANK0 ] unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  3   16[BANK0 ] float 
  3626 ;; Registers used:
  3627 ;;		wreg, status,2, status,0, pclath, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 300/0
  3630 ;;		On exit  : 300/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3633 ;;      Params:         0       6       0       0       0
  3634 ;;      Locals:         0       6       0       0       0
  3635 ;;      Temps:          0       3       0       0       0
  3636 ;;      Totals:         0      15       0       0       0
  3637 ;;Total ram usage:       15 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    6
  3640 ;; This function calls:
  3641 ;;		___ftpack
  3642 ;; This function is called by:
  3643 ;;		_main
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           
  3648                           ;psect for function ___ftdiv
  3649  0A73                     ___ftdiv:	
  3650                           
  3651                           ;incstack = 0
  3652                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3653  0A73  0833               	movf	___ftdiv@f1,w
  3654  0A74  00B6               	movwf	??___ftdiv
  3655  0A75  0834               	movf	___ftdiv@f1+1,w
  3656  0A76  00B7               	movwf	??___ftdiv+1
  3657  0A77  0835               	movf	___ftdiv@f1+2,w
  3658  0A78  00B8               	movwf	??___ftdiv+2
  3659  0A79  1003               	clrc
  3660  0A7A  0D37               	rlf	??___ftdiv+1,w
  3661  0A7B  0D38               	rlf	??___ftdiv+2,w
  3662  0A7C  00BD               	movwf	___ftdiv@exp
  3663  0A7D  083D               	movf	___ftdiv@exp,w
  3664  0A7E  1D03               	btfss	3,2
  3665  0A7F  2A84               	goto	l6315
  3666  0A80  01B0               	clrf	?___ftdiv
  3667  0A81  01B1               	clrf	?___ftdiv+1
  3668  0A82  01B2               	clrf	?___ftdiv+2
  3669  0A83  0008               	return
  3670  0A84                     l6315:	
  3671  0A84  0830               	movf	___ftdiv@f2,w
  3672  0A85  00B6               	movwf	??___ftdiv
  3673  0A86  0831               	movf	___ftdiv@f2+1,w
  3674  0A87  00B7               	movwf	??___ftdiv+1
  3675  0A88  0832               	movf	___ftdiv@f2+2,w
  3676  0A89  00B8               	movwf	??___ftdiv+2
  3677  0A8A  1003               	clrc
  3678  0A8B  0D37               	rlf	??___ftdiv+1,w
  3679  0A8C  0D38               	rlf	??___ftdiv+2,w
  3680  0A8D  00BE               	movwf	___ftdiv@sign
  3681  0A8E  083E               	movf	___ftdiv@sign,w
  3682  0A8F  1D03               	btfss	3,2
  3683  0A90  2A95               	goto	l1055
  3684  0A91  01B0               	clrf	?___ftdiv
  3685  0A92  01B1               	clrf	?___ftdiv+1
  3686  0A93  01B2               	clrf	?___ftdiv+2
  3687  0A94  0008               	return
  3688  0A95                     l1055:	
  3689  0A95  3089               	movlw	137
  3690  0A96  01BA               	clrf	___ftdiv@f3
  3691  0A97  01BB               	clrf	___ftdiv@f3+1
  3692  0A98  01BC               	clrf	___ftdiv@f3+2
  3693  0A99  073E               	addwf	___ftdiv@sign,w
  3694  0A9A  00B6               	movwf	??___ftdiv
  3695  0A9B  02BD               	subwf	___ftdiv@exp,f
  3696  0A9C  0835               	movf	___ftdiv@f1+2,w
  3697  0A9D  00BE               	movwf	___ftdiv@sign
  3698  0A9E  0832               	movf	___ftdiv@f2+2,w
  3699  0A9F  06BE               	xorwf	___ftdiv@sign,f
  3700  0AA0  3080               	movlw	128
  3701  0AA1  05BE               	andwf	___ftdiv@sign,f
  3702  0AA2  3018               	movlw	24
  3703  0AA3  17B4               	bsf	___ftdiv@f1+1,7
  3704  0AA4  01B5               	clrf	___ftdiv@f1+2
  3705  0AA5  17B1               	bsf	___ftdiv@f2+1,7
  3706  0AA6  01B2               	clrf	___ftdiv@f2+2
  3707  0AA7  00B9               	movwf	___ftdiv@cntr
  3708  0AA8                     l6337:	
  3709  0AA8  1003               	clrc
  3710  0AA9  0DBA               	rlf	___ftdiv@f3,f
  3711  0AAA  0DBB               	rlf	___ftdiv@f3+1,f
  3712  0AAB  0DBC               	rlf	___ftdiv@f3+2,f
  3713  0AAC  0832               	movf	___ftdiv@f2+2,w
  3714  0AAD  0235               	subwf	___ftdiv@f1+2,w
  3715  0AAE  1D03               	skipz
  3716  0AAF  2AB6               	goto	u8135
  3717  0AB0  0831               	movf	___ftdiv@f2+1,w
  3718  0AB1  0234               	subwf	___ftdiv@f1+1,w
  3719  0AB2  1D03               	skipz
  3720  0AB3  2AB6               	goto	u8135
  3721  0AB4  0830               	movf	___ftdiv@f2,w
  3722  0AB5  0233               	subwf	___ftdiv@f1,w
  3723  0AB6                     u8135:	
  3724  0AB6  1C03               	skipc
  3725  0AB7  2AC4               	goto	L9
  3726  0AB8  0830               	movf	___ftdiv@f2,w
  3727  0AB9  02B3               	subwf	___ftdiv@f1,f
  3728  0ABA  0831               	movf	___ftdiv@f2+1,w
  3729  0ABB  1C03               	skipc
  3730  0ABC  0F31               	incfsz	___ftdiv@f2+1,w
  3731  0ABD  02B4               	subwf	___ftdiv@f1+1,f
  3732  0ABE  0832               	movf	___ftdiv@f2+2,w
  3733  0ABF  1C03               	skipc
  3734  0AC0  0A32               	incf	___ftdiv@f2+2,w
  3735  0AC1  02B5               	subwf	___ftdiv@f1+2,f
  3736  0AC2  143A               	bsf	___ftdiv@f3,0
  3737  0AC3  1003               	clrc
  3738  0AC4                     L9:	
  3739  0AC4  0DB3               	rlf	___ftdiv@f1,f
  3740  0AC5  0DB4               	rlf	___ftdiv@f1+1,f
  3741  0AC6  0DB5               	rlf	___ftdiv@f1+2,f
  3742  0AC7  0BB9               	decfsz	___ftdiv@cntr,f
  3743  0AC8  2AA8               	goto	l6337
  3744  0AC9  083A               	movf	___ftdiv@f3,w
  3745  0ACA  00A5               	movwf	___ftpack@arg
  3746  0ACB  083B               	movf	___ftdiv@f3+1,w
  3747  0ACC  00A6               	movwf	___ftpack@arg+1
  3748  0ACD  083C               	movf	___ftdiv@f3+2,w
  3749  0ACE  00A7               	movwf	___ftpack@arg+2
  3750  0ACF  083D               	movf	___ftdiv@exp,w
  3751  0AD0  00A8               	movwf	___ftpack@exp
  3752  0AD1  083E               	movf	___ftdiv@sign,w
  3753  0AD2  00A9               	movwf	___ftpack@sign
  3754  0AD3  248D               	fcall	___ftpack
  3755  0AD4  0825               	movf	?___ftpack,w
  3756  0AD5  00B0               	movwf	?___ftdiv
  3757  0AD6  0826               	movf	?___ftpack+1,w
  3758  0AD7  00B1               	movwf	?___ftdiv+1
  3759  0AD8  0827               	movf	?___ftpack+2,w
  3760  0AD9  00B2               	movwf	?___ftdiv+2
  3761  0ADA  0008               	return
  3762  0ADB                     __end_of___ftdiv:	
  3763  0ADB                     __ptext9:	
  3764 ;; *************** function _a2d_read *****************
  3765 ;; Defined at:
  3766 ;;		line 778 in file "Automated Solar Panel Orientation Setter.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;		None
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;		None               void
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0, pclath, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 300/0
  3777 ;;		On exit  : 300/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3780 ;;      Params:         0       0       0       0       0
  3781 ;;      Locals:         0       0       0       0       0
  3782 ;;      Temps:          0       0       0       0       0
  3783 ;;      Totals:         0       0       0       0       0
  3784 ;;Total ram usage:        0 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    7
  3787 ;; This function calls:
  3788 ;;		___awdiv
  3789 ;;		___ftmul
  3790 ;;		___fttol
  3791 ;;		___lwtoft
  3792 ;;		___wmul
  3793 ;;		_read_a2d_value
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _a2d_read
  3801  0ADB                     _a2d_read:	
  3802                           
  3803                           ;Automated Solar Panel Orientation Setter.c: 779: ldr1 = read_a2d_value(0);
  3804                           
  3805                           ;incstack = 0
  3806                           ; Regs used in _a2d_read: [wreg+status,2+status,0+pclath+cstack]
  3807  0ADB  3000               	movlw	0
  3808  0ADC  2368  120A  158A   	fcall	_read_a2d_value
  3809  0ADF  0826               	movf	?_read_a2d_value+1,w
  3810  0AE0  1683               	bsf	3,5	;RP0=1, select bank1
  3811  0AE1  00BC               	movwf	(_ldr1+1)^(0+128)
  3812  0AE2  1283               	bcf	3,5	;RP0=0, select bank0
  3813  0AE3  0825               	movf	?_read_a2d_value,w
  3814  0AE4  1683               	bsf	3,5	;RP0=1, select bank1
  3815  0AE5  00BB               	movwf	_ldr1^(0+128)
  3816                           
  3817                           ;Automated Solar Panel Orientation Setter.c: 780: ldr2 = read_a2d_value(1);
  3818  0AE6  3001               	movlw	1
  3819  0AE7  2368  120A  158A   	fcall	_read_a2d_value
  3820  0AEA  0826               	movf	?_read_a2d_value+1,w
  3821  0AEB  00D6               	movwf	_ldr2+1
  3822  0AEC  0825               	movf	?_read_a2d_value,w
  3823  0AED  00D5               	movwf	_ldr2
  3824                           
  3825                           ;Automated Solar Panel Orientation Setter.c: 781: ldr2 = ldr2 + (int)(ldr2*0.35);
  3826  0AEE  0856               	movf	_ldr2+1,w
  3827  0AEF  00AE               	movwf	___lwtoft@c+1
  3828  0AF0  0855               	movf	_ldr2,w
  3829  0AF1  00AD               	movwf	___lwtoft@c
  3830  0AF2  247D  120A  158A   	fcall	___lwtoft
  3831  0AF5  082D               	movf	?___lwtoft,w
  3832  0AF6  00B5               	movwf	___ftmul@f2
  3833  0AF7  082E               	movf	?___lwtoft+1,w
  3834  0AF8  00B6               	movwf	___ftmul@f2+1
  3835  0AF9  082F               	movf	?___lwtoft+2,w
  3836  0AFA  00B7               	movwf	___ftmul@f2+2
  3837  0AFB  3033               	movlw	51
  3838  0AFC  00B2               	movwf	___ftmul@f1
  3839  0AFD  30B3               	movlw	179
  3840  0AFE  00B3               	movwf	___ftmul@f1+1
  3841  0AFF  303E               	movlw	62
  3842  0B00  00B4               	movwf	___ftmul@f1+2
  3843  0B01  23A7  120A  158A   	fcall	___ftmul
  3844  0B04  0832               	movf	?___ftmul,w
  3845  0B05  00C1               	movwf	___fttol@f1
  3846  0B06  0833               	movf	?___ftmul+1,w
  3847  0B07  00C2               	movwf	___fttol@f1+1
  3848  0B08  0834               	movf	?___ftmul+2,w
  3849  0B09  00C3               	movwf	___fttol@f1+2
  3850  0B0A  2422  120A  158A   	fcall	___fttol
  3851  0B0D  0841               	movf	?___fttol,w
  3852  0B0E  07D5               	addwf	_ldr2,f
  3853  0B0F  1803               	skipnc
  3854  0B10  0AD6               	incf	_ldr2+1,f
  3855  0B11  0842               	movf	?___fttol+1,w
  3856  0B12  07D6               	addwf	_ldr2+1,f
  3857                           
  3858                           ;Automated Solar Panel Orientation Setter.c: 782: V_Bat = read_a2d_value(2);
  3859  0B13  3002               	movlw	2
  3860  0B14  2368  120A  158A   	fcall	_read_a2d_value
  3861  0B17  0826               	movf	?_read_a2d_value+1,w
  3862  0B18  1683               	bsf	3,5	;RP0=1, select bank1
  3863  0B19  00CA               	movwf	(_V_Bat+1)^(0+128)
  3864  0B1A  1283               	bcf	3,5	;RP0=0, select bank0
  3865  0B1B  0825               	movf	?_read_a2d_value,w
  3866  0B1C  1683               	bsf	3,5	;RP0=1, select bank1
  3867  0B1D  00C9               	movwf	_V_Bat^(0+128)
  3868                           
  3869                           ;Automated Solar Panel Orientation Setter.c: 783: V_Bat2 = (int)V_Bat*5*11/1023;
  3870  0B1E  30FF               	movlw	255
  3871  0B1F  1283               	bcf	3,5	;RP0=0, select bank0
  3872  0B20  00AB               	movwf	___awdiv@divisor
  3873  0B21  3003               	movlw	3
  3874  0B22  00AC               	movwf	___awdiv@divisor+1
  3875  0B23  1683               	bsf	3,5	;RP0=1, select bank1
  3876  0B24  084A               	movf	(_V_Bat+1)^(0+128),w
  3877  0B25  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0B26  00A6               	movwf	___wmul@multiplier+1
  3879  0B27  1683               	bsf	3,5	;RP0=1, select bank1
  3880  0B28  0849               	movf	_V_Bat^(0+128),w
  3881  0B29  1283               	bcf	3,5	;RP0=0, select bank0
  3882  0B2A  00A5               	movwf	___wmul@multiplier
  3883  0B2B  3037               	movlw	55
  3884  0B2C  00A7               	movwf	___wmul@multiplicand
  3885  0B2D  01A8               	clrf	___wmul@multiplicand+1
  3886  0B2E  238E  120A  158A   	fcall	___wmul
  3887  0B31  0826               	movf	?___wmul+1,w
  3888  0B32  00AE               	movwf	___awdiv@dividend+1
  3889  0B33  0825               	movf	?___wmul,w
  3890  0B34  00AD               	movwf	___awdiv@dividend
  3891  0B35  2717  120A  158A   	fcall	___awdiv
  3892  0B38  082B               	movf	?___awdiv,w
  3893  0B39  1683               	bsf	3,5	;RP0=1, select bank1
  3894  0B3A  00B4               	movwf	_V_Bat2^(0+128)
  3895  0B3B  1283               	bcf	3,5	;RP0=0, select bank0
  3896  0B3C  082C               	movf	?___awdiv+1,w
  3897  0B3D  1683               	bsf	3,5	;RP0=1, select bank1
  3898  0B3E  00B5               	movwf	(_V_Bat2+1)^(0+128)
  3899  0B3F  3000               	movlw	0
  3900  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  3901  0B41  1BAC               	btfsc	?___awdiv+1,7
  3902  0B42  30FF               	movlw	255
  3903  0B43  1683               	bsf	3,5	;RP0=1, select bank1
  3904  0B44  00B6               	movwf	(_V_Bat2+2)^(0+128)
  3905                           
  3906                           ;Automated Solar Panel Orientation Setter.c: 784: C_Bat = read_a2d_value(3);
  3907  0B45  3003               	movlw	3
  3908  0B46  2368  120A  158A   	fcall	_read_a2d_value
  3909  0B49  0826               	movf	?_read_a2d_value+1,w
  3910  0B4A  1683               	bsf	3,5	;RP0=1, select bank1
  3911  0B4B  00C8               	movwf	(_C_Bat+1)^(0+128)
  3912  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  3913  0B4D  0825               	movf	?_read_a2d_value,w
  3914  0B4E  1683               	bsf	3,5	;RP0=1, select bank1
  3915  0B4F  00C7               	movwf	_C_Bat^(0+128)
  3916                           
  3917                           ;Automated Solar Panel Orientation Setter.c: 785: C_Bat2 = (int)C_Bat*5*11/1023;
  3918  0B50  30FF               	movlw	255
  3919  0B51  1283               	bcf	3,5	;RP0=0, select bank0
  3920  0B52  00AB               	movwf	___awdiv@divisor
  3921  0B53  3003               	movlw	3
  3922  0B54  00AC               	movwf	___awdiv@divisor+1
  3923  0B55  1683               	bsf	3,5	;RP0=1, select bank1
  3924  0B56  0848               	movf	(_C_Bat+1)^(0+128),w
  3925  0B57  1283               	bcf	3,5	;RP0=0, select bank0
  3926  0B58  00A6               	movwf	___wmul@multiplier+1
  3927  0B59  1683               	bsf	3,5	;RP0=1, select bank1
  3928  0B5A  0847               	movf	_C_Bat^(0+128),w
  3929  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  3930  0B5C  00A5               	movwf	___wmul@multiplier
  3931  0B5D  3037               	movlw	55
  3932  0B5E  00A7               	movwf	___wmul@multiplicand
  3933  0B5F  01A8               	clrf	___wmul@multiplicand+1
  3934  0B60  238E  120A  158A   	fcall	___wmul
  3935  0B63  0826               	movf	?___wmul+1,w
  3936  0B64  00AE               	movwf	___awdiv@dividend+1
  3937  0B65  0825               	movf	?___wmul,w
  3938  0B66  00AD               	movwf	___awdiv@dividend
  3939  0B67  2F17               	ljmp	l5371
  3940  0B68                     __end_of_a2d_read:	
  3941  0B68                     __ptext10:	
  3942 ;; *************** function _read_a2d_value *****************
  3943 ;; Defined at:
  3944 ;;		line 13 in file "a2d.h"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  channel         1    wreg     unsigned char 
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;  channel         1    8[BANK0 ] unsigned char 
  3949 ;;  a2d_value       2    9[BANK0 ] unsigned int 
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  2    5[BANK0 ] unsigned int 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0
  3954 ;; Tracked objects:
  3955 ;;		On entry : 200/0
  3956 ;;		On exit  : 300/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3959 ;;      Params:         0       2       0       0       0
  3960 ;;      Locals:         0       3       0       0       0
  3961 ;;      Temps:          0       1       0       0       0
  3962 ;;      Totals:         0       6       0       0       0
  3963 ;;Total ram usage:        6 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    5
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_a2d_read
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           
  3974                           ;psect for function _read_a2d_value
  3975  0B68                     _read_a2d_value:	
  3976                           
  3977                           ;incstack = 0
  3978                           ; Regs used in _read_a2d_value: [wreg+status,2+status,0]
  3979                           ;read_a2d_value@channel stored from wreg
  3980  0B68  1283               	bcf	3,5	;RP0=0, select bank0
  3981  0B69  00A8               	movwf	read_a2d_value@channel
  3982                           
  3983                           ;a2d.h: 14: unsigned int a2d_value;
  3984                           ;a2d.h: 15: channel = channel << 3;
  3985  0B6A  0DA8               	rlf	read_a2d_value@channel,f
  3986  0B6B  0DA8               	rlf	read_a2d_value@channel,f
  3987  0B6C  0D28               	rlf	read_a2d_value@channel,w
  3988  0B6D  39F8               	andlw	248
  3989  0B6E  00A8               	movwf	read_a2d_value@channel
  3990                           
  3991                           ;a2d.h: 16: ADCON0 = ADCON0 & 0b11000111;
  3992  0B6F  30C7               	movlw	199
  3993  0B70  059F               	andwf	31,f	;volatile
  3994                           
  3995                           ;a2d.h: 17: ADCON0 = ADCON0 | channel;
  3996  0B71  0828               	movf	read_a2d_value@channel,w
  3997  0B72  049F               	iorwf	31,f	;volatile
  3998                           
  3999                           ;a2d.h: 18: ADON = 1;
  4000  0B73  141F               	bsf	31,0	;volatile
  4001                           
  4002                           ;a2d.h: 19: _delay(50);
  4003  0B74  3010               	movlw	16
  4004  0B75  00A7               	movwf	??_read_a2d_value
  4005  0B76                     u8657:	
  4006  0B76  0BA7               	decfsz	??_read_a2d_value,f
  4007  0B77  2B76               	goto	u8657
  4008  0B78  0000               	nop
  4009                           
  4010                           ;a2d.h: 20: GO = 1;
  4011  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0B7B  151F               	bsf	31,2	;volatile
  4014  0B7C                     l263:	
  4015                           ;a2d.h: 21: while( GO == 1 );
  4016                           
  4017  0B7C  191F               	btfsc	31,2	;volatile
  4018  0B7D  2B7C               	goto	l263
  4019                           
  4020                           ;a2d.h: 22: a2d_value = ADRESH;
  4021  0B7E  081E               	movf	30,w	;volatile
  4022  0B7F  00A9               	movwf	read_a2d_value@a2d_value
  4023  0B80  01AA               	clrf	read_a2d_value@a2d_value+1
  4024                           
  4025                           ;a2d.h: 23: a2d_value = a2d_value << 8;
  4026  0B81  00AA               	movwf	read_a2d_value@a2d_value+1
  4027  0B82  01A9               	clrf	read_a2d_value@a2d_value
  4028                           
  4029                           ;a2d.h: 24: a2d_value = a2d_value + ADRESL;
  4030  0B83  1683               	bsf	3,5	;RP0=1, select bank1
  4031  0B84  081E               	movf	30,w	;volatile
  4032  0B85  1283               	bcf	3,5	;RP0=0, select bank0
  4033  0B86  07A9               	addwf	read_a2d_value@a2d_value,f
  4034  0B87  1803               	skipnc
  4035  0B88  0AAA               	incf	read_a2d_value@a2d_value+1,f
  4036                           
  4037                           ;a2d.h: 25: return a2d_value;
  4038  0B89  082A               	movf	read_a2d_value@a2d_value+1,w
  4039  0B8A  00A6               	movwf	?_read_a2d_value+1
  4040  0B8B  0829               	movf	read_a2d_value@a2d_value,w
  4041  0B8C  00A5               	movwf	?_read_a2d_value
  4042  0B8D  0008               	return
  4043  0B8E                     __end_of_read_a2d_value:	
  4044  0B8E                     __ptext11:	
  4045 ;; *************** function ___wmul *****************
  4046 ;; Defined at:
  4047 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;  multiplier      2    5[BANK0 ] unsigned int 
  4050 ;;  multiplicand    2    7[BANK0 ] unsigned int 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  product         2    9[BANK0 ] unsigned int 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  2    5[BANK0 ] unsigned int 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0
  4057 ;; Tracked objects:
  4058 ;;		On entry : 300/0
  4059 ;;		On exit  : 300/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4062 ;;      Params:         0       4       0       0       0
  4063 ;;      Locals:         0       2       0       0       0
  4064 ;;      Temps:          0       0       0       0       0
  4065 ;;      Totals:         0       6       0       0       0
  4066 ;;Total ram usage:        6 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    5
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;;		_a2d_read
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           
  4078                           ;psect for function ___wmul
  4079  0B8E                     ___wmul:	
  4080                           
  4081                           ;incstack = 0
  4082                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4083  0B8E  01A9               	clrf	___wmul@product
  4084  0B8F  01AA               	clrf	___wmul@product+1
  4085  0B90                     l5799:	
  4086  0B90  1C25               	btfss	___wmul@multiplier,0
  4087  0B91  2B98               	goto	l5803
  4088  0B92  0827               	movf	___wmul@multiplicand,w
  4089  0B93  07A9               	addwf	___wmul@product,f
  4090  0B94  1803               	skipnc
  4091  0B95  0AAA               	incf	___wmul@product+1,f
  4092  0B96  0828               	movf	___wmul@multiplicand+1,w
  4093  0B97  07AA               	addwf	___wmul@product+1,f
  4094  0B98                     l5803:	
  4095  0B98  1003               	clrc
  4096  0B99  0DA7               	rlf	___wmul@multiplicand,f
  4097  0B9A  0DA8               	rlf	___wmul@multiplicand+1,f
  4098  0B9B  1003               	clrc
  4099  0B9C  0CA6               	rrf	___wmul@multiplier+1,f
  4100  0B9D  0CA5               	rrf	___wmul@multiplier,f
  4101  0B9E  0825               	movf	___wmul@multiplier,w
  4102  0B9F  0426               	iorwf	___wmul@multiplier+1,w
  4103  0BA0  1D03               	btfss	3,2
  4104  0BA1  2B90               	goto	l5799
  4105  0BA2  082A               	movf	___wmul@product+1,w
  4106  0BA3  00A6               	movwf	?___wmul+1
  4107  0BA4  0829               	movf	___wmul@product,w
  4108  0BA5  00A5               	movwf	?___wmul
  4109  0BA6  0008               	return
  4110  0BA7                     __end_of___wmul:	
  4111  0BA7                     __ptext14:	
  4112 ;; *************** function ___ftmul *****************
  4113 ;; Defined at:
  4114 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  f1              3   18[BANK0 ] float 
  4117 ;;  f2              3   21[BANK0 ] float 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  f3_as_produc    3   28[BANK0 ] unsigned um
  4120 ;;  sign            1   32[BANK0 ] unsigned char 
  4121 ;;  cntr            1   31[BANK0 ] unsigned char 
  4122 ;;  exp             1   27[BANK0 ] unsigned char 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  3   18[BANK0 ] float 
  4125 ;; Registers used:
  4126 ;;		wreg, status,2, status,0, pclath, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 300/0
  4129 ;;		On exit  : 300/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4132 ;;      Params:         0       6       0       0       0
  4133 ;;      Locals:         0       6       0       0       0
  4134 ;;      Temps:          0       3       0       0       0
  4135 ;;      Totals:         0      15       0       0       0
  4136 ;;Total ram usage:       15 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    6
  4139 ;; This function calls:
  4140 ;;		___ftpack
  4141 ;; This function is called by:
  4142 ;;		_main
  4143 ;;		_a2d_read
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           
  4148                           ;psect for function ___ftmul
  4149  0BA7                     ___ftmul:	
  4150                           
  4151                           ;incstack = 0
  4152                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4153  0BA7  0832               	movf	___ftmul@f1,w
  4154  0BA8  00B8               	movwf	??___ftmul
  4155  0BA9  0833               	movf	___ftmul@f1+1,w
  4156  0BAA  00B9               	movwf	??___ftmul+1
  4157  0BAB  0834               	movf	___ftmul@f1+2,w
  4158  0BAC  00BA               	movwf	??___ftmul+2
  4159  0BAD  1003               	clrc
  4160  0BAE  0D39               	rlf	??___ftmul+1,w
  4161  0BAF  0D3A               	rlf	??___ftmul+2,w
  4162  0BB0  00BB               	movwf	___ftmul@exp
  4163  0BB1  083B               	movf	___ftmul@exp,w
  4164  0BB2  1D03               	btfss	3,2
  4165  0BB3  2BB8               	goto	l5817
  4166  0BB4  01B2               	clrf	?___ftmul
  4167  0BB5  01B3               	clrf	?___ftmul+1
  4168  0BB6  01B4               	clrf	?___ftmul+2
  4169  0BB7  0008               	return
  4170  0BB8                     l5817:	
  4171  0BB8  0835               	movf	___ftmul@f2,w
  4172  0BB9  00B8               	movwf	??___ftmul
  4173  0BBA  0836               	movf	___ftmul@f2+1,w
  4174  0BBB  00B9               	movwf	??___ftmul+1
  4175  0BBC  0837               	movf	___ftmul@f2+2,w
  4176  0BBD  00BA               	movwf	??___ftmul+2
  4177  0BBE  1003               	clrc
  4178  0BBF  0D39               	rlf	??___ftmul+1,w
  4179  0BC0  0D3A               	rlf	??___ftmul+2,w
  4180  0BC1  00C0               	movwf	___ftmul@sign
  4181  0BC2  0840               	movf	___ftmul@sign,w
  4182  0BC3  1D03               	btfss	3,2
  4183  0BC4  2BC9               	goto	l5821
  4184  0BC5  01B2               	clrf	?___ftmul
  4185  0BC6  01B3               	clrf	?___ftmul+1
  4186  0BC7  01B4               	clrf	?___ftmul+2
  4187  0BC8  0008               	return
  4188  0BC9                     l5821:	
  4189  0BC9  0840               	movf	___ftmul@sign,w
  4190  0BCA  3E7B               	addlw	123
  4191  0BCB  07BB               	addwf	___ftmul@exp,f
  4192  0BCC  0834               	movf	___ftmul@f1+2,w
  4193  0BCD  00C0               	movwf	___ftmul@sign
  4194  0BCE  0837               	movf	___ftmul@f2+2,w
  4195  0BCF  06C0               	xorwf	___ftmul@sign,f
  4196  0BD0  3080               	movlw	128
  4197  0BD1  05C0               	andwf	___ftmul@sign,f
  4198  0BD2  3007               	movlw	7
  4199  0BD3  17B3               	bsf	___ftmul@f1+1,7
  4200  0BD4  17B6               	bsf	___ftmul@f2+1,7
  4201  0BD5  01B7               	clrf	___ftmul@f2+2
  4202  0BD6  01BC               	clrf	___ftmul@f3_as_product
  4203  0BD7  01BD               	clrf	___ftmul@f3_as_product+1
  4204  0BD8  01BE               	clrf	___ftmul@f3_as_product+2
  4205  0BD9  00BF               	movwf	___ftmul@cntr
  4206  0BDA                     l5839:	
  4207  0BDA  1C32               	btfss	___ftmul@f1,0
  4208  0BDB  2BEA               	goto	l5843
  4209  0BDC  0835               	movf	___ftmul@f2,w
  4210  0BDD  07BC               	addwf	___ftmul@f3_as_product,f
  4211  0BDE  0836               	movf	___ftmul@f2+1,w
  4212  0BDF  1103               	clrz
  4213  0BE0  1803               	skipnc
  4214  0BE1  0A36               	incf	___ftmul@f2+1,w
  4215  0BE2  1D03               	btfss	3,2
  4216  0BE3  07BD               	addwf	___ftmul@f3_as_product+1,f
  4217  0BE4  0837               	movf	___ftmul@f2+2,w
  4218  0BE5  1103               	clrz
  4219  0BE6  1803               	skipnc
  4220  0BE7  0A37               	incf	___ftmul@f2+2,w
  4221  0BE8  1D03               	btfss	3,2
  4222  0BE9  07BE               	addwf	___ftmul@f3_as_product+2,f
  4223  0BEA                     l5843:	
  4224  0BEA  1003               	clrc
  4225  0BEB  0CB4               	rrf	___ftmul@f1+2,f
  4226  0BEC  0CB3               	rrf	___ftmul@f1+1,f
  4227  0BED  0CB2               	rrf	___ftmul@f1,f
  4228  0BEE  1003               	clrc
  4229  0BEF  0DB5               	rlf	___ftmul@f2,f
  4230  0BF0  0DB6               	rlf	___ftmul@f2+1,f
  4231  0BF1  0DB7               	rlf	___ftmul@f2+2,f
  4232  0BF2  0BBF               	decfsz	___ftmul@cntr,f
  4233  0BF3  2BDA               	goto	l5839
  4234  0BF4  3009               	movlw	9
  4235  0BF5  00BF               	movwf	___ftmul@cntr
  4236  0BF6                     l5851:	
  4237  0BF6  1C32               	btfss	___ftmul@f1,0
  4238  0BF7  2C06               	goto	l5855
  4239  0BF8  0835               	movf	___ftmul@f2,w
  4240  0BF9  07BC               	addwf	___ftmul@f3_as_product,f
  4241  0BFA  0836               	movf	___ftmul@f2+1,w
  4242  0BFB  1103               	clrz
  4243  0BFC  1803               	skipnc
  4244  0BFD  0A36               	incf	___ftmul@f2+1,w
  4245  0BFE  1D03               	btfss	3,2
  4246  0BFF  07BD               	addwf	___ftmul@f3_as_product+1,f
  4247  0C00  0837               	movf	___ftmul@f2+2,w
  4248  0C01  1103               	clrz
  4249  0C02  1803               	skipnc
  4250  0C03  0A37               	incf	___ftmul@f2+2,w
  4251  0C04  1D03               	btfss	3,2
  4252  0C05  07BE               	addwf	___ftmul@f3_as_product+2,f
  4253  0C06                     l5855:	
  4254  0C06  1003               	clrc
  4255  0C07  0CB4               	rrf	___ftmul@f1+2,f
  4256  0C08  0CB3               	rrf	___ftmul@f1+1,f
  4257  0C09  0CB2               	rrf	___ftmul@f1,f
  4258  0C0A  1003               	clrc
  4259  0C0B  0CBE               	rrf	___ftmul@f3_as_product+2,f
  4260  0C0C  0CBD               	rrf	___ftmul@f3_as_product+1,f
  4261  0C0D  0CBC               	rrf	___ftmul@f3_as_product,f
  4262  0C0E  0BBF               	decfsz	___ftmul@cntr,f
  4263  0C0F  2BF6               	goto	l5851
  4264  0C10  083C               	movf	___ftmul@f3_as_product,w
  4265  0C11  00A5               	movwf	___ftpack@arg
  4266  0C12  083D               	movf	___ftmul@f3_as_product+1,w
  4267  0C13  00A6               	movwf	___ftpack@arg+1
  4268  0C14  083E               	movf	___ftmul@f3_as_product+2,w
  4269  0C15  00A7               	movwf	___ftpack@arg+2
  4270  0C16  083B               	movf	___ftmul@exp,w
  4271  0C17  00A8               	movwf	___ftpack@exp
  4272  0C18  0840               	movf	___ftmul@sign,w
  4273  0C19  00A9               	movwf	___ftpack@sign
  4274  0C1A  248D               	fcall	___ftpack
  4275  0C1B  0825               	movf	?___ftpack,w
  4276  0C1C  00B2               	movwf	?___ftmul
  4277  0C1D  0826               	movf	?___ftpack+1,w
  4278  0C1E  00B3               	movwf	?___ftmul+1
  4279  0C1F  0827               	movf	?___ftpack+2,w
  4280  0C20  00B4               	movwf	?___ftmul+2
  4281  0C21  0008               	return
  4282  0C22                     __end_of___ftmul:	
  4283  0C22                     __ptext13:	
  4284 ;; *************** function ___fttol *****************
  4285 ;; Defined at:
  4286 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  f1              3   33[BANK0 ] float 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  lval            4   41[BANK0 ] unsigned long 
  4291 ;;  exp1            1   45[BANK0 ] unsigned char 
  4292 ;;  sign1           1   40[BANK0 ] unsigned char 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  4   33[BANK0 ] long 
  4295 ;; Registers used:
  4296 ;;		wreg, status,2, status,0
  4297 ;; Tracked objects:
  4298 ;;		On entry : 300/0
  4299 ;;		On exit  : 300/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4302 ;;      Params:         0       4       0       0       0
  4303 ;;      Locals:         0       6       0       0       0
  4304 ;;      Temps:          0       3       0       0       0
  4305 ;;      Totals:         0      13       0       0       0
  4306 ;;Total ram usage:       13 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    5
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_main
  4313 ;;		_a2d_read
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function ___fttol
  4319  0C22                     ___fttol:	
  4320                           
  4321                           ;incstack = 0
  4322                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4323  0C22  27F2  120A  158A   	fcall	PL28	;call to abstracted procedure
  4324  0C25  1003               	clrc
  4325  0C26  0D46               	rlf	??___fttol+1,w
  4326  0C27  0D47               	rlf	??___fttol+2,w
  4327  0C28  00CD               	movwf	___fttol@exp1
  4328  0C29  084D               	movf	___fttol@exp1,w
  4329  0C2A  1D03               	btfss	3,2
  4330  0C2B  2C31               	goto	l5869
  4331  0C2C                     l5867:	
  4332  0C2C  01C1               	clrf	?___fttol
  4333  0C2D  01C2               	clrf	?___fttol+1
  4334  0C2E  01C3               	clrf	?___fttol+2
  4335  0C2F  01C4               	clrf	?___fttol+3
  4336  0C30  0008               	return
  4337  0C31                     l5869:	
  4338  0C31  27F2  120A  158A   	fcall	PL28	;call to abstracted procedure
  4339  0C34  3017               	movlw	23
  4340  0C35                     u7595:	
  4341  0C35  1003               	clrc
  4342  0C36  0CC7               	rrf	??___fttol+2,f
  4343  0C37  0CC6               	rrf	??___fttol+1,f
  4344  0C38  0CC5               	rrf	??___fttol,f
  4345  0C39  3EFF               	addlw	-1
  4346  0C3A  1D03               	skipz
  4347  0C3B  2C35               	goto	u7595
  4348  0C3C  0845               	movf	??___fttol,w
  4349  0C3D  00C8               	movwf	___fttol@sign1
  4350  0C3E  17C2               	bsf	___fttol@f1+1,7
  4351  0C3F  01C3               	clrf	___fttol@f1+2
  4352  0C40  0841               	movf	___fttol@f1,w
  4353  0C41  00C9               	movwf	___fttol@lval
  4354  0C42  0842               	movf	___fttol@f1+1,w
  4355  0C43  00CA               	movwf	___fttol@lval+1
  4356  0C44  0843               	movf	___fttol@f1+2,w
  4357  0C45  00CB               	movwf	___fttol@lval+2
  4358  0C46  308E               	movlw	142
  4359  0C47  01CC               	clrf	___fttol@lval+3
  4360  0C48  02CD               	subwf	___fttol@exp1,f
  4361  0C49  1FCD               	btfss	___fttol@exp1,7
  4362  0C4A  2C58               	goto	l5889
  4363  0C4B  084D               	movf	___fttol@exp1,w
  4364  0C4C  3A80               	xorlw	128
  4365  0C4D  3E8F               	addlw	143
  4366  0C4E  1C03               	btfss	3,0
  4367  0C4F  2C2C               	goto	l5867
  4368  0C50                     l5885:	
  4369  0C50  1003               	clrc
  4370  0C51  0CCC               	rrf	___fttol@lval+3,f
  4371  0C52  0CCB               	rrf	___fttol@lval+2,f
  4372  0C53  0CCA               	rrf	___fttol@lval+1,f
  4373  0C54  0CC9               	rrf	___fttol@lval,f
  4374  0C55  0FCD               	incfsz	___fttol@exp1,f
  4375  0C56  2C50               	goto	l5885
  4376  0C57  2C66               	goto	l5897
  4377  0C58                     l5889:	
  4378  0C58  3018               	movlw	24
  4379  0C59  024D               	subwf	___fttol@exp1,w
  4380  0C5A  1803               	btfsc	3,0
  4381  0C5B  2C2C               	goto	l5867
  4382  0C5C                     l5895:	
  4383  0C5C  084D               	movf	___fttol@exp1,w
  4384  0C5D  1903               	btfsc	3,2
  4385  0C5E  2C66               	goto	l5897
  4386  0C5F  1003               	clrc
  4387  0C60  0DC9               	rlf	___fttol@lval,f
  4388  0C61  0DCA               	rlf	___fttol@lval+1,f
  4389  0C62  0DCB               	rlf	___fttol@lval+2,f
  4390  0C63  0DCC               	rlf	___fttol@lval+3,f
  4391  0C64  03CD               	decf	___fttol@exp1,f
  4392  0C65  2C5C               	goto	l5895
  4393  0C66                     l5897:	
  4394  0C66  0848               	movf	___fttol@sign1,w
  4395  0C67  1903               	btfsc	3,2
  4396  0C68  2C74               	goto	l5901
  4397  0C69  09C9               	comf	___fttol@lval,f
  4398  0C6A  09CA               	comf	___fttol@lval+1,f
  4399  0C6B  09CB               	comf	___fttol@lval+2,f
  4400  0C6C  09CC               	comf	___fttol@lval+3,f
  4401  0C6D  0AC9               	incf	___fttol@lval,f
  4402  0C6E  1903               	skipnz
  4403  0C6F  0ACA               	incf	___fttol@lval+1,f
  4404  0C70  1903               	skipnz
  4405  0C71  0ACB               	incf	___fttol@lval+2,f
  4406  0C72  1903               	skipnz
  4407  0C73  0ACC               	incf	___fttol@lval+3,f
  4408  0C74                     l5901:	
  4409  0C74  084C               	movf	___fttol@lval+3,w
  4410  0C75  00C4               	movwf	?___fttol+3
  4411  0C76  084B               	movf	___fttol@lval+2,w
  4412  0C77  00C3               	movwf	?___fttol+2
  4413  0C78  084A               	movf	___fttol@lval+1,w
  4414  0C79  00C2               	movwf	?___fttol+1
  4415  0C7A  0849               	movf	___fttol@lval,w
  4416  0C7B  00C1               	movwf	?___fttol
  4417  0C7C  0008               	return
  4418  0C7D                     __end_of___fttol:	
  4419  0C7D                     __ptext12:	
  4420 ;; *************** function ___lwtoft *****************
  4421 ;; Defined at:
  4422 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;  c               2   13[BANK0 ] unsigned int 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  3   13[BANK0 ] float 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0, pclath, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 300/0
  4433 ;;		On exit  : 300/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4436 ;;      Params:         0       3       0       0       0
  4437 ;;      Locals:         0       0       0       0       0
  4438 ;;      Temps:          0       0       0       0       0
  4439 ;;      Totals:         0       3       0       0       0
  4440 ;;Total ram usage:        3 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    6
  4443 ;; This function calls:
  4444 ;;		___ftpack
  4445 ;; This function is called by:
  4446 ;;		_main
  4447 ;;		_a2d_read
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           
  4452                           ;psect for function ___lwtoft
  4453  0C7D                     ___lwtoft:	
  4454                           
  4455                           ;incstack = 0
  4456                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4457  0C7D  082D               	movf	___lwtoft@c,w
  4458  0C7E  00A5               	movwf	___ftpack@arg
  4459  0C7F  082E               	movf	___lwtoft@c+1,w
  4460  0C80  00A6               	movwf	___ftpack@arg+1
  4461  0C81  308E               	movlw	142
  4462  0C82  01A7               	clrf	___ftpack@arg+2
  4463  0C83  00A8               	movwf	___ftpack@exp
  4464  0C84  01A9               	clrf	___ftpack@sign
  4465  0C85  248D               	fcall	___ftpack
  4466  0C86  0825               	movf	?___ftpack,w
  4467  0C87  00AD               	movwf	?___lwtoft
  4468  0C88  0826               	movf	?___ftpack+1,w
  4469  0C89  00AE               	movwf	?___lwtoft+1
  4470  0C8A  0827               	movf	?___ftpack+2,w
  4471  0C8B  00AF               	movwf	?___lwtoft+2
  4472  0C8C  0008               	return
  4473  0C8D                     __end_of___lwtoft:	
  4474  0C8D                     __ptext19:	
  4475 ;; *************** function ___ftpack *****************
  4476 ;; Defined at:
  4477 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;  arg             3    5[BANK0 ] unsigned um
  4480 ;;  exp             1    8[BANK0 ] unsigned char 
  4481 ;;  sign            1    9[BANK0 ] unsigned char 
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;		None
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  3    5[BANK0 ] float 
  4486 ;; Registers used:
  4487 ;;		wreg, status,2, status,0
  4488 ;; Tracked objects:
  4489 ;;		On entry : 300/0
  4490 ;;		On exit  : 300/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4493 ;;      Params:         0       5       0       0       0
  4494 ;;      Locals:         0       0       0       0       0
  4495 ;;      Temps:          0       3       0       0       0
  4496 ;;      Totals:         0       8       0       0       0
  4497 ;;Total ram usage:        8 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    5
  4500 ;; This function calls:
  4501 ;;		Nothing
  4502 ;; This function is called by:
  4503 ;;		___ftdiv
  4504 ;;		___ftmul
  4505 ;;		___lbtoft
  4506 ;;		___lwtoft
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           
  4511                           ;psect for function ___ftpack
  4512  0C8D                     ___ftpack:	
  4513                           
  4514                           ;incstack = 0
  4515                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4516  0C8D  0828               	movf	___ftpack@exp,w
  4517  0C8E  1903               	btfsc	3,2
  4518  0C8F  2C95               	goto	l1001
  4519  0C90  0827               	movf	___ftpack@arg+2,w
  4520  0C91  0426               	iorwf	___ftpack@arg+1,w
  4521  0C92  0425               	iorwf	___ftpack@arg,w
  4522  0C93  1D03               	skipz
  4523  0C94  2C9E               	goto	l5353
  4524  0C95                     l1001:	
  4525  0C95  01A5               	clrf	?___ftpack
  4526  0C96  01A6               	clrf	?___ftpack+1
  4527  0C97  01A7               	clrf	?___ftpack+2
  4528  0C98  0008               	return
  4529  0C99                     l5351:	
  4530  0C99  0AA8               	incf	___ftpack@exp,f
  4531  0C9A  1003               	clrc
  4532  0C9B  0CA7               	rrf	___ftpack@arg+2,f
  4533  0C9C  0CA6               	rrf	___ftpack@arg+1,f
  4534  0C9D  0CA5               	rrf	___ftpack@arg,f
  4535  0C9E                     l5353:	
  4536  0C9E  30FE               	movlw	254
  4537  0C9F  0527               	andwf	___ftpack@arg+2,w
  4538  0CA0  1903               	btfsc	3,2
  4539  0CA1  2CAD               	goto	l5357
  4540  0CA2  2C99               	goto	l5351
  4541  0CA3                     l5355:	
  4542  0CA3  0AA8               	incf	___ftpack@exp,f
  4543  0CA4  0AA5               	incf	___ftpack@arg,f
  4544  0CA5  1903               	skipnz
  4545  0CA6  0AA6               	incf	___ftpack@arg+1,f
  4546  0CA7  1903               	skipnz
  4547  0CA8  0AA7               	incf	___ftpack@arg+2,f
  4548  0CA9  1003               	clrc
  4549  0CAA  0CA7               	rrf	___ftpack@arg+2,f
  4550  0CAB  0CA6               	rrf	___ftpack@arg+1,f
  4551  0CAC  0CA5               	rrf	___ftpack@arg,f
  4552  0CAD                     l5357:	
  4553  0CAD  30FF               	movlw	255
  4554  0CAE  0527               	andwf	___ftpack@arg+2,w
  4555  0CAF  1903               	btfsc	3,2
  4556  0CB0  2CBB               	goto	l5361
  4557  0CB1  2CA3               	goto	l5355
  4558  0CB2                     l5363:	
  4559  0CB2  3002               	movlw	2
  4560  0CB3  0228               	subwf	___ftpack@exp,w
  4561  0CB4  1C03               	btfss	3,0
  4562  0CB5  2CBD               	goto	l1013
  4563  0CB6  03A8               	decf	___ftpack@exp,f
  4564  0CB7  1003               	clrc
  4565  0CB8  0DA5               	rlf	___ftpack@arg,f
  4566  0CB9  0DA6               	rlf	___ftpack@arg+1,f
  4567  0CBA  0DA7               	rlf	___ftpack@arg+2,f
  4568  0CBB                     l5361:	
  4569  0CBB  1FA6               	btfss	___ftpack@arg+1,7
  4570  0CBC  2CB2               	goto	l5363
  4571  0CBD                     l1013:	
  4572  0CBD  1C28               	btfss	___ftpack@exp,0
  4573  0CBE  13A6               	bcf	___ftpack@arg+1,7
  4574  0CBF  1003               	clrc
  4575  0CC0  0CA8               	rrf	___ftpack@exp,f
  4576  0CC1  0828               	movf	___ftpack@exp,w
  4577  0CC2  00AC               	movwf	??___ftpack+2
  4578  0CC3  01AB               	clrf	??___ftpack+1
  4579  0CC4  01AA               	clrf	??___ftpack
  4580  0CC5  082A               	movf	??___ftpack,w
  4581  0CC6  04A5               	iorwf	___ftpack@arg,f
  4582  0CC7  082B               	movf	??___ftpack+1,w
  4583  0CC8  04A6               	iorwf	___ftpack@arg+1,f
  4584  0CC9  082C               	movf	??___ftpack+2,w
  4585  0CCA  04A7               	iorwf	___ftpack@arg+2,f
  4586  0CCB  0829               	movf	___ftpack@sign,w
  4587  0CCC  1D03               	btfss	3,2
  4588  0CCD  17A7               	bsf	___ftpack@arg+2,7
  4589  0CCE  0008               	return
  4590  0CCF                     __end_of___ftpack:	
  4591  0CCF                     __ptext23:	
  4592 ;; *************** function _Serial_Print_Int *****************
  4593 ;; Defined at:
  4594 ;;		line 141 in file "serialv2.h"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  val             2   19[BANK0 ] int 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;		None
  4599 ;; Return value:  Size  Location     Type
  4600 ;;		None               void
  4601 ;; Registers used:
  4602 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4603 ;; Tracked objects:
  4604 ;;		On entry : 300/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4608 ;;      Params:         0       2       0       0       0
  4609 ;;      Locals:         0       0       0       0       0
  4610 ;;      Temps:          0       1       0       0       0
  4611 ;;      Totals:         0       3       0       0       0
  4612 ;;Total ram usage:        3 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    6
  4615 ;; This function calls:
  4616 ;;		___awdiv
  4617 ;;		___awmod
  4618 ;; This function is called by:
  4619 ;;		_main
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           
  4624                           ;psect for function _Serial_Print_Int
  4625  0CCF                     _Serial_Print_Int:	
  4626                           
  4627                           ;serialv2.h: 144: if(val < 0){
  4628                           
  4629                           ;incstack = 0
  4630                           ; Regs used in _Serial_Print_Int: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4631  0CCF  1FB4               	btfss	Serial_Print_Int@val+1,7
  4632  0CD0  2CE0               	goto	l6059
  4633  0CD1                     l359:	
  4634  0CD1  1E0C               	btfss	12,4	;volatile
  4635  0CD2  2CD1               	goto	l359
  4636                           
  4637                           ;serialv2.h: 146: TXREG = '-';
  4638  0CD3  302D               	movlw	45
  4639  0CD4  0099               	movwf	25	;volatile
  4640                           
  4641                           ;serialv2.h: 147: _delay(10);
  4642  0CD5  3003               	movlw	3
  4643  0CD6  00B5               	movwf	??_Serial_Print_Int
  4644  0CD7                     u8667:	
  4645  0CD7  0BB5               	decfsz	??_Serial_Print_Int,f
  4646  0CD8  2CD7               	goto	u8667
  4647                           
  4648                           ;serialv2.h: 148: val = -val;
  4649  0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  4650  0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  4651  0CDB  09B3               	comf	Serial_Print_Int@val,f
  4652  0CDC  09B4               	comf	Serial_Print_Int@val+1,f
  4653  0CDD  0AB3               	incf	Serial_Print_Int@val,f
  4654  0CDE  1903               	skipnz
  4655  0CDF  0AB4               	incf	Serial_Print_Int@val+1,f
  4656  0CE0                     l6059:	
  4657                           
  4658                           ;serialv2.h: 149: }
  4659                           ;serialv2.h: 150: if(val > 9999){
  4660  0CE0  0834               	movf	Serial_Print_Int@val+1,w
  4661  0CE1  3A80               	xorlw	128
  4662  0CE2  00FF               	movwf	127
  4663  0CE3  30A7               	movlw	167
  4664  0CE4  027F               	subwf	127,w
  4665  0CE5  1D03               	skipz
  4666  0CE6  2CE9               	goto	u7835
  4667  0CE7  3010               	movlw	16
  4668  0CE8  0233               	subwf	Serial_Print_Int@val,w
  4669  0CE9                     u7835:	
  4670  0CE9  1C03               	skipc
  4671  0CEA  2D61               	goto	l6087
  4672  0CEB                     l363:	
  4673  0CEB  1283               	bcf	3,5	;RP0=0, select bank0
  4674  0CEC  1303               	bcf	3,6	;RP1=0, select bank0
  4675  0CED  1E0C               	btfss	12,4	;volatile
  4676  0CEE  2CEB               	goto	l363
  4677                           
  4678                           ;serialv2.h: 152: TXREG = val/10000+48;
  4679  0CEF  3010               	movlw	16
  4680  0CF0  00AB               	movwf	___awdiv@divisor
  4681  0CF1  3027               	movlw	39
  4682  0CF2  00AC               	movwf	___awdiv@divisor+1
  4683  0CF3  0834               	movf	Serial_Print_Int@val+1,w
  4684  0CF4  00AE               	movwf	___awdiv@dividend+1
  4685  0CF5  0833               	movf	Serial_Print_Int@val,w
  4686  0CF6  00AD               	movwf	___awdiv@dividend
  4687  0CF7  2717  120A  158A   	fcall	___awdiv
  4688  0CFA  082B               	movf	?___awdiv,w
  4689  0CFB  3E30               	addlw	48
  4690  0CFC  0099               	movwf	25	;volatile
  4691                           
  4692                           ;serialv2.h: 153: _delay(10);
  4693  0CFD  3003               	movlw	3
  4694  0CFE  00B5               	movwf	??_Serial_Print_Int
  4695  0CFF                     u8677:	
  4696  0CFF  0BB5               	decfsz	??_Serial_Print_Int,f
  4697  0D00  2CFF               	goto	u8677
  4698                           
  4699                           ;serialv2.h: 154: val = val%10000;
  4700  0D01  27F9  120A  158A   	fcall	PL30	;call to abstracted procedure
  4701  0D04  0834               	movf	Serial_Print_Int@val+1,w
  4702  0D05  00A8               	movwf	___awmod@dividend+1
  4703  0D06  0833               	movf	Serial_Print_Int@val,w
  4704  0D07  00A7               	movwf	___awmod@dividend
  4705  0D08  275C  120A  158A   	fcall	___awmod
  4706  0D0B  0826               	movf	?___awmod+1,w
  4707  0D0C  00B4               	movwf	Serial_Print_Int@val+1
  4708  0D0D  0825               	movf	?___awmod,w
  4709  0D0E  00B3               	movwf	Serial_Print_Int@val
  4710  0D0F                     l366:	
  4711                           ;serialv2.h: 156: while(!TXIF);
  4712                           
  4713  0D0F  1E0C               	btfss	12,4	;volatile
  4714  0D10  2D0F               	goto	l366
  4715                           
  4716                           ;serialv2.h: 157: TXREG = val/1000+48;
  4717  0D11  27D9  120A  158A   	fcall	PL20	;call to abstracted procedure
  4718  0D14  2717  120A  158A   	fcall	___awdiv
  4719  0D17  082B               	movf	?___awdiv,w
  4720  0D18  3E30               	addlw	48
  4721  0D19  0099               	movwf	25	;volatile
  4722                           
  4723                           ;serialv2.h: 158: _delay(10);
  4724  0D1A  3003               	movlw	3
  4725  0D1B  00B5               	movwf	??_Serial_Print_Int
  4726  0D1C                     u8687:	
  4727  0D1C  0BB5               	decfsz	??_Serial_Print_Int,f
  4728  0D1D  2D1C               	goto	u8687
  4729                           
  4730                           ;serialv2.h: 159: val = val%1000;
  4731  0D1E  27AB  120A  158A   	fcall	PL10	;call to abstracted procedure
  4732  0D21  275C  120A  158A   	fcall	___awmod
  4733  0D24  0826               	movf	?___awmod+1,w
  4734  0D25  00B4               	movwf	Serial_Print_Int@val+1
  4735  0D26  0825               	movf	?___awmod,w
  4736  0D27  00B3               	movwf	Serial_Print_Int@val
  4737  0D28                     l369:	
  4738                           ;serialv2.h: 161: while(!TXIF);
  4739                           
  4740  0D28  1E0C               	btfss	12,4	;volatile
  4741  0D29  2D28               	goto	l369
  4742                           
  4743                           ;serialv2.h: 162: TXREG = val/100+48;
  4744  0D2A  27B6  120A  158A   	fcall	PL12	;call to abstracted procedure
  4745  0D2D  2717  120A  158A   	fcall	___awdiv
  4746  0D30  082B               	movf	?___awdiv,w
  4747  0D31  3E30               	addlw	48
  4748  0D32  0099               	movwf	25	;volatile
  4749                           
  4750                           ;serialv2.h: 163: _delay(10);
  4751  0D33  3003               	movlw	3
  4752  0D34  00B5               	movwf	??_Serial_Print_Int
  4753  0D35                     u8697:	
  4754  0D35  0BB5               	decfsz	??_Serial_Print_Int,f
  4755  0D36  2D35               	goto	u8697
  4756                           
  4757                           ;serialv2.h: 164: val = val%100;
  4758  0D37  3064               	movlw	100
  4759  0D38  2799  120A  158A   	fcall	PL4	;call to abstracted procedure
  4760  0D3B  275C  120A  158A   	fcall	___awmod
  4761  0D3E  0826               	movf	?___awmod+1,w
  4762  0D3F  00B4               	movwf	Serial_Print_Int@val+1
  4763  0D40  0825               	movf	?___awmod,w
  4764  0D41  00B3               	movwf	Serial_Print_Int@val
  4765  0D42                     l372:	
  4766                           ;serialv2.h: 166: while(!TXIF);
  4767                           
  4768  0D42  1E0C               	btfss	12,4	;volatile
  4769  0D43  2D42               	goto	l372
  4770  0D44                     l6081:	
  4771                           
  4772                           ;serialv2.h: 167: TXREG = val/10+48;
  4773  0D44  300A               	movlw	10
  4774  0D45  00AB               	movwf	___awdiv@divisor
  4775  0D46  01AC               	clrf	___awdiv@divisor+1
  4776  0D47  0834               	movf	Serial_Print_Int@val+1,w
  4777  0D48  00AE               	movwf	___awdiv@dividend+1
  4778  0D49  0833               	movf	Serial_Print_Int@val,w
  4779  0D4A  00AD               	movwf	___awdiv@dividend
  4780  0D4B  2717  120A  158A   	fcall	___awdiv
  4781  0D4E  082B               	movf	?___awdiv,w
  4782  0D4F  3E30               	addlw	48
  4783  0D50  0099               	movwf	25	;volatile
  4784                           
  4785                           ;serialv2.h: 168: _delay(10);
  4786  0D51  3003               	movlw	3
  4787  0D52  00B5               	movwf	??_Serial_Print_Int
  4788  0D53                     u8707:	
  4789  0D53  0BB5               	decfsz	??_Serial_Print_Int,f
  4790  0D54  2D53               	goto	u8707
  4791                           
  4792                           ;serialv2.h: 169: val = val%10;
  4793  0D55  300A               	movlw	10
  4794  0D56  2799  120A  158A   	fcall	PL4	;call to abstracted procedure
  4795  0D59  275C  120A  158A   	fcall	___awmod
  4796  0D5C  0826               	movf	?___awmod+1,w
  4797  0D5D  00B4               	movwf	Serial_Print_Int@val+1
  4798  0D5E  0825               	movf	?___awmod,w
  4799  0D5F  00B3               	movwf	Serial_Print_Int@val
  4800                           
  4801                           ;serialv2.h: 170: }
  4802  0D60  2DDC               	goto	l399
  4803  0D61                     l6087:	
  4804                           
  4805                           ;serialv2.h: 171: else if(val > 999){
  4806  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  4807  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  4808  0D63  0834               	movf	Serial_Print_Int@val+1,w
  4809  0D64  3A80               	xorlw	128
  4810  0D65  00FF               	movwf	127
  4811  0D66  3083               	movlw	131
  4812  0D67  027F               	subwf	127,w
  4813  0D68  1D03               	skipz
  4814  0D69  2D6C               	goto	u7885
  4815  0D6A  30E8               	movlw	232
  4816  0D6B  0233               	subwf	Serial_Print_Int@val,w
  4817  0D6C                     u7885:	
  4818  0D6C  1C03               	skipc
  4819  0D6D  2DA6               	goto	l6109
  4820  0D6E                     l377:	
  4821  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  4822  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
  4823  0D70  1E0C               	btfss	12,4	;volatile
  4824  0D71  2D6E               	goto	l377
  4825                           
  4826                           ;serialv2.h: 173: TXREG = val/1000+48;
  4827  0D72  27D9  120A  158A   	fcall	PL20	;call to abstracted procedure
  4828  0D75  2717  120A  158A   	fcall	___awdiv
  4829  0D78  082B               	movf	?___awdiv,w
  4830  0D79  3E30               	addlw	48
  4831  0D7A  0099               	movwf	25	;volatile
  4832                           
  4833                           ;serialv2.h: 174: _delay(10);
  4834  0D7B  3003               	movlw	3
  4835  0D7C  00B5               	movwf	??_Serial_Print_Int
  4836  0D7D                     u8717:	
  4837  0D7D  0BB5               	decfsz	??_Serial_Print_Int,f
  4838  0D7E  2D7D               	goto	u8717
  4839                           
  4840                           ;serialv2.h: 175: val = val%1000;
  4841  0D7F  27AB  120A  158A   	fcall	PL10	;call to abstracted procedure
  4842  0D82  275C  120A  158A   	fcall	___awmod
  4843  0D85  0826               	movf	?___awmod+1,w
  4844  0D86  00B4               	movwf	Serial_Print_Int@val+1
  4845  0D87  0825               	movf	?___awmod,w
  4846  0D88  00B3               	movwf	Serial_Print_Int@val
  4847  0D89                     l380:	
  4848                           ;serialv2.h: 177: while(!TXIF);
  4849                           
  4850  0D89  1E0C               	btfss	12,4	;volatile
  4851  0D8A  2D89               	goto	l380
  4852                           
  4853                           ;serialv2.h: 178: TXREG = val/100+48;
  4854  0D8B  27B6  120A  158A   	fcall	PL12	;call to abstracted procedure
  4855  0D8E  2717  120A  158A   	fcall	___awdiv
  4856  0D91  082B               	movf	?___awdiv,w
  4857  0D92  3E30               	addlw	48
  4858  0D93  0099               	movwf	25	;volatile
  4859                           
  4860                           ;serialv2.h: 179: _delay(10);
  4861  0D94  3003               	movlw	3
  4862  0D95  00B5               	movwf	??_Serial_Print_Int
  4863  0D96                     u8727:	
  4864  0D96  0BB5               	decfsz	??_Serial_Print_Int,f
  4865  0D97  2D96               	goto	u8727
  4866                           
  4867                           ;serialv2.h: 180: val = val%100;
  4868  0D98  3064               	movlw	100
  4869  0D99  2799  120A  158A   	fcall	PL4	;call to abstracted procedure
  4870  0D9C  275C  120A  158A   	fcall	___awmod
  4871  0D9F  0826               	movf	?___awmod+1,w
  4872  0DA0  00B4               	movwf	Serial_Print_Int@val+1
  4873  0DA1  0825               	movf	?___awmod,w
  4874  0DA2  00B3               	movwf	Serial_Print_Int@val
  4875  0DA3                     l383:	
  4876                           ;serialv2.h: 182: while(!TXIF);
  4877                           
  4878  0DA3  1A0C               	btfsc	12,4	;volatile
  4879  0DA4  2D44               	goto	l6081
  4880  0DA5  2DA3               	goto	l383
  4881  0DA6                     l6109:	
  4882                           
  4883                           ;serialv2.h: 187: else if(val > 99){
  4884  0DA6  27E2  120A  158A   	fcall	PL22	;call to abstracted procedure
  4885  0DA9  1D03               	skipz
  4886  0DAA  2DAD               	goto	u7925
  4887  0DAB  3064               	movlw	100
  4888  0DAC  0233               	subwf	Serial_Print_Int@val,w
  4889  0DAD                     u7925:	
  4890  0DAD  1C03               	skipc
  4891  0DAE  2DCE               	goto	l6125
  4892  0DAF                     l388:	
  4893  0DAF  1283               	bcf	3,5	;RP0=0, select bank0
  4894  0DB0  1303               	bcf	3,6	;RP1=0, select bank0
  4895  0DB1  1E0C               	btfss	12,4	;volatile
  4896  0DB2  2DAF               	goto	l388
  4897                           
  4898                           ;serialv2.h: 189: TXREG = val/100+48;
  4899  0DB3  27B6  120A  158A   	fcall	PL12	;call to abstracted procedure
  4900  0DB6  2717  120A  158A   	fcall	___awdiv
  4901  0DB9  082B               	movf	?___awdiv,w
  4902  0DBA  3E30               	addlw	48
  4903  0DBB  0099               	movwf	25	;volatile
  4904                           
  4905                           ;serialv2.h: 190: _delay(10);
  4906  0DBC  3003               	movlw	3
  4907  0DBD  00B5               	movwf	??_Serial_Print_Int
  4908  0DBE                     u8737:	
  4909  0DBE  0BB5               	decfsz	??_Serial_Print_Int,f
  4910  0DBF  2DBE               	goto	u8737
  4911                           
  4912                           ;serialv2.h: 191: val = val%100;
  4913  0DC0  3064               	movlw	100
  4914  0DC1  2799  120A  158A   	fcall	PL4	;call to abstracted procedure
  4915  0DC4  275C  120A  158A   	fcall	___awmod
  4916  0DC7  0826               	movf	?___awmod+1,w
  4917  0DC8  00B4               	movwf	Serial_Print_Int@val+1
  4918  0DC9  0825               	movf	?___awmod,w
  4919  0DCA  00B3               	movwf	Serial_Print_Int@val
  4920  0DCB                     l391:	
  4921                           ;serialv2.h: 193: while(!TXIF);
  4922                           
  4923  0DCB  1A0C               	btfsc	12,4	;volatile
  4924  0DCC  2D44               	goto	l6081
  4925  0DCD  2DCB               	goto	l391
  4926  0DCE                     l6125:	
  4927                           
  4928                           ;serialv2.h: 198: else if(val > 9){
  4929  0DCE  27E2  120A  158A   	fcall	PL22	;call to abstracted procedure
  4930  0DD1  1D03               	skipz
  4931  0DD2  2DD5               	goto	u7955
  4932  0DD3  300A               	movlw	10
  4933  0DD4  0233               	subwf	Serial_Print_Int@val,w
  4934  0DD5                     u7955:	
  4935  0DD5  1C03               	skipc
  4936  0DD6  2DDC               	goto	l399
  4937  0DD7                     l396:	
  4938  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  4939  0DD8  1303               	bcf	3,6	;RP1=0, select bank0
  4940  0DD9  1A0C               	btfsc	12,4	;volatile
  4941  0DDA  2D44               	goto	l6081
  4942  0DDB  2DD7               	goto	l396
  4943  0DDC                     l399:	
  4944  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  4945  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  4946  0DDE  1E0C               	btfss	12,4	;volatile
  4947  0DDF  2DDC               	goto	l399
  4948                           
  4949                           ;serialv2.h: 205: TXREG = val+48;
  4950  0DE0  0833               	movf	Serial_Print_Int@val,w
  4951  0DE1  3E30               	addlw	48
  4952  0DE2  0099               	movwf	25	;volatile
  4953                           
  4954                           ;serialv2.h: 206: _delay(10);
  4955  0DE3  3003               	movlw	3
  4956  0DE4  00B5               	movwf	??_Serial_Print_Int
  4957  0DE5                     u8747:	
  4958  0DE5  0BB5               	decfsz	??_Serial_Print_Int,f
  4959  0DE6  2DE5               	goto	u8747
  4960  0DE7  0008               	return
  4961  0DE8                     __end_of_Serial_Print_Int:	
  4962  0DE8                     __ptext34:	
  4963 ;; *************** function _Serial_Println_Int *****************
  4964 ;; Defined at:
  4965 ;;		line 58 in file "serialv2.h"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  val             2   19[BANK0 ] int 
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;		None
  4970 ;; Return value:  Size  Location     Type
  4971 ;;		None               void
  4972 ;; Registers used:
  4973 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4974 ;; Tracked objects:
  4975 ;;		On entry : 300/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4979 ;;      Params:         0       2       0       0       0
  4980 ;;      Locals:         0       0       0       0       0
  4981 ;;      Temps:          0       1       0       0       0
  4982 ;;      Totals:         0       3       0       0       0
  4983 ;;Total ram usage:        3 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:    6
  4986 ;; This function calls:
  4987 ;;		___awdiv
  4988 ;;		___awmod
  4989 ;; This function is called by:
  4990 ;;		_main
  4991 ;;		_CheckMode
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           
  4996                           ;psect for function _Serial_Println_Int
  4997  0DE8                     _Serial_Println_Int:	
  4998                           
  4999                           ;serialv2.h: 61: if(val < 0){
  5000                           
  5001                           ;incstack = 0
  5002                           ; Regs used in _Serial_Println_Int: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5003  0DE8  1FB4               	btfss	Serial_Println_Int@val+1,7
  5004  0DE9  2DF9               	goto	l5503
  5005  0DEA                     l300:	
  5006  0DEA  1E0C               	btfss	12,4	;volatile
  5007  0DEB  2DEA               	goto	l300
  5008                           
  5009                           ;serialv2.h: 63: TXREG = '-';
  5010  0DEC  302D               	movlw	45
  5011  0DED  0099               	movwf	25	;volatile
  5012                           
  5013                           ;serialv2.h: 64: _delay(10);
  5014  0DEE  3003               	movlw	3
  5015  0DEF  00B5               	movwf	??_Serial_Println_Int
  5016  0DF0                     u8867:	
  5017  0DF0  0BB5               	decfsz	??_Serial_Println_Int,f
  5018  0DF1  2DF0               	goto	u8867
  5019                           
  5020                           ;serialv2.h: 65: val = -val;
  5021  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  5022  0DF3  1303               	bcf	3,6	;RP1=0, select bank0
  5023  0DF4  09B3               	comf	Serial_Println_Int@val,f
  5024  0DF5  09B4               	comf	Serial_Println_Int@val+1,f
  5025  0DF6  0AB3               	incf	Serial_Println_Int@val,f
  5026  0DF7  1903               	skipnz
  5027  0DF8  0AB4               	incf	Serial_Println_Int@val+1,f
  5028  0DF9                     l5503:	
  5029                           
  5030                           ;serialv2.h: 66: }
  5031                           ;serialv2.h: 67: if(val > 9999){
  5032  0DF9  0834               	movf	Serial_Println_Int@val+1,w
  5033  0DFA  3A80               	xorlw	128
  5034  0DFB  00FF               	movwf	127
  5035  0DFC  30A7               	movlw	167
  5036  0DFD  027F               	subwf	127,w
  5037  0DFE  1D03               	skipz
  5038  0DFF  2E02               	goto	u6865
  5039  0E00  3010               	movlw	16
  5040  0E01  0233               	subwf	Serial_Println_Int@val,w
  5041  0E02                     u6865:	
  5042  0E02  1C03               	skipc
  5043  0E03  2E7B               	goto	l5531
  5044  0E04                     l304:	
  5045  0E04  1283               	bcf	3,5	;RP0=0, select bank0
  5046  0E05  1303               	bcf	3,6	;RP1=0, select bank0
  5047  0E06  1E0C               	btfss	12,4	;volatile
  5048  0E07  2E04               	goto	l304
  5049                           
  5050                           ;serialv2.h: 69: TXREG = val/10000+48;
  5051  0E08  3010               	movlw	16
  5052  0E09  00AB               	movwf	___awdiv@divisor
  5053  0E0A  3027               	movlw	39
  5054  0E0B  00AC               	movwf	___awdiv@divisor+1
  5055  0E0C  0834               	movf	Serial_Println_Int@val+1,w
  5056  0E0D  00AE               	movwf	___awdiv@dividend+1
  5057  0E0E  0833               	movf	Serial_Println_Int@val,w
  5058  0E0F  00AD               	movwf	___awdiv@dividend
  5059  0E10  2717  120A  158A   	fcall	___awdiv
  5060  0E13  082B               	movf	?___awdiv,w
  5061  0E14  3E30               	addlw	48
  5062  0E15  0099               	movwf	25	;volatile
  5063                           
  5064                           ;serialv2.h: 70: _delay(10);
  5065  0E16  3003               	movlw	3
  5066  0E17  00B5               	movwf	??_Serial_Println_Int
  5067  0E18                     u8877:	
  5068  0E18  0BB5               	decfsz	??_Serial_Println_Int,f
  5069  0E19  2E18               	goto	u8877
  5070                           
  5071                           ;serialv2.h: 71: val = val%10000;
  5072  0E1A  27F9  120A  158A   	fcall	PL30	;call to abstracted procedure
  5073  0E1D  0834               	movf	Serial_Println_Int@val+1,w
  5074  0E1E  00A8               	movwf	___awmod@dividend+1
  5075  0E1F  0833               	movf	Serial_Println_Int@val,w
  5076  0E20  00A7               	movwf	___awmod@dividend
  5077  0E21  275C  120A  158A   	fcall	___awmod
  5078  0E24  0826               	movf	?___awmod+1,w
  5079  0E25  00B4               	movwf	Serial_Println_Int@val+1
  5080  0E26  0825               	movf	?___awmod,w
  5081  0E27  00B3               	movwf	Serial_Println_Int@val
  5082  0E28                     l307:	
  5083                           ;serialv2.h: 73: while(!TXIF);
  5084                           
  5085  0E28  1E0C               	btfss	12,4	;volatile
  5086  0E29  2E28               	goto	l307
  5087                           
  5088                           ;serialv2.h: 74: TXREG = val/1000+48;
  5089  0E2A  27D0  120A  158A   	fcall	PL18	;call to abstracted procedure
  5090  0E2D  2717  120A  158A   	fcall	___awdiv
  5091  0E30  082B               	movf	?___awdiv,w
  5092  0E31  3E30               	addlw	48
  5093  0E32  0099               	movwf	25	;volatile
  5094                           
  5095                           ;serialv2.h: 75: _delay(10);
  5096  0E33  3003               	movlw	3
  5097  0E34  00B5               	movwf	??_Serial_Println_Int
  5098  0E35                     u8887:	
  5099  0E35  0BB5               	decfsz	??_Serial_Println_Int,f
  5100  0E36  2E35               	goto	u8887
  5101                           
  5102                           ;serialv2.h: 76: val = val%1000;
  5103  0E37  30E8               	movlw	232
  5104  0E38  27C6  120A  158A   	fcall	PL16	;call to abstracted procedure
  5105  0E3B  275C  120A  158A   	fcall	___awmod
  5106  0E3E  0826               	movf	?___awmod+1,w
  5107  0E3F  00B4               	movwf	Serial_Println_Int@val+1
  5108  0E40  0825               	movf	?___awmod,w
  5109  0E41  00B3               	movwf	Serial_Println_Int@val
  5110  0E42                     l310:	
  5111                           ;serialv2.h: 78: while(!TXIF);
  5112                           
  5113  0E42  1E0C               	btfss	12,4	;volatile
  5114  0E43  2E42               	goto	l310
  5115                           
  5116                           ;serialv2.h: 79: TXREG = val/100+48;
  5117  0E44  27BE  120A  158A   	fcall	PL14	;call to abstracted procedure
  5118  0E47  2717  120A  158A   	fcall	___awdiv
  5119  0E4A  082B               	movf	?___awdiv,w
  5120  0E4B  3E30               	addlw	48
  5121  0E4C  0099               	movwf	25	;volatile
  5122                           
  5123                           ;serialv2.h: 80: _delay(10);
  5124  0E4D  3003               	movlw	3
  5125  0E4E  00B5               	movwf	??_Serial_Println_Int
  5126  0E4F                     u8897:	
  5127  0E4F  0BB5               	decfsz	??_Serial_Println_Int,f
  5128  0E50  2E4F               	goto	u8897
  5129                           
  5130                           ;serialv2.h: 81: val = val%100;
  5131  0E51  3064               	movlw	100
  5132  0E52  27A2  120A  158A   	fcall	PL6	;call to abstracted procedure
  5133  0E55  275C  120A  158A   	fcall	___awmod
  5134  0E58  0826               	movf	?___awmod+1,w
  5135  0E59  00B4               	movwf	Serial_Println_Int@val+1
  5136  0E5A  0825               	movf	?___awmod,w
  5137  0E5B  00B3               	movwf	Serial_Println_Int@val
  5138  0E5C                     l313:	
  5139                           ;serialv2.h: 83: while(!TXIF);
  5140                           
  5141  0E5C  1E0C               	btfss	12,4	;volatile
  5142  0E5D  2E5C               	goto	l313
  5143  0E5E                     l5525:	
  5144                           
  5145                           ;serialv2.h: 84: TXREG = val/10+48;
  5146  0E5E  300A               	movlw	10
  5147  0E5F  00AB               	movwf	___awdiv@divisor
  5148  0E60  01AC               	clrf	___awdiv@divisor+1
  5149  0E61  0834               	movf	Serial_Println_Int@val+1,w
  5150  0E62  00AE               	movwf	___awdiv@dividend+1
  5151  0E63  0833               	movf	Serial_Println_Int@val,w
  5152  0E64  00AD               	movwf	___awdiv@dividend
  5153  0E65  2717  120A  158A   	fcall	___awdiv
  5154  0E68  082B               	movf	?___awdiv,w
  5155  0E69  3E30               	addlw	48
  5156  0E6A  0099               	movwf	25	;volatile
  5157                           
  5158                           ;serialv2.h: 85: _delay(10);
  5159  0E6B  3003               	movlw	3
  5160  0E6C  00B5               	movwf	??_Serial_Println_Int
  5161  0E6D                     u8907:	
  5162  0E6D  0BB5               	decfsz	??_Serial_Println_Int,f
  5163  0E6E  2E6D               	goto	u8907
  5164                           
  5165                           ;serialv2.h: 86: val = val%10;
  5166  0E6F  300A               	movlw	10
  5167  0E70  27A2  120A  158A   	fcall	PL6	;call to abstracted procedure
  5168  0E73  275C  120A  158A   	fcall	___awmod
  5169  0E76  0826               	movf	?___awmod+1,w
  5170  0E77  00B4               	movwf	Serial_Println_Int@val+1
  5171  0E78  0825               	movf	?___awmod,w
  5172  0E79  00B3               	movwf	Serial_Println_Int@val
  5173                           
  5174                           ;serialv2.h: 87: }
  5175  0E7A  2EF7               	goto	l340
  5176  0E7B                     l5531:	
  5177                           
  5178                           ;serialv2.h: 88: else if(val > 999){
  5179  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  5180  0E7C  1303               	bcf	3,6	;RP1=0, select bank0
  5181  0E7D  0834               	movf	Serial_Println_Int@val+1,w
  5182  0E7E  3A80               	xorlw	128
  5183  0E7F  00FF               	movwf	127
  5184  0E80  3083               	movlw	131
  5185  0E81  027F               	subwf	127,w
  5186  0E82  1D03               	skipz
  5187  0E83  2E86               	goto	u6915
  5188  0E84  30E8               	movlw	232
  5189  0E85  0233               	subwf	Serial_Println_Int@val,w
  5190  0E86                     u6915:	
  5191  0E86  1C03               	skipc
  5192  0E87  2EC1               	goto	l5553
  5193  0E88                     l318:	
  5194  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  5195  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  5196  0E8A  1E0C               	btfss	12,4	;volatile
  5197  0E8B  2E88               	goto	l318
  5198                           
  5199                           ;serialv2.h: 90: TXREG = val/1000+48;
  5200  0E8C  27D0  120A  158A   	fcall	PL18	;call to abstracted procedure
  5201  0E8F  2717  120A  158A   	fcall	___awdiv
  5202  0E92  082B               	movf	?___awdiv,w
  5203  0E93  3E30               	addlw	48
  5204  0E94  0099               	movwf	25	;volatile
  5205                           
  5206                           ;serialv2.h: 91: _delay(10);
  5207  0E95  3003               	movlw	3
  5208  0E96  00B5               	movwf	??_Serial_Println_Int
  5209  0E97                     u8917:	
  5210  0E97  0BB5               	decfsz	??_Serial_Println_Int,f
  5211  0E98  2E97               	goto	u8917
  5212                           
  5213                           ;serialv2.h: 92: val = val%1000;
  5214  0E99  30E8               	movlw	232
  5215  0E9A  27C6  120A  158A   	fcall	PL16	;call to abstracted procedure
  5216  0E9D  275C  120A  158A   	fcall	___awmod
  5217  0EA0  0826               	movf	?___awmod+1,w
  5218  0EA1  00B4               	movwf	Serial_Println_Int@val+1
  5219  0EA2  0825               	movf	?___awmod,w
  5220  0EA3  00B3               	movwf	Serial_Println_Int@val
  5221  0EA4                     l321:	
  5222                           ;serialv2.h: 94: while(!TXIF);
  5223                           
  5224  0EA4  1E0C               	btfss	12,4	;volatile
  5225  0EA5  2EA4               	goto	l321
  5226                           
  5227                           ;serialv2.h: 95: TXREG = val/100+48;
  5228  0EA6  27BE  120A  158A   	fcall	PL14	;call to abstracted procedure
  5229  0EA9  2717  120A  158A   	fcall	___awdiv
  5230  0EAC  082B               	movf	?___awdiv,w
  5231  0EAD  3E30               	addlw	48
  5232  0EAE  0099               	movwf	25	;volatile
  5233                           
  5234                           ;serialv2.h: 96: _delay(10);
  5235  0EAF  3003               	movlw	3
  5236  0EB0  00B5               	movwf	??_Serial_Println_Int
  5237  0EB1                     u8927:	
  5238  0EB1  0BB5               	decfsz	??_Serial_Println_Int,f
  5239  0EB2  2EB1               	goto	u8927
  5240                           
  5241                           ;serialv2.h: 97: val = val%100;
  5242  0EB3  3064               	movlw	100
  5243  0EB4  27A2  120A  158A   	fcall	PL6	;call to abstracted procedure
  5244  0EB7  275C  120A  158A   	fcall	___awmod
  5245  0EBA  0826               	movf	?___awmod+1,w
  5246  0EBB  00B4               	movwf	Serial_Println_Int@val+1
  5247  0EBC  0825               	movf	?___awmod,w
  5248  0EBD  00B3               	movwf	Serial_Println_Int@val
  5249  0EBE                     l324:	
  5250                           ;serialv2.h: 99: while(!TXIF);
  5251                           
  5252  0EBE  1A0C               	btfsc	12,4	;volatile
  5253  0EBF  2E5E               	goto	l5525
  5254  0EC0  2EBE               	goto	l324
  5255  0EC1                     l5553:	
  5256                           
  5257                           ;serialv2.h: 104: else if(val > 99){
  5258  0EC1  27EA  120A  158A   	fcall	PL24	;call to abstracted procedure
  5259  0EC4  1D03               	skipz
  5260  0EC5  2EC8               	goto	u6955
  5261  0EC6  3064               	movlw	100
  5262  0EC7  0233               	subwf	Serial_Println_Int@val,w
  5263  0EC8                     u6955:	
  5264  0EC8  1C03               	skipc
  5265  0EC9  2EE9               	goto	l5569
  5266  0ECA                     l329:	
  5267  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  5268  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  5269  0ECC  1E0C               	btfss	12,4	;volatile
  5270  0ECD  2ECA               	goto	l329
  5271                           
  5272                           ;serialv2.h: 106: TXREG = val/100+48;
  5273  0ECE  27BE  120A  158A   	fcall	PL14	;call to abstracted procedure
  5274  0ED1  2717  120A  158A   	fcall	___awdiv
  5275  0ED4  082B               	movf	?___awdiv,w
  5276  0ED5  3E30               	addlw	48
  5277  0ED6  0099               	movwf	25	;volatile
  5278                           
  5279                           ;serialv2.h: 107: _delay(10);
  5280  0ED7  3003               	movlw	3
  5281  0ED8  00B5               	movwf	??_Serial_Println_Int
  5282  0ED9                     u8937:	
  5283  0ED9  0BB5               	decfsz	??_Serial_Println_Int,f
  5284  0EDA  2ED9               	goto	u8937
  5285                           
  5286                           ;serialv2.h: 108: val = val%100;
  5287  0EDB  3064               	movlw	100
  5288  0EDC  27A2  120A  158A   	fcall	PL6	;call to abstracted procedure
  5289  0EDF  275C  120A  158A   	fcall	___awmod
  5290  0EE2  0826               	movf	?___awmod+1,w
  5291  0EE3  00B4               	movwf	Serial_Println_Int@val+1
  5292  0EE4  0825               	movf	?___awmod,w
  5293  0EE5  00B3               	movwf	Serial_Println_Int@val
  5294  0EE6                     l332:	
  5295                           ;serialv2.h: 110: while(!TXIF);
  5296                           
  5297  0EE6  1A0C               	btfsc	12,4	;volatile
  5298  0EE7  2E5E               	goto	l5525
  5299  0EE8  2EE6               	goto	l332
  5300  0EE9                     l5569:	
  5301                           
  5302                           ;serialv2.h: 115: else if(val > 9){
  5303  0EE9  27EA  120A  158A   	fcall	PL24	;call to abstracted procedure
  5304  0EEC  1D03               	skipz
  5305  0EED  2EF0               	goto	u6985
  5306  0EEE  300A               	movlw	10
  5307  0EEF  0233               	subwf	Serial_Println_Int@val,w
  5308  0EF0                     u6985:	
  5309  0EF0  1C03               	skipc
  5310  0EF1  2EF7               	goto	l340
  5311  0EF2                     l337:	
  5312  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  5313  0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  5314  0EF4  1A0C               	btfsc	12,4	;volatile
  5315  0EF5  2E5E               	goto	l5525
  5316  0EF6  2EF2               	goto	l337
  5317  0EF7                     l340:	
  5318  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  5319  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  5320  0EF9  1E0C               	btfss	12,4	;volatile
  5321  0EFA  2EF7               	goto	l340
  5322                           
  5323                           ;serialv2.h: 122: TXREG = val+48;
  5324  0EFB  0833               	movf	Serial_Println_Int@val,w
  5325  0EFC  3E30               	addlw	48
  5326  0EFD  0099               	movwf	25	;volatile
  5327                           
  5328                           ;serialv2.h: 123: _delay(10);
  5329  0EFE  3003               	movlw	3
  5330  0EFF  00B5               	movwf	??_Serial_Println_Int
  5331  0F00                     u8947:	
  5332  0F00  0BB5               	decfsz	??_Serial_Println_Int,f
  5333  0F01  2F00               	goto	u8947
  5334  0F02                     l343:	
  5335                           ;serialv2.h: 124: while(!TXIF);
  5336                           
  5337  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  5338  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  5339  0F04  1E0C               	btfss	12,4	;volatile
  5340  0F05  2F02               	goto	l343
  5341                           
  5342                           ;serialv2.h: 125: TXREG = 13;
  5343  0F06  300D               	movlw	13
  5344  0F07  0099               	movwf	25	;volatile
  5345                           
  5346                           ;serialv2.h: 126: _delay(10);
  5347  0F08  3003               	movlw	3
  5348  0F09  00B5               	movwf	??_Serial_Println_Int
  5349  0F0A                     u8957:	
  5350  0F0A  0BB5               	decfsz	??_Serial_Println_Int,f
  5351  0F0B  2F0A               	goto	u8957
  5352  0F0C                     l346:	
  5353                           ;serialv2.h: 127: while(!TXIF);
  5354                           
  5355  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  5356  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  5357  0F0E  1E0C               	btfss	12,4	;volatile
  5358  0F0F  2F0C               	goto	l346
  5359                           
  5360                           ;serialv2.h: 128: TXREG = 10;
  5361  0F10  300A               	movlw	10
  5362  0F11  0099               	movwf	25	;volatile
  5363                           
  5364                           ;serialv2.h: 129: _delay(10);
  5365  0F12  3003               	movlw	3
  5366  0F13  00B5               	movwf	??_Serial_Println_Int
  5367  0F14                     u8967:	
  5368  0F14  0BB5               	decfsz	??_Serial_Println_Int,f
  5369  0F15  2F14               	goto	u8967
  5370  0F16  0008               	return
  5371  0F17                     __end_of_Serial_Println_Int:	
  5372  0F17                     __ptext36:	
  5373 ;; *************** function ___awdiv *****************
  5374 ;; Defined at:
  5375 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  divisor         2   11[BANK0 ] int 
  5378 ;;  dividend        2   13[BANK0 ] int 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  quotient        2   17[BANK0 ] int 
  5381 ;;  sign            1   16[BANK0 ] unsigned char 
  5382 ;;  counter         1   15[BANK0 ] unsigned char 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  2   11[BANK0 ] int 
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, status,0
  5387 ;; Tracked objects:
  5388 ;;		On entry : 300/0
  5389 ;;		On exit  : 300/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5392 ;;      Params:         0       4       0       0       0
  5393 ;;      Locals:         0       4       0       0       0
  5394 ;;      Temps:          0       0       0       0       0
  5395 ;;      Totals:         0       8       0       0       0
  5396 ;;Total ram usage:        8 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    5
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_Serial_Println_Int
  5403 ;;		_Serial_Print_Int
  5404 ;;		_main
  5405 ;;		_a2d_read
  5406 ;; This function uses a non-reentrant model
  5407 ;;
  5408                           
  5409                           
  5410                           ;psect for function ___awdiv
  5411  0F17                     ___awdiv:	
  5412  0F17                     l5371:	
  5413                           ;incstack = 0
  5414                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5415                           
  5416  0F17  01B0               	clrf	___awdiv@sign
  5417  0F18  1FAC               	btfss	___awdiv@divisor+1,7
  5418  0F19  2F21               	goto	l5379
  5419  0F1A  09AB               	comf	___awdiv@divisor,f
  5420  0F1B  09AC               	comf	___awdiv@divisor+1,f
  5421  0F1C  0AAB               	incf	___awdiv@divisor,f
  5422  0F1D  1903               	skipnz
  5423  0F1E  0AAC               	incf	___awdiv@divisor+1,f
  5424  0F1F  01B0               	clrf	___awdiv@sign
  5425  0F20  0AB0               	incf	___awdiv@sign,f
  5426  0F21                     l5379:	
  5427  0F21  1FAE               	btfss	___awdiv@dividend+1,7
  5428  0F22  2F2A               	goto	l5385
  5429  0F23  09AD               	comf	___awdiv@dividend,f
  5430  0F24  09AE               	comf	___awdiv@dividend+1,f
  5431  0F25  0AAD               	incf	___awdiv@dividend,f
  5432  0F26  1903               	skipnz
  5433  0F27  0AAE               	incf	___awdiv@dividend+1,f
  5434  0F28  3001               	movlw	1
  5435  0F29  06B0               	xorwf	___awdiv@sign,f
  5436  0F2A                     l5385:	
  5437  0F2A  01B1               	clrf	___awdiv@quotient
  5438  0F2B  01B2               	clrf	___awdiv@quotient+1
  5439  0F2C  082B               	movf	___awdiv@divisor,w
  5440  0F2D  042C               	iorwf	___awdiv@divisor+1,w
  5441  0F2E  1903               	btfsc	3,2
  5442  0F2F  2F4F               	goto	l5407
  5443  0F30  01AF               	clrf	___awdiv@counter
  5444  0F31                     L16:	
  5445  0F31  0AAF               	incf	___awdiv@counter,f
  5446  0F32  1BAC               	btfsc	___awdiv@divisor+1,7
  5447  0F33  2F38               	goto	l5395
  5448  0F34  1003               	clrc
  5449  0F35  0DAB               	rlf	___awdiv@divisor,f
  5450  0F36  0DAC               	rlf	___awdiv@divisor+1,f
  5451  0F37  2F31               	goto	L16
  5452  0F38                     l5395:	
  5453  0F38  1003               	clrc
  5454  0F39  0DB1               	rlf	___awdiv@quotient,f
  5455  0F3A  0DB2               	rlf	___awdiv@quotient+1,f
  5456  0F3B  082C               	movf	___awdiv@divisor+1,w
  5457  0F3C  022E               	subwf	___awdiv@dividend+1,w
  5458  0F3D  1D03               	skipz
  5459  0F3E  2F41               	goto	u6715
  5460  0F3F  082B               	movf	___awdiv@divisor,w
  5461  0F40  022D               	subwf	___awdiv@dividend,w
  5462  0F41                     u6715:	
  5463  0F41  1C03               	skipc
  5464  0F42  2F4B               	goto	L17
  5465  0F43  082B               	movf	___awdiv@divisor,w
  5466  0F44  02AD               	subwf	___awdiv@dividend,f
  5467  0F45  082C               	movf	___awdiv@divisor+1,w
  5468  0F46  1C03               	skipc
  5469  0F47  03AE               	decf	___awdiv@dividend+1,f
  5470  0F48  02AE               	subwf	___awdiv@dividend+1,f
  5471  0F49  1431               	bsf	___awdiv@quotient,0
  5472  0F4A  1003               	clrc
  5473  0F4B                     L17:	
  5474  0F4B  0CAC               	rrf	___awdiv@divisor+1,f
  5475  0F4C  0CAB               	rrf	___awdiv@divisor,f
  5476  0F4D  0BAF               	decfsz	___awdiv@counter,f
  5477  0F4E  2F38               	goto	l5395
  5478  0F4F                     l5407:	
  5479  0F4F  0830               	movf	___awdiv@sign,w
  5480  0F50  1903               	btfsc	3,2
  5481  0F51  2F57               	goto	l5411
  5482  0F52  09B1               	comf	___awdiv@quotient,f
  5483  0F53  09B2               	comf	___awdiv@quotient+1,f
  5484  0F54  0AB1               	incf	___awdiv@quotient,f
  5485  0F55  1903               	skipnz
  5486  0F56  0AB2               	incf	___awdiv@quotient+1,f
  5487  0F57                     l5411:	
  5488  0F57  0832               	movf	___awdiv@quotient+1,w
  5489  0F58  00AC               	movwf	?___awdiv+1
  5490  0F59  0831               	movf	___awdiv@quotient,w
  5491  0F5A  00AB               	movwf	?___awdiv
  5492  0F5B  0008               	return
  5493  0F5C                     __end_of___awdiv:	
  5494  0F5C                     __ptext35:	
  5495 ;; *************** function ___awmod *****************
  5496 ;; Defined at:
  5497 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  divisor         2    5[BANK0 ] int 
  5500 ;;  dividend        2    7[BANK0 ] int 
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  sign            1   10[BANK0 ] unsigned char 
  5503 ;;  counter         1    9[BANK0 ] unsigned char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  2    5[BANK0 ] int 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0
  5508 ;; Tracked objects:
  5509 ;;		On entry : 300/0
  5510 ;;		On exit  : 300/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5513 ;;      Params:         0       4       0       0       0
  5514 ;;      Locals:         0       2       0       0       0
  5515 ;;      Temps:          0       0       0       0       0
  5516 ;;      Totals:         0       6       0       0       0
  5517 ;;Total ram usage:        6 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    5
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_Serial_Println_Int
  5524 ;;		_Serial_Print_Int
  5525 ;;		_main
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           
  5530                           ;psect for function ___awmod
  5531  0F5C                     ___awmod:	
  5532                           
  5533                           ;incstack = 0
  5534                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5535  0F5C  01AA               	clrf	___awmod@sign
  5536  0F5D  1FA8               	btfss	___awmod@dividend+1,7
  5537  0F5E  2F66               	goto	l5423
  5538  0F5F  09A7               	comf	___awmod@dividend,f
  5539  0F60  09A8               	comf	___awmod@dividend+1,f
  5540  0F61  0AA7               	incf	___awmod@dividend,f
  5541  0F62  1903               	skipnz
  5542  0F63  0AA8               	incf	___awmod@dividend+1,f
  5543  0F64  01AA               	clrf	___awmod@sign
  5544  0F65  0AAA               	incf	___awmod@sign,f
  5545  0F66                     l5423:	
  5546  0F66  1FA6               	btfss	___awmod@divisor+1,7
  5547  0F67  2F6D               	goto	l5427
  5548  0F68  09A5               	comf	___awmod@divisor,f
  5549  0F69  09A6               	comf	___awmod@divisor+1,f
  5550  0F6A  0AA5               	incf	___awmod@divisor,f
  5551  0F6B  1903               	skipnz
  5552  0F6C  0AA6               	incf	___awmod@divisor+1,f
  5553  0F6D                     l5427:	
  5554  0F6D  0825               	movf	___awmod@divisor,w
  5555  0F6E  0426               	iorwf	___awmod@divisor+1,w
  5556  0F6F  1903               	btfsc	3,2
  5557  0F70  2F8C               	goto	l5443
  5558  0F71  01A9               	clrf	___awmod@counter
  5559  0F72                     L14:	
  5560  0F72  0AA9               	incf	___awmod@counter,f
  5561  0F73  1BA6               	btfsc	___awmod@divisor+1,7
  5562  0F74  2F79               	goto	l5435
  5563  0F75  1003               	clrc
  5564  0F76  0DA5               	rlf	___awmod@divisor,f
  5565  0F77  0DA6               	rlf	___awmod@divisor+1,f
  5566  0F78  2F72               	goto	L14
  5567  0F79                     l5435:	
  5568  0F79  0826               	movf	___awmod@divisor+1,w
  5569  0F7A  0228               	subwf	___awmod@dividend+1,w
  5570  0F7B  1D03               	skipz
  5571  0F7C  2F7F               	goto	u6785
  5572  0F7D  0825               	movf	___awmod@divisor,w
  5573  0F7E  0227               	subwf	___awmod@dividend,w
  5574  0F7F                     u6785:	
  5575  0F7F  1C03               	skipc
  5576  0F80  2F88               	goto	L15
  5577  0F81  0825               	movf	___awmod@divisor,w
  5578  0F82  02A7               	subwf	___awmod@dividend,f
  5579  0F83  0826               	movf	___awmod@divisor+1,w
  5580  0F84  1C03               	skipc
  5581  0F85  03A8               	decf	___awmod@dividend+1,f
  5582  0F86  02A8               	subwf	___awmod@dividend+1,f
  5583  0F87  1003               	clrc
  5584  0F88                     L15:	
  5585  0F88  0CA6               	rrf	___awmod@divisor+1,f
  5586  0F89  0CA5               	rrf	___awmod@divisor,f
  5587  0F8A  0BA9               	decfsz	___awmod@counter,f
  5588  0F8B  2F79               	goto	l5435
  5589  0F8C                     l5443:	
  5590  0F8C  082A               	movf	___awmod@sign,w
  5591  0F8D  1903               	btfsc	3,2
  5592  0F8E  2F94               	goto	l5447
  5593  0F8F  09A7               	comf	___awmod@dividend,f
  5594  0F90  09A8               	comf	___awmod@dividend+1,f
  5595  0F91  0AA7               	incf	___awmod@dividend,f
  5596  0F92  1903               	skipnz
  5597  0F93  0AA8               	incf	___awmod@dividend+1,f
  5598  0F94                     l5447:	
  5599  0F94  0828               	movf	___awmod@dividend+1,w
  5600  0F95  00A6               	movwf	?___awmod+1
  5601  0F96  0827               	movf	___awmod@dividend,w
  5602  0F97  00A5               	movwf	?___awmod
  5603  0F98  0008               	return
  5604  0F99                     __end_of___awmod:	
  5605  0F99                     PL4:	
  5606  0F99  1283               	bcf	3,5	;RP0=0, select bank0
  5607  0F9A  1303               	bcf	3,6	;RP1=0, select bank0
  5608  0F9B  00A5               	movwf	___awmod@divisor
  5609  0F9C  01A6               	clrf	___awmod@divisor+1
  5610  0F9D  0834               	movf	Serial_Print_Int@val+1,w
  5611  0F9E  00A8               	movwf	___awmod@dividend+1
  5612  0F9F  0833               	movf	Serial_Print_Int@val,w
  5613  0FA0  00A7               	movwf	___awmod@dividend
  5614  0FA1  0008               	return
  5615  0FA2                     __end_ofPL4:	
  5616  0FA2                     PL6:	
  5617  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  5618  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  5619  0FA4  00A5               	movwf	___awmod@divisor
  5620  0FA5  01A6               	clrf	___awmod@divisor+1
  5621  0FA6  0834               	movf	Serial_Println_Int@val+1,w
  5622  0FA7  00A8               	movwf	___awmod@dividend+1
  5623  0FA8  0833               	movf	Serial_Println_Int@val,w
  5624  0FA9  00A7               	movwf	___awmod@dividend
  5625  0FAA  0008               	return
  5626  0FAB                     __end_ofPL6:	
  5627  0FAB                     PL10:	
  5628  0FAB  30E8               	movlw	232
  5629  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  5630  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  5631  0FAE  00A5               	movwf	___awmod@divisor
  5632  0FAF  3003               	movlw	3
  5633  0FB0  00A6               	movwf	___awmod@divisor+1
  5634  0FB1  0834               	movf	Serial_Print_Int@val+1,w
  5635  0FB2  00A8               	movwf	___awmod@dividend+1
  5636  0FB3  0833               	movf	Serial_Print_Int@val,w
  5637  0FB4  00A7               	movwf	___awmod@dividend
  5638  0FB5  0008               	return
  5639  0FB6                     __end_ofPL10:	
  5640  0FB6                     PL12:	
  5641  0FB6  3064               	movlw	100
  5642  0FB7  00AB               	movwf	___awdiv@divisor
  5643  0FB8  01AC               	clrf	___awdiv@divisor+1
  5644  0FB9  0834               	movf	Serial_Print_Int@val+1,w
  5645  0FBA  00AE               	movwf	___awdiv@dividend+1
  5646  0FBB  0833               	movf	Serial_Print_Int@val,w
  5647  0FBC  00AD               	movwf	___awdiv@dividend
  5648  0FBD  0008               	return
  5649  0FBE                     __end_ofPL12:	
  5650  0FBE                     PL14:	
  5651  0FBE  3064               	movlw	100
  5652  0FBF  00AB               	movwf	___awdiv@divisor
  5653  0FC0  01AC               	clrf	___awdiv@divisor+1
  5654  0FC1  0834               	movf	Serial_Println_Int@val+1,w
  5655  0FC2  00AE               	movwf	___awdiv@dividend+1
  5656  0FC3  0833               	movf	Serial_Println_Int@val,w
  5657  0FC4  00AD               	movwf	___awdiv@dividend
  5658  0FC5  0008               	return
  5659  0FC6                     __end_ofPL14:	
  5660  0FC6                     PL16:	
  5661  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  5662  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  5663  0FC8  00A5               	movwf	___awmod@divisor
  5664  0FC9  3003               	movlw	3
  5665  0FCA  00A6               	movwf	___awmod@divisor+1
  5666  0FCB  0834               	movf	Serial_Println_Int@val+1,w
  5667  0FCC  00A8               	movwf	___awmod@dividend+1
  5668  0FCD  0833               	movf	Serial_Println_Int@val,w
  5669  0FCE  00A7               	movwf	___awmod@dividend
  5670  0FCF  0008               	return
  5671  0FD0                     __end_ofPL16:	
  5672  0FD0                     PL18:	
  5673  0FD0  30E8               	movlw	232
  5674  0FD1  00AB               	movwf	___awdiv@divisor
  5675  0FD2  3003               	movlw	3
  5676  0FD3  00AC               	movwf	___awdiv@divisor+1
  5677  0FD4  0834               	movf	Serial_Println_Int@val+1,w
  5678  0FD5  00AE               	movwf	___awdiv@dividend+1
  5679  0FD6  0833               	movf	Serial_Println_Int@val,w
  5680  0FD7  00AD               	movwf	___awdiv@dividend
  5681  0FD8  0008               	return
  5682  0FD9                     __end_ofPL18:	
  5683  0FD9                     PL20:	
  5684  0FD9  30E8               	movlw	232
  5685  0FDA  00AB               	movwf	___awdiv@divisor
  5686  0FDB  3003               	movlw	3
  5687  0FDC  00AC               	movwf	___awdiv@divisor+1
  5688  0FDD  0834               	movf	Serial_Print_Int@val+1,w
  5689  0FDE  00AE               	movwf	___awdiv@dividend+1
  5690  0FDF  0833               	movf	Serial_Print_Int@val,w
  5691  0FE0  00AD               	movwf	___awdiv@dividend
  5692  0FE1  0008               	return
  5693  0FE2                     __end_ofPL20:	
  5694  0FE2                     PL22:	
  5695  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  5696  0FE3  1303               	bcf	3,6	;RP1=0, select bank0
  5697  0FE4  0834               	movf	Serial_Print_Int@val+1,w
  5698  0FE5  3A80               	xorlw	128
  5699  0FE6  00FF               	movwf	127
  5700  0FE7  3080               	movlw	128
  5701  0FE8  027F               	subwf	127,w
  5702  0FE9  0008               	return
  5703  0FEA                     __end_ofPL22:	
  5704  0FEA                     PL24:	
  5705  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  5706  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  5707  0FEC  0834               	movf	Serial_Println_Int@val+1,w
  5708  0FED  3A80               	xorlw	128
  5709  0FEE  00FF               	movwf	127
  5710  0FEF  3080               	movlw	128
  5711  0FF0  027F               	subwf	127,w
  5712  0FF1  0008               	return
  5713  0FF2                     __end_ofPL24:	
  5714  0FF2                     PL28:	
  5715  0FF2  0841               	movf	___fttol@f1,w
  5716  0FF3  00C5               	movwf	??___fttol
  5717  0FF4  0842               	movf	___fttol@f1+1,w
  5718  0FF5  00C6               	movwf	??___fttol+1
  5719  0FF6  0843               	movf	___fttol@f1+2,w
  5720  0FF7  00C7               	movwf	??___fttol+2
  5721  0FF8  0008               	return
  5722  0FF9                     __end_ofPL28:	
  5723  0FF9                     PL30:	
  5724  0FF9  3010               	movlw	16
  5725  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  5726  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  5727  0FFC  00A5               	movwf	___awmod@divisor
  5728  0FFD  3027               	movlw	39
  5729  0FFE  00A6               	movwf	___awmod@divisor+1
  5730  0FFF  0008               	return
  5731  1000                     __end_ofPL30:	
  5732                           
  5733                           	psect	text20
  5734  0800                     __ptext20:	
  5735 ;; *************** function ___bmul *****************
  5736 ;; Defined at:
  5737 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul8.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;  multiplier      1    wreg     unsigned char 
  5740 ;;  multiplicand    1    5[BANK0 ] unsigned char 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  multiplier      1    7[BANK0 ] unsigned char 
  5743 ;;  product         1    6[BANK0 ] unsigned char 
  5744 ;; Return value:  Size  Location     Type
  5745 ;;                  1    wreg      unsigned char 
  5746 ;; Registers used:
  5747 ;;		wreg, status,2, status,0
  5748 ;; Tracked objects:
  5749 ;;		On entry : 300/100
  5750 ;;		On exit  : 300/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5753 ;;      Params:         0       1       0       0       0
  5754 ;;      Locals:         0       2       0       0       0
  5755 ;;      Temps:          0       0       0       0       0
  5756 ;;      Totals:         0       3       0       0       0
  5757 ;;Total ram usage:        3 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; Hardware stack levels required when called:    5
  5760 ;; This function calls:
  5761 ;;		Nothing
  5762 ;; This function is called by:
  5763 ;;		_main
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           
  5768                           ;psect for function ___bmul
  5769  0800                     ___bmul:	
  5770                           
  5771                           ;incstack = 0
  5772                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5773                           ;___bmul@multiplier stored from wreg
  5774  0800  1283               	bcf	3,5	;RP0=0, select bank0
  5775  0801  00A7               	movwf	___bmul@multiplier
  5776  0802  01A6               	clrf	___bmul@product
  5777  0803                     l6299:	
  5778  0803  0825               	movf	___bmul@multiplicand,w
  5779  0804  1827               	btfsc	___bmul@multiplier,0
  5780  0805  07A6               	addwf	___bmul@product,f
  5781  0806  1003               	clrc
  5782  0807  0DA5               	rlf	___bmul@multiplicand,f
  5783  0808  1003               	clrc
  5784  0809  0CA7               	rrf	___bmul@multiplier,f
  5785  080A  0827               	movf	___bmul@multiplier,w
  5786  080B  1D03               	btfss	3,2
  5787  080C  2803               	goto	l6299
  5788  080D  0826               	movf	___bmul@product,w
  5789  080E  0008               	return
  5790  080F                     __end_of___bmul:	
  5791                           
  5792                           	psect	text21
  5793  1AC4                     __ptext21:	
  5794 ;; *************** function _Timer1_Init *****************
  5795 ;; Defined at:
  5796 ;;		line 4 in file "timer1.h"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;		None
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;		None               void
  5803 ;; Registers used:
  5804 ;;		wreg
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 300/100
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5810 ;;      Params:         0       0       0       0       0
  5811 ;;      Locals:         0       0       0       0       0
  5812 ;;      Temps:          0       0       0       0       0
  5813 ;;      Totals:         0       0       0       0       0
  5814 ;;Total ram usage:        0 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    5
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_main
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           
  5825                           ;psect for function _Timer1_Init
  5826  1AC4                     _Timer1_Init:	
  5827                           
  5828                           ;timer1.h: 6: T1CKPS1 = 0;
  5829                           
  5830                           ;incstack = 0
  5831                           ; Regs used in _Timer1_Init: [wreg]
  5832  1AC4  1283               	bcf	3,5	;RP0=0, select bank0
  5833  1AC5  1303               	bcf	3,6	;RP1=0, select bank0
  5834  1AC6  1290               	bcf	16,5	;volatile
  5835                           
  5836                           ;timer1.h: 7: T1CKPS0 = 1;
  5837  1AC7  1610               	bsf	16,4	;volatile
  5838                           
  5839                           ;timer1.h: 8: TMR1CS = 0;
  5840  1AC8  1090               	bcf	16,1	;volatile
  5841                           
  5842                           ;timer1.h: 9: TMR1ON = 1;
  5843  1AC9  1410               	bsf	16,0	;volatile
  5844                           
  5845                           ;timer1.h: 10: T1OSCEN = 0;
  5846  1ACA  1190               	bcf	16,3	;volatile
  5847                           
  5848                           ;timer1.h: 11: TMR1L = 0xB0;
  5849  1ACB  30B0               	movlw	176
  5850  1ACC  008E               	movwf	14	;volatile
  5851                           
  5852                           ;timer1.h: 12: TMR1H = 60;
  5853  1ACD  303C               	movlw	60
  5854  1ACE  008F               	movwf	15	;volatile
  5855                           
  5856                           ;timer1.h: 13: TMR1IE = 1;
  5857  1ACF  1683               	bsf	3,5	;RP0=1, select bank1
  5858  1AD0  140C               	bsf	12,0	;volatile
  5859  1AD1  0008               	return
  5860  1AD2                     __end_of_Timer1_Init:	
  5861                           
  5862                           	psect	text22
  5863  1AFC                     __ptext22:	
  5864 ;; *************** function _Setup_IOports *****************
  5865 ;; Defined at:
  5866 ;;		line 56 in file "setup.h"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;		None
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;		None
  5871 ;; Return value:  Size  Location     Type
  5872 ;;		None               void
  5873 ;; Registers used:
  5874 ;;		wreg, status,2
  5875 ;; Tracked objects:
  5876 ;;		On entry : B00/0
  5877 ;;		On exit  : B00/0
  5878 ;;		Unchanged: 800/0
  5879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5880 ;;      Params:         0       0       0       0       0
  5881 ;;      Locals:         0       0       0       0       0
  5882 ;;      Temps:          0       0       0       0       0
  5883 ;;      Totals:         0       0       0       0       0
  5884 ;;Total ram usage:        0 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    5
  5887 ;; This function calls:
  5888 ;;		Nothing
  5889 ;; This function is called by:
  5890 ;;		_main
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           
  5895                           ;psect for function _Setup_IOports
  5896  1AFC                     _Setup_IOports:	
  5897                           
  5898                           ;setup.h: 58: TRISA = 0b11111111;
  5899                           
  5900                           ;incstack = 0
  5901                           ; Regs used in _Setup_IOports: [wreg+status,2]
  5902  1AFC  30FF               	movlw	255
  5903  1AFD  1683               	bsf	3,5	;RP0=1, select bank1
  5904  1AFE  0085               	movwf	5	;volatile
  5905                           
  5906                           ;setup.h: 59: PORTA = 0b00000000;
  5907  1AFF  1283               	bcf	3,5	;RP0=0, select bank0
  5908  1B00  0185               	clrf	5	;volatile
  5909                           
  5910                           ;setup.h: 61: TRISB = 0b11000000;
  5911  1B01  30C0               	movlw	192
  5912  1B02  1683               	bsf	3,5	;RP0=1, select bank1
  5913  1B03  0086               	movwf	6	;volatile
  5914                           
  5915                           ;setup.h: 62: PORTB = 0b00000000;
  5916  1B04  1283               	bcf	3,5	;RP0=0, select bank0
  5917  1B05  0186               	clrf	6	;volatile
  5918                           
  5919                           ;setup.h: 64: TRISC = 0b10000000;
  5920  1B06  3080               	movlw	128
  5921  1B07  1683               	bsf	3,5	;RP0=1, select bank1
  5922  1B08  0087               	movwf	7	;volatile
  5923                           
  5924                           ;setup.h: 65: PORTC = 0b00000000;
  5925  1B09  1283               	bcf	3,5	;RP0=0, select bank0
  5926  1B0A  0187               	clrf	7	;volatile
  5927                           
  5928                           ;setup.h: 67: TRISD = 0b11001100;
  5929  1B0B  30CC               	movlw	204
  5930  1B0C  1683               	bsf	3,5	;RP0=1, select bank1
  5931  1B0D  0088               	movwf	8	;volatile
  5932                           
  5933                           ;setup.h: 68: PORTD = 0b00000000;
  5934  1B0E  1283               	bcf	3,5	;RP0=0, select bank0
  5935  1B0F  0188               	clrf	8	;volatile
  5936                           
  5937                           ;setup.h: 70: TRISE = 0b10000000;
  5938  1B10  3080               	movlw	128
  5939  1B11  1683               	bsf	3,5	;RP0=1, select bank1
  5940  1B12  0089               	movwf	9	;volatile
  5941                           
  5942                           ;setup.h: 71: PORTE = 0b00000000;
  5943  1B13  1283               	bcf	3,5	;RP0=0, select bank0
  5944  1B14  0189               	clrf	9	;volatile
  5945  1B15  0008               	return
  5946  1B16                     __end_of_Setup_IOports:	
  5947                           
  5948                           	psect	text24
  5949  1AE3                     __ptext24:	
  5950 ;; *************** function _Serial_NewLine *****************
  5951 ;; Defined at:
  5952 ;;		line 37 in file "serialv2.h"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;		None
  5955 ;; Auto vars:     Size  Location     Type
  5956 ;;		None
  5957 ;; Return value:  Size  Location     Type
  5958 ;;		None               void
  5959 ;; Registers used:
  5960 ;;		wreg
  5961 ;; Tracked objects:
  5962 ;;		On entry : 300/0
  5963 ;;		On exit  : 0/0
  5964 ;;		Unchanged: 0/0
  5965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5966 ;;      Params:         0       0       0       0       0
  5967 ;;      Locals:         0       0       0       0       0
  5968 ;;      Temps:          0       1       0       0       0
  5969 ;;      Totals:         0       1       0       0       0
  5970 ;;Total ram usage:        1 bytes
  5971 ;; Hardware stack levels used:    1
  5972 ;; Hardware stack levels required when called:    5
  5973 ;; This function calls:
  5974 ;;		Nothing
  5975 ;; This function is called by:
  5976 ;;		_main
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           
  5981                           ;psect for function _Serial_NewLine
  5982  1AE3                     _Serial_NewLine:	
  5983  1AE3                     l281:	
  5984                           ;serialv2.h: 38: while(!TXIF);
  5985                           
  5986                           ;incstack = 0
  5987                           ; Regs used in _Serial_NewLine: [wreg]
  5988                           
  5989  1AE3  1E0C               	btfss	12,4	;volatile
  5990  1AE4  2AE3               	goto	l281
  5991                           
  5992                           ;serialv2.h: 39: TXREG = 13;
  5993  1AE5  300D               	movlw	13
  5994  1AE6  0099               	movwf	25	;volatile
  5995                           
  5996                           ;serialv2.h: 40: _delay((unsigned long)((1)*(4000000/4000.0)));
  5997  1AE7  30F9               	movlw	249
  5998  1AE8  00A5               	movwf	??_Serial_NewLine
  5999  1AE9                     u8757:	
  6000  1AE9  0000               	nop
  6001  1AEA  0BA5               	decfsz	??_Serial_NewLine,f
  6002  1AEB  2AE9               	goto	u8757
  6003  1AEC  2AED               	nop2	;nop
  6004  1AED  0000               	nop
  6005  1AEE                     l284:	
  6006                           ;serialv2.h: 41: while(!TXIF);
  6007                           
  6008  1AEE  1283               	bcf	3,5	;RP0=0, select bank0
  6009  1AEF  1303               	bcf	3,6	;RP1=0, select bank0
  6010  1AF0  1E0C               	btfss	12,4	;volatile
  6011  1AF1  2AEE               	goto	l284
  6012                           
  6013                           ;serialv2.h: 42: TXREG = 10;
  6014  1AF2  300A               	movlw	10
  6015  1AF3  0099               	movwf	25	;volatile
  6016                           
  6017                           ;serialv2.h: 43: _delay((unsigned long)((1)*(4000000/4000.0)));
  6018  1AF4  30F9               	movlw	249
  6019  1AF5  00A5               	movwf	??_Serial_NewLine
  6020  1AF6                     u8767:	
  6021  1AF6  0000               	nop
  6022  1AF7  0BA5               	decfsz	??_Serial_NewLine,f
  6023  1AF8  2AF6               	goto	u8767
  6024  1AF9  2AFA               	nop2	;nop
  6025  1AFA  0000               	nop
  6026  1AFB  0008               	return
  6027  1AFC                     __end_of_Serial_NewLine:	
  6028                           
  6029                           	psect	text25
  6030  10C0                     __ptext25:	
  6031 ;; *************** function _Serial_Init *****************
  6032 ;; Defined at:
  6033 ;;		line 10 in file "serialv2.h"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;		None
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;		None
  6038 ;; Return value:  Size  Location     Type
  6039 ;;		None               void
  6040 ;; Registers used:
  6041 ;;		wreg
  6042 ;; Tracked objects:
  6043 ;;		On entry : 300/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6047 ;;      Params:         0       0       0       0       0
  6048 ;;      Locals:         0       0       0       0       0
  6049 ;;      Temps:          0       3       0       0       0
  6050 ;;      Totals:         0       3       0       0       0
  6051 ;;Total ram usage:        3 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    5
  6054 ;; This function calls:
  6055 ;;		Nothing
  6056 ;; This function is called by:
  6057 ;;		_main
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           
  6062                           ;psect for function _Serial_Init
  6063  10C0                     _Serial_Init:	
  6064                           
  6065                           ;serialv2.h: 13: SPEN = 1;
  6066                           
  6067                           ;incstack = 0
  6068                           ; Regs used in _Serial_Init: [wreg]
  6069  10C0  1798               	bsf	24,7	;volatile
  6070                           
  6071                           ;serialv2.h: 14: RX9 = 0;
  6072  10C1  1318               	bcf	24,6	;volatile
  6073                           
  6074                           ;serialv2.h: 15: CREN = 1;
  6075  10C2  1618               	bsf	24,4	;volatile
  6076                           
  6077                           ;serialv2.h: 16: TX9 = 0;
  6078  10C3  1683               	bsf	3,5	;RP0=1, select bank1
  6079  10C4  1318               	bcf	24,6	;volatile
  6080                           
  6081                           ;serialv2.h: 17: TXEN = 1;
  6082  10C5  1698               	bsf	24,5	;volatile
  6083                           
  6084                           ;serialv2.h: 18: SYNC = 0;
  6085  10C6  1218               	bcf	24,4	;volatile
  6086                           
  6087                           ;serialv2.h: 19: BRGH = 1;
  6088  10C7  1518               	bsf	24,2	;volatile
  6089                           
  6090                           ;serialv2.h: 20: SPBRG = 129;
  6091  10C8  3081               	movlw	129
  6092  10C9  0099               	movwf	25	;volatile
  6093                           
  6094                           ;serialv2.h: 21: RCIE = 1;
  6095  10CA  168C               	bsf	12,5	;volatile
  6096                           
  6097                           ;serialv2.h: 22: TXIE = 0;
  6098  10CB  120C               	bcf	12,4	;volatile
  6099                           
  6100                           ;serialv2.h: 23: ADDEN = 0;
  6101  10CC  1283               	bcf	3,5	;RP0=0, select bank0
  6102  10CD  1198               	bcf	24,3	;volatile
  6103                           
  6104                           ;serialv2.h: 24: _delay((unsigned long)((500)*(4000000/4000.0)));
  6105  10CE  3003               	movlw	3
  6106  10CF  00A7               	movwf	??_Serial_Init+2
  6107  10D0  308A               	movlw	138
  6108  10D1  00A6               	movwf	??_Serial_Init+1
  6109  10D2  3056               	movlw	86
  6110  10D3  00A5               	movwf	??_Serial_Init
  6111  10D4                     u8777:	
  6112  10D4  0BA5               	decfsz	??_Serial_Init,f
  6113  10D5  28D4               	goto	u8777
  6114  10D6  0BA6               	decfsz	??_Serial_Init+1,f
  6115  10D7  28D4               	goto	u8777
  6116  10D8  0BA7               	decfsz	??_Serial_Init+2,f
  6117  10D9  28D4               	goto	u8777
  6118  10DA  28DB               	nop2
  6119  10DB  0008               	return
  6120  10DC                     __end_of_Serial_Init:	
  6121                           
  6122                           	psect	text32
  6123  080F                     __ptext32:	
  6124 ;; *************** function _CheckMode *****************
  6125 ;; Defined at:
  6126 ;;		line 539 in file "Automated Solar Panel Orientation Setter.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  pressedKey      1   22[BANK0 ] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;		None               void
  6133 ;; Registers used:
  6134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/100
  6137 ;;		On exit  : 300/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6140 ;;      Params:         0       0       0       0       0
  6141 ;;      Locals:         0       1       0       0       0
  6142 ;;      Temps:          0       0       0       0       0
  6143 ;;      Totals:         0       1       0       0       0
  6144 ;;Total ram usage:        1 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    7
  6147 ;; This function calls:
  6148 ;;		_CheckKeyPad
  6149 ;;		_Serial_Print
  6150 ;;		_Serial_Println_Int
  6151 ;;		_nop
  6152 ;; This function is called by:
  6153 ;;		_main
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           
  6158                           ;psect for function _CheckMode
  6159  080F                     _CheckMode:	
  6160                           
  6161                           ;Automated Solar Panel Orientation Setter.c: 540: char pressedKey;
  6162                           ;Automated Solar Panel Orientation Setter.c: 541: pressedKey = CheckKeyPad();
  6163                           
  6164                           ;incstack = 0
  6165                           ; Regs used in _CheckMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6166  080F  20A4  120A  158A   	fcall	_CheckKeyPad
  6167  0812  00B6               	movwf	CheckMode@pressedKey
  6168                           
  6169                           ;Automated Solar Panel Orientation Setter.c: 543: if( pressedKey=='*' ){
  6170  0813  3A2A               	xorlw	42
  6171  0814  1D03               	btfss	3,2
  6172  0815  0008               	return
  6173                           
  6174                           ;Automated Solar Panel Orientation Setter.c: 544: currentMode++;
  6175  0816  1683               	bsf	3,5	;RP0=1, select bank1
  6176  0817  0AB9               	incf	_currentMode^(0+128),f
  6177  0818  1903               	skipnz
  6178  0819  0ABA               	incf	(_currentMode+1)^(0+128),f
  6179                           
  6180                           ;Automated Solar Panel Orientation Setter.c: 545: if (currentMode>4) currentMode = 1;
  6181  081A  3000               	movlw	0
  6182  081B  023A               	subwf	(_currentMode+1)^(0+128),w
  6183  081C  3005               	movlw	5
  6184  081D  1903               	skipnz
  6185  081E  0239               	subwf	_currentMode^(0+128),w
  6186  081F  1C03               	skipc
  6187  0820  2824               	goto	l6203
  6188  0821  01B9               	clrf	_currentMode^(0+128)
  6189  0822  0AB9               	incf	_currentMode^(0+128),f
  6190  0823  01BA               	clrf	(_currentMode+1)^(0+128)
  6191  0824                     l6203:	
  6192                           
  6193                           ;Automated Solar Panel Orientation Setter.c: 546: state = currentMode;
  6194  0824  0839               	movf	_currentMode^(0+128),w
  6195  0825  1283               	bcf	3,5	;RP0=0, select bank0
  6196  0826  00D8               	movwf	_state
  6197                           
  6198                           ;Automated Solar Panel Orientation Setter.c: 548: RC1 = 1;
  6199  0827  1487               	bsf	7,1	;volatile
  6200                           
  6201                           ;Automated Solar Panel Orientation Setter.c: 549: Serial_Print("Switched to Mode : ");
  6202  0828  3001               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  6203  0829  2244               	fcall	_Serial_Print
  6204                           
  6205                           ;Automated Solar Panel Orientation Setter.c: 550: Serial_Println_Int((int)state);
  6206  082A  0858               	movf	_state,w
  6207  082B  00B3               	movwf	Serial_Println_Int@val
  6208  082C  01B4               	clrf	Serial_Println_Int@val+1
  6209  082D  120A  158A  25E8  120A  158A  	fcall	_Serial_Println_Int
  6210                           
  6211                           ;Automated Solar Panel Orientation Setter.c: 551: RC1 = 0;
  6212  0832  1283               	bcf	3,5	;RP0=0, select bank0
  6213  0833  1303               	bcf	3,6	;RP1=0, select bank0
  6214  0834  1087               	bcf	7,1	;volatile
  6215                           
  6216                           ;Automated Solar Panel Orientation Setter.c: 553: ; nop();nop();nop();nop();nop();nop();
      +                          nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop(
      +                          );nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();no
      +                          p();;
  6217  0835  209F  120A  158A   	fcall	_nop
  6218  0838  209F  120A  158A   	fcall	_nop
  6219  083B  209F  120A  158A   	fcall	_nop
  6220  083E  209F  120A  158A   	fcall	_nop
  6221  0841  209F  120A  158A   	fcall	_nop
  6222  0844  209F  120A  158A   	fcall	_nop
  6223  0847  209F  120A  158A   	fcall	_nop
  6224  084A  209F  120A  158A   	fcall	_nop
  6225  084D  209F  120A  158A   	fcall	_nop
  6226  0850  209F  120A  158A   	fcall	_nop
  6227  0853  209F  120A  158A   	fcall	_nop
  6228  0856  209F  120A  158A   	fcall	_nop
  6229  0859  209F  120A  158A   	fcall	_nop
  6230  085C  209F  120A  158A   	fcall	_nop
  6231  085F  209F  120A  158A   	fcall	_nop
  6232  0862  209F  120A  158A   	fcall	_nop
  6233  0865  209F  120A  158A   	fcall	_nop
  6234  0868  209F  120A  158A   	fcall	_nop
  6235  086B  209F  120A  158A   	fcall	_nop
  6236  086E  209F  120A  158A   	fcall	_nop
  6237  0871  209F  120A  158A   	fcall	_nop
  6238  0874  209F  120A  158A   	fcall	_nop
  6239  0877  209F  120A  158A   	fcall	_nop
  6240  087A  209F  120A  158A   	fcall	_nop
  6241  087D  209F  120A  158A   	fcall	_nop
  6242  0880  209F  120A  158A   	fcall	_nop
  6243  0883  209F  120A  158A   	fcall	_nop
  6244  0886  209F  120A  158A   	fcall	_nop
  6245  0889  209F  120A  158A   	fcall	_nop
  6246  088C  209F  120A  158A   	fcall	_nop
  6247  088F  209F  120A  158A   	fcall	_nop
  6248  0892  209F  120A  158A   	fcall	_nop
  6249  0895  209F  120A  158A   	fcall	_nop
  6250  0898  209F  120A  158A   	fcall	_nop
  6251  089B  209F  120A  158A   	fcall	_nop
  6252  089E  289F               	ljmp	l5451
  6253  089F                     __end_of_CheckMode:	
  6254  089F                     __ptext33:	
  6255 ;; *************** function _nop *****************
  6256 ;; Defined at:
  6257 ;;		line 50 in file "setup.h"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;		None
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;		None               void
  6264 ;; Registers used:
  6265 ;;		wreg
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/100
  6268 ;;		On exit  : 300/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6271 ;;      Params:         0       0       0       0       0
  6272 ;;      Locals:         0       0       0       0       0
  6273 ;;      Temps:          0       0       0       0       0
  6274 ;;      Totals:         0       0       0       0       0
  6275 ;;Total ram usage:        0 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    5
  6278 ;; This function calls:
  6279 ;;		Nothing
  6280 ;; This function is called by:
  6281 ;;		_main
  6282 ;;		_CheckMode
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           
  6287                           ;psect for function _nop
  6288  089F                     _nop:	
  6289  089F                     l5451:	
  6290                           ;incstack = 0
  6291                           ; Regs used in _nop: [wreg]
  6292                           
  6293                           
  6294                           ;setup.h: 51: Nop = !Nop;
  6295  089F  3002               	movlw	(0+1) shl (_Nop& (0+7))
  6296  08A0  1283               	bcf	3,5	;RP0=0, select bank0
  6297  08A1  1303               	bcf	3,6	;RP1=0, select bank0
  6298  08A2  06D1               	xorwf	_Nop/(0+8),f
  6299  08A3  0008               	return
  6300  08A4                     __end_of_nop:	
  6301  08A4                     __ptext38:	
  6302 ;; *************** function _CheckKeyPad *****************
  6303 ;; Defined at:
  6304 ;;		line 570 in file "Automated Solar Panel Orientation Setter.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;		None
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;  rowNo           2   12[BANK0 ] int 
  6309 ;;  colomnNo        2   10[BANK0 ] int 
  6310 ;;  charactor       1    9[BANK0 ] unsigned char 
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  1    wreg      unsigned char 
  6313 ;; Registers used:
  6314 ;;		wreg, status,2, status,0, pclath, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 300/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6320 ;;      Params:         0       0       0       0       0
  6321 ;;      Locals:         0       5       0       0       0
  6322 ;;      Temps:          0       0       0       0       0
  6323 ;;      Totals:         0       5       0       0       0
  6324 ;;Total ram usage:        5 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    6
  6327 ;; This function calls:
  6328 ;;		_ColomnNo
  6329 ;;		_RowNo
  6330 ;; This function is called by:
  6331 ;;		_main
  6332 ;;		_CheckMode
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           
  6337                           ;psect for function _CheckKeyPad
  6338  08A4                     _CheckKeyPad:	
  6339                           
  6340                           ;Automated Solar Panel Orientation Setter.c: 571: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6341                           
  6342                           ;incstack = 0
  6343                           ; Regs used in _CheckKeyPad: [wreg+status,2+status,0+pclath+cstack]
  6344  08A4  1283               	bcf	3,5	;RP0=0, select bank0
  6345  08A5  1303               	bcf	3,6	;RP1=0, select bank0
  6346  08A6  1207               	bcf	7,4	;volatile
  6347  08A7  1288               	bcf	8,5	;volatile
  6348  08A8  1287               	bcf	7,5	;volatile
  6349  08A9  1208               	bcf	8,4	;volatile
  6350                           
  6351                           ;Automated Solar Panel Orientation Setter.c: 572: char charactor = '$';
  6352  08AA  3024               	movlw	36
  6353  08AB  00A9               	movwf	CheckKeyPad@charactor
  6354                           
  6355                           ;Automated Solar Panel Orientation Setter.c: 574: int rowNo = RowNo();
  6356  08AC  222B  120A  158A   	fcall	_RowNo
  6357  08AF  0826               	movf	?_RowNo+1,w
  6358  08B0  00AD               	movwf	CheckKeyPad@rowNo+1
  6359  08B1  0825               	movf	?_RowNo,w
  6360  08B2  00AC               	movwf	CheckKeyPad@rowNo
  6361                           
  6362                           ;Automated Solar Panel Orientation Setter.c: 575: if (rowNo != 0){
  6363  08B3  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6364  08B4  1903               	btfsc	3,2
  6365  08B5  297F               	goto	l5743
  6366                           
  6367                           ;Automated Solar Panel Orientation Setter.c: 576: colomnNo = ColomnNo(rowNo);
  6368  08B6  082D               	movf	CheckKeyPad@rowNo+1,w
  6369  08B7  00A6               	movwf	ColomnNo@rowNo+1
  6370  08B8  082C               	movf	CheckKeyPad@rowNo,w
  6371  08B9  00A5               	movwf	ColomnNo@rowNo
  6372  08BA  219F  120A  158A   	fcall	_ColomnNo
  6373  08BD  0826               	movf	?_ColomnNo+1,w
  6374  08BE  00AB               	movwf	CheckKeyPad@colomnNo+1
  6375  08BF  0825               	movf	?_ColomnNo,w
  6376  08C0  00AA               	movwf	CheckKeyPad@colomnNo
  6377                           
  6378                           ;Automated Solar Panel Orientation Setter.c: 577: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6379  08C1  1207               	bcf	7,4	;volatile
  6380  08C2  1288               	bcf	8,5	;volatile
  6381  08C3  1287               	bcf	7,5	;volatile
  6382  08C4  1208               	bcf	8,4	;volatile
  6383                           
  6384                           ;Automated Solar Panel Orientation Setter.c: 578: if(colomnNo==1 && rowNo == 1) characto
      +                          r = '1';
  6385  08C5  032A               	decf	CheckKeyPad@colomnNo,w
  6386  08C6  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6387  08C7  1D03               	btfss	3,2
  6388  08C8  28CF               	goto	l5651
  6389  08C9  032C               	decf	CheckKeyPad@rowNo,w
  6390  08CA  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6391  08CB  1D03               	btfss	3,2
  6392  08CC  28CF               	goto	l5651
  6393  08CD  3031               	movlw	49
  6394  08CE  297E               	goto	L18
  6395  08CF                     l5651:	
  6396                           
  6397                           ;Automated Solar Panel Orientation Setter.c: 579: else if(colomnNo==1 && rowNo == 2) cha
      +                          ractor = '2';
  6398  08CF  032A               	decf	CheckKeyPad@colomnNo,w
  6399  08D0  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6400  08D1  1D03               	btfss	3,2
  6401  08D2  28DA               	goto	l5657
  6402  08D3  3002               	movlw	2
  6403  08D4  062C               	xorwf	CheckKeyPad@rowNo,w
  6404  08D5  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6405  08D6  1D03               	btfss	3,2
  6406  08D7  28DA               	goto	l5657
  6407  08D8  3032               	movlw	50
  6408  08D9  297E               	goto	L18
  6409  08DA                     l5657:	
  6410                           
  6411                           ;Automated Solar Panel Orientation Setter.c: 580: else if(colomnNo==1 && rowNo == 3) cha
      +                          ractor = '3';
  6412  08DA  032A               	decf	CheckKeyPad@colomnNo,w
  6413  08DB  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6414  08DC  1D03               	btfss	3,2
  6415  08DD  28E5               	goto	l5663
  6416  08DE  3003               	movlw	3
  6417  08DF  062C               	xorwf	CheckKeyPad@rowNo,w
  6418  08E0  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6419  08E1  1D03               	btfss	3,2
  6420  08E2  28E5               	goto	l5663
  6421  08E3  3033               	movlw	51
  6422  08E4  297E               	goto	L18
  6423  08E5                     l5663:	
  6424                           
  6425                           ;Automated Solar Panel Orientation Setter.c: 581: else if(colomnNo==1 && rowNo == 4) cha
      +                          ractor = 'A';
  6426  08E5  032A               	decf	CheckKeyPad@colomnNo,w
  6427  08E6  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6428  08E7  1D03               	btfss	3,2
  6429  08E8  28F0               	goto	l5669
  6430  08E9  3004               	movlw	4
  6431  08EA  062C               	xorwf	CheckKeyPad@rowNo,w
  6432  08EB  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6433  08EC  1D03               	btfss	3,2
  6434  08ED  28F0               	goto	l5669
  6435  08EE  3041               	movlw	65
  6436  08EF  297E               	goto	L18
  6437  08F0                     l5669:	
  6438                           
  6439                           ;Automated Solar Panel Orientation Setter.c: 583: else if(colomnNo==2 && rowNo == 1) cha
      +                          ractor = '4';
  6440  08F0  3002               	movlw	2
  6441  08F1  062A               	xorwf	CheckKeyPad@colomnNo,w
  6442  08F2  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6443  08F3  1D03               	btfss	3,2
  6444  08F4  28FB               	goto	l5675
  6445  08F5  032C               	decf	CheckKeyPad@rowNo,w
  6446  08F6  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6447  08F7  1D03               	btfss	3,2
  6448  08F8  28FB               	goto	l5675
  6449  08F9  3034               	movlw	52
  6450  08FA  297E               	goto	L18
  6451  08FB                     l5675:	
  6452                           
  6453                           ;Automated Solar Panel Orientation Setter.c: 584: else if(colomnNo==2 && rowNo == 2) cha
      +                          ractor = '5';
  6454  08FB  3002               	movlw	2
  6455  08FC  062A               	xorwf	CheckKeyPad@colomnNo,w
  6456  08FD  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6457  08FE  3002               	movlw	2
  6458  08FF  1D03               	btfss	3,2
  6459  0900  2908               	goto	L19
  6460  0901  062C               	xorwf	CheckKeyPad@rowNo,w
  6461  0902  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6462  0903  1D03               	btfss	3,2
  6463  0904  2907               	goto	l5681
  6464  0905  3035               	movlw	53
  6465  0906  297E               	goto	L18
  6466  0907                     l5681:	
  6467                           
  6468                           ;Automated Solar Panel Orientation Setter.c: 585: else if(colomnNo==2 && rowNo == 3) cha
      +                          ractor = '6';
  6469  0907  3002               	movlw	2
  6470  0908                     L19:	
  6471  0908  062A               	xorwf	CheckKeyPad@colomnNo,w
  6472  0909  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6473  090A  1D03               	btfss	3,2
  6474  090B  2913               	goto	l5687
  6475  090C  3003               	movlw	3
  6476  090D  062C               	xorwf	CheckKeyPad@rowNo,w
  6477  090E  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6478  090F  1D03               	btfss	3,2
  6479  0910  2913               	goto	l5687
  6480  0911  3036               	movlw	54
  6481  0912  297E               	goto	L18
  6482  0913                     l5687:	
  6483                           
  6484                           ;Automated Solar Panel Orientation Setter.c: 586: else if(colomnNo==2 && rowNo == 4) cha
      +                          ractor = 'B';
  6485  0913  3002               	movlw	2
  6486  0914  062A               	xorwf	CheckKeyPad@colomnNo,w
  6487  0915  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6488  0916  1D03               	btfss	3,2
  6489  0917  291F               	goto	l5693
  6490  0918  3004               	movlw	4
  6491  0919  062C               	xorwf	CheckKeyPad@rowNo,w
  6492  091A  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6493  091B  1D03               	btfss	3,2
  6494  091C  291F               	goto	l5693
  6495  091D  3042               	movlw	66
  6496  091E  297E               	goto	L18
  6497  091F                     l5693:	
  6498                           
  6499                           ;Automated Solar Panel Orientation Setter.c: 588: else if(colomnNo==3 && rowNo == 1) cha
      +                          ractor = '7';
  6500  091F  3003               	movlw	3
  6501  0920  062A               	xorwf	CheckKeyPad@colomnNo,w
  6502  0921  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6503  0922  1D03               	btfss	3,2
  6504  0923  292A               	goto	l5699
  6505  0924  032C               	decf	CheckKeyPad@rowNo,w
  6506  0925  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6507  0926  1D03               	btfss	3,2
  6508  0927  292A               	goto	l5699
  6509  0928  3037               	movlw	55
  6510  0929  297E               	goto	L18
  6511  092A                     l5699:	
  6512                           
  6513                           ;Automated Solar Panel Orientation Setter.c: 589: else if(colomnNo==3 && rowNo == 2) cha
      +                          ractor = '8';
  6514  092A  3003               	movlw	3
  6515  092B  062A               	xorwf	CheckKeyPad@colomnNo,w
  6516  092C  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6517  092D  1D03               	btfss	3,2
  6518  092E  2936               	goto	l5705
  6519  092F  3002               	movlw	2
  6520  0930  062C               	xorwf	CheckKeyPad@rowNo,w
  6521  0931  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6522  0932  1D03               	btfss	3,2
  6523  0933  2936               	goto	l5705
  6524  0934  3038               	movlw	56
  6525  0935  297E               	goto	L18
  6526  0936                     l5705:	
  6527                           
  6528                           ;Automated Solar Panel Orientation Setter.c: 590: else if(colomnNo==3 && rowNo == 3) cha
      +                          ractor = '9';
  6529  0936  3003               	movlw	3
  6530  0937  062A               	xorwf	CheckKeyPad@colomnNo,w
  6531  0938  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6532  0939  3003               	movlw	3
  6533  093A  1D03               	btfss	3,2
  6534  093B  2943               	goto	L20
  6535  093C  062C               	xorwf	CheckKeyPad@rowNo,w
  6536  093D  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6537  093E  1D03               	btfss	3,2
  6538  093F  2942               	goto	l5711
  6539  0940  3039               	movlw	57
  6540  0941  297E               	goto	L18
  6541  0942                     l5711:	
  6542                           
  6543                           ;Automated Solar Panel Orientation Setter.c: 591: else if(colomnNo==3 && rowNo == 4) cha
      +                          ractor = 'C';
  6544  0942  3003               	movlw	3
  6545  0943                     L20:	
  6546  0943  062A               	xorwf	CheckKeyPad@colomnNo,w
  6547  0944  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6548  0945  3004               	movlw	4
  6549  0946  1D03               	btfss	3,2
  6550  0947  294F               	goto	L21
  6551  0948  062C               	xorwf	CheckKeyPad@rowNo,w
  6552  0949  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6553  094A  1D03               	btfss	3,2
  6554  094B  294E               	goto	l5717
  6555  094C  3043               	movlw	67
  6556  094D  297E               	goto	L18
  6557  094E                     l5717:	
  6558                           
  6559                           ;Automated Solar Panel Orientation Setter.c: 593: else if(colomnNo==4 && rowNo == 1) cha
      +                          ractor = '*';
  6560  094E  3004               	movlw	4
  6561  094F                     L21:	
  6562  094F  062A               	xorwf	CheckKeyPad@colomnNo,w
  6563  0950  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6564  0951  1D03               	btfss	3,2
  6565  0952  2959               	goto	l5723
  6566  0953  032C               	decf	CheckKeyPad@rowNo,w
  6567  0954  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6568  0955  1D03               	btfss	3,2
  6569  0956  2959               	goto	l5723
  6570  0957  302A               	movlw	42
  6571  0958  297E               	goto	L18
  6572  0959                     l5723:	
  6573                           
  6574                           ;Automated Solar Panel Orientation Setter.c: 594: else if(colomnNo==4 && rowNo == 2) cha
      +                          ractor = '0';
  6575  0959  3004               	movlw	4
  6576  095A  062A               	xorwf	CheckKeyPad@colomnNo,w
  6577  095B  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6578  095C  1D03               	btfss	3,2
  6579  095D  2965               	goto	l5729
  6580  095E  3002               	movlw	2
  6581  095F  062C               	xorwf	CheckKeyPad@rowNo,w
  6582  0960  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6583  0961  1D03               	btfss	3,2
  6584  0962  2965               	goto	l5729
  6585  0963  3030               	movlw	48
  6586  0964  297E               	goto	L18
  6587  0965                     l5729:	
  6588                           
  6589                           ;Automated Solar Panel Orientation Setter.c: 595: else if(colomnNo==4 && rowNo == 3) cha
      +                          ractor = '#';
  6590  0965  3004               	movlw	4
  6591  0966  062A               	xorwf	CheckKeyPad@colomnNo,w
  6592  0967  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6593  0968  1D03               	btfss	3,2
  6594  0969  2971               	goto	l5735
  6595  096A  3003               	movlw	3
  6596  096B  062C               	xorwf	CheckKeyPad@rowNo,w
  6597  096C  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6598  096D  1D03               	btfss	3,2
  6599  096E  2971               	goto	l5735
  6600  096F  3023               	movlw	35
  6601  0970  297E               	goto	L18
  6602  0971                     l5735:	
  6603                           
  6604                           ;Automated Solar Panel Orientation Setter.c: 596: else if(colomnNo==4 && rowNo == 4) cha
      +                          ractor = 'D';
  6605  0971  3004               	movlw	4
  6606  0972  062A               	xorwf	CheckKeyPad@colomnNo,w
  6607  0973  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6608  0974  1D03               	btfss	3,2
  6609  0975  297D               	goto	l5741
  6610  0976  3004               	movlw	4
  6611  0977  062C               	xorwf	CheckKeyPad@rowNo,w
  6612  0978  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6613  0979  1D03               	btfss	3,2
  6614  097A  297D               	goto	l5741
  6615  097B  3044               	movlw	68
  6616  097C  297E               	goto	L18
  6617  097D                     l5741:	
  6618                           
  6619                           ;Automated Solar Panel Orientation Setter.c: 598: else charactor = '@';
  6620  097D  3040               	movlw	64
  6621  097E                     L18:	
  6622  097E  00A9               	movwf	CheckKeyPad@charactor
  6623  097F                     l5743:	
  6624                           
  6625                           ;Automated Solar Panel Orientation Setter.c: 599: }
  6626                           ;Automated Solar Panel Orientation Setter.c: 604: if(rowNo==1) while(RD2==0);
  6627  097F  032C               	decf	CheckKeyPad@rowNo,w
  6628  0980  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6629  0981  1D03               	btfss	3,2
  6630  0982  2986               	goto	l5747
  6631  0983                     l591:	
  6632  0983  1908               	btfsc	8,2	;volatile
  6633  0984  299D               	goto	l5759
  6634  0985  2983               	goto	l591
  6635  0986                     l5747:	
  6636                           
  6637                           ;Automated Solar Panel Orientation Setter.c: 605: else if(rowNo==2) while(RD7==0);
  6638  0986  3002               	movlw	2
  6639  0987  062C               	xorwf	CheckKeyPad@rowNo,w
  6640  0988  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6641  0989  1D03               	btfss	3,2
  6642  098A  298E               	goto	l5751
  6643  098B                     l596:	
  6644  098B  1B88               	btfsc	8,7	;volatile
  6645  098C  299D               	goto	l5759
  6646  098D  298B               	goto	l596
  6647  098E                     l5751:	
  6648                           
  6649                           ;Automated Solar Panel Orientation Setter.c: 606: else if(rowNo==3) while(RD3==0);
  6650  098E  3003               	movlw	3
  6651  098F  062C               	xorwf	CheckKeyPad@rowNo,w
  6652  0990  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6653  0991  1D03               	btfss	3,2
  6654  0992  2996               	goto	l5755
  6655  0993                     l601:	
  6656  0993  1988               	btfsc	8,3	;volatile
  6657  0994  299D               	goto	l5759
  6658  0995  2993               	goto	l601
  6659  0996                     l5755:	
  6660                           
  6661                           ;Automated Solar Panel Orientation Setter.c: 607: else if(rowNo==4) while(RD6==0);
  6662  0996  3004               	movlw	4
  6663  0997  062C               	xorwf	CheckKeyPad@rowNo,w
  6664  0998  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6665  0999  1D03               	btfss	3,2
  6666  099A  299D               	goto	l5759
  6667  099B                     l606:	
  6668  099B  1F08               	btfss	8,6	;volatile
  6669  099C  299B               	goto	l606
  6670  099D                     l5759:	
  6671                           
  6672                           ;Automated Solar Panel Orientation Setter.c: 610: return charactor;
  6673  099D  0829               	movf	CheckKeyPad@charactor,w
  6674  099E  0008               	return
  6675  099F                     __end_of_CheckKeyPad:	
  6676  099F                     __ptext40:	
  6677 ;; *************** function _ColomnNo *****************
  6678 ;; Defined at:
  6679 ;;		line 613 in file "Automated Solar Panel Orientation Setter.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;  rowNo           2    5[BANK0 ] int 
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;		None
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  2    5[BANK0 ] int 
  6686 ;; Registers used:
  6687 ;;		wreg, status,2, status,0
  6688 ;; Tracked objects:
  6689 ;;		On entry : 300/0
  6690 ;;		On exit  : 300/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6693 ;;      Params:         0       2       0       0       0
  6694 ;;      Locals:         0       0       0       0       0
  6695 ;;      Temps:          0       0       0       0       0
  6696 ;;      Totals:         0       2       0       0       0
  6697 ;;Total ram usage:        2 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:    5
  6700 ;; This function calls:
  6701 ;;		Nothing
  6702 ;; This function is called by:
  6703 ;;		_CheckKeyPad
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _ColomnNo
  6709  099F                     _ColomnNo:	
  6710                           
  6711                           ;Automated Solar Panel Orientation Setter.c: 614: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6712                           
  6713                           ;incstack = 0
  6714                           ; Regs used in _ColomnNo: [wreg+status,2+status,0]
  6715  099F  1207               	bcf	7,4	;volatile
  6716  09A0  1288               	bcf	8,5	;volatile
  6717  09A1  1287               	bcf	7,5	;volatile
  6718  09A2  1208               	bcf	8,4	;volatile
  6719                           
  6720                           ;Automated Solar Panel Orientation Setter.c: 615: if(rowNo==1){
  6721  09A3  0325               	decf	ColomnNo@rowNo,w
  6722  09A4  0426               	iorwf	ColomnNo@rowNo+1,w
  6723  09A5  1D03               	btfss	3,2
  6724  09A6  29CF               	goto	l5283
  6725                           
  6726                           ;Automated Solar Panel Orientation Setter.c: 616: RC4 = 1;
  6727  09A7  1607               	bsf	7,4	;volatile
  6728                           
  6729                           ;Automated Solar Panel Orientation Setter.c: 617: _delay(1);
  6730  09A8  0000               	nop
  6731                           
  6732                           ;Automated Solar Panel Orientation Setter.c: 618: if(RD2==1){
  6733  09A9  1283               	bcf	3,5	;RP0=0, select bank0
  6734  09AA  1303               	bcf	3,6	;RP1=0, select bank0
  6735  09AB  1D08               	btfss	8,2	;volatile
  6736  09AC  29B1               	goto	l613
  6737  09AD                     l5267:	
  6738                           
  6739                           ;Automated Solar Panel Orientation Setter.c: 619: return 1;
  6740  09AD  01A5               	clrf	?_ColomnNo
  6741  09AE  0AA5               	incf	?_ColomnNo,f
  6742  09AF  01A6               	clrf	?_ColomnNo+1
  6743  09B0  0008               	return
  6744  09B1                     l613:	
  6745                           
  6746                           ;Automated Solar Panel Orientation Setter.c: 620: }
  6747                           ;Automated Solar Panel Orientation Setter.c: 621: RD5 = 1;
  6748  09B1  1688               	bsf	8,5	;volatile
  6749                           
  6750                           ;Automated Solar Panel Orientation Setter.c: 622: _delay(1);
  6751  09B2  0000               	nop
  6752                           
  6753                           ;Automated Solar Panel Orientation Setter.c: 623: if(RD2==1){
  6754  09B3  1283               	bcf	3,5	;RP0=0, select bank0
  6755  09B4  1303               	bcf	3,6	;RP1=0, select bank0
  6756  09B5  1D08               	btfss	8,2	;volatile
  6757  09B6  29BB               	goto	l615
  6758  09B7                     l5271:	
  6759                           
  6760                           ;Automated Solar Panel Orientation Setter.c: 624: return 2;
  6761  09B7  3002               	movlw	2
  6762  09B8  00A5               	movwf	?_ColomnNo
  6763  09B9  01A6               	clrf	?_ColomnNo+1
  6764  09BA  0008               	return
  6765  09BB                     l615:	
  6766                           
  6767                           ;Automated Solar Panel Orientation Setter.c: 625: }
  6768                           ;Automated Solar Panel Orientation Setter.c: 626: RC5 = 1;
  6769  09BB  1687               	bsf	7,5	;volatile
  6770                           
  6771                           ;Automated Solar Panel Orientation Setter.c: 627: _delay(1);
  6772  09BC  0000               	nop
  6773                           
  6774                           ;Automated Solar Panel Orientation Setter.c: 628: if(RD2==1){
  6775  09BD  1283               	bcf	3,5	;RP0=0, select bank0
  6776  09BE  1303               	bcf	3,6	;RP1=0, select bank0
  6777  09BF  1D08               	btfss	8,2	;volatile
  6778  09C0  29C5               	goto	l616
  6779  09C1                     l5275:	
  6780                           
  6781                           ;Automated Solar Panel Orientation Setter.c: 629: return 3;
  6782  09C1  3003               	movlw	3
  6783  09C2  00A5               	movwf	?_ColomnNo
  6784  09C3  01A6               	clrf	?_ColomnNo+1
  6785  09C4  0008               	return
  6786  09C5                     l616:	
  6787                           
  6788                           ;Automated Solar Panel Orientation Setter.c: 630: }
  6789                           ;Automated Solar Panel Orientation Setter.c: 631: RD4 = 1;
  6790  09C5  1608               	bsf	8,4	;volatile
  6791                           
  6792                           ;Automated Solar Panel Orientation Setter.c: 632: _delay(1);
  6793  09C6  0000               	nop
  6794                           
  6795                           ;Automated Solar Panel Orientation Setter.c: 633: if(RD2==1){
  6796  09C7  1283               	bcf	3,5	;RP0=0, select bank0
  6797  09C8  1303               	bcf	3,6	;RP1=0, select bank0
  6798  09C9  1D08               	btfss	8,2	;volatile
  6799  09CA  2A28               	goto	l5343
  6800  09CB                     l5279:	
  6801                           
  6802                           ;Automated Solar Panel Orientation Setter.c: 634: return 4;
  6803  09CB  3004               	movlw	4
  6804  09CC  00A5               	movwf	?_ColomnNo
  6805  09CD  01A6               	clrf	?_ColomnNo+1
  6806  09CE  0008               	return
  6807  09CF                     l5283:	
  6808                           
  6809                           ;Automated Solar Panel Orientation Setter.c: 637: else if(rowNo==2){
  6810  09CF  3002               	movlw	2
  6811  09D0  0625               	xorwf	ColomnNo@rowNo,w
  6812  09D1  0426               	iorwf	ColomnNo@rowNo+1,w
  6813  09D2  1D03               	btfss	3,2
  6814  09D3  29ED               	goto	l5303
  6815                           
  6816                           ;Automated Solar Panel Orientation Setter.c: 638: RC4 = 1;
  6817  09D4  1607               	bsf	7,4	;volatile
  6818                           
  6819                           ;Automated Solar Panel Orientation Setter.c: 639: _delay(1);
  6820  09D5  0000               	nop
  6821                           
  6822                           ;Automated Solar Panel Orientation Setter.c: 640: if(RD7==1){
  6823  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  6824  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  6825  09D8  1B88               	btfsc	8,7	;volatile
  6826  09D9  29AD               	goto	l5267
  6827                           
  6828                           ;Automated Solar Panel Orientation Setter.c: 642: }
  6829                           ;Automated Solar Panel Orientation Setter.c: 643: RD5 = 1;
  6830  09DA  1688               	bsf	8,5	;volatile
  6831                           
  6832                           ;Automated Solar Panel Orientation Setter.c: 644: _delay(1);
  6833  09DB  0000               	nop
  6834                           
  6835                           ;Automated Solar Panel Orientation Setter.c: 645: if(RD7==1){
  6836  09DC  1283               	bcf	3,5	;RP0=0, select bank0
  6837  09DD  1303               	bcf	3,6	;RP1=0, select bank0
  6838  09DE  1B88               	btfsc	8,7	;volatile
  6839  09DF  29B7               	goto	l5271
  6840                           
  6841                           ;Automated Solar Panel Orientation Setter.c: 647: }
  6842                           ;Automated Solar Panel Orientation Setter.c: 648: RC5 = 1;
  6843  09E0  1687               	bsf	7,5	;volatile
  6844                           
  6845                           ;Automated Solar Panel Orientation Setter.c: 649: _delay(1);
  6846  09E1  0000               	nop
  6847                           
  6848                           ;Automated Solar Panel Orientation Setter.c: 650: if(RD7==1){
  6849  09E2  1283               	bcf	3,5	;RP0=0, select bank0
  6850  09E3  1303               	bcf	3,6	;RP1=0, select bank0
  6851  09E4  1B88               	btfsc	8,7	;volatile
  6852  09E5  29C1               	goto	l5275
  6853                           
  6854                           ;Automated Solar Panel Orientation Setter.c: 652: }
  6855                           ;Automated Solar Panel Orientation Setter.c: 653: RD4 = 1;
  6856  09E6  1608               	bsf	8,4	;volatile
  6857                           
  6858                           ;Automated Solar Panel Orientation Setter.c: 654: _delay(1);
  6859  09E7  0000               	nop
  6860                           
  6861                           ;Automated Solar Panel Orientation Setter.c: 655: if(RD7==1){
  6862  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  6863  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  6864  09EA  1B88               	btfsc	8,7	;volatile
  6865  09EB  29CB               	goto	l5279
  6866  09EC  2A28               	goto	l5343
  6867  09ED                     l5303:	
  6868                           
  6869                           ;Automated Solar Panel Orientation Setter.c: 659: else if(rowNo==3){
  6870  09ED  3003               	movlw	3
  6871  09EE  0625               	xorwf	ColomnNo@rowNo,w
  6872  09EF  0426               	iorwf	ColomnNo@rowNo+1,w
  6873  09F0  1D03               	btfss	3,2
  6874  09F1  2A0B               	goto	l5323
  6875                           
  6876                           ;Automated Solar Panel Orientation Setter.c: 660: RC4 = 1;
  6877  09F2  1607               	bsf	7,4	;volatile
  6878                           
  6879                           ;Automated Solar Panel Orientation Setter.c: 661: _delay(1);
  6880  09F3  0000               	nop
  6881                           
  6882                           ;Automated Solar Panel Orientation Setter.c: 662: if(RD3==1){
  6883  09F4  1283               	bcf	3,5	;RP0=0, select bank0
  6884  09F5  1303               	bcf	3,6	;RP1=0, select bank0
  6885  09F6  1988               	btfsc	8,3	;volatile
  6886  09F7  29AD               	goto	l5267
  6887                           
  6888                           ;Automated Solar Panel Orientation Setter.c: 664: }
  6889                           ;Automated Solar Panel Orientation Setter.c: 665: RD5 = 1;
  6890  09F8  1688               	bsf	8,5	;volatile
  6891                           
  6892                           ;Automated Solar Panel Orientation Setter.c: 666: _delay(1);
  6893  09F9  0000               	nop
  6894                           
  6895                           ;Automated Solar Panel Orientation Setter.c: 667: if(RD3==1){
  6896  09FA  1283               	bcf	3,5	;RP0=0, select bank0
  6897  09FB  1303               	bcf	3,6	;RP1=0, select bank0
  6898  09FC  1988               	btfsc	8,3	;volatile
  6899  09FD  29B7               	goto	l5271
  6900                           
  6901                           ;Automated Solar Panel Orientation Setter.c: 669: }
  6902                           ;Automated Solar Panel Orientation Setter.c: 670: RC5 = 1;
  6903  09FE  1687               	bsf	7,5	;volatile
  6904                           
  6905                           ;Automated Solar Panel Orientation Setter.c: 671: _delay(1);
  6906  09FF  0000               	nop
  6907                           
  6908                           ;Automated Solar Panel Orientation Setter.c: 672: if(RD3==1){
  6909  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  6910  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  6911  0A02  1988               	btfsc	8,3	;volatile
  6912  0A03  29C1               	goto	l5275
  6913                           
  6914                           ;Automated Solar Panel Orientation Setter.c: 674: }
  6915                           ;Automated Solar Panel Orientation Setter.c: 675: RD4 = 1;
  6916  0A04  1608               	bsf	8,4	;volatile
  6917                           
  6918                           ;Automated Solar Panel Orientation Setter.c: 676: _delay(1);
  6919  0A05  0000               	nop
  6920                           
  6921                           ;Automated Solar Panel Orientation Setter.c: 677: if(RD3==1){
  6922  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  6923  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  6924  0A08  1988               	btfsc	8,3	;volatile
  6925  0A09  29CB               	goto	l5279
  6926  0A0A  2A28               	goto	l5343
  6927  0A0B                     l5323:	
  6928                           
  6929                           ;Automated Solar Panel Orientation Setter.c: 681: else if(rowNo==4){
  6930  0A0B  3004               	movlw	4
  6931  0A0C  0625               	xorwf	ColomnNo@rowNo,w
  6932  0A0D  0426               	iorwf	ColomnNo@rowNo+1,w
  6933  0A0E  1D03               	btfss	3,2
  6934  0A0F  2A28               	goto	l5343
  6935                           
  6936                           ;Automated Solar Panel Orientation Setter.c: 682: RC4 = 1;
  6937  0A10  1607               	bsf	7,4	;volatile
  6938                           
  6939                           ;Automated Solar Panel Orientation Setter.c: 683: _delay(1);
  6940  0A11  0000               	nop
  6941                           
  6942                           ;Automated Solar Panel Orientation Setter.c: 684: if(RD6==1){
  6943  0A12  1283               	bcf	3,5	;RP0=0, select bank0
  6944  0A13  1303               	bcf	3,6	;RP1=0, select bank0
  6945  0A14  1B08               	btfsc	8,6	;volatile
  6946  0A15  29AD               	goto	l5267
  6947                           
  6948                           ;Automated Solar Panel Orientation Setter.c: 686: }
  6949                           ;Automated Solar Panel Orientation Setter.c: 687: RD5 = 1;
  6950  0A16  1688               	bsf	8,5	;volatile
  6951                           
  6952                           ;Automated Solar Panel Orientation Setter.c: 688: _delay(1);
  6953  0A17  0000               	nop
  6954                           
  6955                           ;Automated Solar Panel Orientation Setter.c: 689: if(RD6==1){
  6956  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  6957  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  6958  0A1A  1B08               	btfsc	8,6	;volatile
  6959  0A1B  29B7               	goto	l5271
  6960                           
  6961                           ;Automated Solar Panel Orientation Setter.c: 691: }
  6962                           ;Automated Solar Panel Orientation Setter.c: 692: RC5 = 1;
  6963  0A1C  1687               	bsf	7,5	;volatile
  6964                           
  6965                           ;Automated Solar Panel Orientation Setter.c: 693: _delay(1);
  6966  0A1D  0000               	nop
  6967                           
  6968                           ;Automated Solar Panel Orientation Setter.c: 694: if(RD6==1){
  6969  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  6970  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  6971  0A20  1B08               	btfsc	8,6	;volatile
  6972  0A21  29C1               	goto	l5275
  6973                           
  6974                           ;Automated Solar Panel Orientation Setter.c: 696: }
  6975                           ;Automated Solar Panel Orientation Setter.c: 697: RD4 = 1;
  6976  0A22  1608               	bsf	8,4	;volatile
  6977                           
  6978                           ;Automated Solar Panel Orientation Setter.c: 698: _delay(1);
  6979  0A23  0000               	nop
  6980                           
  6981                           ;Automated Solar Panel Orientation Setter.c: 699: if(RD6==1){
  6982  0A24  1283               	bcf	3,5	;RP0=0, select bank0
  6983  0A25  1303               	bcf	3,6	;RP1=0, select bank0
  6984  0A26  1B08               	btfsc	8,6	;volatile
  6985  0A27  29CB               	goto	l5279
  6986  0A28                     l5343:	
  6987                           
  6988                           ;Automated Solar Panel Orientation Setter.c: 701: }
  6989                           ;Automated Solar Panel Orientation Setter.c: 702: }
  6990                           ;Automated Solar Panel Orientation Setter.c: 703: return 0;
  6991  0A28  01A5               	clrf	?_ColomnNo
  6992  0A29  01A6               	clrf	?_ColomnNo+1
  6993  0A2A  0008               	return
  6994  0A2B                     __end_of_ColomnNo:	
  6995  0A2B                     __ptext39:	
  6996 ;; *************** function _RowNo *****************
  6997 ;; Defined at:
  6998 ;;		line 706 in file "Automated Solar Panel Orientation Setter.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  row             2    7[BANK0 ] int 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  2    5[BANK0 ] int 
  7005 ;; Registers used:
  7006 ;;		wreg, status,2, status,0
  7007 ;; Tracked objects:
  7008 ;;		On entry : 300/0
  7009 ;;		On exit  : 300/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7012 ;;      Params:         0       2       0       0       0
  7013 ;;      Locals:         0       2       0       0       0
  7014 ;;      Temps:          0       0       0       0       0
  7015 ;;      Totals:         0       4       0       0       0
  7016 ;;Total ram usage:        4 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    5
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_CheckKeyPad
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           
  7027                           ;psect for function _RowNo
  7028  0A2B                     _RowNo:	
  7029                           
  7030                           ;Automated Solar Panel Orientation Setter.c: 707: int row;
  7031                           ;Automated Solar Panel Orientation Setter.c: 708: if( RD2!=1){
  7032                           
  7033                           ;incstack = 0
  7034                           ; Regs used in _RowNo: [wreg+status,2+status,0]
  7035  0A2B  1908               	btfsc	8,2	;volatile
  7036  0A2C  2A30               	goto	l638
  7037                           
  7038                           ;Automated Solar Panel Orientation Setter.c: 709: row = 1;
  7039  0A2D  01A7               	clrf	RowNo@row
  7040  0A2E  0AA7               	incf	RowNo@row,f
  7041  0A2F  2A3E               	goto	L22
  7042  0A30                     l638:	
  7043                           ;Automated Solar Panel Orientation Setter.c: 710: }
  7044                           
  7045                           
  7046                           ;Automated Solar Panel Orientation Setter.c: 711: else if( RD7!=1 ){
  7047  0A30  1B88               	btfsc	8,7	;volatile
  7048  0A31  2A34               	goto	l640
  7049                           
  7050                           ;Automated Solar Panel Orientation Setter.c: 712: row = 2;
  7051  0A32  3002               	movlw	2
  7052  0A33  2A3B               	goto	L24
  7053  0A34                     l640:	
  7054                           ;Automated Solar Panel Orientation Setter.c: 713: }
  7055                           
  7056                           
  7057                           ;Automated Solar Panel Orientation Setter.c: 714: else if( RD3!=1 ){
  7058  0A34  1988               	btfsc	8,3	;volatile
  7059  0A35  2A38               	goto	l642
  7060                           
  7061                           ;Automated Solar Panel Orientation Setter.c: 715: row = 3;
  7062  0A36  3003               	movlw	3
  7063  0A37  2A3B               	goto	L24
  7064  0A38                     l642:	
  7065                           ;Automated Solar Panel Orientation Setter.c: 716: }
  7066                           
  7067                           
  7068                           ;Automated Solar Panel Orientation Setter.c: 717: else if( RD6!=1 ){
  7069  0A38  1B08               	btfsc	8,6	;volatile
  7070  0A39  2A3D               	goto	l5255
  7071                           
  7072                           ;Automated Solar Panel Orientation Setter.c: 718: row = 4;
  7073  0A3A  3004               	movlw	4
  7074  0A3B                     L24:	
  7075  0A3B  00A7               	movwf	RowNo@row
  7076  0A3C  2A3E               	goto	L22
  7077  0A3D                     l5255:	
  7078                           ;Automated Solar Panel Orientation Setter.c: 719: }
  7079                           
  7080                           
  7081                           ;Automated Solar Panel Orientation Setter.c: 720: else{
  7082                           ;Automated Solar Panel Orientation Setter.c: 721: row = 0;
  7083  0A3D  01A7               	clrf	RowNo@row
  7084  0A3E                     L22:	
  7085  0A3E  01A8               	clrf	RowNo@row+1
  7086                           
  7087                           ;Automated Solar Panel Orientation Setter.c: 722: }
  7088                           ;Automated Solar Panel Orientation Setter.c: 723: return row;
  7089  0A3F  0828               	movf	RowNo@row+1,w
  7090  0A40  00A6               	movwf	?_RowNo+1
  7091  0A41  0827               	movf	RowNo@row,w
  7092  0A42  00A5               	movwf	?_RowNo
  7093  0A43  0008               	return
  7094  0A44                     __end_of_RowNo:	
  7095  0A44                     __ptext37:	
  7096 ;; *************** function _Serial_Print *****************
  7097 ;; Defined at:
  7098 ;;		line 27 in file "serialv2.h"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;  a               1    wreg     PTR const unsigned char 
  7101 ;;		 -> STR_28(20), STR_27(20), STR_26(20), STR_25(20), 
  7102 ;;		 -> STR_22(3), STR_21(3), STR_20(3), STR_19(3), 
  7103 ;;		 -> STR_16(3), STR_15(3), STR_14(3), STR_13(3), 
  7104 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(3), 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  a               1    6[BANK0 ] PTR const unsigned char 
  7107 ;;		 -> STR_28(20), STR_27(20), STR_26(20), STR_25(20), 
  7108 ;;		 -> STR_22(3), STR_21(3), STR_20(3), STR_19(3), 
  7109 ;;		 -> STR_16(3), STR_15(3), STR_14(3), STR_13(3), 
  7110 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(3), 
  7111 ;; Return value:  Size  Location     Type
  7112 ;;		None               void
  7113 ;; Registers used:
  7114 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 300/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7120 ;;      Params:         0       0       0       0       0
  7121 ;;      Locals:         0       1       0       0       0
  7122 ;;      Temps:          0       1       0       0       0
  7123 ;;      Totals:         0       2       0       0       0
  7124 ;;Total ram usage:        2 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    5
  7127 ;; This function calls:
  7128 ;;		Nothing
  7129 ;; This function is called by:
  7130 ;;		_main
  7131 ;;		_CheckMode
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           
  7136                           ;psect for function _Serial_Print
  7137  0A44                     _Serial_Print:	
  7138                           
  7139                           ;incstack = 0
  7140                           ; Regs used in _Serial_Print: [wreg-fsr0h+status,2+status,0+pclath]
  7141                           ;Serial_Print@a stored from wreg
  7142  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  7143  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  7144  0A46  00A6               	movwf	Serial_Print@a
  7145  0A47                     l5493:	
  7146                           ;serialv2.h: 28: while( *a!='\0'){
  7147                           
  7148  0A47  0826               	movf	Serial_Print@a,w
  7149  0A48  0084               	movwf	4
  7150  0A49  160A  118A  2000  120A  158A  	fcall	stringdir
  7151  0A4E  3A00               	xorlw	0
  7152  0A4F  1903               	btfsc	3,2
  7153  0A50  0008               	return
  7154  0A51                     l274:	
  7155  0A51  1E0C               	btfss	12,4	;volatile
  7156  0A52  2A51               	goto	l274
  7157                           
  7158                           ;serialv2.h: 30: TXREG = *a;
  7159  0A53  0826               	movf	Serial_Print@a,w
  7160  0A54  0084               	movwf	4
  7161  0A55  160A  118A  2000  120A  158A  	fcall	stringdir
  7162  0A5A  0099               	movwf	25	;volatile
  7163                           
  7164                           ;serialv2.h: 31: _delay(10);
  7165  0A5B  3003               	movlw	3
  7166  0A5C  00A5               	movwf	??_Serial_Print
  7167  0A5D                     u8977:	
  7168  0A5D  0BA5               	decfsz	??_Serial_Print,f
  7169  0A5E  2A5D               	goto	u8977
  7170                           
  7171                           ;serialv2.h: 32: a = a+1;
  7172  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  7173  0A60  1303               	bcf	3,6	;RP1=0, select bank0
  7174  0A61  0AA6               	incf	Serial_Print@a,f
  7175  0A62  2A47               	goto	l5493
  7176  0A63                     __end_of_Serial_Print:	
  7177                           
  7178                           	psect	text41
  7179  1BFF                     __ptext41:	
  7180 ;; *************** function _Calculate *****************
  7181 ;; Defined at:
  7182 ;;		line 788 in file "Automated Solar Panel Orientation Setter.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;		None               void
  7189 ;; Registers used:
  7190 ;;		wreg, status,2, status,0, pclath, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 300/0
  7193 ;;		On exit  : 200/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7196 ;;      Params:         0       0       0       0       0
  7197 ;;      Locals:         0       0       0       0       0
  7198 ;;      Temps:          0       2       0       0       0
  7199 ;;      Totals:         0       2       0       0       0
  7200 ;;Total ram usage:        2 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    6
  7203 ;; This function calls:
  7204 ;;		_RotateMotorLeft
  7205 ;;		_RotateMotorRight
  7206 ;; This function is called by:
  7207 ;;		_main
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function _Calculate
  7213  1BFF                     _Calculate:	
  7214                           
  7215                           ;Automated Solar Panel Orientation Setter.c: 794: if(ldr1 > ldr2){
  7216                           
  7217                           ;incstack = 0
  7218                           ; Regs used in _Calculate: [wreg+status,2+status,0+pclath+cstack]
  7219  1BFF  1683               	bsf	3,5	;RP0=1, select bank1
  7220  1C00  083C               	movf	(_ldr1+1)^(0+128),w
  7221  1C01  1283               	bcf	3,5	;RP0=0, select bank0
  7222  1C02  0256               	subwf	_ldr2+1,w
  7223  1C03  1D03               	skipz
  7224  1C04  2C09               	goto	u8055
  7225  1C05  1683               	bsf	3,5	;RP0=1, select bank1
  7226  1C06  083B               	movf	_ldr1^(0+128),w
  7227  1C07  1283               	bcf	3,5	;RP0=0, select bank0
  7228  1C08  0255               	subwf	_ldr2,w
  7229  1C09                     u8055:	
  7230  1C09  1803               	skipnc
  7231  1C0A  2C22               	goto	l6291
  7232                           
  7233                           ;Automated Solar Panel Orientation Setter.c: 795: if(ldr1 - ldr2 > 25){
  7234  1C0B  0855               	movf	_ldr2,w
  7235  1C0C  1683               	bsf	3,5	;RP0=1, select bank1
  7236  1C0D  023B               	subwf	_ldr1^(0+128),w
  7237  1C0E  1283               	bcf	3,5	;RP0=0, select bank0
  7238  1C0F  00AB               	movwf	??_Calculate
  7239  1C10  0856               	movf	_ldr2+1,w
  7240  1C11  1C03               	skipc
  7241  1C12  0A56               	incf	_ldr2+1,w
  7242  1C13  1683               	bsf	3,5	;RP0=1, select bank1
  7243  1C14  023C               	subwf	(_ldr1+1)^(0+128),w
  7244  1C15  1283               	bcf	3,5	;RP0=0, select bank0
  7245  1C16  00AC               	movwf	??_Calculate+1
  7246  1C17  3000               	movlw	0
  7247  1C18  022C               	subwf	??_Calculate+1,w
  7248  1C19  301A               	movlw	26
  7249  1C1A  1903               	skipnz
  7250  1C1B  022B               	subwf	??_Calculate,w
  7251  1C1C  1C03               	skipc
  7252  1C1D  0008               	return
  7253                           
  7254                           ;Automated Solar Panel Orientation Setter.c: 796: RotateMotorLeft(1);
  7255  1C1E  01A5               	clrf	RotateMotorLeft@value
  7256  1C1F  0AA5               	incf	RotateMotorLeft@value,f
  7257  1C20  01A6               	clrf	RotateMotorLeft@value+1
  7258  1C21  2C43               	ljmp	l5763
  7259  1C22                     l6291:	
  7260                           
  7261                           ;Automated Solar Panel Orientation Setter.c: 799: else if (ldr2 > ldr1){
  7262  1C22  0856               	movf	_ldr2+1,w
  7263  1C23  1683               	bsf	3,5	;RP0=1, select bank1
  7264  1C24  023C               	subwf	(_ldr1+1)^(0+128),w
  7265  1C25  1D03               	skipz
  7266  1C26  2C2B               	goto	u8075
  7267  1C27  1283               	bcf	3,5	;RP0=0, select bank0
  7268  1C28  0855               	movf	_ldr2,w
  7269  1C29  1683               	bsf	3,5	;RP0=1, select bank1
  7270  1C2A  023B               	subwf	_ldr1^(0+128),w
  7271  1C2B                     u8075:	
  7272  1C2B  1803               	skipnc
  7273  1C2C  0008               	return
  7274                           
  7275                           ;Automated Solar Panel Orientation Setter.c: 800: if(ldr2 - ldr1 > 25){
  7276  1C2D  083B               	movf	_ldr1^(0+128),w
  7277  1C2E  1283               	bcf	3,5	;RP0=0, select bank0
  7278  1C2F  0255               	subwf	_ldr2,w
  7279  1C30  00AB               	movwf	??_Calculate
  7280  1C31  1683               	bsf	3,5	;RP0=1, select bank1
  7281  1C32  083C               	movf	(_ldr1+1)^(0+128),w
  7282  1C33  1C03               	skipc
  7283  1C34  0A3C               	incf	(_ldr1+1)^(0+128),w
  7284  1C35  1283               	bcf	3,5	;RP0=0, select bank0
  7285  1C36  0256               	subwf	_ldr2+1,w
  7286  1C37  00AC               	movwf	??_Calculate+1
  7287  1C38  3000               	movlw	0
  7288  1C39  022C               	subwf	??_Calculate+1,w
  7289  1C3A  301A               	movlw	26
  7290  1C3B  1903               	skipnz
  7291  1C3C  022B               	subwf	??_Calculate,w
  7292  1C3D  1C03               	skipc
  7293  1C3E  0008               	return
  7294                           
  7295                           ;Automated Solar Panel Orientation Setter.c: 801: RotateMotorRight(1);
  7296  1C3F  01A5               	clrf	RotateMotorRight@value
  7297  1C40  0AA5               	incf	RotateMotorRight@value,f
  7298  1C41  01A6               	clrf	RotateMotorRight@value+1
  7299  1C42  2C8F               	ljmp	l5591
  7300  1C43                     __end_of_Calculate:	
  7301  1C43                     __ptext43:	
  7302 ;; *************** function _RotateMotorLeft *****************
  7303 ;; Defined at:
  7304 ;;		line 737 in file "Automated Solar Panel Orientation Setter.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  value           2    5[BANK0 ] int 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;		None
  7309 ;; Return value:  Size  Location     Type
  7310 ;;		None               void
  7311 ;; Registers used:
  7312 ;;		wreg, status,2, status,0
  7313 ;; Tracked objects:
  7314 ;;		On entry : 300/0
  7315 ;;		On exit  : 300/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7318 ;;      Params:         0       2       0       0       0
  7319 ;;      Locals:         0       0       0       0       0
  7320 ;;      Temps:          0       2       0       0       0
  7321 ;;      Totals:         0       4       0       0       0
  7322 ;;Total ram usage:        4 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    5
  7325 ;; This function calls:
  7326 ;;		Nothing
  7327 ;; This function is called by:
  7328 ;;		_main
  7329 ;;		_Calculate
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           
  7334                           ;psect for function _RotateMotorLeft
  7335  1C43                     _RotateMotorLeft:	
  7336  1C43                     l5763:	
  7337                           ;incstack = 0
  7338                           ; Regs used in _RotateMotorLeft: [wreg+status,2+status,0]
  7339                           
  7340                           
  7341                           ;Automated Solar Panel Orientation Setter.c: 739: if(sterpper_counts < 100 ){
  7342  1C43  3000               	movlw	0
  7343  1C44  1683               	bsf	3,5	;RP0=1, select bank1
  7344  1C45  0244               	subwf	(_sterpper_counts+1)^(0+128),w
  7345  1C46  3064               	movlw	100
  7346  1C47  1903               	skipnz
  7347  1C48  0243               	subwf	_sterpper_counts^(0+128),w
  7348  1C49  1803               	skipnc
  7349  1C4A  2C8E               	goto	l654
  7350                           
  7351                           ;Automated Solar Panel Orientation Setter.c: 740: for(i=0; i<value; i++){
  7352  1C4B  01E2               	clrf	_i^(0+128)
  7353  1C4C                     l655:	
  7354  1C4C  1283               	bcf	3,5	;RP0=0, select bank0
  7355  1C4D  0826               	movf	RotateMotorLeft@value+1,w
  7356  1C4E  3A80               	xorlw	128
  7357  1C4F  3C80               	sublw	128
  7358  1C50  1D03               	skipz
  7359  1C51  2C55               	goto	u7475
  7360  1C52  0825               	movf	RotateMotorLeft@value,w
  7361  1C53  1683               	bsf	3,5	;RP0=1, select bank1
  7362  1C54  0262               	subwf	_i^(0+128),w
  7363  1C55                     u7475:	
  7364  1C55  1803               	btfsc	3,0
  7365  1C56  2C8E               	goto	l654
  7366                           
  7367                           ;Automated Solar Panel Orientation Setter.c: 741: RB2=0; RB3=1; RB4=1; RB5=1;
  7368  1C57  24ED  160A  158A   	fcall	PL34	;call to abstracted procedure
  7369                           
  7370                           ;Automated Solar Panel Orientation Setter.c: 742: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7371  1C5A  3014               	movlw	20
  7372  1C5B  00A8               	movwf	??_RotateMotorLeft+1
  7373  1C5C  3079               	movlw	121
  7374  1C5D  00A7               	movwf	??_RotateMotorLeft
  7375  1C5E                     u9027:	
  7376  1C5E  0BA7               	decfsz	??_RotateMotorLeft,f
  7377  1C5F  2C5E               	goto	u9027
  7378  1C60  0BA8               	decfsz	??_RotateMotorLeft+1,f
  7379  1C61  2C5E               	goto	u9027
  7380  1C62  2C63               	nop2
  7381                           
  7382                           ;Automated Solar Panel Orientation Setter.c: 743: RB2=1; RB3=0; RB4=1; RB5=1;
  7383  1C63  24FB  160A  158A   	fcall	PL38	;call to abstracted procedure
  7384                           
  7385                           ;Automated Solar Panel Orientation Setter.c: 744: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7386  1C66  3014               	movlw	20
  7387  1C67  00A8               	movwf	??_RotateMotorLeft+1
  7388  1C68  3079               	movlw	121
  7389  1C69  00A7               	movwf	??_RotateMotorLeft
  7390  1C6A                     u9037:	
  7391  1C6A  0BA7               	decfsz	??_RotateMotorLeft,f
  7392  1C6B  2C6A               	goto	u9037
  7393  1C6C  0BA8               	decfsz	??_RotateMotorLeft+1,f
  7394  1C6D  2C6A               	goto	u9037
  7395  1C6E  2C6F               	nop2
  7396                           
  7397                           ;Automated Solar Panel Orientation Setter.c: 745: RB2=1; RB3=1; RB4=0; RB5=1;
  7398  1C6F  24E6  160A  158A   	fcall	PL32	;call to abstracted procedure
  7399                           
  7400                           ;Automated Solar Panel Orientation Setter.c: 746: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7401  1C72  3014               	movlw	20
  7402  1C73  00A8               	movwf	??_RotateMotorLeft+1
  7403  1C74  3079               	movlw	121
  7404  1C75  00A7               	movwf	??_RotateMotorLeft
  7405  1C76                     u9047:	
  7406  1C76  0BA7               	decfsz	??_RotateMotorLeft,f
  7407  1C77  2C76               	goto	u9047
  7408  1C78  0BA8               	decfsz	??_RotateMotorLeft+1,f
  7409  1C79  2C76               	goto	u9047
  7410  1C7A  2C7B               	nop2
  7411                           
  7412                           ;Automated Solar Panel Orientation Setter.c: 747: RB2=1; RB3=1; RB4=1; RB5=0;
  7413  1C7B  24F4  160A  158A   	fcall	PL36	;call to abstracted procedure
  7414                           
  7415                           ;Automated Solar Panel Orientation Setter.c: 748: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7416  1C7E  3014               	movlw	20
  7417  1C7F  00A8               	movwf	??_RotateMotorLeft+1
  7418  1C80  3079               	movlw	121
  7419  1C81  00A7               	movwf	??_RotateMotorLeft
  7420  1C82                     u9057:	
  7421  1C82  0BA7               	decfsz	??_RotateMotorLeft,f
  7422  1C83  2C82               	goto	u9057
  7423  1C84  0BA8               	decfsz	??_RotateMotorLeft+1,f
  7424  1C85  2C82               	goto	u9057
  7425  1C86  2C87               	nop2
  7426                           
  7427                           ;Automated Solar Panel Orientation Setter.c: 749: sterpper_counts++;
  7428  1C87  1683               	bsf	3,5	;RP0=1, select bank1
  7429  1C88  1303               	bcf	3,6	;RP1=0, select bank1
  7430  1C89  0AC3               	incf	_sterpper_counts^(0+128),f
  7431  1C8A  1903               	skipnz
  7432  1C8B  0AC4               	incf	(_sterpper_counts+1)^(0+128),f
  7433  1C8C  0AE2               	incf	_i^(0+128),f
  7434  1C8D  2C4C               	goto	l655
  7435  1C8E                     l654:	
  7436                           
  7437                           ;Automated Solar Panel Orientation Setter.c: 750: }
  7438                           ;Automated Solar Panel Orientation Setter.c: 751: }
  7439                           ;Automated Solar Panel Orientation Setter.c: 752: RB2=1; RB3=1; RB4=1; RB5=1;
  7440  1C8E  2CDF               	ljmp	PL26	;call to abstracted procedure
  7441  1C8F                     __end_of_RotateMotorLeft:	
  7442  1C8F                     __ptext42:	
  7443 ;; *************** function _RotateMotorRight *****************
  7444 ;; Defined at:
  7445 ;;		line 755 in file "Automated Solar Panel Orientation Setter.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;  value           2    5[BANK0 ] int 
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;  i               2    9[BANK0 ] int 
  7450 ;; Return value:  Size  Location     Type
  7451 ;;		None               void
  7452 ;; Registers used:
  7453 ;;		wreg, status,2, status,0
  7454 ;; Tracked objects:
  7455 ;;		On entry : 300/0
  7456 ;;		On exit  : 300/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7459 ;;      Params:         0       2       0       0       0
  7460 ;;      Locals:         0       2       0       0       0
  7461 ;;      Temps:          0       2       0       0       0
  7462 ;;      Totals:         0       6       0       0       0
  7463 ;;Total ram usage:        6 bytes
  7464 ;; Hardware stack levels used:    1
  7465 ;; Hardware stack levels required when called:    5
  7466 ;; This function calls:
  7467 ;;		Nothing
  7468 ;; This function is called by:
  7469 ;;		_main
  7470 ;;		_Calculate
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           
  7475                           ;psect for function _RotateMotorRight
  7476  1C8F                     _RotateMotorRight:	
  7477  1C8F                     l5591:	
  7478                           ;incstack = 0
  7479                           ; Regs used in _RotateMotorRight: [wreg+status,2+status,0]
  7480                           
  7481                           
  7482                           ;Automated Solar Panel Orientation Setter.c: 759: if(sterpper_counts > 0 ){
  7483  1C8F  1683               	bsf	3,5	;RP0=1, select bank1
  7484  1C90  0843               	movf	_sterpper_counts^(0+128),w
  7485  1C91  0444               	iorwf	(_sterpper_counts+1)^(0+128),w
  7486  1C92  1903               	btfsc	3,2
  7487  1C93  2CDE               	goto	l665
  7488                           
  7489                           ;Automated Solar Panel Orientation Setter.c: 760: for(i=0; i<value; i++){
  7490  1C94  1283               	bcf	3,5	;RP0=0, select bank0
  7491  1C95  01A9               	clrf	RotateMotorRight@i
  7492  1C96  01AA               	clrf	RotateMotorRight@i+1
  7493  1C97                     l5623:	
  7494  1C97  082A               	movf	RotateMotorRight@i+1,w
  7495  1C98  3A80               	xorlw	128
  7496  1C99  00A7               	movwf	??_RotateMotorRight
  7497  1C9A  0826               	movf	RotateMotorRight@value+1,w
  7498  1C9B  3A80               	xorlw	128
  7499  1C9C  0227               	subwf	??_RotateMotorRight,w
  7500  1C9D  1D03               	skipz
  7501  1C9E  2CA1               	goto	u7045
  7502  1C9F  0825               	movf	RotateMotorRight@value,w
  7503  1CA0  0229               	subwf	RotateMotorRight@i,w
  7504  1CA1                     u7045:	
  7505  1CA1  1803               	btfsc	3,0
  7506  1CA2  2CDE               	goto	l665
  7507                           
  7508                           ;Automated Solar Panel Orientation Setter.c: 761: RB2=1; RB3=1; RB4=1; RB5=0;
  7509  1CA3  24F4  160A  158A   	fcall	PL36	;call to abstracted procedure
  7510                           
  7511                           ;Automated Solar Panel Orientation Setter.c: 762: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7512  1CA6  3014               	movlw	20
  7513  1CA7  00A8               	movwf	??_RotateMotorRight+1
  7514  1CA8  3079               	movlw	121
  7515  1CA9  00A7               	movwf	??_RotateMotorRight
  7516  1CAA                     u8987:	
  7517  1CAA  0BA7               	decfsz	??_RotateMotorRight,f
  7518  1CAB  2CAA               	goto	u8987
  7519  1CAC  0BA8               	decfsz	??_RotateMotorRight+1,f
  7520  1CAD  2CAA               	goto	u8987
  7521  1CAE  2CAF               	nop2
  7522                           
  7523                           ;Automated Solar Panel Orientation Setter.c: 763: RB2=1; RB3=1; RB4=0; RB5=1;
  7524  1CAF  24E6  160A  158A   	fcall	PL32	;call to abstracted procedure
  7525                           
  7526                           ;Automated Solar Panel Orientation Setter.c: 764: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7527  1CB2  3014               	movlw	20
  7528  1CB3  00A8               	movwf	??_RotateMotorRight+1
  7529  1CB4  3079               	movlw	121
  7530  1CB5  00A7               	movwf	??_RotateMotorRight
  7531  1CB6                     u8997:	
  7532  1CB6  0BA7               	decfsz	??_RotateMotorRight,f
  7533  1CB7  2CB6               	goto	u8997
  7534  1CB8  0BA8               	decfsz	??_RotateMotorRight+1,f
  7535  1CB9  2CB6               	goto	u8997
  7536  1CBA  2CBB               	nop2
  7537                           
  7538                           ;Automated Solar Panel Orientation Setter.c: 765: RB2=1; RB3=0; RB4=1; RB5=1;
  7539  1CBB  24FB  160A  158A   	fcall	PL38	;call to abstracted procedure
  7540                           
  7541                           ;Automated Solar Panel Orientation Setter.c: 766: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7542  1CBE  3014               	movlw	20
  7543  1CBF  00A8               	movwf	??_RotateMotorRight+1
  7544  1CC0  3079               	movlw	121
  7545  1CC1  00A7               	movwf	??_RotateMotorRight
  7546  1CC2                     u9007:	
  7547  1CC2  0BA7               	decfsz	??_RotateMotorRight,f
  7548  1CC3  2CC2               	goto	u9007
  7549  1CC4  0BA8               	decfsz	??_RotateMotorRight+1,f
  7550  1CC5  2CC2               	goto	u9007
  7551  1CC6  2CC7               	nop2
  7552                           
  7553                           ;Automated Solar Panel Orientation Setter.c: 767: RB2=0; RB3=1; RB4=1; RB5=1;
  7554  1CC7  24ED  160A  158A   	fcall	PL34	;call to abstracted procedure
  7555                           
  7556                           ;Automated Solar Panel Orientation Setter.c: 768: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7557  1CCA  3014               	movlw	20
  7558  1CCB  00A8               	movwf	??_RotateMotorRight+1
  7559  1CCC  3079               	movlw	121
  7560  1CCD  00A7               	movwf	??_RotateMotorRight
  7561  1CCE                     u9017:	
  7562  1CCE  0BA7               	decfsz	??_RotateMotorRight,f
  7563  1CCF  2CCE               	goto	u9017
  7564  1CD0  0BA8               	decfsz	??_RotateMotorRight+1,f
  7565  1CD1  2CCE               	goto	u9017
  7566  1CD2  2CD3               	nop2
  7567                           
  7568                           ;Automated Solar Panel Orientation Setter.c: 769: sterpper_counts--;
  7569  1CD3  3001               	movlw	1
  7570  1CD4  1683               	bsf	3,5	;RP0=1, select bank1
  7571  1CD5  1303               	bcf	3,6	;RP1=0, select bank1
  7572  1CD6  02C3               	subwf	_sterpper_counts^(0+128),f
  7573  1CD7  1C03               	skipc
  7574  1CD8  03C4               	decf	(_sterpper_counts+1)^(0+128),f
  7575  1CD9  1283               	bcf	3,5	;RP0=0, select bank0
  7576  1CDA  0AA9               	incf	RotateMotorRight@i,f
  7577  1CDB  1903               	skipnz
  7578  1CDC  0AAA               	incf	RotateMotorRight@i+1,f
  7579  1CDD  2C97               	goto	l5623
  7580  1CDE                     l665:	
  7581                           ;Automated Solar Panel Orientation Setter.c: 772: else{
  7582                           
  7583                           
  7584                           ;Automated Solar Panel Orientation Setter.c: 774: }
  7585                           ;Automated Solar Panel Orientation Setter.c: 775: RB2=1; RB3=1; RB4=1; RB5=1;
  7586  1CDE  2CDF               	ljmp	PL26	;call to abstracted procedure
  7587  1CDF                     __end_of_RotateMotorRight:	
  7588  1CDF                     PL26:	
  7589  1CDF  1283               	bcf	3,5	;RP0=0, select bank0
  7590  1CE0  1303               	bcf	3,6	;RP1=0, select bank0
  7591  1CE1  1506               	bsf	6,2	;volatile
  7592  1CE2  1586               	bsf	6,3	;volatile
  7593  1CE3  1606               	bsf	6,4	;volatile
  7594  1CE4  1686               	bsf	6,5	;volatile
  7595  1CE5  0008               	return
  7596  1CE6                     __end_ofPL26:	
  7597  1CE6                     PL32:	
  7598  1CE6  1283               	bcf	3,5	;RP0=0, select bank0
  7599  1CE7  1303               	bcf	3,6	;RP1=0, select bank0
  7600  1CE8  1506               	bsf	6,2	;volatile
  7601  1CE9  1586               	bsf	6,3	;volatile
  7602  1CEA  1206               	bcf	6,4	;volatile
  7603  1CEB  1686               	bsf	6,5	;volatile
  7604  1CEC  0008               	return
  7605  1CED                     __end_ofPL32:	
  7606  1CED                     PL34:	
  7607  1CED  1283               	bcf	3,5	;RP0=0, select bank0
  7608  1CEE  1303               	bcf	3,6	;RP1=0, select bank0
  7609  1CEF  1106               	bcf	6,2	;volatile
  7610  1CF0  1586               	bsf	6,3	;volatile
  7611  1CF1  1606               	bsf	6,4	;volatile
  7612  1CF2  1686               	bsf	6,5	;volatile
  7613  1CF3  0008               	return
  7614  1CF4                     __end_ofPL34:	
  7615  1CF4                     PL36:	
  7616  1CF4  1283               	bcf	3,5	;RP0=0, select bank0
  7617  1CF5  1303               	bcf	3,6	;RP1=0, select bank0
  7618  1CF6  1506               	bsf	6,2	;volatile
  7619  1CF7  1586               	bsf	6,3	;volatile
  7620  1CF8  1606               	bsf	6,4	;volatile
  7621  1CF9  1286               	bcf	6,5	;volatile
  7622  1CFA  0008               	return
  7623  1CFB                     __end_ofPL36:	
  7624  1CFB                     PL38:	
  7625  1CFB  1283               	bcf	3,5	;RP0=0, select bank0
  7626  1CFC  1303               	bcf	3,6	;RP1=0, select bank0
  7627  1CFD  1506               	bsf	6,2	;volatile
  7628  1CFE  1186               	bcf	6,3	;volatile
  7629  1CFF  1606               	bsf	6,4	;volatile
  7630  1D00  1686               	bsf	6,5	;volatile
  7631  1D01  0008               	return
  7632  1D02                     __end_ofPL38:	
  7633                           
  7634                           	psect	text44
  7635  1307                     __ptext44:	
  7636 ;; *************** function _isr *****************
  7637 ;; Defined at:
  7638 ;;		line 807 in file "Automated Solar Panel Orientation Setter.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;		None
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;		None
  7643 ;; Return value:  Size  Location     Type
  7644 ;;		None               void
  7645 ;; Registers used:
  7646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 300/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7652 ;;      Params:         0       0       0       0       0
  7653 ;;      Locals:         0       0       0       0       0
  7654 ;;      Temps:          0       3       0       0       0
  7655 ;;      Totals:         0       3       0       0       0
  7656 ;;Total ram usage:        3 bytes
  7657 ;; Hardware stack levels used:    1
  7658 ;; Hardware stack levels required when called:    4
  7659 ;; This function calls:
  7660 ;;		i1_LCDTimeUpdate
  7661 ;;		i1_LCD_print_char
  7662 ;;		i1___lwmod
  7663 ;; This function is called by:
  7664 ;;		Interrupt level 1
  7665 ;; This function uses a non-reentrant model
  7666 ;;
  7667                           
  7668                           
  7669                           ;psect for function _isr
  7670  1307                     _isr:	
  7671                           
  7672                           ;Automated Solar Panel Orientation Setter.c: 808: if(TMR1IF==1){
  7673  1307  1C0C               	btfss	12,0	;volatile
  7674  1308  2B60               	goto	i1l5141
  7675                           
  7676                           ;Automated Solar Panel Orientation Setter.c: 809: msecond ++;
  7677  1309  1683               	bsf	3,5	;RP0=1, select bank1
  7678  130A  0ABF               	incf	_msecond^(0+128),f
  7679  130B  1903               	skipnz
  7680  130C  0AC0               	incf	(_msecond+1)^(0+128),f
  7681                           
  7682                           ;Automated Solar Panel Orientation Setter.c: 810: if(msecond == 50){
  7683  130D  3032               	movlw	50
  7684  130E  063F               	xorwf	_msecond^(0+128),w
  7685  130F  0440               	iorwf	(_msecond+1)^(0+128),w
  7686  1310  1D03               	btfss	3,2
  7687  1311  2B5A               	goto	i1l681
  7688                           
  7689                           ;Automated Solar Panel Orientation Setter.c: 811: second ++;
  7690  1312  0AC1               	incf	_second^(0+128),f
  7691  1313  1903               	skipnz
  7692  1314  0AC2               	incf	(_second+1)^(0+128),f
  7693                           
  7694                           ;Automated Solar Panel Orientation Setter.c: 813: if(TimeBlink_on){
  7695  1315  1283               	bcf	3,5	;RP0=0, select bank0
  7696  1316  1D51               	btfss	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  7697  1317  2B33               	goto	i1l5117
  7698                           
  7699                           ;Automated Solar Panel Orientation Setter.c: 814: if(BlinkDet){
  7700  1318  1C51               	btfss	_BlinkDet/(0+8),_BlinkDet& (0+7)
  7701  1319  2B21               	goto	i1l5113
  7702  131A  300E               	movlw	14
  7703                           
  7704                           ;Automated Solar Panel Orientation Setter.c: 815: LCD_print_char(1,14,':');
  7705  131B  01F8               	clrf	i1LCD_print_char@row
  7706  131C  0AF8               	incf	i1LCD_print_char@row,f
  7707  131D  01F9               	clrf	i1LCD_print_char@row+1
  7708  131E  00FA               	movwf	i1LCD_print_char@column
  7709  131F  303A               	movlw	58
  7710  1320  2B27               	goto	L25
  7711  1321                     i1l5113:	
  7712                           ;Automated Solar Panel Orientation Setter.c: 816: }
  7713                           
  7714  1321  300E               	movlw	14
  7715                           
  7716                           ;Automated Solar Panel Orientation Setter.c: 817: else{
  7717                           ;Automated Solar Panel Orientation Setter.c: 818: LCD_print_char(1,14,' ');
  7718  1322  01F8               	clrf	i1LCD_print_char@row
  7719  1323  0AF8               	incf	i1LCD_print_char@row,f
  7720  1324  01F9               	clrf	i1LCD_print_char@row+1
  7721  1325  00FA               	movwf	i1LCD_print_char@column
  7722  1326  3020               	movlw	32
  7723  1327                     L25:	
  7724  1327  01FB               	clrf	i1LCD_print_char@column+1
  7725  1328  00FC               	movwf	i1LCD_print_char@print_value
  7726  1329  241E  160A  118A   	fcall	i1_LCD_print_char
  7727                           
  7728                           ;Automated Solar Panel Orientation Setter.c: 819: }
  7729                           ;Automated Solar Panel Orientation Setter.c: 820: LCDTimeUpdate();
  7730  132C  2391  160A  118A   	fcall	i1_LCDTimeUpdate
  7731                           
  7732                           ;Automated Solar Panel Orientation Setter.c: 821: BlinkDet = !BlinkDet;
  7733  132F  3001               	movlw	(0+1) shl (_BlinkDet& (0+7))
  7734  1330  1283               	bcf	3,5	;RP0=0, select bank0
  7735  1331  1303               	bcf	3,6	;RP1=0, select bank0
  7736  1332  06D1               	xorwf	_BlinkDet/(0+8),f
  7737  1333                     i1l5117:	
  7738                           
  7739                           ;Automated Solar Panel Orientation Setter.c: 822: }
  7740                           ;Automated Solar Panel Orientation Setter.c: 824: RD6 = !RD6;
  7741  1333  3040               	movlw	64
  7742  1334  0688               	xorwf	8,f
  7743                           
  7744                           ;Automated Solar Panel Orientation Setter.c: 825: msecond = 0;
  7745  1335  1683               	bsf	3,5	;RP0=1, select bank1
  7746  1336  303C               	movlw	60
  7747  1337  01BF               	clrf	_msecond^(0+128)
  7748  1338  01C0               	clrf	(_msecond+1)^(0+128)
  7749                           
  7750                           ;Automated Solar Panel Orientation Setter.c: 826: if( second == 60){
  7751  1339  0641               	xorwf	_second^(0+128),w
  7752  133A  0442               	iorwf	(_second+1)^(0+128),w
  7753  133B  1D03               	btfss	3,2
  7754  133C  2B5A               	goto	i1l681
  7755                           
  7756                           ;Automated Solar Panel Orientation Setter.c: 833: minute ++;
  7757  133D  0ABD               	incf	_minute^(0+128),f
  7758  133E  1903               	skipnz
  7759  133F  0ABE               	incf	(_minute+1)^(0+128),f
  7760  1340  301E               	movlw	30
  7761                           
  7762                           ;Automated Solar Panel Orientation Setter.c: 834: second = 0;
  7763  1341  01C1               	clrf	_second^(0+128)
  7764  1342  01C2               	clrf	(_second+1)^(0+128)
  7765                           
  7766                           ;Automated Solar Panel Orientation Setter.c: 836: x = minute%30 ;
  7767  1343  00F1               	movwf	i1___lwmod@divisor
  7768  1344  01F2               	clrf	i1___lwmod@divisor+1
  7769  1345  083E               	movf	(_minute+1)^(0+128),w
  7770  1346  00F4               	movwf	i1___lwmod@dividend+1
  7771  1347  083D               	movf	_minute^(0+128),w
  7772  1348  00F3               	movwf	i1___lwmod@dividend
  7773  1349  2462  160A  118A   	fcall	i1___lwmod
  7774  134C  0871               	movf	?i1___lwmod,w
  7775  134D  1683               	bsf	3,5	;RP0=1, select bank1
  7776  134E  00C6               	movwf	_x^(0+128)
  7777                           
  7778                           ;Automated Solar Panel Orientation Setter.c: 840: }
  7779                           ;Automated Solar Panel Orientation Setter.c: 843: if( minute == 60){
  7780  134F  303C               	movlw	60
  7781  1350  063D               	xorwf	_minute^(0+128),w
  7782  1351  043E               	iorwf	(_minute+1)^(0+128),w
  7783  1352  1D03               	btfss	3,2
  7784  1353  2B5A               	goto	i1l681
  7785                           
  7786                           ;Automated Solar Panel Orientation Setter.c: 844: minute = 0;
  7787  1354  01BD               	clrf	_minute^(0+128)
  7788  1355  01BE               	clrf	(_minute+1)^(0+128)
  7789                           
  7790                           ;Automated Solar Panel Orientation Setter.c: 845: hour ++;
  7791  1356  1283               	bcf	3,5	;RP0=0, select bank0
  7792  1357  0AD3               	incf	_hour,f
  7793  1358  1903               	skipnz
  7794  1359  0AD4               	incf	_hour+1,f
  7795  135A                     i1l681:	
  7796                           
  7797                           ;Automated Solar Panel Orientation Setter.c: 847: }
  7798                           ;Automated Solar Panel Orientation Setter.c: 848: }
  7799                           ;Automated Solar Panel Orientation Setter.c: 849: }
  7800                           ;Automated Solar Panel Orientation Setter.c: 850: TMR1IF = 0;
  7801  135A  1283               	bcf	3,5	;RP0=0, select bank0
  7802  135B  100C               	bcf	12,0	;volatile
  7803                           
  7804                           ;Automated Solar Panel Orientation Setter.c: 851: TMR1L = 0xB0;
  7805  135C  30B0               	movlw	176
  7806  135D  008E               	movwf	14	;volatile
  7807                           
  7808                           ;Automated Solar Panel Orientation Setter.c: 852: TMR1H = 0x3C;
  7809  135E  303C               	movlw	60
  7810  135F  008F               	movwf	15	;volatile
  7811  1360                     i1l5141:	
  7812                           
  7813                           ;Automated Solar Panel Orientation Setter.c: 853: }
  7814                           ;Automated Solar Panel Orientation Setter.c: 854: if( RCIF == 1){
  7815  1360  1E8C               	btfss	12,5	;volatile
  7816  1361  2B82               	goto	i1l5165
  7817                           
  7818                           ;Automated Solar Panel Orientation Setter.c: 855: if ((FERR == 0) && (OERR == 0)){
  7819  1362  1D18               	btfss	24,2	;volatile
  7820  1363  1898               	btfsc	24,1	;volatile
  7821  1364  2B7B               	goto	i1l690
  7822                           
  7823                           ;Automated Solar Panel Orientation Setter.c: 856: wtmp = RCREG;
  7824  1365  081A               	movf	26,w	;volatile
  7825                           
  7826                           ;Automated Solar Panel Orientation Setter.c: 857: if( RCREG=='*' || j > 20-1 ){
  7827  1366  302A               	movlw	42
  7828  1367  061A               	xorwf	26,w
  7829  1368  1903               	btfsc	3,2
  7830  1369  2B6F               	goto	i1l5153
  7831  136A  3014               	movlw	20
  7832  136B  1683               	bsf	3,5	;RP0=1, select bank1
  7833  136C  0245               	subwf	_j^(0+128),w
  7834  136D  1C03               	skipc
  7835  136E  2B71               	goto	i1l5155
  7836  136F                     i1l5153:	
  7837                           
  7838                           ;Automated Solar Panel Orientation Setter.c: 858: j=0;
  7839  136F  1683               	bsf	3,5	;RP0=1, select bank1
  7840  1370  01C5               	clrf	_j^(0+128)
  7841  1371                     i1l5155:	
  7842                           
  7843                           ;Automated Solar Panel Orientation Setter.c: 859: }
  7844                           ;Automated Solar Panel Orientation Setter.c: 860: buffer[j] = RCREG;
  7845  1371  0845               	movf	_j^(0+128),w
  7846  1372  3EA0               	addlw	(low (_buffer| 0))& (0+255)
  7847  1373  0084               	movwf	4
  7848  1374  1283               	bcf	3,5	;RP0=0, select bank0
  7849  1375  081A               	movf	26,w	;volatile
  7850  1376  1383               	bcf	3,7	;select IRP bank1
  7851  1377  0080               	movwf	0
  7852                           
  7853                           ;Automated Solar Panel Orientation Setter.c: 861: j ++;
  7854  1378  1683               	bsf	3,5	;RP0=1, select bank1
  7855  1379  0AC5               	incf	_j^(0+128),f
  7856                           
  7857                           ;Automated Solar Panel Orientation Setter.c: 862: }
  7858  137A  2B80               	goto	i1l5163
  7859  137B                     i1l690:	
  7860                           
  7861                           ;Automated Solar Panel Orientation Setter.c: 863: else{
  7862                           ;Automated Solar Panel Orientation Setter.c: 865: CREN = 0;
  7863  137B  1218               	bcf	24,4	;volatile
  7864                           
  7865                           ;Automated Solar Panel Orientation Setter.c: 866: FERR = 0;
  7866  137C  1118               	bcf	24,2	;volatile
  7867                           
  7868                           ;Automated Solar Panel Orientation Setter.c: 867: wtmp = RCREG;
  7869  137D  081A               	movf	26,w	;volatile
  7870                           
  7871                           ;Automated Solar Panel Orientation Setter.c: 868: wtmp = RCREG;
  7872  137E  081A               	movf	26,w	;volatile
  7873                           
  7874                           ;Automated Solar Panel Orientation Setter.c: 869: CREN = 1;
  7875  137F  1618               	bsf	24,4	;volatile
  7876  1380                     i1l5163:	
  7877                           
  7878                           ;Automated Solar Panel Orientation Setter.c: 870: }
  7879                           ;Automated Solar Panel Orientation Setter.c: 871: RCIF = 0;
  7880  1380  1283               	bcf	3,5	;RP0=0, select bank0
  7881  1381  128C               	bcf	12,5	;volatile
  7882  1382                     i1l5165:	
  7883                           
  7884                           ;Automated Solar Panel Orientation Setter.c: 872: }
  7885                           ;Automated Solar Panel Orientation Setter.c: 873: if(OERR == 1){
  7886  1382  1C98               	btfss	24,1	;volatile
  7887  1383  2B88               	goto	i1l696
  7888                           
  7889                           ;Automated Solar Panel Orientation Setter.c: 874: CREN = 0;
  7890  1384  1218               	bcf	24,4	;volatile
  7891                           
  7892                           ;Automated Solar Panel Orientation Setter.c: 876: wtmp = RCREG;
  7893  1385  081A               	movf	26,w	;volatile
  7894                           
  7895                           ;Automated Solar Panel Orientation Setter.c: 877: wtmp = RCREG;
  7896  1386  081A               	movf	26,w	;volatile
  7897                           
  7898                           ;Automated Solar Panel Orientation Setter.c: 878: CREN = 1;
  7899  1387  1618               	bsf	24,4	;volatile
  7900  1388                     i1l696:	
  7901  1388  0824               	movf	??_isr+2,w
  7902  1389  008A               	movwf	10
  7903  138A  0823               	movf	??_isr+1,w
  7904  138B  0084               	movwf	4
  7905  138C  0E22               	swapf	??_isr^0,w
  7906  138D  0083               	movwf	3
  7907  138E  0EFE               	swapf	126,f
  7908  138F  0E7E               	swapf	126,w
  7909  1390  0009               	retfie
  7910  1391                     __end_of_isr:	
  7911  1391                     __ptext45:	
  7912 ;; *************** function i1_LCDTimeUpdate *****************
  7913 ;; Defined at:
  7914 ;;		line 898 in file "Automated Solar Panel Orientation Setter.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;		None
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;		None
  7919 ;; Return value:  Size  Location     Type
  7920 ;;		None               void
  7921 ;; Registers used:
  7922 ;;		wreg, status,2, status,0, pclath, cstack
  7923 ;; Tracked objects:
  7924 ;;		On entry : 0/0
  7925 ;;		On exit  : 0/0
  7926 ;;		Unchanged: 0/0
  7927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7928 ;;      Params:         0       0       0       0       0
  7929 ;;      Locals:         0       0       0       0       0
  7930 ;;      Temps:          0       2       0       0       0
  7931 ;;      Totals:         0       2       0       0       0
  7932 ;;Total ram usage:        2 bytes
  7933 ;; Hardware stack levels used:    1
  7934 ;; Hardware stack levels required when called:    3
  7935 ;; This function calls:
  7936 ;;		i1_LCD_print_char
  7937 ;;		i1___lwdiv
  7938 ;;		i1___lwmod
  7939 ;; This function is called by:
  7940 ;;		_isr
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           
  7945                           ;psect for function i1_LCDTimeUpdate
  7946  1391                     i1_LCDTimeUpdate:	
  7947                           
  7948                           ;incstack = 0
  7949 ;; hardware stack exceeded
  7950                           ; Regs used in i1_LCDTimeUpdate: [wreg+status,2+status,0+pclath+cstack]
  7951  1391  300C               	movlw	12
  7952                           
  7953                           ;Automated Solar Panel Orientation Setter.c: 899: LCD_print_char(1,12,hour/10+48);
  7954  1392  01F8               	clrf	i1LCD_print_char@row
  7955  1393  0AF8               	incf	i1LCD_print_char@row,f
  7956  1394  01F9               	clrf	i1LCD_print_char@row+1
  7957  1395  00FA               	movwf	i1LCD_print_char@column
  7958  1396  300A               	movlw	10
  7959  1397  01FB               	clrf	i1LCD_print_char@column+1
  7960  1398  00F1               	movwf	i1___lwdiv@divisor
  7961  1399  01F2               	clrf	i1___lwdiv@divisor+1
  7962  139A  1283               	bcf	3,5	;RP0=0, select bank0
  7963  139B  1303               	bcf	3,6	;RP1=0, select bank0
  7964  139C  0854               	movf	_hour+1,w
  7965  139D  00F4               	movwf	i1___lwdiv@dividend+1
  7966  139E  0853               	movf	_hour,w
  7967  139F  00F3               	movwf	i1___lwdiv@dividend
  7968  13A0  2438  160A  118A   	fcall	i1___lwdiv
  7969  13A3  0871               	movf	?i1___lwdiv,w
  7970  13A4  3E30               	addlw	48
  7971  13A5  00FC               	movwf	i1LCD_print_char@print_value
  7972  13A6  241E  160A  118A   	fcall	i1_LCD_print_char
  7973                           
  7974                           ;Automated Solar Panel Orientation Setter.c: 900: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  7975  13A9  300D               	movlw	13
  7976  13AA  1283               	bcf	3,5	;RP0=0, select bank0
  7977  13AB  1303               	bcf	3,6	;RP1=0, select bank0
  7978  13AC  00A1               	movwf	??i1_LCDTimeUpdate+1
  7979  13AD  30FB               	movlw	251
  7980  13AE  00A0               	movwf	??i1_LCDTimeUpdate
  7981  13AF                     u906_27:	
  7982  13AF  0BA0               	decfsz	??i1_LCDTimeUpdate,f
  7983  13B0  2BAF               	goto	u906_27
  7984  13B1  0BA1               	decfsz	??i1_LCDTimeUpdate+1,f
  7985  13B2  2BAF               	goto	u906_27
  7986  13B3  2BB4               	nop2
  7987  13B4  300D               	movlw	13
  7988                           
  7989                           ;Automated Solar Panel Orientation Setter.c: 901: LCD_print_char(1,13,hour%10+48);
  7990  13B5  01F8               	clrf	i1LCD_print_char@row
  7991  13B6  0AF8               	incf	i1LCD_print_char@row,f
  7992  13B7  01F9               	clrf	i1LCD_print_char@row+1
  7993  13B8  00FA               	movwf	i1LCD_print_char@column
  7994  13B9  300A               	movlw	10
  7995  13BA  01FB               	clrf	i1LCD_print_char@column+1
  7996  13BB  00F1               	movwf	i1___lwmod@divisor
  7997  13BC  01F2               	clrf	i1___lwmod@divisor+1
  7998  13BD  1283               	bcf	3,5	;RP0=0, select bank0
  7999  13BE  1303               	bcf	3,6	;RP1=0, select bank0
  8000  13BF  0854               	movf	_hour+1,w
  8001  13C0  00F4               	movwf	i1___lwmod@dividend+1
  8002  13C1  0853               	movf	_hour,w
  8003  13C2  00F3               	movwf	i1___lwmod@dividend
  8004  13C3  2462  160A  118A   	fcall	i1___lwmod
  8005  13C6  0871               	movf	?i1___lwmod,w
  8006  13C7  3E30               	addlw	48
  8007  13C8  00FC               	movwf	i1LCD_print_char@print_value
  8008  13C9  241E  160A  118A   	fcall	i1_LCD_print_char
  8009                           
  8010                           ;Automated Solar Panel Orientation Setter.c: 902: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  8011  13CC  300D               	movlw	13
  8012  13CD  1283               	bcf	3,5	;RP0=0, select bank0
  8013  13CE  1303               	bcf	3,6	;RP1=0, select bank0
  8014  13CF  00A1               	movwf	??i1_LCDTimeUpdate+1
  8015  13D0  30FB               	movlw	251
  8016  13D1  00A0               	movwf	??i1_LCDTimeUpdate
  8017  13D2                     u907_27:	
  8018  13D2  0BA0               	decfsz	??i1_LCDTimeUpdate,f
  8019  13D3  2BD2               	goto	u907_27
  8020  13D4  0BA1               	decfsz	??i1_LCDTimeUpdate+1,f
  8021  13D5  2BD2               	goto	u907_27
  8022  13D6  2BD7               	nop2
  8023  13D7  300F               	movlw	15
  8024                           
  8025                           ;Automated Solar Panel Orientation Setter.c: 903: LCD_print_char(1,15,minute/10+48);
  8026  13D8  01F8               	clrf	i1LCD_print_char@row
  8027  13D9  0AF8               	incf	i1LCD_print_char@row,f
  8028  13DA  01F9               	clrf	i1LCD_print_char@row+1
  8029  13DB  00FA               	movwf	i1LCD_print_char@column
  8030  13DC  300A               	movlw	10
  8031  13DD  01FB               	clrf	i1LCD_print_char@column+1
  8032  13DE  00F1               	movwf	i1___lwdiv@divisor
  8033  13DF  01F2               	clrf	i1___lwdiv@divisor+1
  8034  13E0  1683               	bsf	3,5	;RP0=1, select bank1
  8035  13E1  1303               	bcf	3,6	;RP1=0, select bank1
  8036  13E2  083E               	movf	(_minute+1)^(0+128),w
  8037  13E3  00F4               	movwf	i1___lwdiv@dividend+1
  8038  13E4  083D               	movf	_minute^(0+128),w
  8039  13E5  00F3               	movwf	i1___lwdiv@dividend
  8040  13E6  2438  160A  118A   	fcall	i1___lwdiv
  8041  13E9  0871               	movf	?i1___lwdiv,w
  8042  13EA  3E30               	addlw	48
  8043  13EB  00FC               	movwf	i1LCD_print_char@print_value
  8044  13EC  241E  160A  118A   	fcall	i1_LCD_print_char
  8045                           
  8046                           ;Automated Solar Panel Orientation Setter.c: 904: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  8047  13EF  300D               	movlw	13
  8048  13F0  1283               	bcf	3,5	;RP0=0, select bank0
  8049  13F1  1303               	bcf	3,6	;RP1=0, select bank0
  8050  13F2  00A1               	movwf	??i1_LCDTimeUpdate+1
  8051  13F3  30FB               	movlw	251
  8052  13F4  00A0               	movwf	??i1_LCDTimeUpdate
  8053  13F5                     u908_27:	
  8054  13F5  0BA0               	decfsz	??i1_LCDTimeUpdate,f
  8055  13F6  2BF5               	goto	u908_27
  8056  13F7  0BA1               	decfsz	??i1_LCDTimeUpdate+1,f
  8057  13F8  2BF5               	goto	u908_27
  8058  13F9  2BFA               	nop2
  8059  13FA  3010               	movlw	16
  8060                           
  8061                           ;Automated Solar Panel Orientation Setter.c: 905: LCD_print_char(1,16,minute%10+48);
  8062  13FB  01F8               	clrf	i1LCD_print_char@row
  8063  13FC  0AF8               	incf	i1LCD_print_char@row,f
  8064  13FD  01F9               	clrf	i1LCD_print_char@row+1
  8065  13FE  00FA               	movwf	i1LCD_print_char@column
  8066  13FF  300A               	movlw	10
  8067  1400  01FB               	clrf	i1LCD_print_char@column+1
  8068  1401  00F1               	movwf	i1___lwmod@divisor
  8069  1402  01F2               	clrf	i1___lwmod@divisor+1
  8070  1403  1683               	bsf	3,5	;RP0=1, select bank1
  8071  1404  1303               	bcf	3,6	;RP1=0, select bank1
  8072  1405  083E               	movf	(_minute+1)^(0+128),w
  8073  1406  00F4               	movwf	i1___lwmod@dividend+1
  8074  1407  083D               	movf	_minute^(0+128),w
  8075  1408  00F3               	movwf	i1___lwmod@dividend
  8076  1409  2462  160A  118A   	fcall	i1___lwmod
  8077  140C  0871               	movf	?i1___lwmod,w
  8078  140D  3E30               	addlw	48
  8079  140E  00FC               	movwf	i1LCD_print_char@print_value
  8080  140F  241E  160A  118A   	fcall	i1_LCD_print_char
  8081                           
  8082                           ;Automated Solar Panel Orientation Setter.c: 906: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  8083  1412  300D               	movlw	13
  8084  1413  1283               	bcf	3,5	;RP0=0, select bank0
  8085  1414  1303               	bcf	3,6	;RP1=0, select bank0
  8086  1415  00A1               	movwf	??i1_LCDTimeUpdate+1
  8087  1416  30FB               	movlw	251
  8088  1417  00A0               	movwf	??i1_LCDTimeUpdate
  8089  1418                     u909_27:	
  8090  1418  0BA0               	decfsz	??i1_LCDTimeUpdate,f
  8091  1419  2C18               	goto	u909_27
  8092  141A  0BA1               	decfsz	??i1_LCDTimeUpdate+1,f
  8093  141B  2C18               	goto	u909_27
  8094  141C  2C1D               	nop2
  8095  141D  0008               	return
  8096  141E                     __end_ofi1_LCDTimeUpdate:	
  8097  141E                     __ptext48:	
  8098 ;; *************** function i1_LCD_print_char *****************
  8099 ;; Defined at:
  8100 ;;		line 174 in file "lcdv2.h"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  row             2    7[COMMON] int 
  8103 ;;  column          2    9[COMMON] int 
  8104 ;;  print_value     1   11[COMMON] unsigned char 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;		None
  8107 ;; Return value:  Size  Location     Type
  8108 ;;		None               void
  8109 ;; Registers used:
  8110 ;;		wreg, status,2, status,0, pclath, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : 200/0
  8113 ;;		On exit  : 0/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8116 ;;      Params:         5       0       0       0       0
  8117 ;;      Locals:         0       0       0       0       0
  8118 ;;      Temps:          1       0       0       0       0
  8119 ;;      Totals:         6       0       0       0       0
  8120 ;;Total ram usage:        6 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    2
  8123 ;; This function calls:
  8124 ;;		i1_lcd_add
  8125 ;;		i1_position
  8126 ;; This function is called by:
  8127 ;;		_isr
  8128 ;;		i1_LCDTimeUpdate
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           
  8133                           ;psect for function i1_LCD_print_char
  8134  141E                     i1_LCD_print_char:	
  8135                           
  8136                           ;lcdv2.h: 175: position(row,column);
  8137                           
  8138                           ;incstack = 0
  8139                           ; Regs used in i1_LCD_print_char: [wreg+status,2+status,0+pclath+cstack]
  8140  141E  087A               	movf	i1LCD_print_char@column,w
  8141  141F  00F2               	movwf	i1position@collum
  8142  1420  0878               	movf	i1LCD_print_char@row,w
  8143  1421  2545  160A  118A   	fcall	i1_position
  8144                           
  8145                           ;lcdv2.h: 176: RC2 = 1;
  8146  1424  1283               	bcf	3,5	;RP0=0, select bank0
  8147  1425  1303               	bcf	3,6	;RP1=0, select bank0
  8148  1426  1507               	bsf	7,2	;volatile
  8149                           
  8150                           ;lcdv2.h: 177: _delay(20);
  8151  1427  3006               	movlw	6
  8152  1428  00FD               	movwf	??i1_LCD_print_char
  8153  1429                     u910_27:	
  8154  1429  0BFD               	decfsz	??i1_LCD_print_char,f
  8155  142A  2C29               	goto	u910_27
  8156  142B  0000               	nop
  8157                           
  8158                           ;lcdv2.h: 178: lcd_data = print_value;
  8159  142C  087C               	movf	i1LCD_print_char@print_value,w
  8160  142D  1283               	bcf	3,5	;RP0=0, select bank0
  8161  142E  1303               	bcf	3,6	;RP1=0, select bank0
  8162  142F  00D7               	movwf	_lcd_data
  8163                           
  8164                           ;lcdv2.h: 179: lcd_add();
  8165  1430  2486  160A  118A   	fcall	i1_lcd_add
  8166                           
  8167                           ;lcdv2.h: 180: _delay(100);
  8168  1433  3021               	movlw	33
  8169  1434  00FD               	movwf	??i1_LCD_print_char
  8170  1435                     u911_27:	
  8171  1435  0BFD               	decfsz	??i1_LCD_print_char,f
  8172  1436  2C35               	goto	u911_27
  8173  1437  0008               	return
  8174  1438                     __end_ofi1_LCD_print_char:	
  8175  1438                     __ptext47:	
  8176 ;; *************** function i1___lwdiv *****************
  8177 ;; Defined at:
  8178 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;  divisor         2    0[COMMON] unsigned int 
  8181 ;;  dividend        2    2[COMMON] unsigned int 
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  __lwdiv         2    4[COMMON] unsigned int 
  8184 ;;  __lwdiv         1    6[COMMON] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  2    0[COMMON] unsigned int 
  8187 ;; Registers used:
  8188 ;;		wreg, status,2, status,0
  8189 ;; Tracked objects:
  8190 ;;		On entry : 200/0
  8191 ;;		On exit  : 200/0
  8192 ;;		Unchanged: 200/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8194 ;;      Params:         4       0       0       0       0
  8195 ;;      Locals:         3       0       0       0       0
  8196 ;;      Temps:          0       0       0       0       0
  8197 ;;      Totals:         7       0       0       0       0
  8198 ;;Total ram usage:        7 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; This function calls:
  8201 ;;		Nothing
  8202 ;; This function is called by:
  8203 ;;		i1_LCDTimeUpdate
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           
  8208                           ;psect for function i1___lwdiv
  8209  1438                     i1___lwdiv:	
  8210                           
  8211                           ;incstack = 0
  8212                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  8213  1438  01F5               	clrf	i1___lwdiv@quotient
  8214  1439  01F6               	clrf	i1___lwdiv@quotient+1
  8215  143A  0871               	movf	i1___lwdiv@divisor,w
  8216  143B  0472               	iorwf	i1___lwdiv@divisor+1,w
  8217  143C  1903               	btfsc	3,2
  8218  143D  2C5D               	goto	i1l4083
  8219  143E  01F7               	clrf	i1___lwdiv@counter
  8220  143F                     L28:	
  8221  143F  0AF7               	incf	i1___lwdiv@counter,f
  8222  1440  1BF2               	btfsc	i1___lwdiv@divisor+1,7
  8223  1441  2C46               	goto	i1l4071
  8224  1442  1003               	clrc
  8225  1443  0DF1               	rlf	i1___lwdiv@divisor,f
  8226  1444  0DF2               	rlf	i1___lwdiv@divisor+1,f
  8227  1445  2C3F               	goto	L28
  8228  1446                     i1l4071:	
  8229  1446  1003               	clrc
  8230  1447  0DF5               	rlf	i1___lwdiv@quotient,f
  8231  1448  0DF6               	rlf	i1___lwdiv@quotient+1,f
  8232  1449  0872               	movf	i1___lwdiv@divisor+1,w
  8233  144A  0274               	subwf	i1___lwdiv@dividend+1,w
  8234  144B  1D03               	skipz
  8235  144C  2C4F               	goto	u504_25
  8236  144D  0871               	movf	i1___lwdiv@divisor,w
  8237  144E  0273               	subwf	i1___lwdiv@dividend,w
  8238  144F                     u504_25:	
  8239  144F  1C03               	skipc
  8240  1450  2C59               	goto	L29
  8241  1451  0871               	movf	i1___lwdiv@divisor,w
  8242  1452  02F3               	subwf	i1___lwdiv@dividend,f
  8243  1453  0872               	movf	i1___lwdiv@divisor+1,w
  8244  1454  1C03               	skipc
  8245  1455  03F4               	decf	i1___lwdiv@dividend+1,f
  8246  1456  02F4               	subwf	i1___lwdiv@dividend+1,f
  8247  1457  1475               	bsf	i1___lwdiv@quotient,0
  8248  1458  1003               	clrc
  8249  1459                     L29:	
  8250  1459  0CF2               	rrf	i1___lwdiv@divisor+1,f
  8251  145A  0CF1               	rrf	i1___lwdiv@divisor,f
  8252  145B  0BF7               	decfsz	i1___lwdiv@counter,f
  8253  145C  2C46               	goto	i1l4071
  8254  145D                     i1l4083:	
  8255  145D  0876               	movf	i1___lwdiv@quotient+1,w
  8256  145E  00F2               	movwf	?i1___lwdiv+1
  8257  145F  0875               	movf	i1___lwdiv@quotient,w
  8258  1460  00F1               	movwf	?i1___lwdiv
  8259  1461  0008               	return
  8260  1462                     __end_ofi1___lwdiv:	
  8261  1462                     __ptext46:	
  8262 ;; *************** function i1___lwmod *****************
  8263 ;; Defined at:
  8264 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  divisor         2    0[COMMON] unsigned int 
  8267 ;;  dividend        2    2[COMMON] unsigned int 
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;  __lwmod         1    4[COMMON] unsigned char 
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  2    0[COMMON] unsigned int 
  8272 ;; Registers used:
  8273 ;;		wreg, status,2, status,0
  8274 ;; Tracked objects:
  8275 ;;		On entry : 200/100
  8276 ;;		On exit  : 200/0
  8277 ;;		Unchanged: 200/0
  8278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8279 ;;      Params:         4       0       0       0       0
  8280 ;;      Locals:         1       0       0       0       0
  8281 ;;      Temps:          0       0       0       0       0
  8282 ;;      Totals:         5       0       0       0       0
  8283 ;;Total ram usage:        5 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; This function calls:
  8286 ;;		Nothing
  8287 ;; This function is called by:
  8288 ;;		_isr
  8289 ;;		i1_LCDTimeUpdate
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           
  8294                           ;psect for function i1___lwmod
  8295  1462                     i1___lwmod:	
  8296                           
  8297                           ;incstack = 0
  8298                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  8299  1462  0871               	movf	i1___lwmod@divisor,w
  8300  1463  0472               	iorwf	i1___lwmod@divisor+1,w
  8301  1464  1903               	btfsc	3,2
  8302  1465  2C81               	goto	i1l4103
  8303  1466  01F5               	clrf	i1___lwmod@counter
  8304  1467                     L26:	
  8305  1467  0AF5               	incf	i1___lwmod@counter,f
  8306  1468  1BF2               	btfsc	i1___lwmod@divisor+1,7
  8307  1469  2C6E               	goto	i1l4095
  8308  146A  1003               	clrc
  8309  146B  0DF1               	rlf	i1___lwmod@divisor,f
  8310  146C  0DF2               	rlf	i1___lwmod@divisor+1,f
  8311  146D  2C67               	goto	L26
  8312  146E                     i1l4095:	
  8313  146E  0872               	movf	i1___lwmod@divisor+1,w
  8314  146F  0274               	subwf	i1___lwmod@dividend+1,w
  8315  1470  1D03               	skipz
  8316  1471  2C74               	goto	u508_25
  8317  1472  0871               	movf	i1___lwmod@divisor,w
  8318  1473  0273               	subwf	i1___lwmod@dividend,w
  8319  1474                     u508_25:	
  8320  1474  1C03               	skipc
  8321  1475  2C7D               	goto	L27
  8322  1476  0871               	movf	i1___lwmod@divisor,w
  8323  1477  02F3               	subwf	i1___lwmod@dividend,f
  8324  1478  0872               	movf	i1___lwmod@divisor+1,w
  8325  1479  1C03               	skipc
  8326  147A  03F4               	decf	i1___lwmod@dividend+1,f
  8327  147B  02F4               	subwf	i1___lwmod@dividend+1,f
  8328  147C  1003               	clrc
  8329  147D                     L27:	
  8330  147D  0CF2               	rrf	i1___lwmod@divisor+1,f
  8331  147E  0CF1               	rrf	i1___lwmod@divisor,f
  8332  147F  0BF5               	decfsz	i1___lwmod@counter,f
  8333  1480  2C6E               	goto	i1l4095
  8334  1481                     i1l4103:	
  8335  1481  0874               	movf	i1___lwmod@dividend+1,w
  8336  1482  00F2               	movwf	?i1___lwmod+1
  8337  1483  0873               	movf	i1___lwmod@dividend,w
  8338  1484  00F1               	movwf	?i1___lwmod
  8339  1485  0008               	return
  8340  1486                     __end_ofi1___lwmod:	
  8341  1486                     __ptext50:	
  8342 ;; *************** function i1_lcd_add *****************
  8343 ;; Defined at:
  8344 ;;		line 226 in file "lcdv2.h"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;		None
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;		None
  8349 ;; Return value:  Size  Location     Type
  8350 ;;		None               void
  8351 ;; Registers used:
  8352 ;;		wreg, status,2, status,0
  8353 ;; Tracked objects:
  8354 ;;		On entry : 300/0
  8355 ;;		On exit  : 0/0
  8356 ;;		Unchanged: 0/0
  8357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8358 ;;      Params:         0       0       0       0       0
  8359 ;;      Locals:         0       0       0       0       0
  8360 ;;      Temps:          1       0       0       0       0
  8361 ;;      Totals:         1       0       0       0       0
  8362 ;;Total ram usage:        1 bytes
  8363 ;; Hardware stack levels used:    1
  8364 ;; This function calls:
  8365 ;;		Nothing
  8366 ;; This function is called by:
  8367 ;;		i1_LCD_print_char
  8368 ;;		i1_position
  8369 ;; This function uses a non-reentrant model
  8370 ;;
  8371                           
  8372                           
  8373                           ;psect for function i1_lcd_add
  8374  1486                     i1_lcd_add:	
  8375                           
  8376                           ;lcdv2.h: 232: bit0 = lcd_data;
  8377                           
  8378                           ;incstack = 0
  8379                           ; Regs used in i1_lcd_add: [wreg+status,2+status,0]
  8380  1486  1251               	bcf	_bit0/(0+8),_bit0& (0+7)
  8381  1487  1857               	btfsc	_lcd_data,0
  8382  1488  1651               	bsf	_bit0/(0+8),_bit0& (0+7)
  8383                           
  8384                           ;lcdv2.h: 233: bit1 = lcd_data>>1;
  8385  1489  1283               	bcf	3,5	;RP0=0, select bank0
  8386  148A  1303               	bcf	3,6	;RP1=0, select bank0
  8387  148B  0857               	movf	_lcd_data,w
  8388  148C  00F1               	movwf	??i1_lcd_add
  8389  148D  1003               	clrc
  8390  148E  0CF1               	rrf	??i1_lcd_add,f
  8391  148F  12D1               	bcf	_bit1/(0+8),_bit1& (0+7)
  8392  1490  1871               	btfsc	??i1_lcd_add,0
  8393  1491  16D1               	bsf	_bit1/(0+8),_bit1& (0+7)
  8394                           
  8395                           ;lcdv2.h: 234: bit2 = lcd_data>>2;
  8396  1492  1283               	bcf	3,5	;RP0=0, select bank0
  8397  1493  1303               	bcf	3,6	;RP1=0, select bank0
  8398  1494  0857               	movf	_lcd_data,w
  8399  1495  00F1               	movwf	??i1_lcd_add
  8400  1496  1003               	clrc
  8401  1497  0CF1               	rrf	??i1_lcd_add,f
  8402  1498  1003               	clrc
  8403  1499  0CF1               	rrf	??i1_lcd_add,f
  8404  149A  1351               	bcf	_bit2/(0+8),_bit2& (0+7)
  8405  149B  1871               	btfsc	??i1_lcd_add,0
  8406  149C  1751               	bsf	_bit2/(0+8),_bit2& (0+7)
  8407                           
  8408                           ;lcdv2.h: 235: bit3 = lcd_data>>3;
  8409  149D  1283               	bcf	3,5	;RP0=0, select bank0
  8410  149E  1303               	bcf	3,6	;RP1=0, select bank0
  8411  149F  0857               	movf	_lcd_data,w
  8412  14A0  00F1               	movwf	??i1_lcd_add
  8413  14A1  1003               	clrc
  8414  14A2  0CF1               	rrf	??i1_lcd_add,f
  8415  14A3  1003               	clrc
  8416  14A4  0CF1               	rrf	??i1_lcd_add,f
  8417  14A5  1003               	clrc
  8418  14A6  0CF1               	rrf	??i1_lcd_add,f
  8419  14A7  13D1               	bcf	_bit3/(0+8),_bit3& (0+7)
  8420  14A8  1871               	btfsc	??i1_lcd_add,0
  8421  14A9  17D1               	bsf	_bit3/(0+8),_bit3& (0+7)
  8422                           
  8423                           ;lcdv2.h: 236: bit4 = lcd_data>>4;
  8424  14AA  1283               	bcf	3,5	;RP0=0, select bank0
  8425  14AB  1303               	bcf	3,6	;RP1=0, select bank0
  8426  14AC  0857               	movf	_lcd_data,w
  8427  14AD  00F1               	movwf	??i1_lcd_add
  8428  14AE  3004               	movlw	4
  8429  14AF                     u335_25:	
  8430  14AF  1003               	clrc
  8431  14B0  0CF1               	rrf	??i1_lcd_add,f
  8432  14B1  3EFF               	addlw	-1
  8433  14B2  1D03               	skipz
  8434  14B3  2CAF               	goto	u335_25
  8435  14B4  1052               	bcf	_bit4/(0+8),_bit4& (0+7)
  8436  14B5  1871               	btfsc	??i1_lcd_add,0
  8437  14B6  1452               	bsf	_bit4/(0+8),_bit4& (0+7)
  8438                           
  8439                           ;lcdv2.h: 237: bit5 = lcd_data>>5;
  8440  14B7  1283               	bcf	3,5	;RP0=0, select bank0
  8441  14B8  1303               	bcf	3,6	;RP1=0, select bank0
  8442  14B9  0857               	movf	_lcd_data,w
  8443  14BA  00F1               	movwf	??i1_lcd_add
  8444  14BB  3005               	movlw	5
  8445  14BC                     u337_25:	
  8446  14BC  1003               	clrc
  8447  14BD  0CF1               	rrf	??i1_lcd_add,f
  8448  14BE  3EFF               	addlw	-1
  8449  14BF  1D03               	skipz
  8450  14C0  2CBC               	goto	u337_25
  8451  14C1  10D2               	bcf	_bit5/(0+8),_bit5& (0+7)
  8452  14C2  1871               	btfsc	??i1_lcd_add,0
  8453  14C3  14D2               	bsf	_bit5/(0+8),_bit5& (0+7)
  8454                           
  8455                           ;lcdv2.h: 238: bit6 = lcd_data>>6;
  8456  14C4  1283               	bcf	3,5	;RP0=0, select bank0
  8457  14C5  1303               	bcf	3,6	;RP1=0, select bank0
  8458  14C6  0857               	movf	_lcd_data,w
  8459  14C7  00F1               	movwf	??i1_lcd_add
  8460  14C8  3006               	movlw	6
  8461  14C9                     u339_25:	
  8462  14C9  1003               	clrc
  8463  14CA  0CF1               	rrf	??i1_lcd_add,f
  8464  14CB  3EFF               	addlw	-1
  8465  14CC  1D03               	skipz
  8466  14CD  2CC9               	goto	u339_25
  8467  14CE  1152               	bcf	_bit6/(0+8),_bit6& (0+7)
  8468  14CF  1871               	btfsc	??i1_lcd_add,0
  8469  14D0  1552               	bsf	_bit6/(0+8),_bit6& (0+7)
  8470                           
  8471                           ;lcdv2.h: 239: bit7 = lcd_data>>7;
  8472  14D1  1283               	bcf	3,5	;RP0=0, select bank0
  8473  14D2  1303               	bcf	3,6	;RP1=0, select bank0
  8474  14D3  0857               	movf	_lcd_data,w
  8475  14D4  00F1               	movwf	??i1_lcd_add
  8476  14D5  3007               	movlw	7
  8477  14D6                     u341_25:	
  8478  14D6  1003               	clrc
  8479  14D7  0CF1               	rrf	??i1_lcd_add,f
  8480  14D8  3EFF               	addlw	-1
  8481  14D9  1D03               	skipz
  8482  14DA  2CD6               	goto	u341_25
  8483  14DB  11D2               	bcf	_bit7/(0+8),_bit7& (0+7)
  8484  14DC  1871               	btfsc	??i1_lcd_add,0
  8485  14DD  15D2               	bsf	_bit7/(0+8),_bit7& (0+7)
  8486                           
  8487                           ;lcdv2.h: 241: RC3 = 0;
  8488  14DE  1283               	bcf	3,5	;RP0=0, select bank0
  8489  14DF  1303               	bcf	3,6	;RP1=0, select bank0
  8490  14E0  1187               	bcf	7,3	;volatile
  8491                           
  8492                           ;lcdv2.h: 242: _delay(1);
  8493  14E1  0000               	nop
  8494                           
  8495                           ;lcdv2.h: 243: RC3 = 1;
  8496  14E2  1283               	bcf	3,5	;RP0=0, select bank0
  8497  14E3  1303               	bcf	3,6	;RP1=0, select bank0
  8498  14E4  1587               	bsf	7,3	;volatile
  8499                           
  8500                           ;lcdv2.h: 244: _delay(1);
  8501  14E5  0000               	nop
  8502                           
  8503                           ;lcdv2.h: 246: RC1 = bit4;
  8504  14E6  1283               	bcf	3,5	;RP0=0, select bank0
  8505  14E7  1303               	bcf	3,6	;RP1=0, select bank0
  8506  14E8  1C52               	btfss	_bit4/(0+8),_bit4& (0+7)
  8507  14E9  2CEE               	goto	u343_20
  8508  14EA  1283               	bcf	3,5	;RP0=0, select bank0
  8509  14EB  1303               	bcf	3,6	;RP1=0, select bank0
  8510  14EC  1487               	bsf	7,1	;volatile
  8511  14ED  2CF1               	goto	i1l3259
  8512  14EE                     u343_20:	
  8513  14EE  1283               	bcf	3,5	;RP0=0, select bank0
  8514  14EF  1303               	bcf	3,6	;RP1=0, select bank0
  8515  14F0  1087               	bcf	7,1	;volatile
  8516  14F1                     i1l3259:	
  8517                           
  8518                           ;lcdv2.h: 247: RD0 = bit5;
  8519  14F1  1CD2               	btfss	_bit5/(0+8),_bit5& (0+7)
  8520  14F2  2CF7               	goto	u345_20
  8521  14F3  1283               	bcf	3,5	;RP0=0, select bank0
  8522  14F4  1303               	bcf	3,6	;RP1=0, select bank0
  8523  14F5  1408               	bsf	8,0	;volatile
  8524  14F6  2CFA               	goto	i1l3261
  8525  14F7                     u345_20:	
  8526  14F7  1283               	bcf	3,5	;RP0=0, select bank0
  8527  14F8  1303               	bcf	3,6	;RP1=0, select bank0
  8528  14F9  1008               	bcf	8,0	;volatile
  8529  14FA                     i1l3261:	
  8530                           
  8531                           ;lcdv2.h: 248: RC0 = bit6;
  8532  14FA  1D52               	btfss	_bit6/(0+8),_bit6& (0+7)
  8533  14FB  2D00               	goto	u347_20
  8534  14FC  1283               	bcf	3,5	;RP0=0, select bank0
  8535  14FD  1303               	bcf	3,6	;RP1=0, select bank0
  8536  14FE  1407               	bsf	7,0	;volatile
  8537  14FF  2D03               	goto	i1l3263
  8538  1500                     u347_20:	
  8539  1500  1283               	bcf	3,5	;RP0=0, select bank0
  8540  1501  1303               	bcf	3,6	;RP1=0, select bank0
  8541  1502  1007               	bcf	7,0	;volatile
  8542  1503                     i1l3263:	
  8543                           
  8544                           ;lcdv2.h: 249: RD1 = bit7;
  8545  1503  1DD2               	btfss	_bit7/(0+8),_bit7& (0+7)
  8546  1504  2D09               	goto	u349_20
  8547  1505  1283               	bcf	3,5	;RP0=0, select bank0
  8548  1506  1303               	bcf	3,6	;RP1=0, select bank0
  8549  1507  1488               	bsf	8,1	;volatile
  8550  1508  2D0C               	goto	i1l3265
  8551  1509                     u349_20:	
  8552  1509  1283               	bcf	3,5	;RP0=0, select bank0
  8553  150A  1303               	bcf	3,6	;RP1=0, select bank0
  8554  150B  1088               	bcf	8,1	;volatile
  8555  150C                     i1l3265:	
  8556                           
  8557                           ;lcdv2.h: 251: _delay(1);
  8558  150C  0000               	nop
  8559                           
  8560                           ;lcdv2.h: 252: RC3 = 0;
  8561  150D  1283               	bcf	3,5	;RP0=0, select bank0
  8562  150E  1303               	bcf	3,6	;RP1=0, select bank0
  8563  150F  1187               	bcf	7,3	;volatile
  8564                           
  8565                           ;lcdv2.h: 253: _delay(1);
  8566  1510  0000               	nop
  8567                           
  8568                           ;lcdv2.h: 257: RC3 = 0;
  8569  1511  1283               	bcf	3,5	;RP0=0, select bank0
  8570  1512  1303               	bcf	3,6	;RP1=0, select bank0
  8571  1513  1187               	bcf	7,3	;volatile
  8572                           
  8573                           ;lcdv2.h: 258: _delay(1);
  8574  1514  0000               	nop
  8575                           
  8576                           ;lcdv2.h: 259: RC3 = 1;
  8577  1515  1283               	bcf	3,5	;RP0=0, select bank0
  8578  1516  1303               	bcf	3,6	;RP1=0, select bank0
  8579  1517  1587               	bsf	7,3	;volatile
  8580                           
  8581                           ;lcdv2.h: 260: _delay(1);
  8582  1518  0000               	nop
  8583                           
  8584                           ;lcdv2.h: 262: RC1 = bit0;
  8585  1519  1283               	bcf	3,5	;RP0=0, select bank0
  8586  151A  1303               	bcf	3,6	;RP1=0, select bank0
  8587  151B  1E51               	btfss	_bit0/(0+8),_bit0& (0+7)
  8588  151C  2D21               	goto	u351_20
  8589  151D  1283               	bcf	3,5	;RP0=0, select bank0
  8590  151E  1303               	bcf	3,6	;RP1=0, select bank0
  8591  151F  1487               	bsf	7,1	;volatile
  8592  1520  2D24               	goto	i1l3281
  8593  1521                     u351_20:	
  8594  1521  1283               	bcf	3,5	;RP0=0, select bank0
  8595  1522  1303               	bcf	3,6	;RP1=0, select bank0
  8596  1523  1087               	bcf	7,1	;volatile
  8597  1524                     i1l3281:	
  8598                           
  8599                           ;lcdv2.h: 263: RD0 = bit1;
  8600  1524  1ED1               	btfss	_bit1/(0+8),_bit1& (0+7)
  8601  1525  2D2A               	goto	u353_20
  8602  1526  1283               	bcf	3,5	;RP0=0, select bank0
  8603  1527  1303               	bcf	3,6	;RP1=0, select bank0
  8604  1528  1408               	bsf	8,0	;volatile
  8605  1529  2D2D               	goto	i1l3283
  8606  152A                     u353_20:	
  8607  152A  1283               	bcf	3,5	;RP0=0, select bank0
  8608  152B  1303               	bcf	3,6	;RP1=0, select bank0
  8609  152C  1008               	bcf	8,0	;volatile
  8610  152D                     i1l3283:	
  8611                           
  8612                           ;lcdv2.h: 264: RC0 = bit2;
  8613  152D  1F51               	btfss	_bit2/(0+8),_bit2& (0+7)
  8614  152E  2D33               	goto	u355_20
  8615  152F  1283               	bcf	3,5	;RP0=0, select bank0
  8616  1530  1303               	bcf	3,6	;RP1=0, select bank0
  8617  1531  1407               	bsf	7,0	;volatile
  8618  1532  2D36               	goto	i1l3285
  8619  1533                     u355_20:	
  8620  1533  1283               	bcf	3,5	;RP0=0, select bank0
  8621  1534  1303               	bcf	3,6	;RP1=0, select bank0
  8622  1535  1007               	bcf	7,0	;volatile
  8623  1536                     i1l3285:	
  8624                           
  8625                           ;lcdv2.h: 265: RD1 = bit3;
  8626  1536  1FD1               	btfss	_bit3/(0+8),_bit3& (0+7)
  8627  1537  2D3C               	goto	u357_20
  8628  1538  1283               	bcf	3,5	;RP0=0, select bank0
  8629  1539  1303               	bcf	3,6	;RP1=0, select bank0
  8630  153A  1488               	bsf	8,1	;volatile
  8631  153B  2D3F               	goto	i1l3287
  8632  153C                     u357_20:	
  8633  153C  1283               	bcf	3,5	;RP0=0, select bank0
  8634  153D  1303               	bcf	3,6	;RP1=0, select bank0
  8635  153E  1088               	bcf	8,1	;volatile
  8636  153F                     i1l3287:	
  8637                           
  8638                           ;lcdv2.h: 267: _delay(1);
  8639  153F  0000               	nop
  8640                           
  8641                           ;lcdv2.h: 268: RC3 = 0;
  8642  1540  1283               	bcf	3,5	;RP0=0, select bank0
  8643  1541  1303               	bcf	3,6	;RP1=0, select bank0
  8644  1542  1187               	bcf	7,3	;volatile
  8645                           
  8646                           ;lcdv2.h: 269: _delay(1);
  8647  1543  0000               	nop
  8648  1544  0008               	return
  8649  1545                     __end_ofi1_lcd_add:	
  8650  007E                     btemp	set	126	;btemp
  8651  007E                     wtemp	set	126
  8652  007E                     wtemp0	set	126
  8653  0080                     wtemp1	set	128
  8654  0082                     wtemp2	set	130
  8655  0084                     wtemp3	set	132
  8656  0086                     wtemp4	set	134
  8657  0088                     wtemp5	set	136
  8658  007F                     wtemp6	set	127
  8659  007E                     ttemp	set	126
  8660  007E                     ttemp0	set	126
  8661  0081                     ttemp1	set	129
  8662  0084                     ttemp2	set	132
  8663  0087                     ttemp3	set	135
  8664  007F                     ttemp4	set	127
  8665  007E                     ltemp	set	126
  8666  007E                     ltemp0	set	126
  8667  0082                     ltemp1	set	130
  8668  0086                     ltemp2	set	134
  8669  0080                     ltemp3	set	128
  8670  1545                     __ptext49:	
  8671 ;; *************** function i1_position *****************
  8672 ;; Defined at:
  8673 ;;		line 210 in file "lcdv2.h"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;  row             1    wreg     unsigned char 
  8676 ;;  collum          1    1[COMMON] unsigned char 
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;  row             1    5[COMMON] unsigned char 
  8679 ;;  position        1    4[COMMON] unsigned char 
  8680 ;; Return value:  Size  Location     Type
  8681 ;;		None               void
  8682 ;; Registers used:
  8683 ;;		wreg, status,2, status,0, pclath, cstack
  8684 ;; Tracked objects:
  8685 ;;		On entry : 200/0
  8686 ;;		On exit  : 0/0
  8687 ;;		Unchanged: 0/0
  8688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8689 ;;      Params:         1       0       0       0       0
  8690 ;;      Locals:         2       0       0       0       0
  8691 ;;      Temps:          2       0       0       0       0
  8692 ;;      Totals:         5       0       0       0       0
  8693 ;;Total ram usage:        5 bytes
  8694 ;; Hardware stack levels used:    1
  8695 ;; Hardware stack levels required when called:    1
  8696 ;; This function calls:
  8697 ;;		i1_lcd_add
  8698 ;; This function is called by:
  8699 ;;		i1_LCD_print_char
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           
  8704                           ;psect for function i1_position
  8705  1545                     i1_position:	
  8706                           
  8707                           ;incstack = 0
  8708                           ; Regs used in i1_position: [wreg+status,2+status,0+pclath+cstack]
  8709                           ;i1position@row stored from wreg
  8710  1545  00F6               	movwf	i1position@row
  8711                           
  8712                           ;lcdv2.h: 212: char post ;
  8713                           ;lcdv2.h: 213: if( row == 1 ) row = 128;
  8714  1546  0B76               	decfsz	i1position@row,w
  8715  1547  2D4A               	goto	i1l3527
  8716  1548  3080               	movlw	128
  8717  1549  00F6               	movwf	i1position@row
  8718  154A                     i1l3527:	
  8719                           
  8720                           ;lcdv2.h: 214: if( row == 2 ) row = 192;
  8721  154A  3002               	movlw	2
  8722  154B  0676               	xorwf	i1position@row,w
  8723  154C  1D03               	btfss	3,2
  8724  154D  2D50               	goto	i1l3531
  8725  154E  30C0               	movlw	192
  8726  154F  00F6               	movwf	i1position@row
  8727  1550                     i1l3531:	
  8728                           
  8729                           ;lcdv2.h: 215: post = row + collum - 1;
  8730  1550  0872               	movf	i1position@collum,w
  8731  1551  0776               	addwf	i1position@row,w
  8732  1552  3EFF               	addlw	255
  8733  1553  00F5               	movwf	i1position@post
  8734                           
  8735                           ;lcdv2.h: 216: RC2 = 0;
  8736  1554  1283               	bcf	3,5	;RP0=0, select bank0
  8737  1555  1107               	bcf	7,2	;volatile
  8738                           
  8739                           ;lcdv2.h: 217: _delay(20);
  8740  1556  3006               	movlw	6
  8741  1557  00F3               	movwf	??i1_position
  8742  1558                     u912_27:	
  8743  1558  0BF3               	decfsz	??i1_position,f
  8744  1559  2D58               	goto	u912_27
  8745  155A  0000               	nop
  8746                           
  8747                           ;lcdv2.h: 218: lcd_data = post ;
  8748  155B  0875               	movf	i1position@post,w
  8749  155C  1283               	bcf	3,5	;RP0=0, select bank0
  8750  155D  1303               	bcf	3,6	;RP1=0, select bank0
  8751  155E  00D7               	movwf	_lcd_data
  8752                           
  8753                           ;lcdv2.h: 219: lcd_add();
  8754  155F  2486  160A  118A   	fcall	i1_lcd_add
  8755                           
  8756                           ;lcdv2.h: 220: _delay((unsigned long)((10)*(4000000/4000.0)));
  8757  1562  300D               	movlw	13
  8758  1563  00F4               	movwf	??i1_position+1
  8759  1564  30FB               	movlw	251
  8760  1565  00F3               	movwf	??i1_position
  8761  1566                     u913_27:	
  8762  1566  0BF3               	decfsz	??i1_position,f
  8763  1567  2D66               	goto	u913_27
  8764  1568  0BF4               	decfsz	??i1_position+1,f
  8765  1569  2D66               	goto	u913_27
  8766  156A  2D6B               	nop2
  8767  156B  0008               	return
  8768  156C                     __end_ofi1_position:	
  8769                           
  8770                           	psect	intentry
  8771  0004                     __pintentry:	
  8772                           ;incstack = 0
  8773 ;; hardware stack exceeded
  8774                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8775                           
  8776  0004                     interrupt_function:	
  8777  007E                     saved_w	set	btemp
  8778  0004  00FE               	movwf	btemp
  8779  0005  0E03               	swapf	3,w
  8780  0006  1283               	bcf	3,5	;RP0=0, select bank0
  8781  0007  1303               	bcf	3,6	;RP1=0, select bank0
  8782  0008  00A2               	movwf	??_isr
  8783  0009  0804               	movf	4,w
  8784  000A  00A3               	movwf	??_isr+1
  8785  000B  080A               	movf	10,w
  8786  000C  00A4               	movwf	??_isr+2
  8787  000D  160A  118A  2B07   	ljmp	_isr
  8788                           
  8789                           	psect	maintext_split_1
  8790  156C                     l6507:	
  8791                           
  8792                           ;Automated Solar Panel Orientation Setter.c: 188: }
  8793                           ;Automated Solar Panel Orientation Setter.c: 189: }
  8794                           ;Automated Solar Panel Orientation Setter.c: 190: }
  8795                           ;Automated Solar Panel Orientation Setter.c: 191: }
  8796                           ;Automated Solar Panel Orientation Setter.c: 192: }
  8797                           ;Automated Solar Panel Orientation Setter.c: 193: }
  8798                           ;Automated Solar Panel Orientation Setter.c: 194: }
  8799                           ;Automated Solar Panel Orientation Setter.c: 195: }
  8800                           ;Automated Solar Panel Orientation Setter.c: 196: hour = newTimeHr;
  8801  156C  1683               	bsf	3,5	;RP0=1, select bank1
  8802  156D  0851               	movf	(main@newTimeHr+1)^(0+128),w
  8803  156E  1283               	bcf	3,5	;RP0=0, select bank0
  8804  156F  00D4               	movwf	_hour+1
  8805  1570  1683               	bsf	3,5	;RP0=1, select bank1
  8806  1571  0850               	movf	main@newTimeHr^(0+128),w
  8807  1572  1283               	bcf	3,5	;RP0=0, select bank0
  8808  1573  00D3               	movwf	_hour
  8809                           
  8810                           ;Automated Solar Panel Orientation Setter.c: 197: minute = newTimeMin;
  8811  1574  1683               	bsf	3,5	;RP0=1, select bank1
  8812  1575  0853               	movf	(main@newTimeMin+1)^(0+128),w
  8813  1576  00BE               	movwf	(_minute+1)^(0+128)
  8814  1577  0852               	movf	main@newTimeMin^(0+128),w
  8815  1578  00BD               	movwf	_minute^(0+128)
  8816                           
  8817                           ;Automated Solar Panel Orientation Setter.c: 198: state = 1;
  8818  1579  1283               	bcf	3,5	;RP0=0, select bank0
  8819  157A  01D8               	clrf	_state
  8820  157B  0AD8               	incf	_state,f
  8821                           
  8822                           ;Automated Solar Panel Orientation Setter.c: 201: TimeBlink_on = 1;
  8823  157C  1551               	bsf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  8824                           
  8825                           ;Automated Solar Panel Orientation Setter.c: 202: LCDTimeUpdate();
  8826  157D  160A  118A  2123  160A  118A  	fcall	_LCDTimeUpdate
  8827                           
  8828                           ;Automated Solar Panel Orientation Setter.c: 203: break;
  8829  1582  120A  118A  2F8E   	goto	l6933
  8830  1585                     l6515:	
  8831                           
  8832                           ;Automated Solar Panel Orientation Setter.c: 206: clr_display();
  8833  1585  160A  118A  2107  160A  118A  	fcall	_clr_display
  8834  158A  3001               	movlw	1
  8835                           
  8836                           ;Automated Solar Panel Orientation Setter.c: 207: TimeBlink_on = 0;
  8837  158B  1151               	bcf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  8838                           
  8839                           ;Automated Solar Panel Orientation Setter.c: 208: position(1,1);
  8840  158C  01A6               	clrf	position@collum
  8841  158D  0AA6               	incf	position@collum,f
  8842  158E  160A  118A  22DF  160A  118A  	fcall	_position
  8843                           
  8844                           ;Automated Solar Panel Orientation Setter.c: 209: printf("Time  - 06:00   ");
  8845  1593  3048               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  8846  1594  160A  118A  20DC  160A  118A  	fcall	_printf
  8847  1599  3002               	movlw	2
  8848                           
  8849                           ;Automated Solar Panel Orientation Setter.c: 210: position(2,1);
  8850  159A  01A6               	clrf	position@collum
  8851  159B  0AA6               	incf	position@collum,f
  8852  159C  160A  118A  22DF  160A  118A  	fcall	_position
  8853                           
  8854                           ;Automated Solar Panel Orientation Setter.c: 211: printf("Angle - 000D    ");
  8855  15A1  3037               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  8856  15A2  160A  118A  20DC  160A  118A  	fcall	_printf
  8857                           
  8858                           ;Automated Solar Panel Orientation Setter.c: 212: state = 42;
  8859  15A7  302A               	movlw	42
  8860  15A8  120A  118A  2F8D   	goto	L1
  8861  15AB                     l504:	
  8862                           ;Automated Solar Panel Orientation Setter.c: 215: case 42:
  8863                           
  8864                           ;Automated Solar Panel Orientation Setter.c: 213: break;
  8865                           
  8866  15AB  300C               	movlw	12
  8867                           
  8868                           ;Automated Solar Panel Orientation Setter.c: 217: TimeBlink_on = 0;
  8869  15AC  1151               	bcf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  8870                           
  8871                           ;Automated Solar Panel Orientation Setter.c: 219: angleCount = 12;
  8872  15AD  1683               	bsf	3,5	;RP0=1, select bank1
  8873  15AE  00B7               	movwf	_angleCount^(0+128)
  8874  15AF  01B8               	clrf	(_angleCount+1)^(0+128)
  8875                           
  8876                           ;Automated Solar Panel Orientation Setter.c: 220: int angle_old;
  8877                           ;Automated Solar Panel Orientation Setter.c: 221: int angle;
  8878                           ;Automated Solar Panel Orientation Setter.c: 223: angleChanged = 1;
  8879  15B0  1283               	bcf	3,5	;RP0=0, select bank0
  8880  15B1  15D1               	bsf	_angleChanged/(0+8),_angleChanged& (0+7)
  8881                           
  8882                           ;Automated Solar Panel Orientation Setter.c: 225: angle_old = eeprom_read(12-angleCount)
      +                          ;
  8883  15B2  1683               	bsf	3,5	;RP0=1, select bank1
  8884  15B3  0837               	movf	_angleCount^(0+128),w
  8885  15B4  3C0C               	sublw	12
  8886  15B5  160A  158A  2316  160A  118A  	fcall	_eeprom_read
  8887  15BA  1683               	bsf	3,5	;RP0=1, select bank1
  8888  15BB  1303               	bcf	3,6	;RP1=0, select bank1
  8889  15BC  00DD               	movwf	main@angle_old^(0+128)
  8890  15BD  3002               	movlw	2
  8891  15BE  01DE               	clrf	(main@angle_old+1)^(0+128)
  8892                           
  8893                           ;Automated Solar Panel Orientation Setter.c: 226: LCD_print_char(2,9,angle_old/100+48);
  8894  15BF  1283               	bcf	3,5	;RP0=0, select bank0
  8895  15C0  00B3               	movwf	LCD_print_char@row
  8896  15C1  3009               	movlw	9
  8897  15C2  01B4               	clrf	LCD_print_char@row+1
  8898  15C3  00B5               	movwf	LCD_print_char@column
  8899  15C4  3064               	movlw	100
  8900  15C5  01B6               	clrf	LCD_print_char@column+1
  8901  15C6  00AB               	movwf	___awdiv@divisor
  8902  15C7  01AC               	clrf	___awdiv@divisor+1
  8903  15C8  1683               	bsf	3,5	;RP0=1, select bank1
  8904  15C9  085E               	movf	(main@angle_old+1)^(0+128),w
  8905  15CA  1283               	bcf	3,5	;RP0=0, select bank0
  8906  15CB  00AE               	movwf	___awdiv@dividend+1
  8907  15CC  1683               	bsf	3,5	;RP0=1, select bank1
  8908  15CD  085D               	movf	main@angle_old^(0+128),w
  8909  15CE  1283               	bcf	3,5	;RP0=0, select bank0
  8910  15CF  00AD               	movwf	___awdiv@dividend
  8911  15D0  120A  158A  2717  160A  118A  	fcall	___awdiv
  8912  15D5  082B               	movf	?___awdiv,w
  8913  15D6  3E30               	addlw	48
  8914  15D7  00B7               	movwf	LCD_print_char@print_value
  8915  15D8  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  8916                           
  8917                           ;Automated Solar Panel Orientation Setter.c: 227: LCD_print_char(2,10,angle_old%100/10+4
      +                          8);
  8918  15DD  3002               	movlw	2
  8919  15DE  1283               	bcf	3,5	;RP0=0, select bank0
  8920  15DF  1303               	bcf	3,6	;RP1=0, select bank0
  8921  15E0  00B3               	movwf	LCD_print_char@row
  8922  15E1  300A               	movlw	10
  8923  15E2  01B4               	clrf	LCD_print_char@row+1
  8924  15E3  00B5               	movwf	LCD_print_char@column
  8925  15E4  01B6               	clrf	LCD_print_char@column+1
  8926  15E5  00AB               	movwf	___awdiv@divisor
  8927  15E6  01AC               	clrf	___awdiv@divisor+1
  8928  15E7  1683               	bsf	3,5	;RP0=1, select bank1
  8929  15E8  085E               	movf	(main@angle_old+1)^(0+128),w
  8930  15E9  1283               	bcf	3,5	;RP0=0, select bank0
  8931  15EA  00A8               	movwf	___awmod@dividend+1
  8932  15EB  1683               	bsf	3,5	;RP0=1, select bank1
  8933  15EC  085D               	movf	main@angle_old^(0+128),w
  8934  15ED  1283               	bcf	3,5	;RP0=0, select bank0
  8935  15EE  00A7               	movwf	___awmod@dividend
  8936  15EF  3064               	movlw	100
  8937  15F0  00A5               	movwf	___awmod@divisor
  8938  15F1  01A6               	clrf	___awmod@divisor+1
  8939  15F2  120A  158A  275C  160A  118A  	fcall	___awmod
  8940  15F7  0826               	movf	?___awmod+1,w
  8941  15F8  00AE               	movwf	___awdiv@dividend+1
  8942  15F9  0825               	movf	?___awmod,w
  8943  15FA  00AD               	movwf	___awdiv@dividend
  8944  15FB  120A  158A  2717  160A  118A  	fcall	___awdiv
  8945  1600  082B               	movf	?___awdiv,w
  8946  1601  3E30               	addlw	48
  8947  1602  00B7               	movwf	LCD_print_char@print_value
  8948  1603  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  8949                           
  8950                           ;Automated Solar Panel Orientation Setter.c: 228: LCD_print_char(2,11,angle_old%100%10+4
      +                          8);
  8951  1608  1683               	bsf	3,5	;RP0=1, select bank1
  8952  1609  1303               	bcf	3,6	;RP1=0, select bank1
  8953  160A  085E               	movf	(main@angle_old+1)^(0+128),w
  8954  160B  1283               	bcf	3,5	;RP0=0, select bank0
  8955  160C  00A8               	movwf	___awmod@dividend+1
  8956  160D  1683               	bsf	3,5	;RP0=1, select bank1
  8957  160E  085D               	movf	main@angle_old^(0+128),w
  8958  160F  1283               	bcf	3,5	;RP0=0, select bank0
  8959  1610  00A7               	movwf	___awmod@dividend
  8960  1611  3064               	movlw	100
  8961  1612  00A5               	movwf	___awmod@divisor
  8962  1613  01A6               	clrf	___awmod@divisor+1
  8963  1614  120A  158A  275C  160A  118A  	fcall	___awmod
  8964  1619  0826               	movf	?___awmod+1,w
  8965  161A  1683               	bsf	3,5	;RP0=1, select bank1
  8966  161B  00DC               	movwf	(_main$814+1)^(0+128)
  8967  161C  1283               	bcf	3,5	;RP0=0, select bank0
  8968  161D  0825               	movf	?___awmod,w
  8969  161E  1683               	bsf	3,5	;RP0=1, select bank1
  8970  161F  00DB               	movwf	_main$814^(0+128)
  8971                           
  8972                           ;Automated Solar Panel Orientation Setter.c: 228: LCD_print_char(2,11,angle_old%100%10+4
      +                          8);
  8973  1620  3002               	movlw	2
  8974  1621  1283               	bcf	3,5	;RP0=0, select bank0
  8975  1622  00B3               	movwf	LCD_print_char@row
  8976  1623  300B               	movlw	11
  8977  1624  01B4               	clrf	LCD_print_char@row+1
  8978  1625  00B5               	movwf	LCD_print_char@column
  8979  1626  300A               	movlw	10
  8980  1627  01B6               	clrf	LCD_print_char@column+1
  8981  1628  00A5               	movwf	___awmod@divisor
  8982  1629  01A6               	clrf	___awmod@divisor+1
  8983  162A  1683               	bsf	3,5	;RP0=1, select bank1
  8984  162B  085C               	movf	(_main$814+1)^(0+128),w
  8985  162C  1283               	bcf	3,5	;RP0=0, select bank0
  8986  162D  00A8               	movwf	___awmod@dividend+1
  8987  162E  1683               	bsf	3,5	;RP0=1, select bank1
  8988  162F  085B               	movf	_main$814^(0+128),w
  8989  1630  1283               	bcf	3,5	;RP0=0, select bank0
  8990  1631  00A7               	movwf	___awmod@dividend
  8991  1632  120A  158A  275C  160A  118A  	fcall	___awmod
  8992  1637  0825               	movf	?___awmod,w
  8993  1638  3E30               	addlw	48
  8994  1639  00B7               	movwf	LCD_print_char@print_value
  8995  163A  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  8996  163F                     l6591:	
  8997                           ;Automated Solar Panel Orientation Setter.c: 230: while(angleCount){
  8998                           
  8999  163F  1683               	bsf	3,5	;RP0=1, select bank1
  9000  1640  1303               	bcf	3,6	;RP1=0, select bank1
  9001  1641  0837               	movf	_angleCount^(0+128),w
  9002  1642  0438               	iorwf	(_angleCount+1)^(0+128),w
  9003  1643  160A  158A  1903   	btfsc	3,2
  9004  1646  2D02               	goto	l516
  9005                           
  9006                           ;Automated Solar Panel Orientation Setter.c: 231: pressedKey = CheckKeyPad();
  9007  1647  120A  158A  20A4  160A  118A  	fcall	_CheckKeyPad
  9008  164C  1683               	bsf	3,5	;RP0=1, select bank1
  9009  164D  00E1               	movwf	main@pressedKey^(0+128)
  9010                           
  9011                           ;Automated Solar Panel Orientation Setter.c: 232: if( pressedKey>=48 && pressedKey<58 ){
  9012  164E  3030               	movlw	48
  9013  164F  0261               	subwf	main@pressedKey^(0+128),w
  9014  1650  1C03               	skipc
  9015  1651  2FFD               	goto	l507
  9016  1652  303A               	movlw	58
  9017  1653  0261               	subwf	main@pressedKey^(0+128),w
  9018  1654  1803               	skipnc
  9019  1655  2FFD               	goto	l507
  9020                           
  9021                           ;Automated Solar Panel Orientation Setter.c: 233: LCD_print_char(2,9,pressedKey);
  9022  1656  3002               	movlw	2
  9023  1657  1283               	bcf	3,5	;RP0=0, select bank0
  9024  1658  00B3               	movwf	LCD_print_char@row
  9025  1659  3009               	movlw	9
  9026  165A  01B4               	clrf	LCD_print_char@row+1
  9027  165B  00B5               	movwf	LCD_print_char@column
  9028  165C  01B6               	clrf	LCD_print_char@column+1
  9029  165D  1683               	bsf	3,5	;RP0=1, select bank1
  9030  165E  0861               	movf	main@pressedKey^(0+128),w
  9031  165F  1283               	bcf	3,5	;RP0=0, select bank0
  9032  1660  00B7               	movwf	LCD_print_char@print_value
  9033  1661  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  9034                           
  9035                           ;Automated Solar Panel Orientation Setter.c: 234: angle = (pressedKey-48)*100;
  9036  1666  1683               	bsf	3,5	;RP0=1, select bank1
  9037  1667  1303               	bcf	3,6	;RP1=0, select bank1
  9038  1668  0861               	movf	main@pressedKey^(0+128),w
  9039  1669  1283               	bcf	3,5	;RP0=0, select bank0
  9040  166A  00A5               	movwf	___wmul@multiplier
  9041  166B  30D0               	movlw	-48
  9042  166C  01A6               	clrf	___wmul@multiplier+1
  9043  166D  07A5               	addwf	___wmul@multiplier,f
  9044  166E  1C03               	skipc
  9045  166F  03A6               	decf	___wmul@multiplier+1,f
  9046  1670  3064               	movlw	100
  9047  1671  00A7               	movwf	___wmul@multiplicand
  9048  1672  01A8               	clrf	___wmul@multiplicand+1
  9049  1673  120A  158A  238E  160A  118A  	fcall	___wmul
  9050  1678  0826               	movf	?___wmul+1,w
  9051  1679  1683               	bsf	3,5	;RP0=1, select bank1
  9052  167A  00D8               	movwf	(main@angle+1)^(0+128)
  9053  167B  1283               	bcf	3,5	;RP0=0, select bank0
  9054  167C  0825               	movf	?___wmul,w
  9055  167D  1683               	bsf	3,5	;RP0=1, select bank1
  9056  167E  00D7               	movwf	main@angle^(0+128)
  9057                           
  9058                           ;Automated Solar Panel Orientation Setter.c: 236: pressedKey = '@';
  9059  167F  3040               	movlw	64
  9060  1680  00E1               	movwf	main@pressedKey^(0+128)
  9061  1681                     l508:	
  9062                           ;Automated Solar Panel Orientation Setter.c: 237: while(angleChanged){
  9063                           
  9064  1681  1283               	bcf	3,5	;RP0=0, select bank0
  9065  1682  1DD1               	btfss	_angleChanged/(0+8),_angleChanged& (0+7)
  9066  1683  2FFD               	goto	l507
  9067                           
  9068                           ;Automated Solar Panel Orientation Setter.c: 238: pressedKey = CheckKeyPad();
  9069  1684  120A  158A  20A4  160A  118A  	fcall	_CheckKeyPad
  9070  1689  1683               	bsf	3,5	;RP0=1, select bank1
  9071  168A  00E1               	movwf	main@pressedKey^(0+128)
  9072                           
  9073                           ;Automated Solar Panel Orientation Setter.c: 239: if( pressedKey>=48 && pressedKey<58 ){
  9074  168B  3030               	movlw	48
  9075  168C  0261               	subwf	main@pressedKey^(0+128),w
  9076  168D  1C03               	skipc
  9077  168E  2E81               	goto	l508
  9078  168F  303A               	movlw	58
  9079  1690  0261               	subwf	main@pressedKey^(0+128),w
  9080  1691  1803               	skipnc
  9081  1692  2E81               	goto	l508
  9082                           
  9083                           ;Automated Solar Panel Orientation Setter.c: 240: LCD_print_char(2,10,pressedKey);
  9084  1693  3002               	movlw	2
  9085  1694  1283               	bcf	3,5	;RP0=0, select bank0
  9086  1695  00B3               	movwf	LCD_print_char@row
  9087  1696  300A               	movlw	10
  9088  1697  01B4               	clrf	LCD_print_char@row+1
  9089  1698  00B5               	movwf	LCD_print_char@column
  9090  1699  01B6               	clrf	LCD_print_char@column+1
  9091  169A  1683               	bsf	3,5	;RP0=1, select bank1
  9092  169B  0861               	movf	main@pressedKey^(0+128),w
  9093  169C  1283               	bcf	3,5	;RP0=0, select bank0
  9094  169D  00B7               	movwf	LCD_print_char@print_value
  9095  169E  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  9096                           
  9097                           ;Automated Solar Panel Orientation Setter.c: 241: angle = angle + (pressedKey-48)*10;
  9098  16A3  1683               	bsf	3,5	;RP0=1, select bank1
  9099  16A4  1303               	bcf	3,6	;RP1=0, select bank1
  9100  16A5  0861               	movf	main@pressedKey^(0+128),w
  9101  16A6  1283               	bcf	3,5	;RP0=0, select bank0
  9102  16A7  00A5               	movwf	___wmul@multiplier
  9103  16A8  300A               	movlw	10
  9104  16A9  01A6               	clrf	___wmul@multiplier+1
  9105  16AA  00A7               	movwf	___wmul@multiplicand
  9106  16AB  01A8               	clrf	___wmul@multiplicand+1
  9107  16AC  120A  158A  238E  160A  118A  	fcall	___wmul
  9108  16B1  1683               	bsf	3,5	;RP0=1, select bank1
  9109  16B2  0857               	movf	main@angle^(0+128),w
  9110  16B3  1283               	bcf	3,5	;RP0=0, select bank0
  9111  16B4  0725               	addwf	?___wmul,w
  9112  16B5  00CE               	movwf	??_main
  9113  16B6  1683               	bsf	3,5	;RP0=1, select bank1
  9114  16B7  0858               	movf	(main@angle+1)^(0+128),w
  9115  16B8  1803               	skipnc
  9116  16B9  0A58               	incf	(main@angle+1)^(0+128),w
  9117  16BA  1283               	bcf	3,5	;RP0=0, select bank0
  9118  16BB  0726               	addwf	?___wmul+1,w
  9119  16BC  00CF               	movwf	??_main+1
  9120  16BD  084E               	movf	??_main,w
  9121  16BE  3E20               	addlw	32
  9122  16BF  1683               	bsf	3,5	;RP0=1, select bank1
  9123  16C0  00D7               	movwf	main@angle^(0+128)
  9124  16C1  1283               	bcf	3,5	;RP0=0, select bank0
  9125  16C2  084F               	movf	??_main+1,w
  9126  16C3  1803               	skipnc
  9127  16C4  3E01               	addlw	1
  9128  16C5  3EFE               	addlw	254
  9129  16C6  1683               	bsf	3,5	;RP0=1, select bank1
  9130  16C7  00D8               	movwf	(main@angle+1)^(0+128)
  9131  16C8                     l6557:	
  9132                           ;Automated Solar Panel Orientation Setter.c: 243: while(angleChanged){
  9133                           
  9134                           
  9135                           ;Automated Solar Panel Orientation Setter.c: 242: pressedKey = '@';
  9136  16C8  3040               	movlw	64
  9137  16C9  1683               	bsf	3,5	;RP0=1, select bank1
  9138  16CA  00E1               	movwf	main@pressedKey^(0+128)
  9139  16CB                     l6589:	
  9140  16CB  1283               	bcf	3,5	;RP0=0, select bank0
  9141  16CC  1DD1               	btfss	_angleChanged/(0+8),_angleChanged& (0+7)
  9142  16CD  2E81               	goto	l508
  9143                           
  9144                           ;Automated Solar Panel Orientation Setter.c: 244: pressedKey = CheckKeyPad();
  9145  16CE  120A  158A  20A4  160A  118A  	fcall	_CheckKeyPad
  9146  16D3  1683               	bsf	3,5	;RP0=1, select bank1
  9147  16D4  00E1               	movwf	main@pressedKey^(0+128)
  9148                           
  9149                           ;Automated Solar Panel Orientation Setter.c: 245: if( pressedKey>=48 && pressedKey<58 ){
  9150  16D5  3030               	movlw	48
  9151  16D6  0261               	subwf	main@pressedKey^(0+128),w
  9152  16D7  1C03               	skipc
  9153  16D8  2ECB               	goto	l6589
  9154  16D9  303A               	movlw	58
  9155  16DA  0261               	subwf	main@pressedKey^(0+128),w
  9156  16DB  1803               	skipnc
  9157  16DC  2ECB               	goto	l6589
  9158                           
  9159                           ;Automated Solar Panel Orientation Setter.c: 246: LCD_print_char(2,11,pressedKey);
  9160  16DD  3002               	movlw	2
  9161  16DE  1283               	bcf	3,5	;RP0=0, select bank0
  9162  16DF  00B3               	movwf	LCD_print_char@row
  9163  16E0  300B               	movlw	11
  9164  16E1  01B4               	clrf	LCD_print_char@row+1
  9165  16E2  00B5               	movwf	LCD_print_char@column
  9166  16E3  01B6               	clrf	LCD_print_char@column+1
  9167  16E4  1683               	bsf	3,5	;RP0=1, select bank1
  9168  16E5  0861               	movf	main@pressedKey^(0+128),w
  9169  16E6  1283               	bcf	3,5	;RP0=0, select bank0
  9170  16E7  00B7               	movwf	LCD_print_char@print_value
  9171  16E8  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  9172                           
  9173                           ;Automated Solar Panel Orientation Setter.c: 248: LCD_print_char(1,9,(48+(7+12-angleCoun
      +                          t)/10));
  9174  16ED  1283               	bcf	3,5	;RP0=0, select bank0
  9175  16EE  1303               	bcf	3,6	;RP1=0, select bank0
  9176  16EF  3009               	movlw	9
  9177  16F0  01B3               	clrf	LCD_print_char@row
  9178  16F1  0AB3               	incf	LCD_print_char@row,f
  9179  16F2  01B4               	clrf	LCD_print_char@row+1
  9180  16F3  00B5               	movwf	LCD_print_char@column
  9181  16F4  3013               	movlw	19
  9182  16F5  01B6               	clrf	LCD_print_char@column+1
  9183  16F6  00AD               	movwf	___awdiv@dividend
  9184  16F7  01AE               	clrf	___awdiv@dividend+1
  9185  16F8  1683               	bsf	3,5	;RP0=1, select bank1
  9186  16F9  0837               	movf	_angleCount^(0+128),w
  9187  16FA  1283               	bcf	3,5	;RP0=0, select bank0
  9188  16FB  02AD               	subwf	___awdiv@dividend,f
  9189  16FC  1683               	bsf	3,5	;RP0=1, select bank1
  9190  16FD  0838               	movf	(_angleCount+1)^(0+128),w
  9191  16FE  1283               	bcf	3,5	;RP0=0, select bank0
  9192  16FF  1C03               	skipc
  9193  1700  03AE               	decf	___awdiv@dividend+1,f
  9194  1701  02AE               	subwf	___awdiv@dividend+1,f
  9195  1702  300A               	movlw	10
  9196  1703  00AB               	movwf	___awdiv@divisor
  9197  1704  01AC               	clrf	___awdiv@divisor+1
  9198  1705  120A  158A  2717  160A  118A  	fcall	___awdiv
  9199  170A  082B               	movf	?___awdiv,w
  9200  170B  3E30               	addlw	48
  9201  170C  00B7               	movwf	LCD_print_char@print_value
  9202  170D  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  9203                           
  9204                           ;Automated Solar Panel Orientation Setter.c: 249: LCD_print_char(1,10,(48+(7+12-angleCou
      +                          nt)%10));
  9205  1712  1283               	bcf	3,5	;RP0=0, select bank0
  9206  1713  1303               	bcf	3,6	;RP1=0, select bank0
  9207  1714  300A               	movlw	10
  9208  1715  01B3               	clrf	LCD_print_char@row
  9209  1716  0AB3               	incf	LCD_print_char@row,f
  9210  1717  01B4               	clrf	LCD_print_char@row+1
  9211  1718  00B5               	movwf	LCD_print_char@column
  9212  1719  3013               	movlw	19
  9213  171A  01B6               	clrf	LCD_print_char@column+1
  9214  171B  00A7               	movwf	___awmod@dividend
  9215  171C  01A8               	clrf	___awmod@dividend+1
  9216  171D  1683               	bsf	3,5	;RP0=1, select bank1
  9217  171E  0837               	movf	_angleCount^(0+128),w
  9218  171F  1283               	bcf	3,5	;RP0=0, select bank0
  9219  1720  02A7               	subwf	___awmod@dividend,f
  9220  1721  1683               	bsf	3,5	;RP0=1, select bank1
  9221  1722  0838               	movf	(_angleCount+1)^(0+128),w
  9222  1723  1283               	bcf	3,5	;RP0=0, select bank0
  9223  1724  1C03               	skipc
  9224  1725  03A8               	decf	___awmod@dividend+1,f
  9225  1726  02A8               	subwf	___awmod@dividend+1,f
  9226  1727  300A               	movlw	10
  9227  1728  00A5               	movwf	___awmod@divisor
  9228  1729  01A6               	clrf	___awmod@divisor+1
  9229  172A  120A  158A  275C  160A  118A  	fcall	___awmod
  9230  172F  0825               	movf	?___awmod,w
  9231  1730  3E30               	addlw	48
  9232  1731  00B7               	movwf	LCD_print_char@print_value
  9233  1732  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  9234                           
  9235                           ;Automated Solar Panel Orientation Setter.c: 251: _delay((unsigned long)((1000)*(4000000
      +                          /4000.0)));
  9236  1737  3006               	movlw	6
  9237  1738  1283               	bcf	3,5	;RP0=0, select bank0
  9238  1739  1303               	bcf	3,6	;RP1=0, select bank0
  9239  173A  00D0               	movwf	??_main+2
  9240  173B  3013               	movlw	19
  9241  173C  00CF               	movwf	??_main+1
  9242  173D  30B1               	movlw	177
  9243  173E  00CE               	movwf	??_main
  9244  173F                     u8577:	
  9245  173F  0BCE               	decfsz	??_main,f
  9246  1740  2F3F               	goto	u8577
  9247  1741  0BCF               	decfsz	??_main+1,f
  9248  1742  2F3F               	goto	u8577
  9249  1743  0BD0               	decfsz	??_main+2,f
  9250  1744  2F3F               	goto	u8577
  9251  1745  2F46               	nop2
  9252                           
  9253                           ;Automated Solar Panel Orientation Setter.c: 253: angle = angle + (pressedKey-48);
  9254  1746  1683               	bsf	3,5	;RP0=1, select bank1
  9255  1747  1303               	bcf	3,6	;RP1=0, select bank1
  9256  1748  0861               	movf	main@pressedKey^(0+128),w
  9257  1749  0757               	addwf	main@angle^(0+128),w
  9258  174A  1283               	bcf	3,5	;RP0=0, select bank0
  9259  174B  00CE               	movwf	??_main
  9260  174C  1683               	bsf	3,5	;RP0=1, select bank1
  9261  174D  0858               	movf	(main@angle+1)^(0+128),w
  9262  174E  1803               	skipnc
  9263  174F  0A58               	incf	(main@angle+1)^(0+128),w
  9264  1750  1283               	bcf	3,5	;RP0=0, select bank0
  9265  1751  00CF               	movwf	??_main+1
  9266  1752  084E               	movf	??_main,w
  9267  1753  3ED0               	addlw	208
  9268  1754  1683               	bsf	3,5	;RP0=1, select bank1
  9269  1755  00D7               	movwf	main@angle^(0+128)
  9270  1756  1283               	bcf	3,5	;RP0=0, select bank0
  9271  1757  084F               	movf	??_main+1,w
  9272  1758  1803               	skipnc
  9273  1759  3E01               	addlw	1
  9274  175A  3EFF               	addlw	255
  9275  175B  1683               	bsf	3,5	;RP0=1, select bank1
  9276  175C  00D8               	movwf	(main@angle+1)^(0+128)
  9277                           
  9278                           ;Automated Solar Panel Orientation Setter.c: 254: eeprom_write(12-angleCount, angle );
  9279  175D  0857               	movf	main@angle^(0+128),w
  9280  175E  1283               	bcf	3,5	;RP0=0, select bank0
  9281  175F  00A8               	movwf	eeprom_write@value
  9282  1760  1683               	bsf	3,5	;RP0=1, select bank1
  9283  1761  0837               	movf	_angleCount^(0+128),w
  9284  1762  3C0C               	sublw	12
  9285  1763  120A  118A  201A  160A  118A  	fcall	_eeprom_write
  9286                           
  9287                           ;Automated Solar Panel Orientation Setter.c: 255: angleCount--;
  9288  1768  30FF               	movlw	-1
  9289  1769  1303               	bcf	3,6	;RP1=0, select bank1
  9290  176A  07B7               	addwf	_angleCount^(0+128),f
  9291  176B  1C03               	skipc
  9292  176C  03B8               	decf	(_angleCount+1)^(0+128),f
  9293                           
  9294                           ;Automated Solar Panel Orientation Setter.c: 257: angle_old = eeprom_read(12-angleCount)
      +                          ;
  9295  176D  0837               	movf	_angleCount^(0+128),w
  9296  176E  3C0C               	sublw	12
  9297  176F  160A  158A  2316  160A  118A  	fcall	_eeprom_read
  9298  1774  1683               	bsf	3,5	;RP0=1, select bank1
  9299  1775  1303               	bcf	3,6	;RP1=0, select bank1
  9300  1776  00DD               	movwf	main@angle_old^(0+128)
  9301  1777  3002               	movlw	2
  9302  1778  01DE               	clrf	(main@angle_old+1)^(0+128)
  9303                           
  9304                           ;Automated Solar Panel Orientation Setter.c: 259: LCD_print_char(2,9,angle_old/100+48);
  9305  1779  1283               	bcf	3,5	;RP0=0, select bank0
  9306  177A  00B3               	movwf	LCD_print_char@row
  9307  177B  3009               	movlw	9
  9308  177C  01B4               	clrf	LCD_print_char@row+1
  9309  177D  00B5               	movwf	LCD_print_char@column
  9310  177E  3064               	movlw	100
  9311  177F  01B6               	clrf	LCD_print_char@column+1
  9312  1780  00AB               	movwf	___awdiv@divisor
  9313  1781  01AC               	clrf	___awdiv@divisor+1
  9314  1782  1683               	bsf	3,5	;RP0=1, select bank1
  9315  1783  085E               	movf	(main@angle_old+1)^(0+128),w
  9316  1784  1283               	bcf	3,5	;RP0=0, select bank0
  9317  1785  00AE               	movwf	___awdiv@dividend+1
  9318  1786  1683               	bsf	3,5	;RP0=1, select bank1
  9319  1787  085D               	movf	main@angle_old^(0+128),w
  9320  1788  1283               	bcf	3,5	;RP0=0, select bank0
  9321  1789  00AD               	movwf	___awdiv@dividend
  9322  178A  120A  158A  2717  160A  118A  	fcall	___awdiv
  9323  178F  082B               	movf	?___awdiv,w
  9324  1790  3E30               	addlw	48
  9325  1791  00B7               	movwf	LCD_print_char@print_value
  9326  1792  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  9327                           
  9328                           ;Automated Solar Panel Orientation Setter.c: 260: LCD_print_char(2,10,angle_old%100/10+4
      +                          8);
  9329  1797  3002               	movlw	2
  9330  1798  1283               	bcf	3,5	;RP0=0, select bank0
  9331  1799  1303               	bcf	3,6	;RP1=0, select bank0
  9332  179A  00B3               	movwf	LCD_print_char@row
  9333  179B  300A               	movlw	10
  9334  179C  01B4               	clrf	LCD_print_char@row+1
  9335  179D  00B5               	movwf	LCD_print_char@column
  9336  179E  01B6               	clrf	LCD_print_char@column+1
  9337  179F  00AB               	movwf	___awdiv@divisor
  9338  17A0  01AC               	clrf	___awdiv@divisor+1
  9339  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  9340  17A2  085E               	movf	(main@angle_old+1)^(0+128),w
  9341  17A3  1283               	bcf	3,5	;RP0=0, select bank0
  9342  17A4  00A8               	movwf	___awmod@dividend+1
  9343  17A5  1683               	bsf	3,5	;RP0=1, select bank1
  9344  17A6  085D               	movf	main@angle_old^(0+128),w
  9345  17A7  1283               	bcf	3,5	;RP0=0, select bank0
  9346  17A8  00A7               	movwf	___awmod@dividend
  9347  17A9  3064               	movlw	100
  9348  17AA  00A5               	movwf	___awmod@divisor
  9349  17AB  01A6               	clrf	___awmod@divisor+1
  9350  17AC  120A  158A  275C  160A  118A  	fcall	___awmod
  9351  17B1  0826               	movf	?___awmod+1,w
  9352  17B2  00AE               	movwf	___awdiv@dividend+1
  9353  17B3  0825               	movf	?___awmod,w
  9354  17B4  00AD               	movwf	___awdiv@dividend
  9355  17B5  120A  158A  2717  160A  118A  	fcall	___awdiv
  9356  17BA  082B               	movf	?___awdiv,w
  9357  17BB  3E30               	addlw	48
  9358  17BC  00B7               	movwf	LCD_print_char@print_value
  9359  17BD  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  9360                           
  9361                           ;Automated Solar Panel Orientation Setter.c: 261: LCD_print_char(2,11,angle_old%100%10+4
      +                          8);
  9362  17C2  1683               	bsf	3,5	;RP0=1, select bank1
  9363  17C3  1303               	bcf	3,6	;RP1=0, select bank1
  9364  17C4  085E               	movf	(main@angle_old+1)^(0+128),w
  9365  17C5  1283               	bcf	3,5	;RP0=0, select bank0
  9366  17C6  00A8               	movwf	___awmod@dividend+1
  9367  17C7  1683               	bsf	3,5	;RP0=1, select bank1
  9368  17C8  085D               	movf	main@angle_old^(0+128),w
  9369  17C9  1283               	bcf	3,5	;RP0=0, select bank0
  9370  17CA  00A7               	movwf	___awmod@dividend
  9371  17CB  3064               	movlw	100
  9372  17CC  00A5               	movwf	___awmod@divisor
  9373  17CD  01A6               	clrf	___awmod@divisor+1
  9374  17CE  120A  158A  275C  160A  118A  	fcall	___awmod
  9375  17D3  0826               	movf	?___awmod+1,w
  9376  17D4  1683               	bsf	3,5	;RP0=1, select bank1
  9377  17D5  00DC               	movwf	(_main$814+1)^(0+128)
  9378  17D6  1283               	bcf	3,5	;RP0=0, select bank0
  9379  17D7  0825               	movf	?___awmod,w
  9380  17D8  1683               	bsf	3,5	;RP0=1, select bank1
  9381  17D9  00DB               	movwf	_main$814^(0+128)
  9382                           
  9383                           ;Automated Solar Panel Orientation Setter.c: 261: LCD_print_char(2,11,angle_old%100%10+4
      +                          8);
  9384  17DA  3002               	movlw	2
  9385  17DB  1283               	bcf	3,5	;RP0=0, select bank0
  9386  17DC  00B3               	movwf	LCD_print_char@row
  9387  17DD  300B               	movlw	11
  9388  17DE  01B4               	clrf	LCD_print_char@row+1
  9389  17DF  00B5               	movwf	LCD_print_char@column
  9390  17E0  300A               	movlw	10
  9391  17E1  01B6               	clrf	LCD_print_char@column+1
  9392  17E2  00A5               	movwf	___awmod@divisor
  9393  17E3  01A6               	clrf	___awmod@divisor+1
  9394  17E4  1683               	bsf	3,5	;RP0=1, select bank1
  9395  17E5  085C               	movf	(_main$814+1)^(0+128),w
  9396  17E6  1283               	bcf	3,5	;RP0=0, select bank0
  9397  17E7  00A8               	movwf	___awmod@dividend+1
  9398  17E8  1683               	bsf	3,5	;RP0=1, select bank1
  9399  17E9  085B               	movf	_main$814^(0+128),w
  9400  17EA  1283               	bcf	3,5	;RP0=0, select bank0
  9401  17EB  00A7               	movwf	___awmod@dividend
  9402  17EC  120A  158A  275C  160A  118A  	fcall	___awmod
  9403  17F1  0825               	movf	?___awmod,w
  9404  17F2  3E30               	addlw	48
  9405  17F3  00B7               	movwf	LCD_print_char@print_value
  9406  17F4  160A  118A  21B6  160A  118A  	fcall	_LCD_print_char
  9407                           
  9408                           ;Automated Solar Panel Orientation Setter.c: 265: angleChanged = 0;
  9409  17F9  1283               	bcf	3,5	;RP0=0, select bank0
  9410  17FA  1303               	bcf	3,6	;RP1=0, select bank0
  9411  17FB  11D1               	bcf	_angleChanged/(0+8),_angleChanged& (0+7)
  9412  17FC  2EC8               	goto	l6557
  9413  17FD                     l507:	
  9414                           
  9415                           ;Automated Solar Panel Orientation Setter.c: 267: }
  9416                           ;Automated Solar Panel Orientation Setter.c: 268: }
  9417                           ;Automated Solar Panel Orientation Setter.c: 269: }
  9418                           ;Automated Solar Panel Orientation Setter.c: 270: }
  9419                           ;Automated Solar Panel Orientation Setter.c: 271: }
  9420                           ;Automated Solar Panel Orientation Setter.c: 272: angleChanged = 1;
  9421  17FD  1283               	bcf	3,5	;RP0=0, select bank0
  9422  17FE  15D1               	bsf	_angleChanged/(0+8),_angleChanged& (0+7)
  9423  17FF  2E3F               	goto	l6591
  9424                           
  9425                           	psect	maintext_split_2
  9426  1D02                     l516:	
  9427                           
  9428                           ;Automated Solar Panel Orientation Setter.c: 273: }
  9429                           ;Automated Solar Panel Orientation Setter.c: 275: state = 1;
  9430  1D02  1283               	bcf	3,5	;RP0=0, select bank0
  9431  1D03  01D8               	clrf	_state
  9432  1D04  0AD8               	incf	_state,f
  9433                           
  9434                           ;Automated Solar Panel Orientation Setter.c: 276: TimeBlink_on = 1;
  9435  1D05  1551               	bsf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  9436  1D06                     L42:	
  9437                           
  9438                           ;Automated Solar Panel Orientation Setter.c: 277: break;
  9439  1D06  120A  118A  2F8E   	goto	l6933
  9440  1D09                     l6593:	
  9441  1D09  3001               	movlw	1
  9442                           
  9443                           ;Automated Solar Panel Orientation Setter.c: 282: position(1,1);
  9444  1D0A  01A6               	clrf	position@collum
  9445  1D0B  0AA6               	incf	position@collum,f
  9446  1D0C  160A  118A  22DF  160A  158A  	fcall	_position
  9447                           
  9448                           ;Automated Solar Panel Orientation Setter.c: 283: printf("MODE1,000D,00:00");
  9449  1D11  306A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  9450  1D12  160A  118A  20DC  160A  158A  	fcall	_printf
  9451  1D17  3002               	movlw	2
  9452                           
  9453                           ;Automated Solar Panel Orientation Setter.c: 284: position(2,1);
  9454  1D18  01A6               	clrf	position@collum
  9455  1D19  0AA6               	incf	position@collum,f
  9456  1D1A  160A  118A  22DF  160A  158A  	fcall	_position
  9457                           
  9458                           ;Automated Solar Panel Orientation Setter.c: 285: printf("00.0V,0.0A,00.0W");
  9459  1D1F  309D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  9460  1D20  160A  118A  20DC  160A  158A  	fcall	_printf
  9461                           
  9462                           ;Automated Solar Panel Orientation Setter.c: 286: LCDTimeUpdate();
  9463  1D25  160A  118A  2123  160A  158A  	fcall	_LCDTimeUpdate
  9464                           
  9465                           ;Automated Solar Panel Orientation Setter.c: 289: state = 10;
  9466  1D2A  300A               	movlw	10
  9467  1D2B  120A  118A  2E78   	goto	L4
  9468  1D2E                     l6603:	
  9469                           ;Automated Solar Panel Orientation Setter.c: 290: break;
  9470                           
  9471                           
  9472                           ;Automated Solar Panel Orientation Setter.c: 293: a2d_read();
  9473  1D2E  120A  158A  22DB  160A  158A  	fcall	_a2d_read
  9474                           
  9475                           ;Automated Solar Panel Orientation Setter.c: 295: Serial_Print_Int(ldr1);
  9476  1D33  1683               	bsf	3,5	;RP0=1, select bank1
  9477  1D34  083C               	movf	(_ldr1+1)^(0+128),w
  9478  1D35  1283               	bcf	3,5	;RP0=0, select bank0
  9479  1D36  00B4               	movwf	Serial_Print_Int@val+1
  9480  1D37  1683               	bsf	3,5	;RP0=1, select bank1
  9481  1D38  083B               	movf	_ldr1^(0+128),w
  9482  1D39  1283               	bcf	3,5	;RP0=0, select bank0
  9483  1D3A  00B3               	movwf	Serial_Print_Int@val
  9484  1D3B  120A  158A  24CF  160A  158A  	fcall	_Serial_Print_Int
  9485                           
  9486                           ;Automated Solar Panel Orientation Setter.c: 296: Serial_Print(", ");
  9487  1D40  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9488  1D41  120A  158A  2244  160A  158A  	fcall	_Serial_Print
  9489                           
  9490                           ;Automated Solar Panel Orientation Setter.c: 297: Serial_Print_Int(ldr2);
  9491  1D46  0856               	movf	_ldr2+1,w
  9492  1D47  00B4               	movwf	Serial_Print_Int@val+1
  9493  1D48  0855               	movf	_ldr2,w
  9494  1D49  00B3               	movwf	Serial_Print_Int@val
  9495  1D4A  120A  158A  24CF  160A  158A  	fcall	_Serial_Print_Int
  9496                           
  9497                           ;Automated Solar Panel Orientation Setter.c: 298: Serial_Print(", ");
  9498  1D4F  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9499  1D50  120A  158A  2244  160A  158A  	fcall	_Serial_Print
  9500                           
  9501                           ;Automated Solar Panel Orientation Setter.c: 299: Serial_Print_Int(V_Bat);
  9502  1D55  1683               	bsf	3,5	;RP0=1, select bank1
  9503  1D56  084A               	movf	(_V_Bat+1)^(0+128),w
  9504  1D57  1283               	bcf	3,5	;RP0=0, select bank0
  9505  1D58  00B4               	movwf	Serial_Print_Int@val+1
  9506  1D59  1683               	bsf	3,5	;RP0=1, select bank1
  9507  1D5A  0849               	movf	_V_Bat^(0+128),w
  9508  1D5B  1283               	bcf	3,5	;RP0=0, select bank0
  9509  1D5C  00B3               	movwf	Serial_Print_Int@val
  9510  1D5D  120A  158A  24CF  160A  158A  	fcall	_Serial_Print_Int
  9511                           
  9512                           ;Automated Solar Panel Orientation Setter.c: 300: Serial_Print(", ");
  9513  1D62  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9514  1D63  120A  158A  2244  160A  158A  	fcall	_Serial_Print
  9515                           
  9516                           ;Automated Solar Panel Orientation Setter.c: 301: Serial_Print_Int(C_Bat);
  9517  1D68  1683               	bsf	3,5	;RP0=1, select bank1
  9518  1D69  0848               	movf	(_C_Bat+1)^(0+128),w
  9519  1D6A  1283               	bcf	3,5	;RP0=0, select bank0
  9520  1D6B  00B4               	movwf	Serial_Print_Int@val+1
  9521  1D6C  1683               	bsf	3,5	;RP0=1, select bank1
  9522  1D6D  0847               	movf	_C_Bat^(0+128),w
  9523  1D6E  1283               	bcf	3,5	;RP0=0, select bank0
  9524  1D6F  00B3               	movwf	Serial_Print_Int@val
  9525  1D70  120A  158A  24CF  160A  158A  	fcall	_Serial_Print_Int
  9526                           
  9527                           ;Automated Solar Panel Orientation Setter.c: 302: Serial_Print(", ");
  9528  1D75  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9529  1D76  120A  158A  2244  160A  158A  	fcall	_Serial_Print
  9530                           
  9531                           ;Automated Solar Panel Orientation Setter.c: 303: Serial_NewLine();
  9532  1D7B  160A  158A  22E3  160A  158A  	fcall	_Serial_NewLine
  9533                           
  9534                           ;Automated Solar Panel Orientation Setter.c: 304: _delay((unsigned long)((50)*(4000000/4
      +                          000.0)));
  9535  1D80  3041               	movlw	65
  9536  1D81  1283               	bcf	3,5	;RP0=0, select bank0
  9537  1D82  1303               	bcf	3,6	;RP1=0, select bank0
  9538  1D83  00CF               	movwf	??_main+1
  9539  1D84  30EE               	movlw	238
  9540  1D85  00CE               	movwf	??_main
  9541  1D86                     u8587:	
  9542  1D86  0BCE               	decfsz	??_main,f
  9543  1D87  2D86               	goto	u8587
  9544  1D88  0BCF               	decfsz	??_main+1,f
  9545  1D89  2D86               	goto	u8587
  9546  1D8A  0000               	nop
  9547                           
  9548                           ;Automated Solar Panel Orientation Setter.c: 305: nop();
  9549  1D8B  120A  158A  209F  160A  158A  	fcall	_nop
  9550                           
  9551                           ;Automated Solar Panel Orientation Setter.c: 308: double tmp_angle_display = (double)(st
      +                          erpper_counts/0.55);
  9552  1D90  30CD               	movlw	205
  9553  1D91  00B0               	movwf	___ftdiv@f2
  9554  1D92  300C               	movlw	12
  9555  1D93  00B1               	movwf	___ftdiv@f2+1
  9556  1D94  303F               	movlw	63
  9557  1D95  00B2               	movwf	___ftdiv@f2+2
  9558  1D96  1683               	bsf	3,5	;RP0=1, select bank1
  9559  1D97  0844               	movf	(_sterpper_counts+1)^(0+128),w
  9560  1D98  1283               	bcf	3,5	;RP0=0, select bank0
  9561  1D99  00AE               	movwf	___lwtoft@c+1
  9562  1D9A  1683               	bsf	3,5	;RP0=1, select bank1
  9563  1D9B  0843               	movf	_sterpper_counts^(0+128),w
  9564  1D9C  1283               	bcf	3,5	;RP0=0, select bank0
  9565  1D9D  00AD               	movwf	___lwtoft@c
  9566  1D9E  120A  158A  247D  160A  158A  	fcall	___lwtoft
  9567  1DA3  082D               	movf	?___lwtoft,w
  9568  1DA4  00B3               	movwf	___ftdiv@f1
  9569  1DA5  082E               	movf	?___lwtoft+1,w
  9570  1DA6  00B4               	movwf	___ftdiv@f1+1
  9571  1DA7  082F               	movf	?___lwtoft+2,w
  9572  1DA8  00B5               	movwf	___ftdiv@f1+2
  9573  1DA9  120A  158A  2273  160A  158A  	fcall	___ftdiv
  9574  1DAE  0830               	movf	?___ftdiv,w
  9575  1DAF  1683               	bsf	3,5	;RP0=1, select bank1
  9576  1DB0  00D4               	movwf	main@tmp_angle_display^(0+128)
  9577  1DB1  1283               	bcf	3,5	;RP0=0, select bank0
  9578  1DB2  0831               	movf	?___ftdiv+1,w
  9579  1DB3  1683               	bsf	3,5	;RP0=1, select bank1
  9580  1DB4  00D5               	movwf	(main@tmp_angle_display+1)^(0+128)
  9581  1DB5  1283               	bcf	3,5	;RP0=0, select bank0
  9582  1DB6  0832               	movf	?___ftdiv+2,w
  9583  1DB7  1683               	bsf	3,5	;RP0=1, select bank1
  9584  1DB8  00D6               	movwf	(main@tmp_angle_display+2)^(0+128)
  9585                           
  9586                           ;Automated Solar Panel Orientation Setter.c: 309: int angle_display = (int)tmp_angle_dis
      +                          play;
  9587  1DB9  0854               	movf	main@tmp_angle_display^(0+128),w
  9588  1DBA  1283               	bcf	3,5	;RP0=0, select bank0
  9589  1DBB  00C1               	movwf	___fttol@f1
  9590  1DBC  1683               	bsf	3,5	;RP0=1, select bank1
  9591  1DBD  0855               	movf	(main@tmp_angle_display+1)^(0+128),w
  9592  1DBE  1283               	bcf	3,5	;RP0=0, select bank0
  9593  1DBF  00C2               	movwf	___fttol@f1+1
  9594  1DC0  1683               	bsf	3,5	;RP0=1, select bank1
  9595  1DC1  0856               	movf	(main@tmp_angle_display+2)^(0+128),w
  9596  1DC2  1283               	bcf	3,5	;RP0=0, select bank0
  9597  1DC3  00C3               	movwf	___fttol@f1+2
  9598  1DC4  120A  158A  2422  160A  158A  	fcall	___fttol
  9599  1DC9  0842               	movf	?___fttol+1,w
  9600  1DCA  1683               	bsf	3,5	;RP0=1, select bank1
  9601  1DCB  00E0               	movwf	(main@angle_display+1)^(0+128)
  9602  1DCC  1283               	bcf	3,5	;RP0=0, select bank0
  9603  1DCD  0841               	movf	?___fttol,w
  9604  1DCE  1683               	bsf	3,5	;RP0=1, select bank1
  9605  1DCF  00DF               	movwf	main@angle_display^(0+128)
  9606                           
  9607                           ;Automated Solar Panel Orientation Setter.c: 311: LCD_print_char(1,7,angle_display/100+4
      +                          8);
  9608  1DD0  1283               	bcf	3,5	;RP0=0, select bank0
  9609  1DD1  3007               	movlw	7
  9610  1DD2  01B3               	clrf	LCD_print_char@row
  9611  1DD3  0AB3               	incf	LCD_print_char@row,f
  9612  1DD4  01B4               	clrf	LCD_print_char@row+1
  9613  1DD5  00B5               	movwf	LCD_print_char@column
  9614  1DD6  3064               	movlw	100
  9615  1DD7  01B6               	clrf	LCD_print_char@column+1
  9616  1DD8  00AB               	movwf	___awdiv@divisor
  9617  1DD9  01AC               	clrf	___awdiv@divisor+1
  9618  1DDA  1683               	bsf	3,5	;RP0=1, select bank1
  9619  1DDB  0860               	movf	(main@angle_display+1)^(0+128),w
  9620  1DDC  1283               	bcf	3,5	;RP0=0, select bank0
  9621  1DDD  00AE               	movwf	___awdiv@dividend+1
  9622  1DDE  1683               	bsf	3,5	;RP0=1, select bank1
  9623  1DDF  085F               	movf	main@angle_display^(0+128),w
  9624  1DE0  1283               	bcf	3,5	;RP0=0, select bank0
  9625  1DE1  00AD               	movwf	___awdiv@dividend
  9626  1DE2  120A  158A  2717  160A  158A  	fcall	___awdiv
  9627  1DE7  082B               	movf	?___awdiv,w
  9628  1DE8  3E30               	addlw	48
  9629  1DE9  00B7               	movwf	LCD_print_char@print_value
  9630  1DEA  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9631                           
  9632                           ;Automated Solar Panel Orientation Setter.c: 312: LCD_print_char(1,8,angle_display%100/1
      +                          0+48);
  9633  1DEF  1283               	bcf	3,5	;RP0=0, select bank0
  9634  1DF0  1303               	bcf	3,6	;RP1=0, select bank0
  9635  1DF1  3008               	movlw	8
  9636  1DF2  01B3               	clrf	LCD_print_char@row
  9637  1DF3  0AB3               	incf	LCD_print_char@row,f
  9638  1DF4  01B4               	clrf	LCD_print_char@row+1
  9639  1DF5  00B5               	movwf	LCD_print_char@column
  9640  1DF6  300A               	movlw	10
  9641  1DF7  01B6               	clrf	LCD_print_char@column+1
  9642  1DF8  00AB               	movwf	___awdiv@divisor
  9643  1DF9  01AC               	clrf	___awdiv@divisor+1
  9644  1DFA  1683               	bsf	3,5	;RP0=1, select bank1
  9645  1DFB  0860               	movf	(main@angle_display+1)^(0+128),w
  9646  1DFC  1283               	bcf	3,5	;RP0=0, select bank0
  9647  1DFD  00A8               	movwf	___awmod@dividend+1
  9648  1DFE  1683               	bsf	3,5	;RP0=1, select bank1
  9649  1DFF  085F               	movf	main@angle_display^(0+128),w
  9650  1E00  1283               	bcf	3,5	;RP0=0, select bank0
  9651  1E01  00A7               	movwf	___awmod@dividend
  9652  1E02  3064               	movlw	100
  9653  1E03  00A5               	movwf	___awmod@divisor
  9654  1E04  01A6               	clrf	___awmod@divisor+1
  9655  1E05  120A  158A  275C  160A  158A  	fcall	___awmod
  9656  1E0A  0826               	movf	?___awmod+1,w
  9657  1E0B  00AE               	movwf	___awdiv@dividend+1
  9658  1E0C  0825               	movf	?___awmod,w
  9659  1E0D  00AD               	movwf	___awdiv@dividend
  9660  1E0E  120A  158A  2717  160A  158A  	fcall	___awdiv
  9661  1E13  082B               	movf	?___awdiv,w
  9662  1E14  3E30               	addlw	48
  9663  1E15  00B7               	movwf	LCD_print_char@print_value
  9664  1E16  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9665                           
  9666                           ;Automated Solar Panel Orientation Setter.c: 313: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
  9667  1E1B  1683               	bsf	3,5	;RP0=1, select bank1
  9668  1E1C  1303               	bcf	3,6	;RP1=0, select bank1
  9669  1E1D  0860               	movf	(main@angle_display+1)^(0+128),w
  9670  1E1E  1283               	bcf	3,5	;RP0=0, select bank0
  9671  1E1F  00A8               	movwf	___awmod@dividend+1
  9672  1E20  1683               	bsf	3,5	;RP0=1, select bank1
  9673  1E21  085F               	movf	main@angle_display^(0+128),w
  9674  1E22  1283               	bcf	3,5	;RP0=0, select bank0
  9675  1E23  00A7               	movwf	___awmod@dividend
  9676  1E24  3064               	movlw	100
  9677  1E25  00A5               	movwf	___awmod@divisor
  9678  1E26  01A6               	clrf	___awmod@divisor+1
  9679  1E27  120A  158A  275C  160A  158A  	fcall	___awmod
  9680  1E2C  0826               	movf	?___awmod+1,w
  9681  1E2D  1683               	bsf	3,5	;RP0=1, select bank1
  9682  1E2E  00DC               	movwf	(_main$814+1)^(0+128)
  9683  1E2F  1283               	bcf	3,5	;RP0=0, select bank0
  9684  1E30  0825               	movf	?___awmod,w
  9685  1E31  1683               	bsf	3,5	;RP0=1, select bank1
  9686  1E32  00DB               	movwf	_main$814^(0+128)
  9687                           
  9688                           ;Automated Solar Panel Orientation Setter.c: 313: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
  9689  1E33  1283               	bcf	3,5	;RP0=0, select bank0
  9690  1E34  3009               	movlw	9
  9691  1E35  01B3               	clrf	LCD_print_char@row
  9692  1E36  0AB3               	incf	LCD_print_char@row,f
  9693  1E37  01B4               	clrf	LCD_print_char@row+1
  9694  1E38  00B5               	movwf	LCD_print_char@column
  9695  1E39  300A               	movlw	10
  9696  1E3A  01B6               	clrf	LCD_print_char@column+1
  9697  1E3B  00A5               	movwf	___awmod@divisor
  9698  1E3C  01A6               	clrf	___awmod@divisor+1
  9699  1E3D  1683               	bsf	3,5	;RP0=1, select bank1
  9700  1E3E  085C               	movf	(_main$814+1)^(0+128),w
  9701  1E3F  1283               	bcf	3,5	;RP0=0, select bank0
  9702  1E40  00A8               	movwf	___awmod@dividend+1
  9703  1E41  1683               	bsf	3,5	;RP0=1, select bank1
  9704  1E42  085B               	movf	_main$814^(0+128),w
  9705  1E43  1283               	bcf	3,5	;RP0=0, select bank0
  9706  1E44  00A7               	movwf	___awmod@dividend
  9707  1E45  120A  158A  275C  160A  158A  	fcall	___awmod
  9708  1E4A  0825               	movf	?___awmod,w
  9709  1E4B  3E30               	addlw	48
  9710  1E4C  00B7               	movwf	LCD_print_char@print_value
  9711  1E4D  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9712                           
  9713                           ;Automated Solar Panel Orientation Setter.c: 316: LCD_print_char(2,1,V_Bat2/10+48);
  9714  1E52  3002               	movlw	2
  9715  1E53  1283               	bcf	3,5	;RP0=0, select bank0
  9716  1E54  1303               	bcf	3,6	;RP1=0, select bank0
  9717  1E55  00B3               	movwf	LCD_print_char@row
  9718  1E56  300A               	movlw	10
  9719  1E57  01B4               	clrf	LCD_print_char@row+1
  9720  1E58  01B5               	clrf	LCD_print_char@column
  9721  1E59  0AB5               	incf	LCD_print_char@column,f
  9722  1E5A  01B6               	clrf	LCD_print_char@column+1
  9723  1E5B  00A5               	movwf	___ltdiv@divisor
  9724  1E5C  01A6               	clrf	___ltdiv@divisor+1
  9725  1E5D  01A7               	clrf	___ltdiv@divisor+2
  9726  1E5E  1683               	bsf	3,5	;RP0=1, select bank1
  9727  1E5F  0834               	movf	_V_Bat2^(0+128),w
  9728  1E60  1283               	bcf	3,5	;RP0=0, select bank0
  9729  1E61  00A8               	movwf	___ltdiv@dividend
  9730  1E62  1683               	bsf	3,5	;RP0=1, select bank1
  9731  1E63  0835               	movf	(_V_Bat2+1)^(0+128),w
  9732  1E64  1283               	bcf	3,5	;RP0=0, select bank0
  9733  1E65  00A9               	movwf	___ltdiv@dividend+1
  9734  1E66  1683               	bsf	3,5	;RP0=1, select bank1
  9735  1E67  0836               	movf	(_V_Bat2+2)^(0+128),w
  9736  1E68  1283               	bcf	3,5	;RP0=0, select bank0
  9737  1E69  00AA               	movwf	___ltdiv@dividend+2
  9738  1E6A  160A  158A  2362  160A  158A  	fcall	___ltdiv
  9739  1E6F  0825               	movf	?___ltdiv,w
  9740  1E70  3E30               	addlw	48
  9741  1E71  00B7               	movwf	LCD_print_char@print_value
  9742  1E72  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9743                           
  9744                           ;Automated Solar Panel Orientation Setter.c: 317: LCD_print_char(2,2,V_Bat2%10+48);
  9745  1E77  3002               	movlw	2
  9746  1E78  1283               	bcf	3,5	;RP0=0, select bank0
  9747  1E79  1303               	bcf	3,6	;RP1=0, select bank0
  9748  1E7A  00B3               	movwf	LCD_print_char@row
  9749  1E7B  01B4               	clrf	LCD_print_char@row+1
  9750  1E7C  00B5               	movwf	LCD_print_char@column
  9751  1E7D  300A               	movlw	10
  9752  1E7E  01B6               	clrf	LCD_print_char@column+1
  9753  1E7F  00A5               	movwf	___ltmod@divisor
  9754  1E80  01A6               	clrf	___ltmod@divisor+1
  9755  1E81  01A7               	clrf	___ltmod@divisor+2
  9756  1E82  1683               	bsf	3,5	;RP0=1, select bank1
  9757  1E83  0834               	movf	_V_Bat2^(0+128),w
  9758  1E84  1283               	bcf	3,5	;RP0=0, select bank0
  9759  1E85  00A8               	movwf	___ltmod@dividend
  9760  1E86  1683               	bsf	3,5	;RP0=1, select bank1
  9761  1E87  0835               	movf	(_V_Bat2+1)^(0+128),w
  9762  1E88  1283               	bcf	3,5	;RP0=0, select bank0
  9763  1E89  00A9               	movwf	___ltmod@dividend+1
  9764  1E8A  1683               	bsf	3,5	;RP0=1, select bank1
  9765  1E8B  0836               	movf	(_V_Bat2+2)^(0+128),w
  9766  1E8C  1283               	bcf	3,5	;RP0=0, select bank0
  9767  1E8D  00AA               	movwf	___ltmod@dividend+2
  9768  1E8E  160A  158A  2331  160A  158A  	fcall	___ltmod
  9769  1E93  0825               	movf	?___ltmod,w
  9770  1E94  3E30               	addlw	48
  9771  1E95  00B7               	movwf	LCD_print_char@print_value
  9772  1E96  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9773                           
  9774                           ;Automated Solar Panel Orientation Setter.c: 318: LCD_print_char(2,4,'0');
  9775  1E9B  3002               	movlw	2
  9776  1E9C  1283               	bcf	3,5	;RP0=0, select bank0
  9777  1E9D  1303               	bcf	3,6	;RP1=0, select bank0
  9778  1E9E  00B3               	movwf	LCD_print_char@row
  9779  1E9F  3004               	movlw	4
  9780  1EA0  01B4               	clrf	LCD_print_char@row+1
  9781  1EA1  00B5               	movwf	LCD_print_char@column
  9782  1EA2  3030               	movlw	48
  9783  1EA3  01B6               	clrf	LCD_print_char@column+1
  9784  1EA4  00B7               	movwf	LCD_print_char@print_value
  9785  1EA5  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9786                           
  9787                           ;Automated Solar Panel Orientation Setter.c: 321: LCD_print_char(2,7,'0');
  9788  1EAA  3002               	movlw	2
  9789  1EAB  1283               	bcf	3,5	;RP0=0, select bank0
  9790  1EAC  1303               	bcf	3,6	;RP1=0, select bank0
  9791  1EAD  00B3               	movwf	LCD_print_char@row
  9792  1EAE  3007               	movlw	7
  9793  1EAF  01B4               	clrf	LCD_print_char@row+1
  9794  1EB0  00B5               	movwf	LCD_print_char@column
  9795  1EB1  3030               	movlw	48
  9796  1EB2  01B6               	clrf	LCD_print_char@column+1
  9797  1EB3  00B7               	movwf	LCD_print_char@print_value
  9798  1EB4  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9799                           
  9800                           ;Automated Solar Panel Orientation Setter.c: 322: LCD_print_char(2,9,'0');
  9801  1EB9  3002               	movlw	2
  9802  1EBA  1283               	bcf	3,5	;RP0=0, select bank0
  9803  1EBB  1303               	bcf	3,6	;RP1=0, select bank0
  9804  1EBC  00B3               	movwf	LCD_print_char@row
  9805  1EBD  3009               	movlw	9
  9806  1EBE  01B4               	clrf	LCD_print_char@row+1
  9807  1EBF  00B5               	movwf	LCD_print_char@column
  9808  1EC0  3030               	movlw	48
  9809  1EC1  01B6               	clrf	LCD_print_char@column+1
  9810  1EC2  00B7               	movwf	LCD_print_char@print_value
  9811  1EC3  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9812                           
  9813                           ;Automated Solar Panel Orientation Setter.c: 325: LCD_print_char(2,12,'0');
  9814  1EC8  3002               	movlw	2
  9815  1EC9  1283               	bcf	3,5	;RP0=0, select bank0
  9816  1ECA  1303               	bcf	3,6	;RP1=0, select bank0
  9817  1ECB  00B3               	movwf	LCD_print_char@row
  9818  1ECC  300C               	movlw	12
  9819  1ECD  01B4               	clrf	LCD_print_char@row+1
  9820  1ECE  00B5               	movwf	LCD_print_char@column
  9821  1ECF  3030               	movlw	48
  9822  1ED0  01B6               	clrf	LCD_print_char@column+1
  9823  1ED1  00B7               	movwf	LCD_print_char@print_value
  9824  1ED2  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9825                           
  9826                           ;Automated Solar Panel Orientation Setter.c: 326: LCD_print_char(2,13,'0');
  9827  1ED7  3002               	movlw	2
  9828  1ED8  1283               	bcf	3,5	;RP0=0, select bank0
  9829  1ED9  1303               	bcf	3,6	;RP1=0, select bank0
  9830  1EDA  00B3               	movwf	LCD_print_char@row
  9831  1EDB  300D               	movlw	13
  9832  1EDC  01B4               	clrf	LCD_print_char@row+1
  9833  1EDD  00B5               	movwf	LCD_print_char@column
  9834  1EDE  3030               	movlw	48
  9835  1EDF  01B6               	clrf	LCD_print_char@column+1
  9836  1EE0  00B7               	movwf	LCD_print_char@print_value
  9837  1EE1  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9838                           
  9839                           ;Automated Solar Panel Orientation Setter.c: 327: LCD_print_char(2,15,'0');
  9840  1EE6  3002               	movlw	2
  9841  1EE7  1283               	bcf	3,5	;RP0=0, select bank0
  9842  1EE8  1303               	bcf	3,6	;RP1=0, select bank0
  9843  1EE9  00B3               	movwf	LCD_print_char@row
  9844  1EEA  300F               	movlw	15
  9845  1EEB  01B4               	clrf	LCD_print_char@row+1
  9846  1EEC  00B5               	movwf	LCD_print_char@column
  9847  1EED  3030               	movlw	48
  9848  1EEE  01B6               	clrf	LCD_print_char@column+1
  9849  1EEF  00B7               	movwf	LCD_print_char@print_value
  9850  1EF0  160A  118A  21B6  160A  158A  	fcall	_LCD_print_char
  9851                           
  9852                           ;Automated Solar Panel Orientation Setter.c: 332: CheckMode();
  9853  1EF5  120A  158A  200F  160A  158A  	fcall	_CheckMode
  9854                           
  9855                           ;Automated Solar Panel Orientation Setter.c: 334: Calculate();
  9856  1EFA  160A  158A  23FF  160A  158A  	fcall	_Calculate
  9857                           
  9858                           ;Automated Solar Panel Orientation Setter.c: 336: break;
  9859  1EFF  2D06               	goto	L42
  9860                           
  9861                           	psect	maintext_split_3
  9862  01DA                     l6657:	
  9863                           
  9864                           ;Automated Solar Panel Orientation Setter.c: 342: a2d_read();
  9865  01DA  120A  158A  22DB  120A  118A  	fcall	_a2d_read
  9866  01DF  3001               	movlw	1
  9867                           
  9868                           ;Automated Solar Panel Orientation Setter.c: 343: position(1,1);
  9869  01E0  01A6               	clrf	position@collum
  9870  01E1  0AA6               	incf	position@collum,f
  9871  01E2  160A  118A  22DF  120A  118A  	fcall	_position
  9872                           
  9873                           ;Automated Solar Panel Orientation Setter.c: 344: printf("MODE2,000D,00:00");
  9874  01E7  307B               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  9875  01E8  160A  118A  20DC  120A  118A  	fcall	_printf
  9876  01ED  3002               	movlw	2
  9877                           
  9878                           ;Automated Solar Panel Orientation Setter.c: 345: position(2,1);
  9879  01EE  01A6               	clrf	position@collum
  9880  01EF  0AA6               	incf	position@collum,f
  9881  01F0  160A  118A  22DF  120A  118A  	fcall	_position
  9882                           
  9883                           ;Automated Solar Panel Orientation Setter.c: 346: printf("00.0V,0.0A,00.0W");
  9884  01F5  309D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  9885  01F6  160A  118A  20DC  120A  118A  	fcall	_printf
  9886                           
  9887                           ;Automated Solar Panel Orientation Setter.c: 347: LCDTimeUpdate();
  9888  01FB  160A  118A  2123  120A  118A  	fcall	_LCDTimeUpdate
  9889                           
  9890                           ;Automated Solar Panel Orientation Setter.c: 349: state = 20;
  9891  0200  3014               	movlw	20
  9892  0201  2E78               	goto	L4
  9893  0202                     l6667:	
  9894                           ;Automated Solar Panel Orientation Setter.c: 350: break;
  9895                           
  9896  0202  120A  158A  22DB  120A  118A  	fcall	_a2d_read
  9897                           
  9898                           ;Automated Solar Panel Orientation Setter.c: 353: Serial_Print_Int(ldr1);
  9899  0207  1683               	bsf	3,5	;RP0=1, select bank1
  9900  0208  083C               	movf	(_ldr1+1)^(0+128),w
  9901  0209  1283               	bcf	3,5	;RP0=0, select bank0
  9902  020A  00B4               	movwf	Serial_Print_Int@val+1
  9903  020B  1683               	bsf	3,5	;RP0=1, select bank1
  9904  020C  083B               	movf	_ldr1^(0+128),w
  9905  020D  1283               	bcf	3,5	;RP0=0, select bank0
  9906  020E  00B3               	movwf	Serial_Print_Int@val
  9907  020F  120A  158A  24CF  120A  118A  	fcall	_Serial_Print_Int
  9908                           
  9909                           ;Automated Solar Panel Orientation Setter.c: 354: Serial_Print(", ");
  9910  0214  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9911  0215  120A  158A  2244  120A  118A  	fcall	_Serial_Print
  9912                           
  9913                           ;Automated Solar Panel Orientation Setter.c: 355: Serial_Print_Int(ldr2);
  9914  021A  0856               	movf	_ldr2+1,w
  9915  021B  00B4               	movwf	Serial_Print_Int@val+1
  9916  021C  0855               	movf	_ldr2,w
  9917  021D  00B3               	movwf	Serial_Print_Int@val
  9918  021E  120A  158A  24CF  120A  118A  	fcall	_Serial_Print_Int
  9919                           
  9920                           ;Automated Solar Panel Orientation Setter.c: 356: Serial_Print(", ");
  9921  0223  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9922  0224  120A  158A  2244  120A  118A  	fcall	_Serial_Print
  9923                           
  9924                           ;Automated Solar Panel Orientation Setter.c: 357: Serial_Print_Int(V_Bat);
  9925  0229  1683               	bsf	3,5	;RP0=1, select bank1
  9926  022A  084A               	movf	(_V_Bat+1)^(0+128),w
  9927  022B  1283               	bcf	3,5	;RP0=0, select bank0
  9928  022C  00B4               	movwf	Serial_Print_Int@val+1
  9929  022D  1683               	bsf	3,5	;RP0=1, select bank1
  9930  022E  0849               	movf	_V_Bat^(0+128),w
  9931  022F  1283               	bcf	3,5	;RP0=0, select bank0
  9932  0230  00B3               	movwf	Serial_Print_Int@val
  9933  0231  120A  158A  24CF  120A  118A  	fcall	_Serial_Print_Int
  9934                           
  9935                           ;Automated Solar Panel Orientation Setter.c: 358: Serial_Print(", ");
  9936  0236  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9937  0237  120A  158A  2244  120A  118A  	fcall	_Serial_Print
  9938                           
  9939                           ;Automated Solar Panel Orientation Setter.c: 359: Serial_Print_Int(C_Bat);
  9940  023C  1683               	bsf	3,5	;RP0=1, select bank1
  9941  023D  0848               	movf	(_C_Bat+1)^(0+128),w
  9942  023E  1283               	bcf	3,5	;RP0=0, select bank0
  9943  023F  00B4               	movwf	Serial_Print_Int@val+1
  9944  0240  1683               	bsf	3,5	;RP0=1, select bank1
  9945  0241  0847               	movf	_C_Bat^(0+128),w
  9946  0242  1283               	bcf	3,5	;RP0=0, select bank0
  9947  0243  00B3               	movwf	Serial_Print_Int@val
  9948  0244  120A  158A  24CF  120A  118A  	fcall	_Serial_Print_Int
  9949                           
  9950                           ;Automated Solar Panel Orientation Setter.c: 360: Serial_Print(", ");
  9951  0249  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9952  024A  120A  158A  2244  120A  118A  	fcall	_Serial_Print
  9953                           
  9954                           ;Automated Solar Panel Orientation Setter.c: 361: Serial_NewLine();
  9955  024F  160A  158A  22E3  120A  118A  	fcall	_Serial_NewLine
  9956                           
  9957                           ;Automated Solar Panel Orientation Setter.c: 362: _delay((unsigned long)((50)*(4000000/4
      +                          000.0)));
  9958  0254  3041               	movlw	65
  9959  0255  1283               	bcf	3,5	;RP0=0, select bank0
  9960  0256  1303               	bcf	3,6	;RP1=0, select bank0
  9961  0257  00CF               	movwf	??_main+1
  9962  0258  30EE               	movlw	238
  9963  0259  00CE               	movwf	??_main
  9964  025A                     u8597:	
  9965  025A  0BCE               	decfsz	??_main,f
  9966  025B  2A5A               	goto	u8597
  9967  025C  0BCF               	decfsz	??_main+1,f
  9968  025D  2A5A               	goto	u8597
  9969  025E  0000               	nop
  9970                           
  9971                           ;Automated Solar Panel Orientation Setter.c: 363: nop();
  9972  025F  120A  158A  209F  120A  118A  	fcall	_nop
  9973                           
  9974                           ;Automated Solar Panel Orientation Setter.c: 366: double tmp_angle_display = (double)(st
      +                          erpper_counts/0.55);
  9975  0264  30CD               	movlw	205
  9976  0265  00B0               	movwf	___ftdiv@f2
  9977  0266  300C               	movlw	12
  9978  0267  00B1               	movwf	___ftdiv@f2+1
  9979  0268  303F               	movlw	63
  9980  0269  00B2               	movwf	___ftdiv@f2+2
  9981  026A  1683               	bsf	3,5	;RP0=1, select bank1
  9982  026B  0844               	movf	(_sterpper_counts+1)^(0+128),w
  9983  026C  1283               	bcf	3,5	;RP0=0, select bank0
  9984  026D  00AE               	movwf	___lwtoft@c+1
  9985  026E  1683               	bsf	3,5	;RP0=1, select bank1
  9986  026F  0843               	movf	_sterpper_counts^(0+128),w
  9987  0270  1283               	bcf	3,5	;RP0=0, select bank0
  9988  0271  00AD               	movwf	___lwtoft@c
  9989  0272  120A  158A  247D  120A  118A  	fcall	___lwtoft
  9990  0277  082D               	movf	?___lwtoft,w
  9991  0278  00B3               	movwf	___ftdiv@f1
  9992  0279  082E               	movf	?___lwtoft+1,w
  9993  027A  00B4               	movwf	___ftdiv@f1+1
  9994  027B  082F               	movf	?___lwtoft+2,w
  9995  027C  00B5               	movwf	___ftdiv@f1+2
  9996  027D  120A  158A  2273  120A  118A  	fcall	___ftdiv
  9997  0282  0830               	movf	?___ftdiv,w
  9998  0283  1683               	bsf	3,5	;RP0=1, select bank1
  9999  0284  00D4               	movwf	main@tmp_angle_display^(0+128)
 10000  0285  1283               	bcf	3,5	;RP0=0, select bank0
 10001  0286  0831               	movf	?___ftdiv+1,w
 10002  0287  1683               	bsf	3,5	;RP0=1, select bank1
 10003  0288  00D5               	movwf	(main@tmp_angle_display+1)^(0+128)
 10004  0289  1283               	bcf	3,5	;RP0=0, select bank0
 10005  028A  0832               	movf	?___ftdiv+2,w
 10006  028B  1683               	bsf	3,5	;RP0=1, select bank1
 10007  028C  00D6               	movwf	(main@tmp_angle_display+2)^(0+128)
 10008                           
 10009                           ;Automated Solar Panel Orientation Setter.c: 367: int angle_display = (int)tmp_angle_dis
      +                          play;
 10010  028D  0854               	movf	main@tmp_angle_display^(0+128),w
 10011  028E  1283               	bcf	3,5	;RP0=0, select bank0
 10012  028F  00C1               	movwf	___fttol@f1
 10013  0290  1683               	bsf	3,5	;RP0=1, select bank1
 10014  0291  0855               	movf	(main@tmp_angle_display+1)^(0+128),w
 10015  0292  1283               	bcf	3,5	;RP0=0, select bank0
 10016  0293  00C2               	movwf	___fttol@f1+1
 10017  0294  1683               	bsf	3,5	;RP0=1, select bank1
 10018  0295  0856               	movf	(main@tmp_angle_display+2)^(0+128),w
 10019  0296  1283               	bcf	3,5	;RP0=0, select bank0
 10020  0297  00C3               	movwf	___fttol@f1+2
 10021  0298  120A  158A  2422  120A  118A  	fcall	___fttol
 10022  029D  0842               	movf	?___fttol+1,w
 10023  029E  1683               	bsf	3,5	;RP0=1, select bank1
 10024  029F  00E0               	movwf	(main@angle_display+1)^(0+128)
 10025  02A0  1283               	bcf	3,5	;RP0=0, select bank0
 10026  02A1  0841               	movf	?___fttol,w
 10027  02A2  1683               	bsf	3,5	;RP0=1, select bank1
 10028  02A3  00DF               	movwf	main@angle_display^(0+128)
 10029                           
 10030                           ;Automated Solar Panel Orientation Setter.c: 369: LCD_print_char(1,7,angle_display/100+4
      +                          8);
 10031  02A4  1283               	bcf	3,5	;RP0=0, select bank0
 10032  02A5  3007               	movlw	7
 10033  02A6  01B3               	clrf	LCD_print_char@row
 10034  02A7  0AB3               	incf	LCD_print_char@row,f
 10035  02A8  01B4               	clrf	LCD_print_char@row+1
 10036  02A9  00B5               	movwf	LCD_print_char@column
 10037  02AA  3064               	movlw	100
 10038  02AB  01B6               	clrf	LCD_print_char@column+1
 10039  02AC  00AB               	movwf	___awdiv@divisor
 10040  02AD  01AC               	clrf	___awdiv@divisor+1
 10041  02AE  1683               	bsf	3,5	;RP0=1, select bank1
 10042  02AF  0860               	movf	(main@angle_display+1)^(0+128),w
 10043  02B0  1283               	bcf	3,5	;RP0=0, select bank0
 10044  02B1  00AE               	movwf	___awdiv@dividend+1
 10045  02B2  1683               	bsf	3,5	;RP0=1, select bank1
 10046  02B3  085F               	movf	main@angle_display^(0+128),w
 10047  02B4  1283               	bcf	3,5	;RP0=0, select bank0
 10048  02B5  00AD               	movwf	___awdiv@dividend
 10049  02B6  120A  158A  2717  120A  118A  	fcall	___awdiv
 10050  02BB  082B               	movf	?___awdiv,w
 10051  02BC  3E30               	addlw	48
 10052  02BD  00B7               	movwf	LCD_print_char@print_value
 10053  02BE  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10054                           
 10055                           ;Automated Solar Panel Orientation Setter.c: 370: LCD_print_char(1,8,angle_display%100/1
      +                          0+48);
 10056  02C3  1283               	bcf	3,5	;RP0=0, select bank0
 10057  02C4  1303               	bcf	3,6	;RP1=0, select bank0
 10058  02C5  3008               	movlw	8
 10059  02C6  01B3               	clrf	LCD_print_char@row
 10060  02C7  0AB3               	incf	LCD_print_char@row,f
 10061  02C8  01B4               	clrf	LCD_print_char@row+1
 10062  02C9  00B5               	movwf	LCD_print_char@column
 10063  02CA  300A               	movlw	10
 10064  02CB  01B6               	clrf	LCD_print_char@column+1
 10065  02CC  00AB               	movwf	___awdiv@divisor
 10066  02CD  01AC               	clrf	___awdiv@divisor+1
 10067  02CE  1683               	bsf	3,5	;RP0=1, select bank1
 10068  02CF  0860               	movf	(main@angle_display+1)^(0+128),w
 10069  02D0  1283               	bcf	3,5	;RP0=0, select bank0
 10070  02D1  00A8               	movwf	___awmod@dividend+1
 10071  02D2  1683               	bsf	3,5	;RP0=1, select bank1
 10072  02D3  085F               	movf	main@angle_display^(0+128),w
 10073  02D4  1283               	bcf	3,5	;RP0=0, select bank0
 10074  02D5  00A7               	movwf	___awmod@dividend
 10075  02D6  3064               	movlw	100
 10076  02D7  00A5               	movwf	___awmod@divisor
 10077  02D8  01A6               	clrf	___awmod@divisor+1
 10078  02D9  120A  158A  275C  120A  118A  	fcall	___awmod
 10079  02DE  0826               	movf	?___awmod+1,w
 10080  02DF  00AE               	movwf	___awdiv@dividend+1
 10081  02E0  0825               	movf	?___awmod,w
 10082  02E1  00AD               	movwf	___awdiv@dividend
 10083  02E2  120A  158A  2717  120A  118A  	fcall	___awdiv
 10084  02E7  082B               	movf	?___awdiv,w
 10085  02E8  3E30               	addlw	48
 10086  02E9  00B7               	movwf	LCD_print_char@print_value
 10087  02EA  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10088                           
 10089                           ;Automated Solar Panel Orientation Setter.c: 371: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
 10090  02EF  1683               	bsf	3,5	;RP0=1, select bank1
 10091  02F0  1303               	bcf	3,6	;RP1=0, select bank1
 10092  02F1  0860               	movf	(main@angle_display+1)^(0+128),w
 10093  02F2  1283               	bcf	3,5	;RP0=0, select bank0
 10094  02F3  00A8               	movwf	___awmod@dividend+1
 10095  02F4  1683               	bsf	3,5	;RP0=1, select bank1
 10096  02F5  085F               	movf	main@angle_display^(0+128),w
 10097  02F6  1283               	bcf	3,5	;RP0=0, select bank0
 10098  02F7  00A7               	movwf	___awmod@dividend
 10099  02F8  3064               	movlw	100
 10100  02F9  00A5               	movwf	___awmod@divisor
 10101  02FA  01A6               	clrf	___awmod@divisor+1
 10102  02FB  120A  158A  275C  120A  118A  	fcall	___awmod
 10103  0300  0826               	movf	?___awmod+1,w
 10104  0301  1683               	bsf	3,5	;RP0=1, select bank1
 10105  0302  00DC               	movwf	(_main$814+1)^(0+128)
 10106  0303  1283               	bcf	3,5	;RP0=0, select bank0
 10107  0304  0825               	movf	?___awmod,w
 10108  0305  1683               	bsf	3,5	;RP0=1, select bank1
 10109  0306  00DB               	movwf	_main$814^(0+128)
 10110                           
 10111                           ;Automated Solar Panel Orientation Setter.c: 371: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
 10112  0307  1283               	bcf	3,5	;RP0=0, select bank0
 10113  0308  3009               	movlw	9
 10114  0309  01B3               	clrf	LCD_print_char@row
 10115  030A  0AB3               	incf	LCD_print_char@row,f
 10116  030B  01B4               	clrf	LCD_print_char@row+1
 10117  030C  00B5               	movwf	LCD_print_char@column
 10118  030D  300A               	movlw	10
 10119  030E  01B6               	clrf	LCD_print_char@column+1
 10120  030F  00A5               	movwf	___awmod@divisor
 10121  0310  01A6               	clrf	___awmod@divisor+1
 10122  0311  1683               	bsf	3,5	;RP0=1, select bank1
 10123  0312  085C               	movf	(_main$814+1)^(0+128),w
 10124  0313  1283               	bcf	3,5	;RP0=0, select bank0
 10125  0314  00A8               	movwf	___awmod@dividend+1
 10126  0315  1683               	bsf	3,5	;RP0=1, select bank1
 10127  0316  085B               	movf	_main$814^(0+128),w
 10128  0317  1283               	bcf	3,5	;RP0=0, select bank0
 10129  0318  00A7               	movwf	___awmod@dividend
 10130  0319  120A  158A  275C  120A  118A  	fcall	___awmod
 10131  031E  0825               	movf	?___awmod,w
 10132  031F  3E30               	addlw	48
 10133  0320  00B7               	movwf	LCD_print_char@print_value
 10134  0321  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10135                           
 10136                           ;Automated Solar Panel Orientation Setter.c: 374: LCD_print_char(2,1,V_Bat2/10+48);
 10137  0326  3002               	movlw	2
 10138  0327  1283               	bcf	3,5	;RP0=0, select bank0
 10139  0328  1303               	bcf	3,6	;RP1=0, select bank0
 10140  0329  00B3               	movwf	LCD_print_char@row
 10141  032A  300A               	movlw	10
 10142  032B  01B4               	clrf	LCD_print_char@row+1
 10143  032C  01B5               	clrf	LCD_print_char@column
 10144  032D  0AB5               	incf	LCD_print_char@column,f
 10145  032E  01B6               	clrf	LCD_print_char@column+1
 10146  032F  00A5               	movwf	___ltdiv@divisor
 10147  0330  01A6               	clrf	___ltdiv@divisor+1
 10148  0331  01A7               	clrf	___ltdiv@divisor+2
 10149  0332  1683               	bsf	3,5	;RP0=1, select bank1
 10150  0333  0834               	movf	_V_Bat2^(0+128),w
 10151  0334  1283               	bcf	3,5	;RP0=0, select bank0
 10152  0335  00A8               	movwf	___ltdiv@dividend
 10153  0336  1683               	bsf	3,5	;RP0=1, select bank1
 10154  0337  0835               	movf	(_V_Bat2+1)^(0+128),w
 10155  0338  1283               	bcf	3,5	;RP0=0, select bank0
 10156  0339  00A9               	movwf	___ltdiv@dividend+1
 10157  033A  1683               	bsf	3,5	;RP0=1, select bank1
 10158  033B  0836               	movf	(_V_Bat2+2)^(0+128),w
 10159  033C  1283               	bcf	3,5	;RP0=0, select bank0
 10160  033D  00AA               	movwf	___ltdiv@dividend+2
 10161  033E  160A  158A  2362  120A  118A  	fcall	___ltdiv
 10162  0343  0825               	movf	?___ltdiv,w
 10163  0344  3E30               	addlw	48
 10164  0345  00B7               	movwf	LCD_print_char@print_value
 10165  0346  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10166                           
 10167                           ;Automated Solar Panel Orientation Setter.c: 375: LCD_print_char(2,2,V_Bat2%10+48);
 10168  034B  3002               	movlw	2
 10169  034C  1283               	bcf	3,5	;RP0=0, select bank0
 10170  034D  1303               	bcf	3,6	;RP1=0, select bank0
 10171  034E  00B3               	movwf	LCD_print_char@row
 10172  034F  01B4               	clrf	LCD_print_char@row+1
 10173  0350  00B5               	movwf	LCD_print_char@column
 10174  0351  300A               	movlw	10
 10175  0352  01B6               	clrf	LCD_print_char@column+1
 10176  0353  00A5               	movwf	___ltmod@divisor
 10177  0354  01A6               	clrf	___ltmod@divisor+1
 10178  0355  01A7               	clrf	___ltmod@divisor+2
 10179  0356  1683               	bsf	3,5	;RP0=1, select bank1
 10180  0357  0834               	movf	_V_Bat2^(0+128),w
 10181  0358  1283               	bcf	3,5	;RP0=0, select bank0
 10182  0359  00A8               	movwf	___ltmod@dividend
 10183  035A  1683               	bsf	3,5	;RP0=1, select bank1
 10184  035B  0835               	movf	(_V_Bat2+1)^(0+128),w
 10185  035C  1283               	bcf	3,5	;RP0=0, select bank0
 10186  035D  00A9               	movwf	___ltmod@dividend+1
 10187  035E  1683               	bsf	3,5	;RP0=1, select bank1
 10188  035F  0836               	movf	(_V_Bat2+2)^(0+128),w
 10189  0360  1283               	bcf	3,5	;RP0=0, select bank0
 10190  0361  00AA               	movwf	___ltmod@dividend+2
 10191  0362  160A  158A  2331  120A  118A  	fcall	___ltmod
 10192  0367  0825               	movf	?___ltmod,w
 10193  0368  3E30               	addlw	48
 10194  0369  00B7               	movwf	LCD_print_char@print_value
 10195  036A  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10196                           
 10197                           ;Automated Solar Panel Orientation Setter.c: 376: LCD_print_char(2,4,'0');
 10198  036F  3002               	movlw	2
 10199  0370  1283               	bcf	3,5	;RP0=0, select bank0
 10200  0371  1303               	bcf	3,6	;RP1=0, select bank0
 10201  0372  00B3               	movwf	LCD_print_char@row
 10202  0373  3004               	movlw	4
 10203  0374  01B4               	clrf	LCD_print_char@row+1
 10204  0375  00B5               	movwf	LCD_print_char@column
 10205  0376  3030               	movlw	48
 10206  0377  01B6               	clrf	LCD_print_char@column+1
 10207  0378  00B7               	movwf	LCD_print_char@print_value
 10208  0379  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10209                           
 10210                           ;Automated Solar Panel Orientation Setter.c: 379: LCD_print_char(2,7,'0');
 10211  037E  3002               	movlw	2
 10212  037F  1283               	bcf	3,5	;RP0=0, select bank0
 10213  0380  1303               	bcf	3,6	;RP1=0, select bank0
 10214  0381  00B3               	movwf	LCD_print_char@row
 10215  0382  3007               	movlw	7
 10216  0383  01B4               	clrf	LCD_print_char@row+1
 10217  0384  00B5               	movwf	LCD_print_char@column
 10218  0385  3030               	movlw	48
 10219  0386  01B6               	clrf	LCD_print_char@column+1
 10220  0387  00B7               	movwf	LCD_print_char@print_value
 10221  0388  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10222                           
 10223                           ;Automated Solar Panel Orientation Setter.c: 380: LCD_print_char(2,9,'0');
 10224  038D  3002               	movlw	2
 10225  038E  1283               	bcf	3,5	;RP0=0, select bank0
 10226  038F  1303               	bcf	3,6	;RP1=0, select bank0
 10227  0390  00B3               	movwf	LCD_print_char@row
 10228  0391  3009               	movlw	9
 10229  0392  01B4               	clrf	LCD_print_char@row+1
 10230  0393  00B5               	movwf	LCD_print_char@column
 10231  0394  3030               	movlw	48
 10232  0395  01B6               	clrf	LCD_print_char@column+1
 10233  0396  00B7               	movwf	LCD_print_char@print_value
 10234  0397  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10235                           
 10236                           ;Automated Solar Panel Orientation Setter.c: 383: LCD_print_char(2,12,'0');
 10237  039C  3002               	movlw	2
 10238  039D  1283               	bcf	3,5	;RP0=0, select bank0
 10239  039E  1303               	bcf	3,6	;RP1=0, select bank0
 10240  039F  00B3               	movwf	LCD_print_char@row
 10241  03A0  300C               	movlw	12
 10242  03A1  01B4               	clrf	LCD_print_char@row+1
 10243  03A2  00B5               	movwf	LCD_print_char@column
 10244  03A3  3030               	movlw	48
 10245  03A4  01B6               	clrf	LCD_print_char@column+1
 10246  03A5  00B7               	movwf	LCD_print_char@print_value
 10247  03A6  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10248                           
 10249                           ;Automated Solar Panel Orientation Setter.c: 384: LCD_print_char(2,13,'0');
 10250  03AB  3002               	movlw	2
 10251  03AC  1283               	bcf	3,5	;RP0=0, select bank0
 10252  03AD  1303               	bcf	3,6	;RP1=0, select bank0
 10253  03AE  00B3               	movwf	LCD_print_char@row
 10254  03AF  300D               	movlw	13
 10255  03B0  01B4               	clrf	LCD_print_char@row+1
 10256  03B1  00B5               	movwf	LCD_print_char@column
 10257  03B2  3030               	movlw	48
 10258  03B3  01B6               	clrf	LCD_print_char@column+1
 10259  03B4  00B7               	movwf	LCD_print_char@print_value
 10260  03B5  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10261                           
 10262                           ;Automated Solar Panel Orientation Setter.c: 385: LCD_print_char(2,15,'0');
 10263  03BA  3002               	movlw	2
 10264  03BB  1283               	bcf	3,5	;RP0=0, select bank0
 10265  03BC  1303               	bcf	3,6	;RP1=0, select bank0
 10266  03BD  00B3               	movwf	LCD_print_char@row
 10267  03BE  300F               	movlw	15
 10268  03BF  01B4               	clrf	LCD_print_char@row+1
 10269  03C0  00B5               	movwf	LCD_print_char@column
 10270  03C1  3030               	movlw	48
 10271  03C2  01B6               	clrf	LCD_print_char@column+1
 10272  03C3  00B7               	movwf	LCD_print_char@print_value
 10273  03C4  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10274                           
 10275                           ;Automated Solar Panel Orientation Setter.c: 388: if(hour >= 6 && hour <=18 ){
 10276  03C9  3000               	movlw	0
 10277  03CA  1283               	bcf	3,5	;RP0=0, select bank0
 10278  03CB  1303               	bcf	3,6	;RP1=0, select bank0
 10279  03CC  0254               	subwf	_hour+1,w
 10280  03CD  3006               	movlw	6
 10281  03CE  1903               	skipnz
 10282  03CF  0253               	subwf	_hour,w
 10283  03D0  1C03               	skipc
 10284  03D1  2C3D               	goto	l6729
 10285  03D2  3000               	movlw	0
 10286  03D3  0254               	subwf	_hour+1,w
 10287  03D4  3013               	movlw	19
 10288  03D5  1903               	skipnz
 10289  03D6  0253               	subwf	_hour,w
 10290  03D7  1803               	skipnc
 10291  03D8  2C3D               	goto	l6729
 10292                           
 10293                           ;Automated Solar Panel Orientation Setter.c: 390: double tmp_stepsto_turn =(eeprom_read(
      +                           hour-6 )*0.56;
 10294  03D9  305C               	movlw	92
 10295  03DA  00B2               	movwf	___ftmul@f1
 10296  03DB  300F               	movlw	15
 10297  03DC  00B3               	movwf	___ftmul@f1+1
 10298  03DD  303F               	movlw	63
 10299  03DE  00B4               	movwf	___ftmul@f1+2
 10300  03DF  0853               	movf	_hour,w
 10301  03E0  3EFA               	addlw	250
 10302  03E1  160A  158A  2316  120A  118A  	fcall	_eeprom_read
 10303  03E6  120A  158A  2263  120A  118A  	fcall	___lbtoft
 10304  03EB  082D               	movf	?___lbtoft,w
 10305  03EC  00B5               	movwf	___ftmul@f2
 10306  03ED  082E               	movf	?___lbtoft+1,w
 10307  03EE  00B6               	movwf	___ftmul@f2+1
 10308  03EF  082F               	movf	?___lbtoft+2,w
 10309  03F0  00B7               	movwf	___ftmul@f2+2
 10310  03F1  120A  158A  23A7  120A  118A  	fcall	___ftmul
 10311  03F6  0832               	movf	?___ftmul,w
 10312  03F7  1683               	bsf	3,5	;RP0=1, select bank1
 10313  03F8  00CB               	movwf	main@tmp_stepsto_turn^(0+128)
 10314  03F9  1283               	bcf	3,5	;RP0=0, select bank0
 10315  03FA  0833               	movf	?___ftmul+1,w
 10316  03FB  1683               	bsf	3,5	;RP0=1, select bank1
 10317  03FC  00CC               	movwf	(main@tmp_stepsto_turn+1)^(0+128)
 10318  03FD  1283               	bcf	3,5	;RP0=0, select bank0
 10319  03FE  0834               	movf	?___ftmul+2,w
 10320  03FF  1683               	bsf	3,5	;RP0=1, select bank1
 10321  0400  00CD               	movwf	(main@tmp_stepsto_turn+2)^(0+128)
 10322                           
 10323                           ;Automated Solar Panel Orientation Setter.c: 391: int stepsto_turn = (int)tmp_stepsto_tu
      +                          rn;
 10324  0401  084B               	movf	main@tmp_stepsto_turn^(0+128),w
 10325  0402  1283               	bcf	3,5	;RP0=0, select bank0
 10326  0403  00C1               	movwf	___fttol@f1
 10327  0404  1683               	bsf	3,5	;RP0=1, select bank1
 10328  0405  084C               	movf	(main@tmp_stepsto_turn+1)^(0+128),w
 10329  0406  1283               	bcf	3,5	;RP0=0, select bank0
 10330  0407  00C2               	movwf	___fttol@f1+1
 10331  0408  1683               	bsf	3,5	;RP0=1, select bank1
 10332  0409  084D               	movf	(main@tmp_stepsto_turn+2)^(0+128),w
 10333  040A  1283               	bcf	3,5	;RP0=0, select bank0
 10334  040B  00C3               	movwf	___fttol@f1+2
 10335  040C  120A  158A  2422  120A  118A  	fcall	___fttol
 10336  0411  0842               	movf	?___fttol+1,w
 10337  0412  1683               	bsf	3,5	;RP0=1, select bank1
 10338  0413  00CF               	movwf	(main@stepsto_turn+1)^(0+128)
 10339  0414  1283               	bcf	3,5	;RP0=0, select bank0
 10340  0415  0841               	movf	?___fttol,w
 10341  0416  1683               	bsf	3,5	;RP0=1, select bank1
 10342  0417  00CE               	movwf	main@stepsto_turn^(0+128)
 10343  0418                     l6727:	
 10344                           ;Automated Solar Panel Orientation Setter.c: 392: while( !(sterpper_counts == stepsto_tu
      +                          rn)){
 10345                           
 10346  0418  1683               	bsf	3,5	;RP0=1, select bank1
 10347  0419  0844               	movf	(_sterpper_counts+1)^(0+128),w
 10348  041A  064F               	xorwf	(main@stepsto_turn+1)^(0+128),w
 10349  041B  1D03               	skipz
 10350  041C  2C1F               	goto	u8495
 10351  041D  0843               	movf	_sterpper_counts^(0+128),w
 10352  041E  064E               	xorwf	main@stepsto_turn^(0+128),w
 10353  041F                     u8495:	
 10354  041F  1903               	btfsc	3,2
 10355  0420  2C3D               	goto	l6729
 10356                           
 10357                           ;Automated Solar Panel Orientation Setter.c: 393: if( stepsto_turn > sterpper_counts ){
 10358  0421  084F               	movf	(main@stepsto_turn+1)^(0+128),w
 10359  0422  0244               	subwf	(_sterpper_counts+1)^(0+128),w
 10360  0423  1D03               	skipz
 10361  0424  2C27               	goto	u8485
 10362  0425  084E               	movf	main@stepsto_turn^(0+128),w
 10363  0426  0243               	subwf	_sterpper_counts^(0+128),w
 10364  0427                     u8485:	
 10365  0427  1803               	skipnc
 10366  0428  2C33               	goto	l6725
 10367                           
 10368                           ;Automated Solar Panel Orientation Setter.c: 394: RotateMotorLeft(1);
 10369  0429  1283               	bcf	3,5	;RP0=0, select bank0
 10370  042A  01A5               	clrf	RotateMotorLeft@value
 10371  042B  0AA5               	incf	RotateMotorLeft@value,f
 10372  042C  01A6               	clrf	RotateMotorLeft@value+1
 10373  042D  160A  158A  2443  120A  118A  	fcall	_RotateMotorLeft
 10374                           
 10375                           ;Automated Solar Panel Orientation Setter.c: 395: }
 10376  0432  2C18               	goto	l6727
 10377  0433                     l6725:	
 10378                           
 10379                           ;Automated Solar Panel Orientation Setter.c: 396: else{
 10380                           ;Automated Solar Panel Orientation Setter.c: 397: RotateMotorRight(1);
 10381  0433  1283               	bcf	3,5	;RP0=0, select bank0
 10382  0434  01A5               	clrf	RotateMotorRight@value
 10383  0435  0AA5               	incf	RotateMotorRight@value,f
 10384  0436  01A6               	clrf	RotateMotorRight@value+1
 10385  0437  160A  158A  248F  120A  118A  	fcall	_RotateMotorRight
 10386  043C  2C18               	goto	l6727
 10387  043D                     l6729:	
 10388                           
 10389                           ;Automated Solar Panel Orientation Setter.c: 398: }
 10390                           ;Automated Solar Panel Orientation Setter.c: 399: }
 10391                           ;Automated Solar Panel Orientation Setter.c: 400: }
 10392                           ;Automated Solar Panel Orientation Setter.c: 406: CheckMode();
 10393  043D  120A  158A  200F  120A  118A  	fcall	_CheckMode
 10394                           
 10395                           ;Automated Solar Panel Orientation Setter.c: 410: break;
 10396  0442  2F8E               	goto	l6933
 10397  0443                     l6731:	
 10398  0443  3001               	movlw	1
 10399                           
 10400                           ;Automated Solar Panel Orientation Setter.c: 414: position(1,1);
 10401  0444  01A6               	clrf	position@collum
 10402  0445  0AA6               	incf	position@collum,f
 10403  0446  160A  118A  22DF  120A  118A  	fcall	_position
 10404                           
 10405                           ;Automated Solar Panel Orientation Setter.c: 415: printf("MODE3,000D,00:00");
 10406  044B  308C               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
 10407  044C  160A  118A  20DC  120A  118A  	fcall	_printf
 10408  0451  3002               	movlw	2
 10409                           
 10410                           ;Automated Solar Panel Orientation Setter.c: 416: position(2,1);
 10411  0452  01A6               	clrf	position@collum
 10412  0453  0AA6               	incf	position@collum,f
 10413  0454  160A  118A  22DF  120A  118A  	fcall	_position
 10414                           
 10415                           ;Automated Solar Panel Orientation Setter.c: 417: printf("00.0V,0.0A,00.0W");
 10416  0459  309D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
 10417  045A  160A  118A  20DC  120A  118A  	fcall	_printf
 10418                           
 10419                           ;Automated Solar Panel Orientation Setter.c: 418: LCDTimeUpdate();
 10420  045F  160A  118A  2123  120A  118A  	fcall	_LCDTimeUpdate
 10421                           
 10422                           ;Automated Solar Panel Orientation Setter.c: 422: state = 30;
 10423  0464  301E               	movlw	30
 10424  0465  2E78               	goto	L4
 10425  0466                     l6741:	
 10426                           ;Automated Solar Panel Orientation Setter.c: 423: break;
 10427                           
 10428                           
 10429                           ;Automated Solar Panel Orientation Setter.c: 426: a2d_read();
 10430  0466  120A  158A  22DB  120A  118A  	fcall	_a2d_read
 10431                           
 10432                           ;Automated Solar Panel Orientation Setter.c: 427: Serial_Print_Int(ldr1);
 10433  046B  1683               	bsf	3,5	;RP0=1, select bank1
 10434  046C  083C               	movf	(_ldr1+1)^(0+128),w
 10435  046D  1283               	bcf	3,5	;RP0=0, select bank0
 10436  046E  00B4               	movwf	Serial_Print_Int@val+1
 10437  046F  1683               	bsf	3,5	;RP0=1, select bank1
 10438  0470  083B               	movf	_ldr1^(0+128),w
 10439  0471  1283               	bcf	3,5	;RP0=0, select bank0
 10440  0472  00B3               	movwf	Serial_Print_Int@val
 10441  0473  120A  158A  24CF  120A  118A  	fcall	_Serial_Print_Int
 10442                           
 10443                           ;Automated Solar Panel Orientation Setter.c: 428: Serial_Print(", ");
 10444  0478  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10445  0479  120A  158A  2244  120A  118A  	fcall	_Serial_Print
 10446                           
 10447                           ;Automated Solar Panel Orientation Setter.c: 429: Serial_Print_Int(ldr2);
 10448  047E  0856               	movf	_ldr2+1,w
 10449  047F  00B4               	movwf	Serial_Print_Int@val+1
 10450  0480  0855               	movf	_ldr2,w
 10451  0481  00B3               	movwf	Serial_Print_Int@val
 10452  0482  120A  158A  24CF  120A  118A  	fcall	_Serial_Print_Int
 10453                           
 10454                           ;Automated Solar Panel Orientation Setter.c: 430: Serial_Print(", ");
 10455  0487  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10456  0488  120A  158A  2244  120A  118A  	fcall	_Serial_Print
 10457                           
 10458                           ;Automated Solar Panel Orientation Setter.c: 431: Serial_Print_Int(V_Bat);
 10459  048D  1683               	bsf	3,5	;RP0=1, select bank1
 10460  048E  084A               	movf	(_V_Bat+1)^(0+128),w
 10461  048F  1283               	bcf	3,5	;RP0=0, select bank0
 10462  0490  00B4               	movwf	Serial_Print_Int@val+1
 10463  0491  1683               	bsf	3,5	;RP0=1, select bank1
 10464  0492  0849               	movf	_V_Bat^(0+128),w
 10465  0493  1283               	bcf	3,5	;RP0=0, select bank0
 10466  0494  00B3               	movwf	Serial_Print_Int@val
 10467  0495  120A  158A  24CF  120A  118A  	fcall	_Serial_Print_Int
 10468                           
 10469                           ;Automated Solar Panel Orientation Setter.c: 432: Serial_Print(", ");
 10470  049A  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10471  049B  120A  158A  2244  120A  118A  	fcall	_Serial_Print
 10472                           
 10473                           ;Automated Solar Panel Orientation Setter.c: 433: Serial_Print_Int(C_Bat);
 10474  04A0  1683               	bsf	3,5	;RP0=1, select bank1
 10475  04A1  0848               	movf	(_C_Bat+1)^(0+128),w
 10476  04A2  1283               	bcf	3,5	;RP0=0, select bank0
 10477  04A3  00B4               	movwf	Serial_Print_Int@val+1
 10478  04A4  1683               	bsf	3,5	;RP0=1, select bank1
 10479  04A5  0847               	movf	_C_Bat^(0+128),w
 10480  04A6  1283               	bcf	3,5	;RP0=0, select bank0
 10481  04A7  00B3               	movwf	Serial_Print_Int@val
 10482  04A8  120A  158A  24CF  120A  118A  	fcall	_Serial_Print_Int
 10483                           
 10484                           ;Automated Solar Panel Orientation Setter.c: 434: Serial_Print(", ");
 10485  04AD  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10486  04AE  120A  158A  2244  120A  118A  	fcall	_Serial_Print
 10487                           
 10488                           ;Automated Solar Panel Orientation Setter.c: 435: Serial_NewLine();
 10489  04B3  160A  158A  22E3  120A  118A  	fcall	_Serial_NewLine
 10490                           
 10491                           ;Automated Solar Panel Orientation Setter.c: 436: _delay((unsigned long)((50)*(4000000/4
      +                          000.0)));
 10492  04B8  3041               	movlw	65
 10493  04B9  1283               	bcf	3,5	;RP0=0, select bank0
 10494  04BA  1303               	bcf	3,6	;RP1=0, select bank0
 10495  04BB  00CF               	movwf	??_main+1
 10496  04BC  30EE               	movlw	238
 10497  04BD  00CE               	movwf	??_main
 10498  04BE                     u8607:	
 10499  04BE  0BCE               	decfsz	??_main,f
 10500  04BF  2CBE               	goto	u8607
 10501  04C0  0BCF               	decfsz	??_main+1,f
 10502  04C1  2CBE               	goto	u8607
 10503  04C2  0000               	nop
 10504                           
 10505                           ;Automated Solar Panel Orientation Setter.c: 437: nop();
 10506  04C3  120A  158A  209F  120A  118A  	fcall	_nop
 10507                           
 10508                           ;Automated Solar Panel Orientation Setter.c: 440: double tmp_angle_display = (double)(st
      +                          erpper_counts/0.55);
 10509  04C8  30CD               	movlw	205
 10510  04C9  00B0               	movwf	___ftdiv@f2
 10511  04CA  300C               	movlw	12
 10512  04CB  00B1               	movwf	___ftdiv@f2+1
 10513  04CC  303F               	movlw	63
 10514  04CD  00B2               	movwf	___ftdiv@f2+2
 10515  04CE  1683               	bsf	3,5	;RP0=1, select bank1
 10516  04CF  0844               	movf	(_sterpper_counts+1)^(0+128),w
 10517  04D0  1283               	bcf	3,5	;RP0=0, select bank0
 10518  04D1  00AE               	movwf	___lwtoft@c+1
 10519  04D2  1683               	bsf	3,5	;RP0=1, select bank1
 10520  04D3  0843               	movf	_sterpper_counts^(0+128),w
 10521  04D4  1283               	bcf	3,5	;RP0=0, select bank0
 10522  04D5  00AD               	movwf	___lwtoft@c
 10523  04D6  120A  158A  247D  120A  118A  	fcall	___lwtoft
 10524  04DB  082D               	movf	?___lwtoft,w
 10525  04DC  00B3               	movwf	___ftdiv@f1
 10526  04DD  082E               	movf	?___lwtoft+1,w
 10527  04DE  00B4               	movwf	___ftdiv@f1+1
 10528  04DF  082F               	movf	?___lwtoft+2,w
 10529  04E0  00B5               	movwf	___ftdiv@f1+2
 10530  04E1  120A  158A  2273  120A  118A  	fcall	___ftdiv
 10531  04E6  0830               	movf	?___ftdiv,w
 10532  04E7  1683               	bsf	3,5	;RP0=1, select bank1
 10533  04E8  00D4               	movwf	main@tmp_angle_display^(0+128)
 10534  04E9  1283               	bcf	3,5	;RP0=0, select bank0
 10535  04EA  0831               	movf	?___ftdiv+1,w
 10536  04EB  1683               	bsf	3,5	;RP0=1, select bank1
 10537  04EC  00D5               	movwf	(main@tmp_angle_display+1)^(0+128)
 10538  04ED  1283               	bcf	3,5	;RP0=0, select bank0
 10539  04EE  0832               	movf	?___ftdiv+2,w
 10540  04EF  1683               	bsf	3,5	;RP0=1, select bank1
 10541  04F0  00D6               	movwf	(main@tmp_angle_display+2)^(0+128)
 10542                           
 10543                           ;Automated Solar Panel Orientation Setter.c: 441: int angle_display = (int)tmp_angle_dis
      +                          play;
 10544  04F1  0854               	movf	main@tmp_angle_display^(0+128),w
 10545  04F2  1283               	bcf	3,5	;RP0=0, select bank0
 10546  04F3  00C1               	movwf	___fttol@f1
 10547  04F4  1683               	bsf	3,5	;RP0=1, select bank1
 10548  04F5  0855               	movf	(main@tmp_angle_display+1)^(0+128),w
 10549  04F6  1283               	bcf	3,5	;RP0=0, select bank0
 10550  04F7  00C2               	movwf	___fttol@f1+1
 10551  04F8  1683               	bsf	3,5	;RP0=1, select bank1
 10552  04F9  0856               	movf	(main@tmp_angle_display+2)^(0+128),w
 10553  04FA  1283               	bcf	3,5	;RP0=0, select bank0
 10554  04FB  00C3               	movwf	___fttol@f1+2
 10555  04FC  120A  158A  2422  120A  118A  	fcall	___fttol
 10556  0501  0842               	movf	?___fttol+1,w
 10557  0502  1683               	bsf	3,5	;RP0=1, select bank1
 10558  0503  00E0               	movwf	(main@angle_display+1)^(0+128)
 10559  0504  1283               	bcf	3,5	;RP0=0, select bank0
 10560  0505  0841               	movf	?___fttol,w
 10561  0506  1683               	bsf	3,5	;RP0=1, select bank1
 10562  0507  00DF               	movwf	main@angle_display^(0+128)
 10563                           
 10564                           ;Automated Solar Panel Orientation Setter.c: 443: LCD_print_char(1,7,angle_display/100+4
      +                          8);
 10565  0508  1283               	bcf	3,5	;RP0=0, select bank0
 10566  0509  3007               	movlw	7
 10567  050A  01B3               	clrf	LCD_print_char@row
 10568  050B  0AB3               	incf	LCD_print_char@row,f
 10569  050C  01B4               	clrf	LCD_print_char@row+1
 10570  050D  00B5               	movwf	LCD_print_char@column
 10571  050E  3064               	movlw	100
 10572  050F  01B6               	clrf	LCD_print_char@column+1
 10573  0510  00AB               	movwf	___awdiv@divisor
 10574  0511  01AC               	clrf	___awdiv@divisor+1
 10575  0512  1683               	bsf	3,5	;RP0=1, select bank1
 10576  0513  0860               	movf	(main@angle_display+1)^(0+128),w
 10577  0514  1283               	bcf	3,5	;RP0=0, select bank0
 10578  0515  00AE               	movwf	___awdiv@dividend+1
 10579  0516  1683               	bsf	3,5	;RP0=1, select bank1
 10580  0517  085F               	movf	main@angle_display^(0+128),w
 10581  0518  1283               	bcf	3,5	;RP0=0, select bank0
 10582  0519  00AD               	movwf	___awdiv@dividend
 10583  051A  120A  158A  2717  120A  118A  	fcall	___awdiv
 10584  051F  082B               	movf	?___awdiv,w
 10585  0520  3E30               	addlw	48
 10586  0521  00B7               	movwf	LCD_print_char@print_value
 10587  0522  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10588                           
 10589                           ;Automated Solar Panel Orientation Setter.c: 444: LCD_print_char(1,8,angle_display%100/1
      +                          0+48);
 10590  0527  1283               	bcf	3,5	;RP0=0, select bank0
 10591  0528  1303               	bcf	3,6	;RP1=0, select bank0
 10592  0529  3008               	movlw	8
 10593  052A  01B3               	clrf	LCD_print_char@row
 10594  052B  0AB3               	incf	LCD_print_char@row,f
 10595  052C  01B4               	clrf	LCD_print_char@row+1
 10596  052D  00B5               	movwf	LCD_print_char@column
 10597  052E  300A               	movlw	10
 10598  052F  01B6               	clrf	LCD_print_char@column+1
 10599  0530  00AB               	movwf	___awdiv@divisor
 10600  0531  01AC               	clrf	___awdiv@divisor+1
 10601  0532  1683               	bsf	3,5	;RP0=1, select bank1
 10602  0533  0860               	movf	(main@angle_display+1)^(0+128),w
 10603  0534  1283               	bcf	3,5	;RP0=0, select bank0
 10604  0535  00A8               	movwf	___awmod@dividend+1
 10605  0536  1683               	bsf	3,5	;RP0=1, select bank1
 10606  0537  085F               	movf	main@angle_display^(0+128),w
 10607  0538  1283               	bcf	3,5	;RP0=0, select bank0
 10608  0539  00A7               	movwf	___awmod@dividend
 10609  053A  3064               	movlw	100
 10610  053B  00A5               	movwf	___awmod@divisor
 10611  053C  01A6               	clrf	___awmod@divisor+1
 10612  053D  120A  158A  275C  120A  118A  	fcall	___awmod
 10613  0542  0826               	movf	?___awmod+1,w
 10614  0543  00AE               	movwf	___awdiv@dividend+1
 10615  0544  0825               	movf	?___awmod,w
 10616  0545  00AD               	movwf	___awdiv@dividend
 10617  0546  120A  158A  2717  120A  118A  	fcall	___awdiv
 10618  054B  082B               	movf	?___awdiv,w
 10619  054C  3E30               	addlw	48
 10620  054D  00B7               	movwf	LCD_print_char@print_value
 10621  054E  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10622                           
 10623                           ;Automated Solar Panel Orientation Setter.c: 445: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
 10624  0553  1683               	bsf	3,5	;RP0=1, select bank1
 10625  0554  1303               	bcf	3,6	;RP1=0, select bank1
 10626  0555  0860               	movf	(main@angle_display+1)^(0+128),w
 10627  0556  1283               	bcf	3,5	;RP0=0, select bank0
 10628  0557  00A8               	movwf	___awmod@dividend+1
 10629  0558  1683               	bsf	3,5	;RP0=1, select bank1
 10630  0559  085F               	movf	main@angle_display^(0+128),w
 10631  055A  1283               	bcf	3,5	;RP0=0, select bank0
 10632  055B  00A7               	movwf	___awmod@dividend
 10633  055C  3064               	movlw	100
 10634  055D  00A5               	movwf	___awmod@divisor
 10635  055E  01A6               	clrf	___awmod@divisor+1
 10636  055F  120A  158A  275C  120A  118A  	fcall	___awmod
 10637  0564  0826               	movf	?___awmod+1,w
 10638  0565  1683               	bsf	3,5	;RP0=1, select bank1
 10639  0566  00DC               	movwf	(_main$814+1)^(0+128)
 10640  0567  1283               	bcf	3,5	;RP0=0, select bank0
 10641  0568  0825               	movf	?___awmod,w
 10642  0569  1683               	bsf	3,5	;RP0=1, select bank1
 10643  056A  00DB               	movwf	_main$814^(0+128)
 10644                           
 10645                           ;Automated Solar Panel Orientation Setter.c: 445: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
 10646  056B  1283               	bcf	3,5	;RP0=0, select bank0
 10647  056C  3009               	movlw	9
 10648  056D  01B3               	clrf	LCD_print_char@row
 10649  056E  0AB3               	incf	LCD_print_char@row,f
 10650  056F  01B4               	clrf	LCD_print_char@row+1
 10651  0570  00B5               	movwf	LCD_print_char@column
 10652  0571  300A               	movlw	10
 10653  0572  01B6               	clrf	LCD_print_char@column+1
 10654  0573  00A5               	movwf	___awmod@divisor
 10655  0574  01A6               	clrf	___awmod@divisor+1
 10656  0575  1683               	bsf	3,5	;RP0=1, select bank1
 10657  0576  085C               	movf	(_main$814+1)^(0+128),w
 10658  0577  1283               	bcf	3,5	;RP0=0, select bank0
 10659  0578  00A8               	movwf	___awmod@dividend+1
 10660  0579  1683               	bsf	3,5	;RP0=1, select bank1
 10661  057A  085B               	movf	_main$814^(0+128),w
 10662  057B  1283               	bcf	3,5	;RP0=0, select bank0
 10663  057C  00A7               	movwf	___awmod@dividend
 10664  057D  120A  158A  275C  120A  118A  	fcall	___awmod
 10665  0582  0825               	movf	?___awmod,w
 10666  0583  3E30               	addlw	48
 10667  0584  00B7               	movwf	LCD_print_char@print_value
 10668  0585  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10669                           
 10670                           ;Automated Solar Panel Orientation Setter.c: 448: LCD_print_char(2,1,V_Bat2/10+48);
 10671  058A  3002               	movlw	2
 10672  058B  1283               	bcf	3,5	;RP0=0, select bank0
 10673  058C  1303               	bcf	3,6	;RP1=0, select bank0
 10674  058D  00B3               	movwf	LCD_print_char@row
 10675  058E  300A               	movlw	10
 10676  058F  01B4               	clrf	LCD_print_char@row+1
 10677  0590  01B5               	clrf	LCD_print_char@column
 10678  0591  0AB5               	incf	LCD_print_char@column,f
 10679  0592  01B6               	clrf	LCD_print_char@column+1
 10680  0593  00A5               	movwf	___ltdiv@divisor
 10681  0594  01A6               	clrf	___ltdiv@divisor+1
 10682  0595  01A7               	clrf	___ltdiv@divisor+2
 10683  0596  1683               	bsf	3,5	;RP0=1, select bank1
 10684  0597  0834               	movf	_V_Bat2^(0+128),w
 10685  0598  1283               	bcf	3,5	;RP0=0, select bank0
 10686  0599  00A8               	movwf	___ltdiv@dividend
 10687  059A  1683               	bsf	3,5	;RP0=1, select bank1
 10688  059B  0835               	movf	(_V_Bat2+1)^(0+128),w
 10689  059C  1283               	bcf	3,5	;RP0=0, select bank0
 10690  059D  00A9               	movwf	___ltdiv@dividend+1
 10691  059E  1683               	bsf	3,5	;RP0=1, select bank1
 10692  059F  0836               	movf	(_V_Bat2+2)^(0+128),w
 10693  05A0  1283               	bcf	3,5	;RP0=0, select bank0
 10694  05A1  00AA               	movwf	___ltdiv@dividend+2
 10695  05A2  160A  158A  2362  120A  118A  	fcall	___ltdiv
 10696  05A7  0825               	movf	?___ltdiv,w
 10697  05A8  3E30               	addlw	48
 10698  05A9  00B7               	movwf	LCD_print_char@print_value
 10699  05AA  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10700                           
 10701                           ;Automated Solar Panel Orientation Setter.c: 449: LCD_print_char(2,2,V_Bat2%10+48);
 10702  05AF  3002               	movlw	2
 10703  05B0  1283               	bcf	3,5	;RP0=0, select bank0
 10704  05B1  1303               	bcf	3,6	;RP1=0, select bank0
 10705  05B2  00B3               	movwf	LCD_print_char@row
 10706  05B3  01B4               	clrf	LCD_print_char@row+1
 10707  05B4  00B5               	movwf	LCD_print_char@column
 10708  05B5  300A               	movlw	10
 10709  05B6  01B6               	clrf	LCD_print_char@column+1
 10710  05B7  00A5               	movwf	___ltmod@divisor
 10711  05B8  01A6               	clrf	___ltmod@divisor+1
 10712  05B9  01A7               	clrf	___ltmod@divisor+2
 10713  05BA  1683               	bsf	3,5	;RP0=1, select bank1
 10714  05BB  0834               	movf	_V_Bat2^(0+128),w
 10715  05BC  1283               	bcf	3,5	;RP0=0, select bank0
 10716  05BD  00A8               	movwf	___ltmod@dividend
 10717  05BE  1683               	bsf	3,5	;RP0=1, select bank1
 10718  05BF  0835               	movf	(_V_Bat2+1)^(0+128),w
 10719  05C0  1283               	bcf	3,5	;RP0=0, select bank0
 10720  05C1  00A9               	movwf	___ltmod@dividend+1
 10721  05C2  1683               	bsf	3,5	;RP0=1, select bank1
 10722  05C3  0836               	movf	(_V_Bat2+2)^(0+128),w
 10723  05C4  1283               	bcf	3,5	;RP0=0, select bank0
 10724  05C5  00AA               	movwf	___ltmod@dividend+2
 10725  05C6  160A  158A  2331  120A  118A  	fcall	___ltmod
 10726  05CB  0825               	movf	?___ltmod,w
 10727  05CC  3E30               	addlw	48
 10728  05CD  00B7               	movwf	LCD_print_char@print_value
 10729  05CE  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10730                           
 10731                           ;Automated Solar Panel Orientation Setter.c: 450: LCD_print_char(2,4,'0');
 10732  05D3  3002               	movlw	2
 10733  05D4  1283               	bcf	3,5	;RP0=0, select bank0
 10734  05D5  1303               	bcf	3,6	;RP1=0, select bank0
 10735  05D6  00B3               	movwf	LCD_print_char@row
 10736  05D7  3004               	movlw	4
 10737  05D8  01B4               	clrf	LCD_print_char@row+1
 10738  05D9  00B5               	movwf	LCD_print_char@column
 10739  05DA  3030               	movlw	48
 10740  05DB  01B6               	clrf	LCD_print_char@column+1
 10741  05DC  00B7               	movwf	LCD_print_char@print_value
 10742  05DD  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10743                           
 10744                           ;Automated Solar Panel Orientation Setter.c: 453: LCD_print_char(2,7,'0');
 10745  05E2  3002               	movlw	2
 10746  05E3  1283               	bcf	3,5	;RP0=0, select bank0
 10747  05E4  1303               	bcf	3,6	;RP1=0, select bank0
 10748  05E5  00B3               	movwf	LCD_print_char@row
 10749  05E6  3007               	movlw	7
 10750  05E7  01B4               	clrf	LCD_print_char@row+1
 10751  05E8  00B5               	movwf	LCD_print_char@column
 10752  05E9  3030               	movlw	48
 10753  05EA  01B6               	clrf	LCD_print_char@column+1
 10754  05EB  00B7               	movwf	LCD_print_char@print_value
 10755  05EC  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10756                           
 10757                           ;Automated Solar Panel Orientation Setter.c: 454: LCD_print_char(2,9,'0');
 10758  05F1  3002               	movlw	2
 10759  05F2  1283               	bcf	3,5	;RP0=0, select bank0
 10760  05F3  1303               	bcf	3,6	;RP1=0, select bank0
 10761  05F4  00B3               	movwf	LCD_print_char@row
 10762  05F5  3009               	movlw	9
 10763  05F6  01B4               	clrf	LCD_print_char@row+1
 10764  05F7  00B5               	movwf	LCD_print_char@column
 10765  05F8  3030               	movlw	48
 10766  05F9  01B6               	clrf	LCD_print_char@column+1
 10767  05FA  00B7               	movwf	LCD_print_char@print_value
 10768  05FB  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10769                           
 10770                           ;Automated Solar Panel Orientation Setter.c: 457: LCD_print_char(2,12,'0');
 10771  0600  3002               	movlw	2
 10772  0601  1283               	bcf	3,5	;RP0=0, select bank0
 10773  0602  1303               	bcf	3,6	;RP1=0, select bank0
 10774  0603  00B3               	movwf	LCD_print_char@row
 10775  0604  300C               	movlw	12
 10776  0605  01B4               	clrf	LCD_print_char@row+1
 10777  0606  00B5               	movwf	LCD_print_char@column
 10778  0607  3030               	movlw	48
 10779  0608  01B6               	clrf	LCD_print_char@column+1
 10780  0609  00B7               	movwf	LCD_print_char@print_value
 10781  060A  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10782                           
 10783                           ;Automated Solar Panel Orientation Setter.c: 458: LCD_print_char(2,13,'0');
 10784  060F  3002               	movlw	2
 10785  0610  1283               	bcf	3,5	;RP0=0, select bank0
 10786  0611  1303               	bcf	3,6	;RP1=0, select bank0
 10787  0612  00B3               	movwf	LCD_print_char@row
 10788  0613  300D               	movlw	13
 10789  0614  01B4               	clrf	LCD_print_char@row+1
 10790  0615  00B5               	movwf	LCD_print_char@column
 10791  0616  3030               	movlw	48
 10792  0617  01B6               	clrf	LCD_print_char@column+1
 10793  0618  00B7               	movwf	LCD_print_char@print_value
 10794  0619  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10795                           
 10796                           ;Automated Solar Panel Orientation Setter.c: 459: LCD_print_char(2,15,'0');
 10797  061E  3002               	movlw	2
 10798  061F  1283               	bcf	3,5	;RP0=0, select bank0
 10799  0620  1303               	bcf	3,6	;RP1=0, select bank0
 10800  0621  00B3               	movwf	LCD_print_char@row
 10801  0622  300F               	movlw	15
 10802  0623  01B4               	clrf	LCD_print_char@row+1
 10803  0624  00B5               	movwf	LCD_print_char@column
 10804  0625  3030               	movlw	48
 10805  0626  01B6               	clrf	LCD_print_char@column+1
 10806  0627  00B7               	movwf	LCD_print_char@print_value
 10807  0628  160A  118A  21B6  120A  118A  	fcall	_LCD_print_char
 10808                           
 10809                           ;Automated Solar Panel Orientation Setter.c: 467: pressedKey = CheckKeyPad();
 10810  062D  120A  158A  20A4  120A  118A  	fcall	_CheckKeyPad
 10811  0632  1683               	bsf	3,5	;RP0=1, select bank1
 10812  0633  00E1               	movwf	main@pressedKey^(0+128)
 10813                           
 10814                           ;Automated Solar Panel Orientation Setter.c: 468: if(pressedKey == 'A'){
 10815  0634  3A41               	xorlw	65
 10816  0635  1D03               	btfss	3,2
 10817  0636  2E41               	goto	l6797
 10818                           
 10819                           ;Automated Solar Panel Orientation Setter.c: 469: RotateMotorLeft(1);
 10820  0637  1283               	bcf	3,5	;RP0=0, select bank0
 10821  0638  01A5               	clrf	RotateMotorLeft@value
 10822  0639  0AA5               	incf	RotateMotorLeft@value,f
 10823  063A  01A6               	clrf	RotateMotorLeft@value+1
 10824  063B  160A  158A  2443  120A  118A  	fcall	_RotateMotorLeft
 10825                           
 10826                           ;Automated Solar Panel Orientation Setter.c: 470: }
 10827  0640  2F8E               	goto	l6933
 10828  0641                     l6797:	
 10829                           
 10830                           ;Automated Solar Panel Orientation Setter.c: 471: else if(pressedKey == 'B'){
 10831  0641  3042               	movlw	66
 10832  0642  0661               	xorwf	main@pressedKey^(0+128),w
 10833  0643  1D03               	btfss	3,2
 10834  0644  2E4F               	goto	l6801
 10835                           
 10836                           ;Automated Solar Panel Orientation Setter.c: 472: RotateMotorRight(1);
 10837  0645  1283               	bcf	3,5	;RP0=0, select bank0
 10838  0646  01A5               	clrf	RotateMotorRight@value
 10839  0647  0AA5               	incf	RotateMotorRight@value,f
 10840  0648  01A6               	clrf	RotateMotorRight@value+1
 10841  0649  160A  158A  248F  120A  118A  	fcall	_RotateMotorRight
 10842                           
 10843                           ;Automated Solar Panel Orientation Setter.c: 473: }
 10844  064E  2F8E               	goto	l6933
 10845  064F                     l6801:	
 10846                           
 10847                           ;Automated Solar Panel Orientation Setter.c: 474: else if (pressedKey == '*'){
 10848  064F  302A               	movlw	42
 10849  0650  0661               	xorwf	main@pressedKey^(0+128),w
 10850  0651  1D03               	btfss	3,2
 10851  0652  2F8E               	goto	l6933
 10852                           
 10853                           ;Automated Solar Panel Orientation Setter.c: 475: state = 4;
 10854  0653  3004               	movlw	4
 10855  0654  1283               	bcf	3,5	;RP0=0, select bank0
 10856  0655  2F8D               	goto	L1
 10857  0656                     l6805:	
 10858  0656  3001               	movlw	1
 10859                           
 10860                           ;Automated Solar Panel Orientation Setter.c: 484: position(1,1);
 10861  0657  01A6               	clrf	position@collum
 10862  0658  0AA6               	incf	position@collum,f
 10863  0659  160A  118A  22DF  120A  118A  	fcall	_position
 10864                           
 10865                           ;Automated Solar Panel Orientation Setter.c: 485: printf("MODE*,000D,00:00");
 10866  065E  3059               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
 10867  065F  160A  118A  20DC  120A  118A  	fcall	_printf
 10868  0664  3002               	movlw	2
 10869                           
 10870                           ;Automated Solar Panel Orientation Setter.c: 486: position(2,1);
 10871  0665  01A6               	clrf	position@collum
 10872  0666  0AA6               	incf	position@collum,f
 10873  0667  160A  118A  22DF  120A  118A  	fcall	_position
 10874                           
 10875                           ;Automated Solar Panel Orientation Setter.c: 487: printf("00.0V,0.0A,00.0W");
 10876  066C  309D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
 10877  066D  160A  118A  20DC  120A  118A  	fcall	_printf
 10878                           
 10879                           ;Automated Solar Panel Orientation Setter.c: 488: LCDTimeUpdate();
 10880  0672  160A  118A  2123  120A  118A  	fcall	_LCDTimeUpdate
 10881                           
 10882                           ;Automated Solar Panel Orientation Setter.c: 489: state = 40;
 10883  0677  3028               	movlw	40
 10884  0678                     L4:	
 10885  0678  1283               	bcf	3,5	;RP0=0, select bank0
 10886  0679  1303               	bcf	3,6	;RP1=0, select bank0
 10887  067A  2F8D               	goto	L1
 10888  067B                     l6815:	
 10889                           ;Automated Solar Panel Orientation Setter.c: 490: break;
 10890                           
 10891                           
 10892                           ;Automated Solar Panel Orientation Setter.c: 493: pressedKey = CheckKeyPad();
 10893  067B  120A  158A  20A4  120A  118A  	fcall	_CheckKeyPad
 10894  0680  1683               	bsf	3,5	;RP0=1, select bank1
 10895  0681  00E1               	movwf	main@pressedKey^(0+128)
 10896                           
 10897                           ;Automated Solar Panel Orientation Setter.c: 494: if( pressedKey=='*' ){
 10898  0682  3A2A               	xorlw	42
 10899  0683  1D03               	btfss	3,2
 10900  0684  2F5C               	goto	l6907
 10901                           
 10902                           ;Automated Solar Panel Orientation Setter.c: 495: currentMode++;
 10903  0685  0AB9               	incf	_currentMode^(0+128),f
 10904  0686  1903               	skipnz
 10905  0687  0ABA               	incf	(_currentMode+1)^(0+128),f
 10906                           
 10907                           ;Automated Solar Panel Orientation Setter.c: 496: if (currentMode>4) currentMode = 1;
 10908  0688  3000               	movlw	0
 10909  0689  023A               	subwf	(_currentMode+1)^(0+128),w
 10910  068A  3005               	movlw	5
 10911  068B  1903               	skipnz
 10912  068C  0239               	subwf	_currentMode^(0+128),w
 10913  068D  1C03               	skipc
 10914  068E  2E92               	goto	l6825
 10915  068F  01B9               	clrf	_currentMode^(0+128)
 10916  0690  0AB9               	incf	_currentMode^(0+128),f
 10917  0691  01BA               	clrf	(_currentMode+1)^(0+128)
 10918  0692                     l6825:	
 10919                           
 10920                           ;Automated Solar Panel Orientation Setter.c: 497: state = currentMode;
 10921  0692  0839               	movf	_currentMode^(0+128),w
 10922  0693  1283               	bcf	3,5	;RP0=0, select bank0
 10923  0694  00D8               	movwf	_state
 10924                           
 10925                           ;Automated Solar Panel Orientation Setter.c: 499: RC1 = 1;
 10926  0695  1487               	bsf	7,1	;volatile
 10927                           
 10928                           ;Automated Solar Panel Orientation Setter.c: 500: Serial_Print("Switched to Mode : ");
 10929  0696  3001               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
 10930  0697  120A  158A  2244  120A  118A  	fcall	_Serial_Print
 10931                           
 10932                           ;Automated Solar Panel Orientation Setter.c: 501: Serial_Println_Int((int)state);
 10933  069C  0858               	movf	_state,w
 10934  069D  00B3               	movwf	Serial_Println_Int@val
 10935  069E  01B4               	clrf	Serial_Println_Int@val+1
 10936  069F  120A  158A  25E8  120A  118A  	fcall	_Serial_Println_Int
 10937                           
 10938                           ;Automated Solar Panel Orientation Setter.c: 502: RC1 = 0;
 10939  06A4  1283               	bcf	3,5	;RP0=0, select bank0
 10940  06A5  1303               	bcf	3,6	;RP1=0, select bank0
 10941  06A6  1087               	bcf	7,1	;volatile
 10942                           
 10943                           ;Automated Solar Panel Orientation Setter.c: 504: ; nop();nop();nop();nop();nop();nop();
      +                          nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop(
      +                          );nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();no
      +                          p();;
 10944  06A7  120A  158A  209F  120A  118A  	fcall	_nop
 10945  06AC  120A  158A  209F  120A  118A  	fcall	_nop
 10946  06B1  120A  158A  209F  120A  118A  	fcall	_nop
 10947  06B6  120A  158A  209F  120A  118A  	fcall	_nop
 10948  06BB  120A  158A  209F  120A  118A  	fcall	_nop
 10949  06C0  120A  158A  209F  120A  118A  	fcall	_nop
 10950  06C5  120A  158A  209F  120A  118A  	fcall	_nop
 10951  06CA  120A  158A  209F  120A  118A  	fcall	_nop
 10952  06CF  120A  158A  209F  120A  118A  	fcall	_nop
 10953  06D4  120A  158A  209F  120A  118A  	fcall	_nop
 10954  06D9  120A  158A  209F  120A  118A  	fcall	_nop
 10955  06DE  120A  158A  209F  120A  118A  	fcall	_nop
 10956  06E3  120A  158A  209F  120A  118A  	fcall	_nop
 10957  06E8  120A  158A  209F  120A  118A  	fcall	_nop
 10958  06ED  120A  158A  209F  120A  118A  	fcall	_nop
 10959  06F2  120A  158A  209F  120A  118A  	fcall	_nop
 10960  06F7  120A  158A  209F  120A  118A  	fcall	_nop
 10961  06FC  120A  158A  209F  120A  118A  	fcall	_nop
 10962  0701  120A  158A  209F  120A  118A  	fcall	_nop
 10963  0706  120A  158A  209F  120A  118A  	fcall	_nop
 10964  070B  120A  158A  209F  120A  118A  	fcall	_nop
 10965  0710  120A  158A  209F  120A  118A  	fcall	_nop
 10966  0715  120A  158A  209F  120A  118A  	fcall	_nop
 10967  071A  120A  158A  209F  120A  118A  	fcall	_nop
 10968  071F  120A  158A  209F  120A  118A  	fcall	_nop
 10969  0724  120A  158A  209F  120A  118A  	fcall	_nop
 10970  0729  120A  158A  209F  120A  118A  	fcall	_nop
 10971  072E  120A  158A  209F  120A  118A  	fcall	_nop
 10972  0733  120A  158A  209F  120A  118A  	fcall	_nop
 10973  0738  120A  158A  209F  120A  118A  	fcall	_nop
 10974  073D  120A  158A  209F  120A  118A  	fcall	_nop
 10975  0742  120A  158A  209F  120A  118A  	fcall	_nop
 10976  0747  120A  158A  209F  120A  118A  	fcall	_nop
 10977  074C  120A  158A  209F  120A  118A  	fcall	_nop
 10978  0751  120A  158A  209F  120A  118A  	fcall	_nop
 10979  0756  120A  158A  209F  120A  118A  	fcall	_nop
 10980                           
 10981                           ;Automated Solar Panel Orientation Setter.c: 505: }
 10982  075B  2F8E               	goto	l6933
 10983  075C                     l6907:	
 10984                           
 10985                           ;Automated Solar Panel Orientation Setter.c: 509: else if(pressedKey=='C'){
 10986  075C  3043               	movlw	67
 10987  075D  0661               	xorwf	main@pressedKey^(0+128),w
 10988  075E  1D03               	btfss	3,2
 10989  075F  2F75               	goto	l6919
 10990                           
 10991                           ;Automated Solar Panel Orientation Setter.c: 511: RC1 = 1;
 10992  0760  1283               	bcf	3,5	;RP0=0, select bank0
 10993  0761  1487               	bsf	7,1	;volatile
 10994                           
 10995                           ;Automated Solar Panel Orientation Setter.c: 512: Serial_Print("Switched to Mode : ");
 10996  0762  3001               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
 10997  0763  120A  158A  2244  120A  118A  	fcall	_Serial_Print
 10998                           
 10999                           ;Automated Solar Panel Orientation Setter.c: 513: Serial_Println_Int((int)state);
 11000  0768  0858               	movf	_state,w
 11001  0769  00B3               	movwf	Serial_Println_Int@val
 11002  076A  01B4               	clrf	Serial_Println_Int@val+1
 11003  076B  120A  158A  25E8  120A  118A  	fcall	_Serial_Println_Int
 11004                           
 11005                           ;Automated Solar Panel Orientation Setter.c: 514: RC1 = 0;
 11006  0770  1283               	bcf	3,5	;RP0=0, select bank0
 11007  0771  1303               	bcf	3,6	;RP1=0, select bank0
 11008  0772  1087               	bcf	7,1	;volatile
 11009                           
 11010                           ;Automated Solar Panel Orientation Setter.c: 516: state = 96;
 11011  0773  3060               	movlw	96
 11012  0774  2F8D               	goto	L1
 11013  0775                     l6919:	
 11014                           ;Automated Solar Panel Orientation Setter.c: 517: }
 11015                           
 11016                           
 11017                           ;Automated Solar Panel Orientation Setter.c: 521: else if(pressedKey=='D'){
 11018  0775  3044               	movlw	68
 11019  0776  0661               	xorwf	main@pressedKey^(0+128),w
 11020  0777  1D03               	btfss	3,2
 11021  0778  2F8E               	goto	l6933
 11022                           
 11023                           ;Automated Solar Panel Orientation Setter.c: 523: RC1 = 1;
 11024  0779  1283               	bcf	3,5	;RP0=0, select bank0
 11025  077A  1487               	bsf	7,1	;volatile
 11026                           
 11027                           ;Automated Solar Panel Orientation Setter.c: 524: Serial_Print("Switched to Mode : ");
 11028  077B  3001               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
 11029  077C  120A  158A  2244  120A  118A  	fcall	_Serial_Print
 11030                           
 11031                           ;Automated Solar Panel Orientation Setter.c: 525: Serial_Println_Int((int)state);
 11032  0781  0858               	movf	_state,w
 11033  0782  00B3               	movwf	Serial_Println_Int@val
 11034  0783  01B4               	clrf	Serial_Println_Int@val+1
 11035  0784  120A  158A  25E8  120A  118A  	fcall	_Serial_Println_Int
 11036                           
 11037                           ;Automated Solar Panel Orientation Setter.c: 526: RC1 = 0;
 11038  0789  1283               	bcf	3,5	;RP0=0, select bank0
 11039  078A  1303               	bcf	3,6	;RP1=0, select bank0
 11040  078B  1087               	bcf	7,1	;volatile
 11041                           
 11042                           ;Automated Solar Panel Orientation Setter.c: 528: state = 95;
 11043  078C  305F               	movlw	95
 11044  078D                     L1:	
 11045  078D  00D8               	movwf	_state
 11046  078E                     l6933:	
 11047  078E  1283               	bcf	3,5	;RP0=0, select bank0
 11048  078F  1303               	bcf	3,6	;RP1=0, select bank0
 11049  0790  0858               	movf	_state,w
 11050                           
 11051                           ; Switch size 1, requested type "space"
 11052                           ; Number of cases is 18, Range of values is 0 to 96
 11053                           ; switch strategies available:
 11054                           ; Name         Instructions Cycles
 11055                           ; simple_byte           55    28 (average)
 11056                           ; jumptable            260     6 (fixed)
 11057                           ;	Chosen strategy is simple_byte
 11058  0791  3A00               	xorlw	0	; case 0
 11059  0792  1903               	skipnz
 11060  0793  2F8E               	goto	l6933
 11061  0794  3A01               	xorlw	1	; case 1
 11062  0795  120A  118A  1903   	skipnz
 11063  0798  28BA  120A  118A   	goto	l6443
 11064  079B  3A03               	xorlw	3	; case 2
 11065  079C  1903               	skipnz
 11066  079D  2FE1               	goto	L44
 11067  079E  3A01               	xorlw	1	; case 3
 11068  079F  1903               	skipnz
 11069  07A0  2FD8               	goto	L37
 11070  07A1  3A07               	xorlw	7	; case 4
 11071  07A2  1903               	skipnz
 11072  07A3  2FCF               	goto	L31
 11073  07A4  3A0E               	xorlw	14	; case 10
 11074  07A5  1903               	skipnz
 11075  07A6  2FE4               	goto	L46
 11076  07A7  3A1E               	xorlw	30	; case 20
 11077  07A8  1903               	skipnz
 11078  07A9  2A02               	goto	l6667
 11079  07AA  3A0A               	xorlw	10	; case 30
 11080  07AB  1903               	skipnz
 11081  07AC  2C66               	goto	l6741
 11082  07AD  3A36               	xorlw	54	; case 40
 11083  07AE  1903               	skipnz
 11084  07AF  2E7B               	goto	l6815
 11085  07B0  3A01               	xorlw	1	; case 41
 11086  07B1  1903               	skipnz
 11087  07B2  2FD2               	goto	L33
 11088  07B3  3A03               	xorlw	3	; case 42
 11089  07B4  1903               	skipnz
 11090  07B5  2FDB               	goto	L39
 11091  07B6  3A70               	xorlw	112	; case 90
 11092  07B7  1903               	skipnz
 11093  07B8  2F8E               	goto	l6933
 11094  07B9  3A01               	xorlw	1	; case 91
 11095  07BA  1903               	skipnz
 11096  07BB  2FE7               	goto	L48
 11097  07BC  3A07               	xorlw	7	; case 92
 11098  07BD  1903               	skipnz
 11099  07BE  29DA               	goto	l6657
 11100  07BF  3A01               	xorlw	1	; case 93
 11101  07C0  1903               	skipnz
 11102  07C1  2C43               	goto	l6731
 11103  07C2  3A03               	xorlw	3	; case 94
 11104  07C3  1903               	skipnz
 11105  07C4  2E56               	goto	l6805
 11106  07C5  3A01               	xorlw	1	; case 95
 11107  07C6  1903               	skipnz
 11108  07C7  2FD5               	goto	L35
 11109  07C8  3A3F               	xorlw	63	; case 96
 11110  07C9  1903               	skipnz
 11111  07CA  2FDE               	goto	L41
 11112  07CB  2F8E               	goto	l6933
 11113  07CC  120A  118A  2810   	ljmp	start
 11114  07CF                     L31:	
 11115  07CF                     __end_of_main:	
 11116  07CF  120A  118A  28C2   	ljmp	l6449
 11117  07D2                     L33:	
 11118  07D2  120A  118A  28E8   	ljmp	l486
 11119  07D5                     L35:	
 11120  07D5  120A  118A  28C4   	ljmp	l6451
 11121  07D8                     L37:	
 11122  07D8  120A  118A  28C0   	ljmp	l6447
 11123  07DB                     L39:	
 11124  07DB  160A  118A  2DAB   	ljmp	l504
 11125  07DE                     L41:	
 11126  07DE  160A  118A  2D85   	ljmp	l6515
 11127  07E1                     L44:	
 11128  07E1  120A  118A  28BE   	ljmp	l6445
 11129  07E4                     L46:	
 11130  07E4  160A  158A  2D2E   	ljmp	l6603
 11131  07E7                     L48:	
 11132  07E7  160A  158A  2D09   	ljmp	l6593


Data Sizes:
    Strings     176
    Constant    0
    Data        1
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     49      57
    BANK1            80     23      67
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_24(CODE[17]), STR_23(CODE[17]), STR_18(CODE[17]), STR_17(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    Serial_Print@a	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_28(CODE[20]), STR_27(CODE[20]), STR_26(CODE[20]), STR_25(CODE[20]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_LCD_print_char
    i1_LCDTimeUpdate->i1_LCD_print_char
    i1_LCD_print_char->i1___lwdiv
    i1_position->i1_lcd_add

Critical Paths under _main in BANK0

    _main->___fttol
    _printf->_putch
    _putch->_lcd_add
    _eeprom_write->___bmul
    _clr_display->_lcd_add
    _a2d_read->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    ___lbtoft->___ftpack
    ___ftdiv->___lwtoft
    _Serial_Print_Int->___awdiv
    _LCDTimeUpdate->_LCD_print_char
    _LCD_print_char->___awdiv
    _position->_lcd_add
    _CheckMode->_Serial_Println_Int
    _Serial_Println_Int->___awdiv
    ___awdiv->___awmod
    ___awdiv->___wmul
    _CheckKeyPad->_RowNo
    _Calculate->_RotateMotorRight

Critical Paths under _isr in BANK0

    _isr->i1_LCDTimeUpdate

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0  102975
                                             46 BANK0      3     3      0
                                              0 BANK1     23    23      0
                          _Calculate
                        _CheckKeyPad
                          _CheckMode
                      _LCDTimeUpdate
                     _LCD_print_char
                    _RotateMotorLeft
                   _RotateMotorRight
                        _Serial_Init
                     _Serial_NewLine
                       _Serial_Print
                   _Serial_Print_Int
                 _Serial_Println_Int
                      _Setup_IOports
                        _Timer1_Init
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
                            ___ltdiv
                            ___ltmod
                           ___lwtoft
                             ___wmul
                           _a2d_read
                          _atod_init
                        _clr_display
                        _eeprom_read
                       _eeprom_write
                    _enableInterrupt
                           _lcd_init
                                _nop
                           _position
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              15    15      0     456
                                              8 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      31
                                              6 BANK0      2     2      0
                            _lcd_add
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     340
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _enableInterrupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         2     1      1     192
                                              8 BANK0      2     1      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _clr_display                                          2     2      0       0
                                              6 BANK0      2     2      0
                            _lcd_add
 ---------------------------------------------------------------------------------
 (1) _atod_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _a2d_read                                             0     0      0   11726
                            ___awdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                             ___wmul
                     _read_a2d_value
 ---------------------------------------------------------------------------------
 (2) _read_a2d_value                                       6     4      2      74
                                              5 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1009
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2359
                                             13 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     696
                                             33 BANK0     13     9      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2822
                                             18 BANK0     15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                        _eeprom_read (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ltmod                                              7     1      6     622
                                              5 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) ___ltdiv                                             10     4      6     631
                                              5 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             5     1      4    2099
                                             13 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2884
                                             16 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                              5 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               3     2      1     201
                                              5 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup_IOports                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Serial_Print_Int                                     3     1      2   11560
                                             19 BANK0      3     1      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Serial_NewLine                                       1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serial_Init                                          3     3      0       0
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCDTimeUpdate                                        2     2      0   12481
                                             25 BANK0      2     2      0
                     _LCD_print_char
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     552
                                              5 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              5 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCD_print_char                                       6     1      5   11428
                                             19 BANK0      6     1      5
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ltdiv (ARG)
                            ___ltmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                            _lcd_add
                           _position
 ---------------------------------------------------------------------------------
 (1) _position                                             5     4      1    1015
                                              6 BANK0      5     4      1
                            _lcd_add
 ---------------------------------------------------------------------------------
 (3) _lcd_add                                              1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckMode                                            1     1      0   13126
                                             22 BANK0      1     1      0
                        _CheckKeyPad
                       _Serial_Print
                 _Serial_Println_Int
                                _nop
 ---------------------------------------------------------------------------------
 (1) _nop                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Serial_Println_Int                                   3     1      2   11040
                                             19 BANK0      3     1      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4    5144
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    4766
                                             11 BANK0      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Serial_Print                                         2     2      0     545
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyPad                                          5     5      0    1507
                                              9 BANK0      5     5      0
                           _ColomnNo
                              _RowNo
 ---------------------------------------------------------------------------------
 (3) _RowNo                                                4     2      2      46
                                              5 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _ColomnNo                                             2     0      2     189
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Calculate                                            2     2      0     647
                                             11 BANK0      2     2      0
                    _RotateMotorLeft
                   _RotateMotorRight
 ---------------------------------------------------------------------------------
 (1) _RotateMotorRight                                     6     4      2     376
                                              5 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _RotateMotorLeft                                      4     2      2     271
                                              5 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  3     3      0    2246
                                              2 BANK0      3     3      0
                    i1_LCDTimeUpdate
                   i1_LCD_print_char
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (6) i1_LCDTimeUpdate                                      2     2      0    1256
                                              0 BANK0      2     2      0
                   i1_LCD_print_char
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (6) i1___lwmod                                            5     1      4     315
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (7) i1___lwdiv                                            7     3      4     266
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (6) i1_LCD_print_char                                     6     1      5     675
                                              7 COMMON     6     1      5
                          i1___lwdiv (ARG)
                          i1___lwmod (ARG)
                          i1_lcd_add
                         i1_position
 ---------------------------------------------------------------------------------
 (7) i1_position                                           5     4      1     141
                                              1 COMMON     5     4      1
                          i1_lcd_add
 ---------------------------------------------------------------------------------
 (8) i1_lcd_add                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Calculate
     _RotateMotorLeft
     _RotateMotorRight
   _CheckKeyPad
     _ColomnNo
     _RowNo
   _CheckMode
     _CheckKeyPad
       _ColomnNo
       _RowNo
     _Serial_Print
     _Serial_Println_Int
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod
     _nop
   _LCDTimeUpdate
     _LCD_print_char
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___ltdiv (ARG)
       ___ltmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _lcd_add (ARG)
       _position (ARG)
         _lcd_add
     ___lwdiv
     ___lwmod
   _LCD_print_char
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod (ARG)
     ___ltdiv (ARG)
     ___ltmod (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
     _lcd_add (ARG)
     _position (ARG)
       _lcd_add
   _RotateMotorLeft
   _RotateMotorRight
   _Serial_Init
   _Serial_NewLine
   _Serial_Print
   _Serial_Print_Int
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _Serial_Println_Int
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _Setup_IOports
   _Timer1_Init
   ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
   ___awmod
   ___bmul
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _eeprom_read (ARG)
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _eeprom_read (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lbtoft
     ___ftpack
   ___ltdiv
   ___ltmod
   ___lwtoft
     ___ftpack
   ___wmul
   _a2d_read
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _eeprom_read (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _eeprom_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     ___wmul
     _read_a2d_value
   _atod_init
   _clr_display
     _lcd_add
   _eeprom_read
   _eeprom_write
     ___bmul (ARG)
   _enableInterrupt
   _lcd_init
   _nop
   _position
     _lcd_add
   _printf
     _putch
       _lcd_add

 _isr (ROOT)
   i1_LCDTimeUpdate
     i1_LCD_print_char
       i1___lwdiv (ARG)
       i1___lwmod (ARG)
       i1_lcd_add (ARG)
       i1_position (ARG)
         i1_lcd_add
     i1___lwdiv
     i1___lwmod
   i1_LCD_print_char
     i1___lwdiv (ARG)
     i1___lwmod (ARG)
     i1_lcd_add (ARG)
     i1_position (ARG)
       i1_lcd_add
   i1___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     17      43       7       83.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     31      39       5       71.3%
BITBANK0            50      0       2       4        2.5%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      D       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      89      12        0.0%
ABS                  0      0      89       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Mar 20 01:50:18 2016

          ?_Serial_Print_Int 0033                            _i 00E2                            _j 00C5  
                          _x 00C6                            pc 0002               ___bmul@product 0026  
                __CFG_CP$OFF 0000                           PL2 1BE5                           PL4 0F99  
                         PL6 0FA2                           PL8 1BF9                           _GO 00FA  
                         _RD 0C60                           _WR 0C61                 ___awdiv@sign 0030  
                         fsr 0004           ??_Serial_Print_Int 0035          ___wmul@multiplicand 0027  
                        PL10 0FAB                          PL20 0FD9                          PL12 0FB6  
                        PL30 0FF9                          PL22 0FE2                          PL14 0FBE  
                        PL32 1CE6                          PL24 0FEA                          PL16 0FC6  
                        PL34 1CED                          PL26 1CDF                          PL18 0FD0  
                        PL36 1CF4                          PL28 0FF2                          PL38 1CFB  
                        l300 0DEA                          l310 0E42                          l304 0E04  
                        l321 0EA4                          l313 0E5C           _Serial_Println_Int 0DE8  
                        l307 0E28                          l332 0EE6                          l324 0EBE  
                        l340 0EF7                          l318 0E88                          l343 0F02  
                        l263 0B7C                          l504 15AB                          l601 0993  
                        l337 0EF2                          l329 0ECA                          l281 1AE3  
                        l274 0A51                          l346 0F0C                          l363 0CEB  
                        l507 17FD                          l284 1AEE                          l380 0D89  
                        l372 0D42                          l516 1D02                          l508 1681  
                        l613 09B1                          l606 099B                          l366 0D0F  
                        l615 09BB                          l391 0DCB                          l383 0DA3  
                        l359 0CD1                          l616 09C5                          l640 0A34  
                        l377 0D6E                          l369 0D28                          l642 0A38  
                        l490 0125                          l396 0DD7                          l388 0DAF  
                        l733 1B1B                          l493 0161                          l654 1C8E  
                        l638 0A30                          l486 00E8                          l655 1C4C  
                        l591 0983                          l399 0DDC                          l487 00EA  
                        l665 1CDE                          l755 001C                          l596 098B  
                        _GIE 005F                          _RC0 0038                          _RB2 0032  
                        _RA4 002C                          _RC1 0039                          _RB3 0033  
                        _RD0 0040                          _RC2 003A                          _RB4 0034  
                        _RD1 0041                          _RC3 003B                          _RB5 0035  
                        _RD2 0042                          _RC4 003C                          _RD3 0043  
                        _RC5 003D                          _RD4 0044                          _RD5 0045  
                        _RD6 0046                          _RD7 0047                 __CFG_CPD$OFF 0000  
                        _RX9 00C6                          _TX9 04C6                _LCDTimeUpdate 1123  
                        _Nop 0289                          _isr 1307                          _nop 089F  
                        fsr0 0004                          indf 0000                 ___awmod@sign 002A  
               __CFG_FOSC$HS 0000          ?_Serial_Println_Int 0033                 __CFG_LVP$OFF 0000  
               ___ftdiv@cntr 0039                 ___ftdiv@sign 003E                         l1001 0C95  
                       l1013 0CBD                         l1055 0A95                         l5211 12C7  
                       l5213 12D0                         l5303 09ED                         l5215 12D9  
                       l5209 12BE                         l5225 12E4                         l6017 1BDD  
                       l5323 0A0B                         l5411 0F57                         l6203 0824  
                       l5229 12EA                         l6125 0DCE                         l6109 0DA6  
                       l5343 0A28                         l5271 09B7                         l5255 0A3D  
                       l5407 0F4F                         l5423 0F66                         l5503 0DF9  
                       l5191 129D                         l5351 0C99                         l5193 12A6  
                       l6081 0D44                         l5361 0CBB                         l5353 0C9E  
                       l5275 09C1                         l5267 09AD                         l5283 09CF  
                       l5371 0F17                         l5435 0F79                         l5443 0F8C  
                       l5427 0F6D                         l5531 0E7B                         l5451 089F  
                       l5187 128B                         l6059 0CE0                         l5363 0CB2  
                       l5355 0CA3                         l6315 0A84                         l5525 0E5E  
                       l5189 1294                         l5357 0CAD                         l6413 0069  
                       l5623 1C97                         l5279 09CB                         l5711 0942  
                       l5447 0F94                         l6087 0D61                         l6415 0079  
                       l5705 0936                         l5385 0F2A                         l5553 0EC1  
                       l6337 0AA8                         l6185 10DF                         l6505 019E  
                       l6433 0095                         l6291 1C22                         l5723 0959  
                       l5651 08CF                         l5395 0F38                         l5379 0F21  
                       l5803 0B98                         l6603 1D2E                         l6515 1585  
                       l6507 156C                         l6451 00C4                         l6443 00BA  
                       l5741 097D                         l5717 094E                         l5493 0A47  
                       l6365 1B73                         l5821 0BC9                         l5901 0C74  
                       l6445 00BE                         l5591 1C8F                         l5751 098E  
                       l5735 0971                         l5663 08E5                         l5743 097F  
                       l6447 00C0                         _ADIE 0466                         l5729 0965  
                       l5681 0907                         l5657 08DA                         l5569 0EE9  
                       l6377 1B94                         l5817 0BB8                         l6801 064F  
                       l6449 00C2                         l5763 1C43                         l5755 0996  
                       l5747 0986                         l5675 08FB                         l5915 11E0  
                       l6299 0803                         l5851 0BF6                         l5843 0BEA  
                       l6731 0443                         ?_isr 0071                         l5693 091F  
                       l5669 08F0                         l6389 1B3F                         l6397 1B5B  
                       l6805 0656                         l6741 0466                         l6725 0433  
                       l6557 16C8                         l5759 099D                         l5687 0913  
                       l5927 11F7                         l5855 0C06                         l5839 0BDA  
                       l6815 067B                         l6727 0418                         l6591 163F  
                       l6825 0692                         l6729 043D                         l6657 01DA  
                       l6593 1D09                         l6489 019A                         l5699 092A  
                       l5939 1208                         l5947 121B                         l5867 0C2C  
                       l6907 075C                         l6667 0202                         l5885 0C50  
                       l5869 0C31                         l6589 16CB                         l6933 078E  
                       ?_nop 0071                         l5895 0C5C                         l5799 0B90  
                       l6919 0775                         l5897 0C66                         l5889 0C58  
                       l5977 1BEB                         _ADON 00F8                         l5997 1BBE  
                       l6797 0641                         _EEIE 046C                         STR_1 102B  
                       STR_2 101A                         STR_3 104D                         STR_4 103C  
                       STR_5 106F                         STR_6 10A2                         STR_7 10B3  
                       STR_8 10B3                         STR_9 10B3                         _BRGH 04C2  
                       _T0IE 005D                         _CREN 00C4                         _FERR 00C2  
                       u6210 129A                         u6115 1256                         _PEIE 005E  
                       _INTE 005C                         u6310 12D6                         u6230 12A3  
                       u6135 1263                         _RBIE 005B                         u6250 12BB  
                       u6170 1288                         u6155 1270                         _RCIE 0465  
                       _RCIF 0065                         u7045 1CA1                         u8021 1B19  
                       u6270 12C4                         u6190 1291                         u6095 1249  
                       u6290 12CD                         u9007 1CC2                         u8055 1C09  
                       u8135 0AB6                         u8215 1B49                         u9017 1CCE  
                       _OERR 00C1                         u9027 1C5E                         u8075 1C2B  
                       u6715 0F41                         u9037 1C6A                         u8245 009E  
                       u9047 1C76                         u8175 1B81                         u9057 1C82  
                       u7475 1C55                         u6915 0E86                         u7725 120E  
                       u8607 04BE                         u6785 0F7F                         u6865 0E02  
                       u8617 10F6                         u6955 0EC8                         u8707 0D53  
                       u7835 0CE9                         u7595 0C35                         u8627 1104  
                       u7685 11E9                         u7925 0DAD                         u8717 0D7D  
                       u8637 110A                         u8485 0427                         u8807 1189  
                       u8727 0D96                         u8647 111A                         u8495 041F  
                       u6985 0EF0                         u8817 11B0                         u8737 0DBE  
                       u8657 0B76                         u8577 173F                         u8907 0E6D  
                       u8827 11C1                         u8747 0DE5                         u7955 0DD5  
                       u8667 0CD7                         u8587 1D86                         u8917 0E97  
                       u8837 11CF                         u8757 1AE9                         u7885 0D6C  
                       u8677 0CFF                         u8597 025A                         u8927 0EB1  
                       u8847 12F1                         u8767 1AF6                         u8687 0D1C  
                       u8937 0ED9                         u8857 1301                         u8777 10D4  
                       u8697 0D35                         u8947 0F00                         u8867 0DF0  
                       u8787 113F                         u8957 0F0A                         u8877 0E18  
                       u8797 1162                         u8967 0F14                         u8887 0E35  
                       u8977 0A5D                         u8897 0E4F                         u8987 1CAA  
                       u8997 1CB6                         _SPEN 00C7                         _TXIE 0464  
                       _WREN 0C62                         _TXEN 04C5                         _TXIF 0064  
                       _SYNC 04C4               ??_eeprom_write 0029                 __CFG_WRT$OFF 0000  
                       _bit0 028C                         _bit1 028D                         _bit2 028E  
                       _bit3 028F                         _bit4 0290                         _bit5 0291  
                       _bit6 0292                         _bit7 0293                         _ldr1 00BB  
                       _ldr2 0055                         _main 003A                 ___ftpack@arg 0025  
                       _hour 0053                 ___ftpack@exp 0028                         btemp 007E  
                       ltemp 007E              _enableInterrupt 1AD2     __size_of_RotateMotorLeft 004C  
                       start 0010                         ttemp 007E                         wtemp 007E  
          ___bmul@multiplier 0027                   i1_position 1545                 ___ftmul@cntr 003F  
               ___ftmul@sign 0040         ??_Serial_Println_Int 0035                  _CheckKeyPad 08A4  
               ___fttol@exp1 004D                 ___fttol@lval 0049                        ??_isr 0022  
                      ??_nop 0025                        _ADDEN 00C3                        ?_main 0071  
                      _BCLIE 046B              __end_of___awdiv 0F5C                        _EEADR 010D  
                      STR_10 10B3                        STR_11 1080                        STR_20 10B3  
                      STR_12 10A2                        STR_21 10B3                        STR_13 10B3  
                      STR_22 10B3                        STR_14 10B3                        STR_15 10B3  
                      STR_23 105E                        STR_16 10B3                        STR_24 10A2  
                      STR_17 1091                        STR_25 1006                __CFG_WDTE$OFF 0000  
                      STR_26 1006                        STR_18 10A2                        STR_19 10B3  
                      STR_27 1006                        STR_28 1006              __end_of___awmod 0F99  
             ?_LCDTimeUpdate 0071                        _CARRY 0018              __end_of___ftdiv 0ADB  
            __end_of___ftmul 0C22              ___awdiv@divisor 002B              __end_of___fttol 0C7D  
            __end_of___ltdiv 1B9B              __end_of___lwdiv 11FC              __end_of___ltmod 1B62  
            __end_of___lwmod 1220                        i1l681 135A                        i1l690 137B  
                      i1l696 1388              ___awdiv@counter 002F                        _RCREG 001A  
                      _C_Bat 00C7                        _TMR1H 000F                        _TMR1L 000E  
                      _SPBRG 0099                        _PORTA 0005                        _PORTB 0006  
                      _PORTC 0007                        _PORTD 0008                        _PORTE 0009  
                      _PSPIE 0467                i1position@row 0076                        _TRISA 0085  
                      _TRISB 0086                        _TRISC 0087                        _TRISD 0088  
                      _SSPIE 0463                        _TRISE 0089                        _TXREG 0019  
                      _V_Bat 00C9              __end_of_lcd_add 12DF                        _RowNo 0A2B  
         i1___lwmod@dividend 0073                ___ftpack@sign 0029                        _state 0058  
                      _putch 10F2                 position@post 0029               __CFG_BOREN$OFF 0000  
                      pclath 000A                        ltemp0 007E                        ltemp1 0082  
                      ltemp2 0086                        ltemp3 0080               _Serial_NewLine 1AE3  
                      ttemp0 007E                        ttemp1 0081                        ttemp2 0084  
                      ttemp3 0087                        ttemp4 007F                        status 0003  
                      wtemp0 007E                        wtemp1 0080                        wtemp2 0082  
                      wtemp3 0084                        wtemp4 0086                        wtemp5 0088  
                      wtemp6 007F           __size_ofi1___lwdiv 002A           __size_ofi1___lwmod 0024  
           __end_of_a2d_read 0B68              __initialization 07EA           __size_ofi1_lcd_add 00BF  
           __end_of_ColomnNo 0A2B           __size_of_Calculate 0044                 __end_of_main 07CF  
         __size_of_CheckMode 0090     __end_of_RotateMotorRight 1CDF                main@angle_old 00DD  
          ?i1_LCD_print_char 0078                       ??_main 004E                ___fttol@sign1 0048  
    __size_of_LCD_print_char 001C           ??i1_LCD_print_char 007D                       ?_RowNo 0025  
                     _ADCON0 001F                       _ADCON1 009F              i1_LCDTimeUpdate 1391  
                     _CCP1IE 0462                       _CCP2IE 0468                       _ADRESH 001E  
                     _ADRESL 009E                       _EEDATA 010C                       _EECON1 018C  
                     _EECON2 018D       __end_of_Serial_NewLine 1AFC      __end_of_enableInterrupt 1AE3  
           ___awdiv@dividend 002D                       ?_putch 0071             __end_of___ftpack 0CCF  
           __end_of___lbtoft 0A73                       i1l4103 1481                       i1l3261 14FA  
                     i1l3263 1503                       i1l4071 1446                       i1l3281 1524  
                     i1l3265 150C                       i1l5113 1321                       i1l3283 152D  
                     i1l3259 14F1                       i1l3531 1550                       i1l4083 145D  
                     i1l3285 1536                       i1l5117 1333                       i1l5141 1360  
                     i1l3287 153F                       i1l3527 154A                       i1l4095 146E  
                     i1l5153 136F                       i1l5163 1380                       i1l5155 1371  
                     i1l5165 1382                       u341_25 14D6                       u351_20 1521  
                     u343_20 14EE                       u335_25 14AF                       u504_25 144F  
                     u353_20 152A                       u345_20 14F7                       u337_25 14BC  
           __end_of___lwtoft 0C8D                       u355_20 1533                       u347_20 1500  
                     u339_25 14C9                       u508_25 1474                       u357_20 153C  
                     u349_20 1509                       u910_27 1429                       u911_27 1435  
                     u912_27 1558                       u913_27 1566                       u906_27 13AF  
                     u907_27 13D2                       u908_27 13F5                       _TMR1IE 0460  
                     _TMR1IF 0060                       _TMR1CS 0081                       u909_27 1418  
                     _TMR2IE 0461                       _TMR1ON 0080         __size_of_clr_display 001C  
             i1position@post 0075                ??_Serial_Init 0025                main@newTimeHr 00D0  
                     _V_Bat2 00B4               __CFG_PWRTE$OFF 0000                ??_Timer1_Init 0025  
                ?i1_position 0072         __size_of_eeprom_read 001B             __end_of_lcd_init 1BE5  
                     ___bmul 0800                       ___wmul 0B8E                    ??___awdiv 002F  
                  ??___awmod 0029                    ??___ftdiv 0036                    ??___ftmul 0038  
                  ??___fttol 0045                    ??___ltdiv 002B            ??_RotateMotorLeft 0027  
                  ??___lwdiv 0029                    ??___ltmod 002B                    ??___lwmod 0029  
                     _buffer 00A0              ??_LCDTimeUpdate 0039             ___awdiv@quotient 0031  
                     _minute 00BD                       _second 00C1              ___awmod@divisor 0025  
       __end_of_eeprom_write 003A              ___awmod@counter 0029                       _printf 10DC  
                  ??_lcd_add 0025        ___ftmul@f3_as_product 003C    LCD_print_char@print_value 0037  
          __end_ofi1___lwdiv 1462            __end_ofi1___lwmod 1486                       saved_w 007E  
           __end_of_position 1307            __end_ofi1_lcd_add 1545            __end_of_Calculate 1C43  
          __end_of_CheckMode 089F        __end_of_Setup_IOports 1B16              ?_Serial_NewLine 0071  
      main@tmp_angle_display 00D4      __end_of__initialization 07FC              eeprom_read@addr 0025  
                 ___ftdiv@f1 0033                   ___ftdiv@f2 0030                   ___ftdiv@f3 003A  
                 ___lbtoft@c 0031          ___bmul@multiplicand 0025                   ___ftmul@f1 0032  
                 ___ftmul@f2 0035                   ___fttol@f1 0041               __pcstackCOMMON 0071  
              __end_of_RowNo 0A44          __end_of_Serial_Init 10DC                 __pidataBANK1 0000  
              __end_of_putch 1107        RotateMotorRight@value 0025          __end_of_Timer1_Init 1AD2  
                 __end_ofPL2 1BF9                   __end_ofPL4 0FA2                   __end_ofPL6 0FAB  
                 __end_ofPL8 1BFF                   ___lwtoft@c 002D      __end_ofi1_LCDTimeUpdate 141E  
        i1LCD_print_char@row 0078                    ?_a2d_read 0071            eeprom_write@value 0028  
                    ??_RowNo 0027                 _angleChanged 028B           __size_of_atod_init 0006  
  __size_of_Serial_Print_Int 0119          __size_ofi1_position 0027                    ?_ColomnNo 0025  
                    ??_putch 0026             ?_enableInterrupt 0071                   __pbssBANK0 0053  
                 __pbssBANK1 00A0                ?_Serial_Print 0071          Serial_Print_Int@val 0033  
    __size_of_read_a2d_value 0026  i1LCD_print_char@print_value 007C                   _angleCount 00B7  
                 __pmaintext 003A                      ?___bmul 0025                      ?___wmul 0025  
               ?_CheckKeyPad 0071                   __pintentry 0004                    ?___ftpack 0025  
                  ?___lbtoft 002D               _LCD_print_char 11B6                      ?_printf 0071  
                    _T1CKPS0 0084                      _T1CKPS1 0085                    ?___lwtoft 002D  
                    _T1OSCEN 0083                   ??_a2d_read 004E                    ?_lcd_init 0071  
                 ??_ColomnNo 0027               ??_Serial_Print 0025                   __stringtab 1000  
     i1LCD_print_char@column 007A               main@newTimeMin 00D2                  _Serial_Init 10C0  
       main@tmp_stepsto_turn 00CB            main@angle_display 00DF                Serial_Print@a 0026  
                _Timer1_Init 1AC4        __size_of_eeprom_write 0020            __end_of_atod_init 001A  
__size_of_Serial_Println_Int 012F              __size_of___bmul 000F                      ___awdiv 0F17  
                    ___awmod 0F5C                    ?_position 0026                      ___ftdiv 0A73  
            __size_of___wmul 0019                      ___ftmul 0BA7                      ___fttol 0C22  
                    ___ltdiv 1B62       __end_of_LCD_print_char 11D2                      ___lwdiv 11D2  
                    ___ltmod 1B31                      ___lwmod 11FC            ?_RotateMotorRight 0025  
                 ??___ftpack 002A                   ??___lbtoft 0031                      __ptext1 10DC  
                    __ptext2 10F2                      __ptext3 1B9B                      __ptext4 1AD2  
                    __ptext5 001A                      __ptext6 1B16                      __ptext7 1107  
                    __ptext8 0014                      __ptext9 0ADB                      _lcd_add 1220  
            __size_of_printf 0016           ??_RotateMotorRight 0027                   ??___lwtoft 0030  
           ?i1_LCDTimeUpdate 0071            i1___lwdiv@divisor 0071                 __size_of_isr 008A  
               __size_of_nop 0005            i1___lwdiv@counter 0077             ___awmod@dividend 0027  
                    _msecond 00BF               position@collum 0026                      clrloop0 10B9  
                    main@tmp 00D9                   ??_lcd_init 0025         end_of_initialization 07FC  
  __size_ofi1_LCD_print_char 001A         LCD_print_char@column 0035               main@pressedKey 00E1  
               _eeprom_write 001A              _RotateMotorLeft 1C43          CheckMode@pressedKey 0036  
           ___ltdiv@dividend 0028                 ??i1_position 0073                      printf@c 0028  
                    printf@f 0029                      psplit$0 D0042                      psplit$1 420043  
                    psplit$2 430044                   ??_position 0027              ?_LCD_print_char 0033  
      Serial_Println_Int@val 0033             ??_Serial_NewLine 0025             ___ltdiv@quotient 002B  
           _Serial_Print_Int 0CCF         pnum$maintext_split_1 0042         pnum$maintext_split_2 0043  
       pnum$maintext_split_3 0044                    i1___lwdiv 1438                    i1___lwmod 1462  
              ??_clr_display 0026           __end_ofi1_position 156C          CheckKeyPad@colomnNo 002A  
                  i1_lcd_add 1486             putch@print_value 0027               _read_a2d_value 0B68  
                  _Calculate 1BFF                    _CheckMode 080F                  ___ftdiv@exp 003D  
              ??_eeprom_read 0025                  ___ftmul@exp 003B               __end_of___bmul 080F  
       __end_of_Serial_Print 0A63               __end_of___wmul 0BA7         __size_of_CheckKeyPad 00FB  
          i1___lwmod@divisor 0071                __pbitbssBANK0 0288        __end_of_LCDTimeUpdate 11B6  
          i1___lwmod@counter 0075                  position@row 002A               __end_of_printf 10F2  
                __end_ofPL10 0FB6                  __end_ofPL20 0FE2                  __end_ofPL12 0FBE  
                __end_ofPL30 1000                  __end_ofPL22 0FEA                  __end_ofPL14 0FC6  
                __end_ofPL32 1CED                  __end_ofPL24 0FF2                  __end_ofPL16 0FD0  
                __end_ofPL34 1CF4                  __end_ofPL26 1CE6                  __end_ofPL18 0FD9  
                __end_ofPL36 1CFB                  __end_ofPL28 0FF9                  __end_ofPL38 1D02  
        start_initialization 07EA         RotateMotorLeft@value 0025                  __end_of_isr 1391  
                __end_of_nop 08A4      __end_of_RotateMotorLeft 1C8F                   ?i1___lwdiv 0071  
                 ?i1___lwmod 0071            __size_of_a2d_read 008D       __end_of_read_a2d_value 0B8E  
                 ?i1_lcd_add 0071                   ?_Calculate 0071            __size_of_ColomnNo 008C  
                 ?_CheckMode 0071          __end_of_clr_display 1123                     ??___bmul 0026  
                   ??___wmul 0029          __end_of_eeprom_read 1B31                  __pdataBANK1 00E2  
     __size_of_Setup_IOports 001A                     ??_printf 0028            __size_of___ftpack 0042  
          __size_of___lbtoft 0010                    ___latbits 0002            __size_of___lwtoft 0010  
              __pcstackBANK0 0020                __pcstackBANK1 00CB              ?_read_a2d_value 0025  
           i1_LCD_print_char 141E             eeprom_write@addr 0029            __size_of_lcd_init 004A  
               ?_Serial_Init 0071     __size_of_enableInterrupt 0011                 ?_Timer1_Init 0071  
           ___lwdiv@dividend 0027      read_a2d_value@a2d_value 0029                     ?___awdiv 002B  
                   ?___awmod 0025                     ?___ftdiv 0030                     ?___ftmul 0032  
                   ?___fttol 0041                     ?___ltdiv 0025                     ?___lwdiv 0025  
                   ?___ltmod 0025                     ?___lwmod 0025                    _atod_init 0014  
          __size_of_position 0028                    __pstrings 1000                     ?_lcd_add 0071  
      read_a2d_value@channel 0028               __size_of_RowNo 0019             ___lwdiv@quotient 002A  
                ??i1___lwdiv 0075             ?_RotateMotorLeft 0025                  ??i1___lwmod 0075  
  __size_of_RotateMotorRight 0050                  _clr_display 1107               __size_of_putch 0015  
              _Setup_IOports 1AFC                  ??i1_lcd_add 0071             ___ltmod@dividend 0028  
                ??_Calculate 002B            interrupt_function 0004                  ??_CheckMode 0036  
             ___wmul@product 0029                    clear_ram0 10B8                  _eeprom_read 1B16  
           ??_LCD_print_char 0038   __end_of_Serial_Println_Int 0F17              ___ltdiv@divisor 0025  
      __size_of_Serial_Print 001F              ___ltdiv@counter 002E             i1position@collum 0072  
   __end_of_Serial_Print_Int 0DE8              _sterpper_counts 00C3                   ?_atod_init 0071  
                __stringbase 1005            ___wmul@multiplier 0025                    main@angle 00D7  
                   _BlinkDet 0288                     _a2d_read 0ADB                 _TimeBlink_on 028A  
             ?_Setup_IOports 0071                     _ColomnNo 099F     __size_ofi1_LCDTimeUpdate 008D  
               _Serial_Print 0A44                     RowNo@row 0027             lcd_init@DelayLCD 0025  
               pnum$maintext 000D             __size_of___awdiv 0045             __size_of___awmod 003D  
           __size_of___ftdiv 0068             __size_of___ftmul 007B             __size_of___fttol 005B  
          ??_enableInterrupt 0025             __size_of___ltdiv 0039             __size_of___lwdiv 002A  
           __size_of___ltmod 0031             __size_of___lwmod 0024                     ___ftpack 0C8D  
                   ___lbtoft 0A63           __end_of__stringtab 1006                     ___lwtoft 0C7D  
           __size_of_lcd_add 00BF                  _currentMode 00B9                     _main$814 00DB  
            ___lwdiv@divisor 0025              ___lwdiv@counter 0029                     __ptext10 0B68  
                   __ptext11 0B8E                     __ptext20 0800                     __ptext12 0C7D  
                   __ptext21 1AC4                     __ptext13 0C22                     __ptext30 12DF  
                   __ptext22 1AFC                     __ptext14 0BA7                     __ptext31 1220  
                   __ptext23 0CCF                     __ptext15 1B31                     __ptext40 099F  
                   __ptext32 080F                     __ptext24 1AE3                     __ptext16 1B62  
                   __ptext41 1BFF                     __ptext33 089F                     __ptext25 10C0  
                   __ptext17 0A63                     __ptext50 1486                     __ptext42 1C8F  
                   __ptext34 0DE8                     __ptext26 1123                     __ptext18 0A73  
                   __ptext43 1C43                     __ptext35 0F5C                     __ptext27 11FC  
                   __ptext19 0C8D                     __ptext44 1307                     __ptext36 0F17  
                   __ptext28 11D2                     __ptext45 1391                     __ptext37 0A44  
                   __ptext29 11B6                     __ptext46 1462                     __ptext38 08A4  
                   __ptext47 1438                     __ptext39 0A2B                     __ptext48 141E  
                   __ptext49 1545                     _lcd_data 0057                     _lcd_init 1B9B  
         i1___lwdiv@dividend 0073                __size_of_main 0795              ___ltmod@divisor 0025  
            ___ltmod@counter 002B         __size_of_Serial_Init 001C                ??_CheckKeyPad 0029  
       __size_of_Timer1_Init 000E                     _position 12DF     __end_ofi1_LCD_print_char 1438  
                ??_atod_init 0025                ColomnNo@rowNo 0025           i1___lwdiv@quotient 0075  
           ??_read_a2d_value 0027              ??_Setup_IOports 0025             _RotateMotorRight 1C8F  
                   intlevel1 0000      __size_of_Serial_NewLine 0019             ___lwmod@dividend 0027  
                _timeChanged 0294       __size_of_LCDTimeUpdate 0093            ??i1_LCDTimeUpdate 0020  
                  stringcode 1000            LCD_print_char@row 0033             CheckKeyPad@rowNo 002C  
          RotateMotorRight@i 0029          __end_of_CheckKeyPad 099F              ___lwmod@divisor 0025  
            ___lwmod@counter 0029             main@stepsto_turn 00CE                     stringdir 1000  
                   stringtab 1000                 ?_clr_display 0071                ?_eeprom_write 0028  
               ?_eeprom_read 0071         CheckKeyPad@charactor 0029  
