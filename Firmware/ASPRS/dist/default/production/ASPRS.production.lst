

Microchip Technology PIC PRO Macro Assembler V1.34 build -361300703 
                                                                                               Sun Mar 20 01:50:42 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	text16,local,class=CODE,merge=1,delta=2
    25                           	psect	text17,local,class=CODE,merge=1,delta=2
    26                           	psect	text20,local,class=CODE,merge=1,delta=2
    27                           	psect	text21,local,class=CODE,merge=1,delta=2
    28                           	psect	text22,local,class=CODE,merge=1,delta=2
    29                           	psect	text23,local,class=CODE,merge=1,delta=2
    30                           	psect	text24,local,class=CODE,merge=1,delta=2
    31                           	psect	text25,local,class=CODE,merge=1,delta=2
    32                           	psect	text32,local,class=CODE,merge=1,delta=2
    33                           	psect	text41,local,class=CODE,merge=1,delta=2
    34                           	psect	text44,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	pa_nodes,global,class=CODE,delta=2
    37                           	psect	maintext_split_1,global,class=CODE,split=1,delta=2
    38                           	psect	maintext_split_2,global,class=CODE,split=1,delta=2
    39                           	psect	maintext_split_3,global,class=CODE,split=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0007                     	;# 
    49  0008                     	;# 
    50  0009                     	;# 
    51  000A                     	;# 
    52  000B                     	;# 
    53  000C                     	;# 
    54  000D                     	;# 
    55  000E                     	;# 
    56  000E                     	;# 
    57  000F                     	;# 
    58  0010                     	;# 
    59  0011                     	;# 
    60  0012                     	;# 
    61  0013                     	;# 
    62  0014                     	;# 
    63  0015                     	;# 
    64  0015                     	;# 
    65  0016                     	;# 
    66  0017                     	;# 
    67  0018                     	;# 
    68  0019                     	;# 
    69  001A                     	;# 
    70  001B                     	;# 
    71  001B                     	;# 
    72  001C                     	;# 
    73  001D                     	;# 
    74  001E                     	;# 
    75  001F                     	;# 
    76  0081                     	;# 
    77  0085                     	;# 
    78  0086                     	;# 
    79  0087                     	;# 
    80  0088                     	;# 
    81  0089                     	;# 
    82  008C                     	;# 
    83  008D                     	;# 
    84  008E                     	;# 
    85  0091                     	;# 
    86  0092                     	;# 
    87  0093                     	;# 
    88  0094                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  009F                     	;# 
    95  010C                     	;# 
    96  010D                     	;# 
    97  010E                     	;# 
    98  010F                     	;# 
    99  018C                     	;# 
   100  018D                     	;# 
   101                           
   102                           	psect	idataBANK1
   103  0000                     __pidataBANK1:	
   104  001F                     _ADCON0	set	31
   105  001E                     _ADRESH	set	30
   106  0005                     _PORTA	set	5
   107  0006                     _PORTB	set	6
   108  0007                     _PORTC	set	7
   109  0008                     _PORTD	set	8
   110  0009                     _PORTE	set	9
   111  001A                     _RCREG	set	26
   112  000F                     _TMR1H	set	15
   113  000E                     _TMR1L	set	14
   114  0019                     _TXREG	set	25
   115  00C3                     _ADDEN	set	195
   116  00F8                     _ADON	set	248
   117  0018                     _CARRY	set	24
   118  00C4                     _CREN	set	196
   119  00C2                     _FERR	set	194
   120  005F                     _GIE	set	95
   121  00FA                     _GO	set	250
   122  005C                     _INTE	set	92
   123  00C1                     _OERR	set	193
   124  005E                     _PEIE	set	94
   125  002C                     _RA4	set	44
   126  0032                     _RB2	set	50
   127  0033                     _RB3	set	51
   128  0034                     _RB4	set	52
   129  0035                     _RB5	set	53
   130  005B                     _RBIE	set	91
   131  0038                     _RC0	set	56
   132  0039                     _RC1	set	57
   133  003A                     _RC2	set	58
   134  003B                     _RC3	set	59
   135  003C                     _RC4	set	60
   136  003D                     _RC5	set	61
   137  0065                     _RCIF	set	101
   138  0040                     _RD0	set	64
   139  0041                     _RD1	set	65
   140  0042                     _RD2	set	66
   141  0043                     _RD3	set	67
   142  0044                     _RD4	set	68
   143  0045                     _RD5	set	69
   144  0046                     _RD6	set	70
   145  0047                     _RD7	set	71
   146  00C6                     _RX9	set	198
   147  00C7                     _SPEN	set	199
   148  005D                     _T0IE	set	93
   149  0084                     _T1CKPS0	set	132
   150  0085                     _T1CKPS1	set	133
   151  0083                     _T1OSCEN	set	131
   152  0081                     _TMR1CS	set	129
   153  0060                     _TMR1IF	set	96
   154  0080                     _TMR1ON	set	128
   155  0064                     _TXIF	set	100
   156  009F                     _ADCON1	set	159
   157  009E                     _ADRESL	set	158
   158  0099                     _SPBRG	set	153
   159  0085                     _TRISA	set	133
   160  0086                     _TRISB	set	134
   161  0087                     _TRISC	set	135
   162  0088                     _TRISD	set	136
   163  0089                     _TRISE	set	137
   164  0466                     _ADIE	set	1126
   165  046B                     _BCLIE	set	1131
   166  04C2                     _BRGH	set	1218
   167  0462                     _CCP1IE	set	1122
   168  0468                     _CCP2IE	set	1128
   169  046C                     _EEIE	set	1132
   170  0467                     _PSPIE	set	1127
   171  0465                     _RCIE	set	1125
   172  0463                     _SSPIE	set	1123
   173  04C4                     _SYNC	set	1220
   174  0460                     _TMR1IE	set	1120
   175  0461                     _TMR2IE	set	1121
   176  04C6                     _TX9	set	1222
   177  04C5                     _TXEN	set	1221
   178  0464                     _TXIE	set	1124
   179  010D                     _EEADR	set	269
   180  010C                     _EEDATA	set	268
   181  018C                     _EECON1	set	396
   182  018D                     _EECON2	set	397
   183  0C60                     _RD	set	3168
   184  0C61                     _WR	set	3169
   185  0C62                     _WREN	set	3170
   186                           
   187                           	psect	strings
   188  1000                     __pstrings:	
   189  1000                     stringtab:	
   190  1000                     __stringtab:	
   191  1000                     stringcode:	
   192                           ;	String table - string pointers are 1 byte each
   193                           
   194  1000                     stringdir:	
   195  1000  3010               	movlw	high stringdir
   196  1001  008A               	movwf	10
   197  1002  0804               	movf	4,w
   198  1003  0A84               	incf	4,f
   199  1004  0782               	addwf	2,f
   200  1005                     __stringbase:	
   201  1005  3400               	retlw	0
   202  1006                     __end_of__stringtab:	
   203  1006                     STR_25:	
   204  1006  3453               	retlw	83	;'S'
   205  1007  3477               	retlw	119	;'w'
   206  1008  3469               	retlw	105	;'i'
   207  1009  3474               	retlw	116	;'t'
   208  100A  3463               	retlw	99	;'c'
   209  100B  3468               	retlw	104	;'h'
   210  100C  3465               	retlw	101	;'e'
   211  100D  3464               	retlw	100	;'d'
   212  100E  3420               	retlw	32	;' '
   213  100F  3474               	retlw	116	;'t'
   214  1010  346F               	retlw	111	;'o'
   215  1011  3420               	retlw	32	;' '
   216  1012  344D               	retlw	77	;'M'
   217  1013  346F               	retlw	111	;'o'
   218  1014  3464               	retlw	100	;'d'
   219  1015  3465               	retlw	101	;'e'
   220  1016  3420               	retlw	32	;' '
   221  1017  343A               	retlw	58	;':'
   222  1018  3420               	retlw	32	;' '
   223  1019  3400               	retlw	0
   224  101A                     STR_2:	
   225  101A  3420               	retlw	32	;' '
   226  101B  3420               	retlw	32	;' '
   227  101C  3420               	retlw	32	;' '
   228  101D  3420               	retlw	32	;' '
   229  101E  3420               	retlw	32	;' '
   230  101F  3420               	retlw	32	;' '
   231  1020  3430               	retlw	48	;'0'
   232  1021  3430               	retlw	48	;'0'
   233  1022  343A               	retlw	58	;':'
   234  1023  3430               	retlw	48	;'0'
   235  1024  3430               	retlw	48	;'0'
   236  1025  3420               	retlw	32	;' '
   237  1026  3420               	retlw	32	;' '
   238  1027  3420               	retlw	32	;' '
   239  1028  3420               	retlw	32	;' '
   240  1029  3420               	retlw	32	;' '
   241  102A  3400               	retlw	0
   242  102B                     STR_1:	
   243  102B  3454               	retlw	84	;'T'
   244  102C  3449               	retlw	73	;'I'
   245  102D  344D               	retlw	77	;'M'
   246  102E  3445               	retlw	69	;'E'
   247  102F  343A               	retlw	58	;':'
   248  1030  3420               	retlw	32	;' '
   249  1031  3448               	retlw	72	;'H'
   250  1032  3448               	retlw	72	;'H'
   251  1033  343A               	retlw	58	;':'
   252  1034  344D               	retlw	77	;'M'
   253  1035  344D               	retlw	77	;'M'
   254  1036  3420               	retlw	32	;' '
   255  1037  3420               	retlw	32	;' '
   256  1038  3420               	retlw	32	;' '
   257  1039  3420               	retlw	32	;' '
   258  103A  3420               	retlw	32	;' '
   259  103B  3400               	retlw	0
   260  103C                     STR_4:	
   261  103C  3441               	retlw	65	;'A'
   262  103D  346E               	retlw	110	;'n'
   263  103E  3467               	retlw	103	;'g'
   264  103F  346C               	retlw	108	;'l'
   265  1040  3465               	retlw	101	;'e'
   266  1041  3420               	retlw	32	;' '
   267  1042  342D               	retlw	45	;'-'
   268  1043  3420               	retlw	32	;' '
   269  1044  3430               	retlw	48	;'0'
   270  1045  3430               	retlw	48	;'0'
   271  1046  3430               	retlw	48	;'0'
   272  1047  3444               	retlw	68	;'D'
   273  1048  3420               	retlw	32	;' '
   274  1049  3420               	retlw	32	;' '
   275  104A  3420               	retlw	32	;' '
   276  104B  3420               	retlw	32	;' '
   277  104C  3400               	retlw	0
   278  104D                     STR_3:	
   279  104D  3454               	retlw	84	;'T'
   280  104E  3469               	retlw	105	;'i'
   281  104F  346D               	retlw	109	;'m'
   282  1050  3465               	retlw	101	;'e'
   283  1051  3420               	retlw	32	;' '
   284  1052  3420               	retlw	32	;' '
   285  1053  342D               	retlw	45	;'-'
   286  1054  3420               	retlw	32	;' '
   287  1055  3430               	retlw	48	;'0'
   288  1056  3436               	retlw	54	;'6'
   289  1057  343A               	retlw	58	;':'
   290  1058  3430               	retlw	48	;'0'
   291  1059  3430               	retlw	48	;'0'
   292  105A  3420               	retlw	32	;' '
   293  105B  3420               	retlw	32	;' '
   294  105C  3420               	retlw	32	;' '
   295  105D  3400               	retlw	0
   296  105E                     STR_23:	
   297  105E  344D               	retlw	77	;'M'
   298  105F  344F               	retlw	79	;'O'
   299  1060  3444               	retlw	68	;'D'
   300  1061  3445               	retlw	69	;'E'
   301  1062  342A               	retlw	42	;'*'
   302  1063  342C               	retlw	44	;','
   303  1064  3430               	retlw	48	;'0'
   304  1065  3430               	retlw	48	;'0'
   305  1066  3430               	retlw	48	;'0'
   306  1067  3444               	retlw	68	;'D'
   307  1068  342C               	retlw	44	;','
   308  1069  3430               	retlw	48	;'0'
   309  106A  3430               	retlw	48	;'0'
   310  106B  343A               	retlw	58	;':'
   311  106C  3430               	retlw	48	;'0'
   312  106D  3430               	retlw	48	;'0'
   313  106E  3400               	retlw	0
   314  106F                     STR_5:	
   315  106F  344D               	retlw	77	;'M'
   316  1070  344F               	retlw	79	;'O'
   317  1071  3444               	retlw	68	;'D'
   318  1072  3445               	retlw	69	;'E'
   319  1073  3431               	retlw	49	;'1'
   320  1074  342C               	retlw	44	;','
   321  1075  3430               	retlw	48	;'0'
   322  1076  3430               	retlw	48	;'0'
   323  1077  3430               	retlw	48	;'0'
   324  1078  3444               	retlw	68	;'D'
   325  1079  342C               	retlw	44	;','
   326  107A  3430               	retlw	48	;'0'
   327  107B  3430               	retlw	48	;'0'
   328  107C  343A               	retlw	58	;':'
   329  107D  3430               	retlw	48	;'0'
   330  107E  3430               	retlw	48	;'0'
   331  107F  3400               	retlw	0
   332  1080                     STR_11:	
   333  1080  344D               	retlw	77	;'M'
   334  1081  344F               	retlw	79	;'O'
   335  1082  3444               	retlw	68	;'D'
   336  1083  3445               	retlw	69	;'E'
   337  1084  3432               	retlw	50	;'2'
   338  1085  342C               	retlw	44	;','
   339  1086  3430               	retlw	48	;'0'
   340  1087  3430               	retlw	48	;'0'
   341  1088  3430               	retlw	48	;'0'
   342  1089  3444               	retlw	68	;'D'
   343  108A  342C               	retlw	44	;','
   344  108B  3430               	retlw	48	;'0'
   345  108C  3430               	retlw	48	;'0'
   346  108D  343A               	retlw	58	;':'
   347  108E  3430               	retlw	48	;'0'
   348  108F  3430               	retlw	48	;'0'
   349  1090  3400               	retlw	0
   350  1091                     STR_17:	
   351  1091  344D               	retlw	77	;'M'
   352  1092  344F               	retlw	79	;'O'
   353  1093  3444               	retlw	68	;'D'
   354  1094  3445               	retlw	69	;'E'
   355  1095  3433               	retlw	51	;'3'
   356  1096  342C               	retlw	44	;','
   357  1097  3430               	retlw	48	;'0'
   358  1098  3430               	retlw	48	;'0'
   359  1099  3430               	retlw	48	;'0'
   360  109A  3444               	retlw	68	;'D'
   361  109B  342C               	retlw	44	;','
   362  109C  3430               	retlw	48	;'0'
   363  109D  3430               	retlw	48	;'0'
   364  109E  343A               	retlw	58	;':'
   365  109F  3430               	retlw	48	;'0'
   366  10A0  3430               	retlw	48	;'0'
   367  10A1  3400               	retlw	0
   368  10A2                     STR_6:	
   369  10A2  3430               	retlw	48	;'0'
   370  10A3  3430               	retlw	48	;'0'
   371  10A4  342E               	retlw	46	;'.'
   372  10A5  3430               	retlw	48	;'0'
   373  10A6  3456               	retlw	86	;'V'
   374  10A7  342C               	retlw	44	;','
   375  10A8  3430               	retlw	48	;'0'
   376  10A9  342E               	retlw	46	;'.'
   377  10AA  3430               	retlw	48	;'0'
   378  10AB  3441               	retlw	65	;'A'
   379  10AC  342C               	retlw	44	;','
   380  10AD  3430               	retlw	48	;'0'
   381  10AE  3430               	retlw	48	;'0'
   382  10AF  342E               	retlw	46	;'.'
   383  10B0  3430               	retlw	48	;'0'
   384  10B1  3457               	retlw	87	;'W'
   385  10B2  3400               	retlw	0
   386  10B3                     STR_7:	
   387  10B3  342C               	retlw	44	;','
   388  10B4  3420               	retlw	32	;' '
   389  10B5  3400               	retlw	0
   390  10B3                     
   391                           ; #config settings
   392  0000                     
   393                           	psect	cinit
   394  0013                     start_initialization:	
   395  0013                     __initialization:	
   396  0013  30A0               	movlw	low __pbssBANK1
   397                           
   398                           ; Clear objects allocated to BITCOMMON
   399  0014  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   400                           
   401                           ; Clear objects allocated to BITBANK0
   402  0015  01D8               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   403                           
   404                           ; Clear objects allocated to BANK0
   405  0016  01D1               	clrf	__pbssBANK0& (0+127)
   406  0017  01D2               	clrf	(__pbssBANK0+1)& (0+127)
   407  0018  01D3               	clrf	(__pbssBANK0+2)& (0+127)
   408  0019  01D4               	clrf	(__pbssBANK0+3)& (0+127)
   409  001A  01D5               	clrf	(__pbssBANK0+4)& (0+127)
   410  001B  01D6               	clrf	(__pbssBANK0+5)& (0+127)
   411  001C  01D7               	clrf	(__pbssBANK0+6)& (0+127)
   412                           
   413                           ; Clear objects allocated to BANK1
   414  001D  1383               	bcf	3,7	;select IRP bank0
   415  001E  0084               	movwf	4
   416  001F  30CA               	movlw	low (__pbssBANK1+42)
   417  0020  160A  118A  20B9   	fcall	clear_ram0
   418                           
   419                           ; Initialize objects allocated to BANK1
   420  0023  1683               	bsf	3,5	;RP0=1, select bank1
   421                           
   422                           ;initializer for _i
   423  0024  3001               	movlw	1
   424  0025  00E1               	movwf	__pdataBANK1& (0+127)
   425  0026                     end_of_initialization:	
   426                           ;End of C runtime variable initialization code
   427                           
   428  0026                     __end_of__initialization:	
   429  0026  0183               	clrf	3
   430  0027  120A  118A  2E3A   	ljmp	_main	;jump to C main() function
   431                           
   432                           	psect	bitbssCOMMON
   433  03E8                     __pbitbssCOMMON:	
   434  03E8                     _bit0:	
   435  03E8                     	ds	1
   436  03E9                     _bit1:	
   437  03E9                     	ds	1
   438  03EA                     _bit2:	
   439  03EA                     	ds	1
   440  03EB                     _bit3:	
   441  03EB                     	ds	1
   442  03EC                     _bit4:	
   443  03EC                     	ds	1
   444  03ED                     _bit5:	
   445  03ED                     	ds	1
   446  03EE                     _bit6:	
   447  03EE                     	ds	1
   448                           
   449                           	psect	bitbssBANK0
   450  02C0                     __pbitbssBANK0:	
   451  02C0                     _BlinkDet:	
   452  02C0                     	ds	1
   453  02C1                     _Nop:	
   454  02C1                     	ds	1
   455  02C2                     _TimeBlink_on:	
   456  02C2                     	ds	1
   457  02C3                     _angleChanged:	
   458  02C3                     	ds	1
   459  02C4                     _bit7:	
   460  02C4                     	ds	1
   461  02C5                     _timeChanged:	
   462  02C5                     	ds	1
   463                           
   464                           	psect	bssBANK0
   465  0051                     __pbssBANK0:	
   466  0051                     _hour:	
   467  0051                     	ds	2
   468  0053                     _ldr2:	
   469  0053                     	ds	2
   470  0055                     _j:	
   471  0055                     	ds	1
   472  0056                     _lcd_data:	
   473  0056                     	ds	1
   474  0057                     _state:	
   475  0057                     	ds	1
   476                           
   477                           	psect	bssBANK1
   478  00A0                     __pbssBANK1:	
   479  00A0                     _buffer:	
   480  00A0                     	ds	20
   481  00B4                     _V_Bat2:	
   482  00B4                     	ds	3
   483  00B7                     _angleCount:	
   484  00B7                     	ds	2
   485  00B9                     _currentMode:	
   486  00B9                     	ds	2
   487  00BB                     _ldr1:	
   488  00BB                     	ds	2
   489  00BD                     _minute:	
   490  00BD                     	ds	2
   491  00BF                     _msecond:	
   492  00BF                     	ds	2
   493  00C1                     _second:	
   494  00C1                     	ds	2
   495  00C3                     _sterpper_counts:	
   496  00C3                     	ds	2
   497  00C5                     _x:	
   498  00C5                     	ds	1
   499  00C6                     _C_Bat:	
   500  00C6                     	ds	2
   501  00C8                     _V_Bat:	
   502  00C8                     	ds	2
   503                           
   504                           	psect	dataBANK1
   505  00E1                     __pdataBANK1:	
   506  00E1                     _i:	
   507  00E1                     	ds	1
   508                           
   509                           	psect	clrtext
   510  10B9                     clear_ram0:	
   511                           ;	Called with FSR containing the base address, and
   512                           ;	W with the last address+1
   513                           
   514  10B9  0064               	clrwdt	;clear the watchdog before getting into this loop
   515  10BA                     clrloop0:	
   516  10BA  0180               	clrf	0	;clear RAM location pointed to by FSR
   517  10BB  0A84               	incf	4,f	;increment pointer
   518  10BC  0604               	xorwf	4,w	;XOR with final address
   519  10BD  1903               	btfsc	3,2	;have we reached the end yet?
   520  10BE  3400               	retlw	0	;all done for this memory range, return
   521  10BF  0604               	xorwf	4,w	;XOR again to restore value
   522  10C0  28BA               	goto	clrloop0	;do the next byte
   523                           
   524                           	psect	cstackBANK1
   525  00CA                     __pcstackBANK1:	
   526  00CA                     main@tmp_stepsto_turn:	
   527                           
   528                           ; 3 bytes @ 0x0
   529  00CA                     	ds	3
   530  00CD                     main@stepsto_turn:	
   531                           
   532                           ; 2 bytes @ 0x3
   533  00CD                     	ds	2
   534  00CF                     main@newTimeHr:	
   535                           
   536                           ; 2 bytes @ 0x5
   537  00CF                     	ds	2
   538  00D1                     main@newTimeMin:	
   539                           
   540                           ; 2 bytes @ 0x7
   541  00D1                     	ds	2
   542  00D3                     main@tmp_angle_display:	
   543                           
   544                           ; 3 bytes @ 0x9
   545  00D3                     	ds	3
   546  00D6                     main@angle:	
   547                           
   548                           ; 2 bytes @ 0xC
   549  00D6                     	ds	2
   550  00D8                     main@tmp:	
   551                           
   552                           ; 2 bytes @ 0xE
   553  00D8                     	ds	2
   554  00DA                     _main$814:	
   555                           
   556                           ; 2 bytes @ 0x10
   557  00DA                     	ds	2
   558  00DC                     main@angle_old:	
   559                           
   560                           ; 2 bytes @ 0x12
   561  00DC                     	ds	2
   562  00DE                     main@angle_display:	
   563                           
   564                           ; 2 bytes @ 0x14
   565  00DE                     	ds	2
   566  00E0                     main@pressedKey:	
   567                           
   568                           ; 1 bytes @ 0x16
   569  00E0                     	ds	1
   570                           
   571                           	psect	cstackCOMMON
   572  0070                     __pcstackCOMMON:	
   573  0070                     ?_lcd_add:	
   574  0070                     ?_LCDTimeUpdate:	
   575                           ; 0 bytes @ 0x0
   576                           
   577  0070                     ?_a2d_read:	
   578                           ; 0 bytes @ 0x0
   579                           
   580  0070                     ?_CheckMode:	
   581                           ; 0 bytes @ 0x0
   582                           
   583  0070                     ?_Calculate:	
   584                           ; 0 bytes @ 0x0
   585                           
   586  0070                     ?_nop:	
   587                           ; 0 bytes @ 0x0
   588                           
   589  0070                     ?_Setup_IOports:	
   590                           ; 0 bytes @ 0x0
   591                           
   592  0070                     ?_lcd_init:	
   593                           ; 0 bytes @ 0x0
   594                           
   595  0070                     ?_putch:	
   596                           ; 0 bytes @ 0x0
   597                           
   598  0070                     ?_clr_display:	
   599                           ; 0 bytes @ 0x0
   600                           
   601  0070                     ?_atod_init:	
   602                           ; 0 bytes @ 0x0
   603                           
   604  0070                     ?_Serial_Init:	
   605                           ; 0 bytes @ 0x0
   606                           
   607  0070                     ?_Serial_Print:	
   608                           ; 0 bytes @ 0x0
   609                           
   610  0070                     ?_Serial_NewLine:	
   611                           ; 1 bit 
   612                           
   613  0070                     ?_enableInterrupt:	
   614                           ; 0 bytes @ 0x0
   615                           
   616  0070                     ?_Timer1_Init:	
   617                           ; 0 bytes @ 0x0
   618                           
   619  0070                     ?_main:	
   620                           ; 0 bytes @ 0x0
   621                           
   622  0070                     ?_isr:	
   623                           ; 0 bytes @ 0x0
   624                           
   625  0070                     ?i1_lcd_add:	
   626                           ; 0 bytes @ 0x0
   627                           
   628  0070                     ??i1_lcd_add:	
   629                           ; 0 bytes @ 0x0
   630                           
   631  0070                     ?i1_LCDTimeUpdate:	
   632                           ; 0 bytes @ 0x0
   633                           
   634  0070                     ?_CheckKeyPad:	
   635                           ; 0 bytes @ 0x0
   636                           
   637  0070                     ?_eeprom_read:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_printf:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ?i1___lwdiv:	
   644                           ; 2 bytes @ 0x0
   645                           
   646  0070                     ?i1___lwmod:	
   647                           ; 2 bytes @ 0x0
   648                           
   649  0070                     i1___lwdiv@divisor:	
   650                           ; 2 bytes @ 0x0
   651                           
   652  0070                     i1___lwmod@divisor:	
   653                           ; 2 bytes @ 0x0
   654                           
   655                           
   656                           ; 2 bytes @ 0x0
   657  0070                     	ds	1
   658  0071                     ?i1_position:	
   659  0071                     i1position@collum:	
   660                           ; 0 bytes @ 0x1
   661                           
   662                           
   663                           ; 1 bytes @ 0x1
   664  0071                     	ds	1
   665  0072                     ??i1_position:	
   666  0072                     i1___lwdiv@dividend:	
   667                           ; 0 bytes @ 0x2
   668                           
   669  0072                     i1___lwmod@dividend:	
   670                           ; 2 bytes @ 0x2
   671                           
   672                           
   673                           ; 2 bytes @ 0x2
   674  0072                     	ds	2
   675  0074                     ??i1___lwdiv:	
   676  0074                     ??i1___lwmod:	
   677                           ; 0 bytes @ 0x4
   678                           
   679  0074                     i1position@post:	
   680                           ; 0 bytes @ 0x4
   681                           
   682  0074                     i1___lwmod@counter:	
   683                           ; 1 bytes @ 0x4
   684                           
   685  0074                     i1___lwdiv@quotient:	
   686                           ; 1 bytes @ 0x4
   687                           
   688                           
   689                           ; 2 bytes @ 0x4
   690  0074                     	ds	1
   691  0075                     i1position@row:	
   692                           
   693                           ; 1 bytes @ 0x5
   694  0075                     	ds	1
   695  0076                     i1___lwdiv@counter:	
   696                           
   697                           ; 1 bytes @ 0x6
   698  0076                     	ds	1
   699  0077                     ?i1_LCD_print_char:	
   700  0077                     i1LCD_print_char@row:	
   701                           ; 0 bytes @ 0x7
   702                           
   703                           
   704                           ; 2 bytes @ 0x7
   705  0077                     	ds	2
   706  0079                     i1LCD_print_char@column:	
   707                           
   708                           ; 2 bytes @ 0x9
   709  0079                     	ds	2
   710  007B                     i1LCD_print_char@print_value:	
   711                           
   712                           ; 1 bytes @ 0xB
   713  007B                     	ds	1
   714  007C                     ??i1_LCD_print_char:	
   715                           
   716                           ; 0 bytes @ 0xC
   717  007C                     	ds	1
   718                           
   719                           	psect	cstackBANK0
   720  0020                     __pcstackBANK0:	
   721  0020                     ??i1_LCDTimeUpdate:	
   722                           
   723                           ; 0 bytes @ 0x0
   724  0020                     	ds	2
   725  0022                     ??_isr:	
   726                           
   727                           ; 0 bytes @ 0x2
   728  0022                     	ds	3
   729  0025                     ??_lcd_add:	
   730  0025                     ?_RotateMotorRight:	
   731                           ; 0 bytes @ 0x5
   732                           
   733  0025                     ??_eeprom_read:	
   734                           ; 0 bytes @ 0x5
   735                           
   736  0025                     ?_RotateMotorLeft:	
   737                           ; 0 bytes @ 0x5
   738                           
   739  0025                     ??_nop:	
   740                           ; 0 bytes @ 0x5
   741                           
   742  0025                     ??_Setup_IOports:	
   743                           ; 0 bytes @ 0x5
   744                           
   745  0025                     ??_lcd_init:	
   746                           ; 0 bytes @ 0x5
   747                           
   748  0025                     ??_atod_init:	
   749                           ; 0 bytes @ 0x5
   750                           
   751  0025                     ??_Serial_Init:	
   752                           ; 0 bytes @ 0x5
   753                           
   754  0025                     ??_Serial_Print:	
   755                           ; 0 bytes @ 0x5
   756                           
   757  0025                     ??_Serial_NewLine:	
   758                           ; 0 bytes @ 0x5
   759                           
   760  0025                     ??_enableInterrupt:	
   761                           ; 0 bytes @ 0x5
   762                           
   763  0025                     ??_Timer1_Init:	
   764                           ; 0 bytes @ 0x5
   765                           
   766  0025                     ?___bmul:	
   767                           ; 0 bytes @ 0x5
   768                           
   769  0025                     ?_RowNo:	
   770                           ; 1 bytes @ 0x5
   771                           
   772  0025                     ?_ColomnNo:	
   773                           ; 2 bytes @ 0x5
   774                           
   775  0025                     ?_read_a2d_value:	
   776                           ; 2 bytes @ 0x5
   777                           
   778  0025                     ?___wmul:	
   779                           ; 2 bytes @ 0x5
   780                           
   781  0025                     ?___awmod:	
   782                           ; 2 bytes @ 0x5
   783                           
   784  0025                     ?___lwdiv:	
   785                           ; 2 bytes @ 0x5
   786                           
   787  0025                     ?___lwmod:	
   788                           ; 2 bytes @ 0x5
   789                           
   790  0025                     ?___ftpack:	
   791                           ; 2 bytes @ 0x5
   792                           
   793  0025                     ?___ltdiv:	
   794                           ; 3 bytes @ 0x5
   795                           
   796  0025                     ?___ltmod:	
   797                           ; 3 bytes @ 0x5
   798                           
   799  0025                     eeprom_read@addr:	
   800                           ; 3 bytes @ 0x5
   801                           
   802  0025                     ___bmul@multiplicand:	
   803                           ; 1 bytes @ 0x5
   804                           
   805  0025                     lcd_init@DelayLCD:	
   806                           ; 1 bytes @ 0x5
   807                           
   808  0025                     ColomnNo@rowNo:	
   809                           ; 2 bytes @ 0x5
   810                           
   811  0025                     RotateMotorLeft@value:	
   812                           ; 2 bytes @ 0x5
   813                           
   814  0025                     RotateMotorRight@value:	
   815                           ; 2 bytes @ 0x5
   816                           
   817  0025                     ___wmul@multiplier:	
   818                           ; 2 bytes @ 0x5
   819                           
   820  0025                     ___awmod@divisor:	
   821                           ; 2 bytes @ 0x5
   822                           
   823  0025                     ___lwdiv@divisor:	
   824                           ; 2 bytes @ 0x5
   825                           
   826  0025                     ___lwmod@divisor:	
   827                           ; 2 bytes @ 0x5
   828                           
   829  0025                     ___ftpack@arg:	
   830                           ; 2 bytes @ 0x5
   831                           
   832  0025                     ___ltdiv@divisor:	
   833                           ; 3 bytes @ 0x5
   834                           
   835  0025                     ___ltmod@divisor:	
   836                           ; 3 bytes @ 0x5
   837                           
   838                           
   839                           ; 3 bytes @ 0x5
   840  0025                     	ds	1
   841  0026                     ?_position:	
   842  0026                     ??_putch:	
   843                           ; 0 bytes @ 0x6
   844                           
   845  0026                     ??_clr_display:	
   846                           ; 0 bytes @ 0x6
   847                           
   848  0026                     ??___bmul:	
   849                           ; 0 bytes @ 0x6
   850                           
   851  0026                     position@collum:	
   852                           ; 0 bytes @ 0x6
   853                           
   854  0026                     Serial_Print@a:	
   855                           ; 1 bytes @ 0x6
   856                           
   857  0026                     ___bmul@product:	
   858                           ; 1 bytes @ 0x6
   859                           
   860                           
   861                           ; 1 bytes @ 0x6
   862  0026                     	ds	1
   863  0027                     ??_position:	
   864  0027                     ??_RotateMotorRight:	
   865                           ; 0 bytes @ 0x7
   866                           
   867  0027                     ??_RotateMotorLeft:	
   868                           ; 0 bytes @ 0x7
   869                           
   870  0027                     ??_RowNo:	
   871                           ; 0 bytes @ 0x7
   872                           
   873  0027                     ??_ColomnNo:	
   874                           ; 0 bytes @ 0x7
   875                           
   876  0027                     ??_read_a2d_value:	
   877                           ; 0 bytes @ 0x7
   878                           
   879  0027                     putch@print_value:	
   880                           ; 0 bytes @ 0x7
   881                           
   882  0027                     ___bmul@multiplier:	
   883                           ; 1 bytes @ 0x7
   884                           
   885  0027                     RowNo@row:	
   886                           ; 1 bytes @ 0x7
   887                           
   888  0027                     ___wmul@multiplicand:	
   889                           ; 2 bytes @ 0x7
   890                           
   891  0027                     ___awmod@dividend:	
   892                           ; 2 bytes @ 0x7
   893                           
   894  0027                     ___lwdiv@dividend:	
   895                           ; 2 bytes @ 0x7
   896                           
   897  0027                     ___lwmod@dividend:	
   898                           ; 2 bytes @ 0x7
   899                           
   900                           
   901                           ; 2 bytes @ 0x7
   902  0027                     	ds	1
   903  0028                     ?_eeprom_write:	
   904  0028                     ??_printf:	
   905                           ; 0 bytes @ 0x8
   906                           
   907  0028                     read_a2d_value@channel:	
   908                           ; 0 bytes @ 0x8
   909                           
   910  0028                     printf@c:	
   911                           ; 1 bytes @ 0x8
   912                           
   913  0028                     eeprom_write@value:	
   914                           ; 1 bytes @ 0x8
   915                           
   916  0028                     ___ftpack@exp:	
   917                           ; 1 bytes @ 0x8
   918                           
   919  0028                     ___ltdiv@dividend:	
   920                           ; 1 bytes @ 0x8
   921                           
   922  0028                     ___ltmod@dividend:	
   923                           ; 3 bytes @ 0x8
   924                           
   925                           
   926                           ; 3 bytes @ 0x8
   927  0028                     	ds	1
   928  0029                     ??_eeprom_write:	
   929  0029                     ??_CheckKeyPad:	
   930                           ; 0 bytes @ 0x9
   931                           
   932  0029                     ??___wmul:	
   933                           ; 0 bytes @ 0x9
   934                           
   935  0029                     ??___awmod:	
   936                           ; 0 bytes @ 0x9
   937                           
   938  0029                     ??___lwdiv:	
   939                           ; 0 bytes @ 0x9
   940                           
   941  0029                     ??___lwmod:	
   942                           ; 0 bytes @ 0x9
   943                           
   944  0029                     position@post:	
   945                           ; 0 bytes @ 0x9
   946                           
   947  0029                     CheckKeyPad@charactor:	
   948                           ; 1 bytes @ 0x9
   949                           
   950  0029                     printf@f:	
   951                           ; 1 bytes @ 0x9
   952                           
   953  0029                     eeprom_write@addr:	
   954                           ; 1 bytes @ 0x9
   955                           
   956  0029                     ___awmod@counter:	
   957                           ; 1 bytes @ 0x9
   958                           
   959  0029                     ___ftpack@sign:	
   960                           ; 1 bytes @ 0x9
   961                           
   962  0029                     ___lwdiv@counter:	
   963                           ; 1 bytes @ 0x9
   964                           
   965  0029                     ___lwmod@counter:	
   966                           ; 1 bytes @ 0x9
   967                           
   968  0029                     read_a2d_value@a2d_value:	
   969                           ; 1 bytes @ 0x9
   970                           
   971  0029                     RotateMotorRight@i:	
   972                           ; 2 bytes @ 0x9
   973                           
   974  0029                     ___wmul@product:	
   975                           ; 2 bytes @ 0x9
   976                           
   977                           
   978                           ; 2 bytes @ 0x9
   979  0029                     	ds	1
   980  002A                     ??___ftpack:	
   981  002A                     position@row:	
   982                           ; 0 bytes @ 0xA
   983                           
   984  002A                     ___awmod@sign:	
   985                           ; 1 bytes @ 0xA
   986                           
   987  002A                     CheckKeyPad@colomnNo:	
   988                           ; 1 bytes @ 0xA
   989                           
   990  002A                     ___lwdiv@quotient:	
   991                           ; 2 bytes @ 0xA
   992                           
   993                           
   994                           ; 2 bytes @ 0xA
   995  002A                     	ds	1
   996  002B                     ??_Calculate:	
   997  002B                     ??___ltdiv:	
   998                           ; 0 bytes @ 0xB
   999                           
  1000  002B                     ??___ltmod:	
  1001                           ; 0 bytes @ 0xB
  1002                           
  1003  002B                     ?___awdiv:	
  1004                           ; 0 bytes @ 0xB
  1005                           
  1006  002B                     ___ltmod@counter:	
  1007                           ; 2 bytes @ 0xB
  1008                           
  1009  002B                     ___awdiv@divisor:	
  1010                           ; 1 bytes @ 0xB
  1011                           
  1012  002B                     ___ltdiv@quotient:	
  1013                           ; 2 bytes @ 0xB
  1014                           
  1015                           
  1016                           ; 3 bytes @ 0xB
  1017  002B                     	ds	1
  1018  002C                     CheckKeyPad@rowNo:	
  1019                           
  1020                           ; 2 bytes @ 0xC
  1021  002C                     	ds	1
  1022  002D                     ?___lbtoft:	
  1023  002D                     ?___lwtoft:	
  1024                           ; 3 bytes @ 0xD
  1025                           
  1026  002D                     ___awdiv@dividend:	
  1027                           ; 3 bytes @ 0xD
  1028                           
  1029  002D                     ___lwtoft@c:	
  1030                           ; 2 bytes @ 0xD
  1031                           
  1032                           
  1033                           ; 2 bytes @ 0xD
  1034  002D                     	ds	1
  1035  002E                     ___ltdiv@counter:	
  1036                           
  1037                           ; 1 bytes @ 0xE
  1038  002E                     	ds	1
  1039  002F                     ??___awdiv:	
  1040  002F                     ___awdiv@counter:	
  1041                           ; 0 bytes @ 0xF
  1042                           
  1043                           
  1044                           ; 1 bytes @ 0xF
  1045  002F                     	ds	1
  1046  0030                     ??___lwtoft:	
  1047  0030                     ?___ftdiv:	
  1048                           ; 0 bytes @ 0x10
  1049                           
  1050  0030                     ___awdiv@sign:	
  1051                           ; 3 bytes @ 0x10
  1052                           
  1053  0030                     ___ftdiv@f2:	
  1054                           ; 1 bytes @ 0x10
  1055                           
  1056                           
  1057                           ; 3 bytes @ 0x10
  1058  0030                     	ds	1
  1059  0031                     ??___lbtoft:	
  1060  0031                     ___lbtoft@c:	
  1061                           ; 0 bytes @ 0x11
  1062                           
  1063  0031                     ___awdiv@quotient:	
  1064                           ; 1 bytes @ 0x11
  1065                           
  1066                           
  1067                           ; 2 bytes @ 0x11
  1068  0031                     	ds	1
  1069  0032                     ?___ftmul:	
  1070  0032                     ___ftmul@f1:	
  1071                           ; 3 bytes @ 0x12
  1072                           
  1073                           
  1074                           ; 3 bytes @ 0x12
  1075  0032                     	ds	1
  1076  0033                     ?_LCD_print_char:	
  1077  0033                     ?_Serial_Println_Int:	
  1078                           ; 0 bytes @ 0x13
  1079                           
  1080  0033                     ?_Serial_Print_Int:	
  1081                           ; 1 bit 
  1082                           
  1083  0033                     LCD_print_char@row:	
  1084                           ; 1 bit 
  1085                           
  1086  0033                     Serial_Println_Int@val:	
  1087                           ; 2 bytes @ 0x13
  1088                           
  1089  0033                     Serial_Print_Int@val:	
  1090                           ; 2 bytes @ 0x13
  1091                           
  1092  0033                     ___ftdiv@f1:	
  1093                           ; 2 bytes @ 0x13
  1094                           
  1095                           
  1096                           ; 3 bytes @ 0x13
  1097  0033                     	ds	2
  1098  0035                     ??_Serial_Println_Int:	
  1099  0035                     ??_Serial_Print_Int:	
  1100                           ; 0 bytes @ 0x15
  1101                           
  1102  0035                     LCD_print_char@column:	
  1103                           ; 0 bytes @ 0x15
  1104                           
  1105  0035                     ___ftmul@f2:	
  1106                           ; 2 bytes @ 0x15
  1107                           
  1108                           
  1109                           ; 3 bytes @ 0x15
  1110  0035                     	ds	1
  1111  0036                     ??_CheckMode:	
  1112  0036                     ??___ftdiv:	
  1113                           ; 0 bytes @ 0x16
  1114                           
  1115  0036                     CheckMode@pressedKey:	
  1116                           ; 0 bytes @ 0x16
  1117                           
  1118                           
  1119                           ; 1 bytes @ 0x16
  1120  0036                     	ds	1
  1121  0037                     LCD_print_char@print_value:	
  1122                           
  1123                           ; 1 bytes @ 0x17
  1124  0037                     	ds	1
  1125  0038                     ??_LCD_print_char:	
  1126  0038                     ??___ftmul:	
  1127                           ; 0 bytes @ 0x18
  1128                           
  1129                           
  1130                           ; 0 bytes @ 0x18
  1131  0038                     	ds	1
  1132  0039                     ??_LCDTimeUpdate:	
  1133  0039                     ___ftdiv@cntr:	
  1134                           ; 0 bytes @ 0x19
  1135                           
  1136                           
  1137                           ; 1 bytes @ 0x19
  1138  0039                     	ds	1
  1139  003A                     ___ftdiv@f3:	
  1140                           
  1141                           ; 3 bytes @ 0x1A
  1142  003A                     	ds	1
  1143  003B                     ___ftmul@exp:	
  1144                           
  1145                           ; 1 bytes @ 0x1B
  1146  003B                     	ds	1
  1147  003C                     ___ftmul@f3_as_product:	
  1148                           
  1149                           ; 3 bytes @ 0x1C
  1150  003C                     	ds	1
  1151  003D                     ___ftdiv@exp:	
  1152                           
  1153                           ; 1 bytes @ 0x1D
  1154  003D                     	ds	1
  1155  003E                     ___ftdiv@sign:	
  1156                           
  1157                           ; 1 bytes @ 0x1E
  1158  003E                     	ds	1
  1159  003F                     ___ftmul@cntr:	
  1160                           
  1161                           ; 1 bytes @ 0x1F
  1162  003F                     	ds	1
  1163  0040                     ___ftmul@sign:	
  1164                           
  1165                           ; 1 bytes @ 0x20
  1166  0040                     	ds	1
  1167  0041                     ?___fttol:	
  1168  0041                     ___fttol@f1:	
  1169                           ; 4 bytes @ 0x21
  1170                           
  1171                           
  1172                           ; 3 bytes @ 0x21
  1173  0041                     	ds	4
  1174  0045                     ??___fttol:	
  1175                           
  1176                           ; 0 bytes @ 0x25
  1177  0045                     	ds	3
  1178  0048                     ___fttol@sign1:	
  1179                           
  1180                           ; 1 bytes @ 0x28
  1181  0048                     	ds	1
  1182  0049                     ___fttol@lval:	
  1183                           
  1184                           ; 4 bytes @ 0x29
  1185  0049                     	ds	4
  1186  004D                     ___fttol@exp1:	
  1187                           
  1188                           ; 1 bytes @ 0x2D
  1189  004D                     	ds	1
  1190  004E                     ??_a2d_read:	
  1191  004E                     ??_main:	
  1192                           ; 0 bytes @ 0x2E
  1193                           
  1194                           
  1195                           ; 0 bytes @ 0x2E
  1196  004E                     	ds	3
  1197                           
  1198                           	psect	maintext
  1199  063A                     __pmaintext:	
  1200 ;;
  1201 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1202 ;;
  1203 ;; *************** function _main *****************
  1204 ;; Defined at:
  1205 ;;		line 79 in file "Automated Solar Panel Orientation Setter.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;		None
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  tmp_stepsto_    3    0[BANK1 ] PTR const unsigned char 
  1210 ;;  stepsto_turn    2    3[BANK1 ] int 
  1211 ;;  tmp_angle_di    3    9[BANK1 ] int 
  1212 ;;  angle_displa    2   20[BANK1 ] int 
  1213 ;;  angle_old       2   18[BANK1 ] int 
  1214 ;;  angle           2   12[BANK1 ] int 
  1215 ;;  newTimeMin      2    7[BANK1 ] int 
  1216 ;;  newTimeHr       2    5[BANK1 ] int 
  1217 ;;  tmp             2   14[BANK1 ] int 
  1218 ;;  pressedKey      1   22[BANK1 ] unsigned char 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;		None               void
  1221 ;; Registers used:
  1222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : B00/0
  1225 ;;		On exit  : 300/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1228 ;;      Params:         0       0       0       0       0
  1229 ;;      Locals:         0       0      23       0       0
  1230 ;;      Temps:          0       3       0       0       0
  1231 ;;      Totals:         0       3      23       0       0
  1232 ;;Total ram usage:       26 bytes
  1233 ;; Hardware stack levels required when called:    9
  1234 ;; This function calls:
  1235 ;;		_Calculate
  1236 ;;		_CheckKeyPad
  1237 ;;		_CheckMode
  1238 ;;		_LCDTimeUpdate
  1239 ;;		_LCD_print_char
  1240 ;;		_RotateMotorLeft
  1241 ;;		_RotateMotorRight
  1242 ;;		_Serial_Init
  1243 ;;		_Serial_NewLine
  1244 ;;		_Serial_Print
  1245 ;;		_Serial_Print_Int
  1246 ;;		_Serial_Println_Int
  1247 ;;		_Setup_IOports
  1248 ;;		_Timer1_Init
  1249 ;;		___awdiv
  1250 ;;		___awmod
  1251 ;;		___bmul
  1252 ;;		___ftdiv
  1253 ;;		___ftmul
  1254 ;;		___fttol
  1255 ;;		___lbtoft
  1256 ;;		___ltdiv
  1257 ;;		___ltmod
  1258 ;;		___lwtoft
  1259 ;;		___wmul
  1260 ;;		_a2d_read
  1261 ;;		_atod_init
  1262 ;;		_clr_display
  1263 ;;		_eeprom_read
  1264 ;;		_eeprom_write
  1265 ;;		_enableInterrupt
  1266 ;;		_lcd_init
  1267 ;;		_nop
  1268 ;;		_position
  1269 ;;		_printf
  1270 ;; This function is called by:
  1271 ;;		Startup code after reset
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           
  1276                           ;psect for function _main
  1277  063A                     _main:	
  1278                           
  1279                           ;Automated Solar Panel Orientation Setter.c: 81: char pressedKey;
  1280                           ;Automated Solar Panel Orientation Setter.c: 83: Setup_IOports();
  1281                           
  1282                           ;incstack = 0
  1283 ;; hardware stack exceeded
  1284                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1285  063A  160A  158A  2417  120A  118A  	fcall	_Setup_IOports
  1286                           
  1287                           ;Automated Solar Panel Orientation Setter.c: 84: atod_init();
  1288  063F  120A  118A  27FA  120A  118A  	fcall	_atod_init
  1289                           
  1290                           ;Automated Solar Panel Orientation Setter.c: 85: lcd_init();
  1291  0644  160A  158A  249B  120A  118A  	fcall	_lcd_init
  1292                           
  1293                           ;Automated Solar Panel Orientation Setter.c: 86: clr_display();
  1294  0649  120A  158A  2046  120A  118A  	fcall	_clr_display
  1295                           
  1296                           ;Automated Solar Panel Orientation Setter.c: 88: Serial_Init();
  1297  064E  160A  118A  20C1  120A  118A  	fcall	_Serial_Init
  1298                           
  1299                           ;Automated Solar Panel Orientation Setter.c: 89: Timer1_Init();
  1300  0653  160A  158A  23D0  120A  118A  	fcall	_Timer1_Init
  1301                           
  1302                           ;Automated Solar Panel Orientation Setter.c: 90: enableInterrupt();
  1303  0658  160A  158A  23ED  120A  118A  	fcall	_enableInterrupt
  1304                           
  1305                           ;Automated Solar Panel Orientation Setter.c: 92: lcd_init();
  1306  065D  160A  158A  249B  120A  118A  	fcall	_lcd_init
  1307                           
  1308                           ;Automated Solar Panel Orientation Setter.c: 94: clr_display();
  1309  0662  120A  158A  2046  120A  118A  	fcall	_clr_display
  1310                           
  1311                           ;Automated Solar Panel Orientation Setter.c: 95: state = 91;
  1312  0667  305B               	movlw	91
  1313  0668  00D7               	movwf	_state
  1314  0669                     l6413:	
  1315                           ;Automated Solar Panel Orientation Setter.c: 97: while(RA4 == 1){
  1316                           
  1317  0669  1E05               	btfss	5,4	;volatile
  1318  066A  2E79               	goto	l6415
  1319                           
  1320                           ;Automated Solar Panel Orientation Setter.c: 98: sterpper_counts = 1;
  1321  066B  1683               	bsf	3,5	;RP0=1, select bank1
  1322  066C  01C3               	clrf	_sterpper_counts^(0+128)
  1323  066D  0AC3               	incf	_sterpper_counts^(0+128),f
  1324  066E  01C4               	clrf	(_sterpper_counts+1)^(0+128)
  1325                           
  1326                           ;Automated Solar Panel Orientation Setter.c: 99: RotateMotorRight(1);
  1327  066F  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0670  01A5               	clrf	RotateMotorRight@value
  1329  0671  0AA5               	incf	RotateMotorRight@value,f
  1330  0672  01A6               	clrf	RotateMotorRight@value+1
  1331  0673  160A  158A  258F  120A  118A  	fcall	_RotateMotorRight
  1332  0678  2E69               	goto	l6413
  1333  0679                     l6415:	
  1334                           
  1335                           ;Automated Solar Panel Orientation Setter.c: 100: }
  1336                           ;Automated Solar Panel Orientation Setter.c: 101: sterpper_counts = 0;
  1337  0679  1683               	bsf	3,5	;RP0=1, select bank1
  1338  067A  01C3               	clrf	_sterpper_counts^(0+128)
  1339  067B  01C4               	clrf	(_sterpper_counts+1)^(0+128)
  1340                           
  1341                           ;Automated Solar Panel Orientation Setter.c: 108: nop();
  1342  067C  160A  118A  216D  120A  118A  	fcall	_nop
  1343                           
  1344                           ;Automated Solar Panel Orientation Setter.c: 110: hour = 0;
  1345  0681  01D1               	clrf	_hour
  1346  0682  01D2               	clrf	_hour+1
  1347                           
  1348                           ;Automated Solar Panel Orientation Setter.c: 111: minute = 0;
  1349  0683  1683               	bsf	3,5	;RP0=1, select bank1
  1350  0684  01BD               	clrf	_minute^(0+128)
  1351  0685  01BE               	clrf	(_minute+1)^(0+128)
  1352                           
  1353                           ;Automated Solar Panel Orientation Setter.c: 112: TimeBlink_on = 1;
  1354  0686  1283               	bcf	3,5	;RP0=0, select bank0
  1355  0687  1558               	bsf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  1356                           
  1357                           ;Automated Solar Panel Orientation Setter.c: 113: LCDTimeUpdate();
  1358  0688  120A  158A  2062  120A  118A  	fcall	_LCDTimeUpdate
  1359                           
  1360                           ;Automated Solar Panel Orientation Setter.c: 115: nop();
  1361  068D  160A  118A  216D  120A  118A  	fcall	_nop
  1362                           
  1363                           ;Automated Solar Panel Orientation Setter.c: 119: for(tmp=0; tmp<12; tmp++){
  1364  0692  1683               	bsf	3,5	;RP0=1, select bank1
  1365  0693  01D8               	clrf	main@tmp^(0+128)
  1366  0694  01D9               	clrf	(main@tmp+1)^(0+128)
  1367  0695                     l6433:	
  1368  0695  0859               	movf	(main@tmp+1)^(0+128),w
  1369  0696  3A80               	xorlw	128
  1370  0697  00FF               	movwf	127
  1371  0698  3080               	movlw	128
  1372  0699  027F               	subwf	127,w
  1373  069A  1D03               	skipz
  1374  069B  2E9E               	goto	u8245
  1375  069C  300C               	movlw	12
  1376  069D  0258               	subwf	main@tmp^(0+128),w
  1377  069E                     u8245:	
  1378  069E  120A  118A  1803   	btfsc	3,0
  1379  06A1  2DDE               	goto	l6933
  1380                           
  1381                           ;Automated Solar Panel Orientation Setter.c: 120: eeprom_write(tmp, tmp*15 );
  1382  06A2  300F               	movlw	15
  1383  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  1384  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  1385  06A5  00A5               	movwf	___bmul@multiplicand
  1386  06A6  1683               	bsf	3,5	;RP0=1, select bank1
  1387  06A7  0858               	movf	main@tmp^(0+128),w
  1388  06A8  160A  158A  23DE  120A  118A  	fcall	___bmul
  1389  06AD  00A8               	movwf	eeprom_write@value
  1390  06AE  1683               	bsf	3,5	;RP0=1, select bank1
  1391  06AF  0858               	movf	main@tmp^(0+128),w
  1392  06B0  120A  118A  27DA  120A  118A  	fcall	_eeprom_write
  1393  06B5  1303               	bcf	3,6	;RP1=0, select bank1
  1394  06B6  0AD8               	incf	main@tmp^(0+128),f
  1395  06B7  1903               	skipnz
  1396  06B8  0AD9               	incf	(main@tmp+1)^(0+128),f
  1397  06B9  2E95               	goto	l6433
  1398  06BA                     l6443:	
  1399                           
  1400                           ;Automated Solar Panel Orientation Setter.c: 133: state = 91;
  1401  06BA  305B               	movlw	91
  1402  06BB                     L30:	
  1403  06BB  120A  118A  2DDD   	goto	L1
  1404  06BE                     l6445:	
  1405                           ;Automated Solar Panel Orientation Setter.c: 134: break;
  1406                           
  1407                           
  1408                           ;Automated Solar Panel Orientation Setter.c: 136: state = 92;
  1409  06BE  305C               	movlw	92
  1410  06BF  2EBB               	goto	L30
  1411  06C0                     l6447:	
  1412                           ;Automated Solar Panel Orientation Setter.c: 137: break;
  1413                           
  1414                           
  1415                           ;Automated Solar Panel Orientation Setter.c: 139: state = 93;
  1416  06C0  305D               	movlw	93
  1417  06C1  2EBB               	goto	L30
  1418  06C2                     l6449:	
  1419                           ;Automated Solar Panel Orientation Setter.c: 140: break;
  1420                           
  1421                           
  1422                           ;Automated Solar Panel Orientation Setter.c: 142: state = 94;
  1423  06C2  305E               	movlw	94
  1424  06C3  2EBB               	goto	L30
  1425  06C4                     l6451:	
  1426                           ;Automated Solar Panel Orientation Setter.c: 143: break;
  1427                           
  1428                           
  1429                           ;Automated Solar Panel Orientation Setter.c: 150: clr_display();
  1430  06C4  120A  158A  2046  120A  118A  	fcall	_clr_display
  1431  06C9  3001               	movlw	1
  1432                           
  1433                           ;Automated Solar Panel Orientation Setter.c: 151: TimeBlink_on = 0;
  1434  06CA  1158               	bcf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  1435                           
  1436                           ;Automated Solar Panel Orientation Setter.c: 152: position(1,1);
  1437  06CB  01A6               	clrf	position@collum
  1438  06CC  0AA6               	incf	position@collum,f
  1439  06CD  120A  158A  221A  120A  118A  	fcall	_position
  1440                           
  1441                           ;Automated Solar Panel Orientation Setter.c: 153: printf("TIME: HH:MM     ");
  1442  06D2  3026               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1443  06D3  120A  158A  201B  120A  118A  	fcall	_printf
  1444  06D8  3002               	movlw	2
  1445                           
  1446                           ;Automated Solar Panel Orientation Setter.c: 154: position(2,1);
  1447  06D9  01A6               	clrf	position@collum
  1448  06DA  0AA6               	incf	position@collum,f
  1449  06DB  120A  158A  221A  120A  118A  	fcall	_position
  1450                           
  1451                           ;Automated Solar Panel Orientation Setter.c: 155: printf("      00:00     ");
  1452  06E0  3015               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1453  06E1  120A  158A  201B  120A  118A  	fcall	_printf
  1454                           
  1455                           ;Automated Solar Panel Orientation Setter.c: 156: state = 41;
  1456  06E6  3029               	movlw	41
  1457  06E7  2EBB               	goto	L30
  1458  06E8                     l486:	
  1459                           ;Automated Solar Panel Orientation Setter.c: 159: case 41:
  1460                           
  1461                           ;Automated Solar Panel Orientation Setter.c: 157: break;
  1462                           
  1463                           
  1464                           ;Automated Solar Panel Orientation Setter.c: 161: TimeBlink_on = 0;
  1465  06E8  1158               	bcf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  1466                           
  1467                           ;Automated Solar Panel Orientation Setter.c: 162: timeChanged = 1;
  1468  06E9  16D8               	bsf	_timeChanged/(0+8),_timeChanged& (0+7)
  1469  06EA                     l487:	
  1470                           ;Automated Solar Panel Orientation Setter.c: 163: int newTimeHr,newTimeMin;
  1471                           ;Automated Solar Panel Orientation Setter.c: 164: while(timeChanged){
  1472                           
  1473  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  1474  06EB  120A  158A  1ED8   	btfss	_timeChanged/(0+8),_timeChanged& (0+7)
  1475  06EE  2A42               	goto	l6507
  1476                           
  1477                           ;Automated Solar Panel Orientation Setter.c: 165: pressedKey = CheckKeyPad();
  1478  06EF  160A  118A  2172  120A  118A  	fcall	_CheckKeyPad
  1479  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  1480  06F5  00E0               	movwf	main@pressedKey^(0+128)
  1481                           
  1482                           ;Automated Solar Panel Orientation Setter.c: 166: if( pressedKey>=48 && pressedKey<=50 )
      +                          {
  1483  06F6  3030               	movlw	48
  1484  06F7  0260               	subwf	main@pressedKey^(0+128),w
  1485  06F8  1C03               	skipc
  1486  06F9  2EEA               	goto	l487
  1487  06FA  3033               	movlw	51
  1488  06FB  0260               	subwf	main@pressedKey^(0+128),w
  1489  06FC  1803               	skipnc
  1490  06FD  2EEA               	goto	l487
  1491                           
  1492                           ;Automated Solar Panel Orientation Setter.c: 167: newTimeHr = (pressedKey-48)*10;
  1493  06FE  0860               	movf	main@pressedKey^(0+128),w
  1494  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0700  00A5               	movwf	___wmul@multiplier
  1496  0701  30D0               	movlw	-48
  1497  0702  01A6               	clrf	___wmul@multiplier+1
  1498  0703  07A5               	addwf	___wmul@multiplier,f
  1499  0704  1C03               	skipc
  1500  0705  03A6               	decf	___wmul@multiplier+1,f
  1501  0706  300A               	movlw	10
  1502  0707  00A7               	movwf	___wmul@multiplicand
  1503  0708  01A8               	clrf	___wmul@multiplicand+1
  1504  0709  160A  118A  26B8  120A  118A  	fcall	___wmul
  1505  070E  0826               	movf	?___wmul+1,w
  1506  070F  1683               	bsf	3,5	;RP0=1, select bank1
  1507  0710  00D0               	movwf	(main@newTimeHr+1)^(0+128)
  1508  0711  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0712  0825               	movf	?___wmul,w
  1510  0713  1683               	bsf	3,5	;RP0=1, select bank1
  1511  0714  00CF               	movwf	main@newTimeHr^(0+128)
  1512                           
  1513                           ;Automated Solar Panel Orientation Setter.c: 168: LCD_print_char(2,7,pressedKey);
  1514  0715  3002               	movlw	2
  1515  0716  1283               	bcf	3,5	;RP0=0, select bank0
  1516  0717  00B3               	movwf	LCD_print_char@row
  1517  0718  3007               	movlw	7
  1518  0719  01B4               	clrf	LCD_print_char@row+1
  1519  071A  00B5               	movwf	LCD_print_char@column
  1520  071B  01B6               	clrf	LCD_print_char@column+1
  1521  071C  1683               	bsf	3,5	;RP0=1, select bank1
  1522  071D  0860               	movf	main@pressedKey^(0+128),w
  1523  071E  1283               	bcf	3,5	;RP0=0, select bank0
  1524  071F  00B7               	movwf	LCD_print_char@print_value
  1525  0720  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
  1526  0725                     l490:	
  1527                           ;Automated Solar Panel Orientation Setter.c: 169: while(timeChanged){
  1528                           
  1529  0725  1283               	bcf	3,5	;RP0=0, select bank0
  1530  0726  1303               	bcf	3,6	;RP1=0, select bank0
  1531  0727  1ED8               	btfss	_timeChanged/(0+8),_timeChanged& (0+7)
  1532  0728  2EEA               	goto	l487
  1533                           
  1534                           ;Automated Solar Panel Orientation Setter.c: 170: pressedKey = CheckKeyPad();
  1535  0729  160A  118A  2172  120A  118A  	fcall	_CheckKeyPad
  1536  072E  1683               	bsf	3,5	;RP0=1, select bank1
  1537  072F  00E0               	movwf	main@pressedKey^(0+128)
  1538                           
  1539                           ;Automated Solar Panel Orientation Setter.c: 171: if( pressedKey>=48 && pressedKey<58 ){
  1540  0730  3030               	movlw	48
  1541  0731  0260               	subwf	main@pressedKey^(0+128),w
  1542  0732  1C03               	skipc
  1543  0733  2F25               	goto	l490
  1544  0734  303A               	movlw	58
  1545  0735  0260               	subwf	main@pressedKey^(0+128),w
  1546  0736  1803               	skipnc
  1547  0737  2F25               	goto	l490
  1548                           
  1549                           ;Automated Solar Panel Orientation Setter.c: 172: newTimeHr = newTimeHr + (pressedKey-48
      +                          );
  1550  0738  0860               	movf	main@pressedKey^(0+128),w
  1551  0739  074F               	addwf	main@newTimeHr^(0+128),w
  1552  073A  1283               	bcf	3,5	;RP0=0, select bank0
  1553  073B  00CE               	movwf	??_main
  1554  073C  1683               	bsf	3,5	;RP0=1, select bank1
  1555  073D  0850               	movf	(main@newTimeHr+1)^(0+128),w
  1556  073E  1803               	skipnc
  1557  073F  0A50               	incf	(main@newTimeHr+1)^(0+128),w
  1558  0740  1283               	bcf	3,5	;RP0=0, select bank0
  1559  0741  00CF               	movwf	??_main+1
  1560  0742  084E               	movf	??_main,w
  1561  0743  3ED0               	addlw	208
  1562  0744  1683               	bsf	3,5	;RP0=1, select bank1
  1563  0745  00CF               	movwf	main@newTimeHr^(0+128)
  1564  0746  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0747  084F               	movf	??_main+1,w
  1566  0748  1803               	skipnc
  1567  0749  3E01               	addlw	1
  1568  074A  3EFF               	addlw	255
  1569  074B  1683               	bsf	3,5	;RP0=1, select bank1
  1570  074C  00D0               	movwf	(main@newTimeHr+1)^(0+128)
  1571                           
  1572                           ;Automated Solar Panel Orientation Setter.c: 173: LCD_print_char(2,8,pressedKey);
  1573  074D  3002               	movlw	2
  1574  074E  1283               	bcf	3,5	;RP0=0, select bank0
  1575  074F  00B3               	movwf	LCD_print_char@row
  1576  0750  3008               	movlw	8
  1577  0751  01B4               	clrf	LCD_print_char@row+1
  1578  0752  00B5               	movwf	LCD_print_char@column
  1579  0753  01B6               	clrf	LCD_print_char@column+1
  1580  0754  1683               	bsf	3,5	;RP0=1, select bank1
  1581  0755  0860               	movf	main@pressedKey^(0+128),w
  1582  0756  1283               	bcf	3,5	;RP0=0, select bank0
  1583  0757  00B7               	movwf	LCD_print_char@print_value
  1584  0758  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
  1585                           
  1586                           ;Automated Solar Panel Orientation Setter.c: 174: pressedKey = '@';
  1587  075D  3040               	movlw	64
  1588  075E  1683               	bsf	3,5	;RP0=1, select bank1
  1589  075F  1303               	bcf	3,6	;RP1=0, select bank1
  1590  0760  00E0               	movwf	main@pressedKey^(0+128)
  1591  0761                     l493:	
  1592                           ;Automated Solar Panel Orientation Setter.c: 175: while(timeChanged){
  1593                           
  1594  0761  1283               	bcf	3,5	;RP0=0, select bank0
  1595  0762  1ED8               	btfss	_timeChanged/(0+8),_timeChanged& (0+7)
  1596  0763  2F25               	goto	l490
  1597                           
  1598                           ;Automated Solar Panel Orientation Setter.c: 176: pressedKey = CheckKeyPad();
  1599  0764  160A  118A  2172  120A  118A  	fcall	_CheckKeyPad
  1600  0769  1683               	bsf	3,5	;RP0=1, select bank1
  1601  076A  00E0               	movwf	main@pressedKey^(0+128)
  1602                           
  1603                           ;Automated Solar Panel Orientation Setter.c: 177: if( pressedKey>=48 && pressedKey<=53 )
      +                          {
  1604  076B  3030               	movlw	48
  1605  076C  0260               	subwf	main@pressedKey^(0+128),w
  1606  076D  1C03               	skipc
  1607  076E  2F61               	goto	l493
  1608  076F  3036               	movlw	54
  1609  0770  0260               	subwf	main@pressedKey^(0+128),w
  1610  0771  1803               	skipnc
  1611  0772  2F61               	goto	l493
  1612                           
  1613                           ;Automated Solar Panel Orientation Setter.c: 178: newTimeMin = (pressedKey-48)*10;
  1614  0773  0860               	movf	main@pressedKey^(0+128),w
  1615  0774  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0775  00A5               	movwf	___wmul@multiplier
  1617  0776  30D0               	movlw	-48
  1618  0777  01A6               	clrf	___wmul@multiplier+1
  1619  0778  07A5               	addwf	___wmul@multiplier,f
  1620  0779  1C03               	skipc
  1621  077A  03A6               	decf	___wmul@multiplier+1,f
  1622  077B  300A               	movlw	10
  1623  077C  00A7               	movwf	___wmul@multiplicand
  1624  077D  01A8               	clrf	___wmul@multiplicand+1
  1625  077E  160A  118A  26B8  120A  118A  	fcall	___wmul
  1626  0783  0826               	movf	?___wmul+1,w
  1627  0784  1683               	bsf	3,5	;RP0=1, select bank1
  1628  0785  00D2               	movwf	(main@newTimeMin+1)^(0+128)
  1629  0786  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0787  0825               	movf	?___wmul,w
  1631  0788  1683               	bsf	3,5	;RP0=1, select bank1
  1632  0789  00D1               	movwf	main@newTimeMin^(0+128)
  1633                           
  1634                           ;Automated Solar Panel Orientation Setter.c: 179: LCD_print_char(2,10,pressedKey);
  1635  078A  3002               	movlw	2
  1636  078B  1283               	bcf	3,5	;RP0=0, select bank0
  1637  078C  00B3               	movwf	LCD_print_char@row
  1638  078D  300A               	movlw	10
  1639  078E  01B4               	clrf	LCD_print_char@row+1
  1640  078F  00B5               	movwf	LCD_print_char@column
  1641  0790  01B6               	clrf	LCD_print_char@column+1
  1642  0791  1683               	bsf	3,5	;RP0=1, select bank1
  1643  0792  0860               	movf	main@pressedKey^(0+128),w
  1644  0793  1283               	bcf	3,5	;RP0=0, select bank0
  1645  0794  00B7               	movwf	LCD_print_char@print_value
  1646  0795  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
  1647  079A                     l6489:	
  1648                           ;Automated Solar Panel Orientation Setter.c: 181: while(timeChanged){
  1649                           
  1650                           
  1651                           ;Automated Solar Panel Orientation Setter.c: 180: pressedKey = '@';
  1652  079A  3040               	movlw	64
  1653  079B  1683               	bsf	3,5	;RP0=1, select bank1
  1654  079C  1303               	bcf	3,6	;RP1=0, select bank1
  1655  079D  00E0               	movwf	main@pressedKey^(0+128)
  1656  079E                     l6505:	
  1657  079E  1283               	bcf	3,5	;RP0=0, select bank0
  1658  079F  1ED8               	btfss	_timeChanged/(0+8),_timeChanged& (0+7)
  1659  07A0  2F61               	goto	l493
  1660                           
  1661                           ;Automated Solar Panel Orientation Setter.c: 182: pressedKey = CheckKeyPad();
  1662  07A1  160A  118A  2172  120A  118A  	fcall	_CheckKeyPad
  1663  07A6  1683               	bsf	3,5	;RP0=1, select bank1
  1664  07A7  00E0               	movwf	main@pressedKey^(0+128)
  1665                           
  1666                           ;Automated Solar Panel Orientation Setter.c: 183: if( pressedKey>=48 && pressedKey<58 ){
  1667  07A8  3030               	movlw	48
  1668  07A9  0260               	subwf	main@pressedKey^(0+128),w
  1669  07AA  1C03               	skipc
  1670  07AB  2F9E               	goto	l6505
  1671  07AC  303A               	movlw	58
  1672  07AD  0260               	subwf	main@pressedKey^(0+128),w
  1673  07AE  1803               	skipnc
  1674  07AF  2F9E               	goto	l6505
  1675                           
  1676                           ;Automated Solar Panel Orientation Setter.c: 184: LCD_print_char(2,11,pressedKey);
  1677  07B0  3002               	movlw	2
  1678  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  1679  07B2  00B3               	movwf	LCD_print_char@row
  1680  07B3  300B               	movlw	11
  1681  07B4  01B4               	clrf	LCD_print_char@row+1
  1682  07B5  00B5               	movwf	LCD_print_char@column
  1683  07B6  01B6               	clrf	LCD_print_char@column+1
  1684  07B7  1683               	bsf	3,5	;RP0=1, select bank1
  1685  07B8  0860               	movf	main@pressedKey^(0+128),w
  1686  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  1687  07BA  00B7               	movwf	LCD_print_char@print_value
  1688  07BB  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
  1689                           
  1690                           ;Automated Solar Panel Orientation Setter.c: 185: newTimeMin = newTimeMin + (pressedKey-
      +                          48);
  1691  07C0  1683               	bsf	3,5	;RP0=1, select bank1
  1692  07C1  1303               	bcf	3,6	;RP1=0, select bank1
  1693  07C2  0860               	movf	main@pressedKey^(0+128),w
  1694  07C3  0751               	addwf	main@newTimeMin^(0+128),w
  1695  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1696  07C5  00CE               	movwf	??_main
  1697  07C6  1683               	bsf	3,5	;RP0=1, select bank1
  1698  07C7  0852               	movf	(main@newTimeMin+1)^(0+128),w
  1699  07C8  1803               	skipnc
  1700  07C9  0A52               	incf	(main@newTimeMin+1)^(0+128),w
  1701  07CA  1283               	bcf	3,5	;RP0=0, select bank0
  1702  07CB  00CF               	movwf	??_main+1
  1703  07CC  084E               	movf	??_main,w
  1704  07CD  3ED0               	addlw	208
  1705  07CE  1683               	bsf	3,5	;RP0=1, select bank1
  1706  07CF  00D1               	movwf	main@newTimeMin^(0+128)
  1707  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  1708  07D1  084F               	movf	??_main+1,w
  1709  07D2  1803               	skipnc
  1710  07D3  3E01               	addlw	1
  1711  07D4  3EFF               	addlw	255
  1712  07D5  1683               	bsf	3,5	;RP0=1, select bank1
  1713  07D6  00D2               	movwf	(main@newTimeMin+1)^(0+128)
  1714                           
  1715                           ;Automated Solar Panel Orientation Setter.c: 186: timeChanged = 0;
  1716  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  1717  07D8  12D8               	bcf	_timeChanged/(0+8),_timeChanged& (0+7)
  1718  07D9  2F9A               	goto	l6489
  1719                           
  1720                           	psect	text1
  1721  081B                     __ptext1:	
  1722 ;; *************** function _printf *****************
  1723 ;; Defined at:
  1724 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;  f               1    wreg     PTR const unsigned char 
  1727 ;;		 -> STR_24(17), STR_23(17), STR_18(17), STR_17(17), 
  1728 ;;		 -> STR_12(17), STR_11(17), STR_6(17), STR_5(17), 
  1729 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  1732 ;;		 -> STR_24(17), STR_23(17), STR_18(17), STR_17(17), 
  1733 ;;		 -> STR_12(17), STR_11(17), STR_6(17), STR_5(17), 
  1734 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  1735 ;;  tmpval          4    0        struct .
  1736 ;;  cp              2    0        PTR const unsigned char 
  1737 ;;  len             2    0        unsigned int 
  1738 ;;  val             2    0        unsigned int 
  1739 ;;  c               1    8[BANK0 ] char 
  1740 ;;  flag            1    0        unsigned char 
  1741 ;;  prec            1    0        char 
  1742 ;;  ap              1    0        PTR void [1]
  1743 ;;		 -> ?_printf(2), 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  2  130[None  ] int 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 300/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1753 ;;      Params:         0       0       0       0       0
  1754 ;;      Locals:         0       2       0       0       0
  1755 ;;      Temps:          0       0       0       0       0
  1756 ;;      Totals:         0       2       0       0       0
  1757 ;;Total ram usage:        2 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    7
  1760 ;; This function calls:
  1761 ;;		_putch
  1762 ;; This function is called by:
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           
  1768                           ;psect for function _printf
  1769  081B                     _printf:	
  1770                           
  1771                           ;incstack = 0
  1772 ;; using string table level
  1773                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1774                           ;printf@f stored from wreg
  1775  081B  1283               	bcf	3,5	;RP0=0, select bank0
  1776  081C  1303               	bcf	3,6	;RP1=0, select bank0
  1777  081D  00A9               	movwf	printf@f
  1778  081E                     l6185:	
  1779                           ;doprnt.c: 542: continue;
  1780                           
  1781                           ;doprnt.c: 536: while(c = *f++) {
  1782                           
  1783  081E  1283               	bcf	3,5	;RP0=0, select bank0
  1784  081F  1303               	bcf	3,6	;RP1=0, select bank0
  1785  0820  0829               	movf	printf@f,w
  1786  0821  0AA9               	incf	printf@f,f
  1787  0822  0084               	movwf	4
  1788  0823  160A  118A  2000  120A  158A  	fcall	stringdir
  1789  0828  00A8               	movwf	printf@c
  1790  0829  0828               	movf	printf@c,w
  1791  082A  1903               	btfsc	3,2
  1792  082B  0008               	return
  1793                           
  1794                           ;doprnt.c: 540: {
  1795                           ;doprnt.c: 541: (putch(c) );
  1796  082C  0828               	movf	printf@c,w
  1797  082D  2031  120A  158A   	fcall	_putch
  1798  0830  281E               	goto	l6185
  1799  0831                     __end_of_printf:	
  1800  0831                     __ptext2:	
  1801 ;; *************** function _putch *****************
  1802 ;; Defined at:
  1803 ;;		line 166 in file "lcdv2.h"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  print_value     1    wreg     unsigned char 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  print_value     1    7[BANK0 ] unsigned char 
  1808 ;; Return value:  Size  Location     Type
  1809 ;;		None               void
  1810 ;; Registers used:
  1811 ;;		wreg, status,2, status,0, pclath, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 300/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1817 ;;      Params:         0       0       0       0       0
  1818 ;;      Locals:         0       1       0       0       0
  1819 ;;      Temps:          0       1       0       0       0
  1820 ;;      Totals:         0       2       0       0       0
  1821 ;;Total ram usage:        2 bytes
  1822 ;; Hardware stack levels used:    1
  1823 ;; Hardware stack levels required when called:    6
  1824 ;; This function calls:
  1825 ;;		_lcd_add
  1826 ;; This function is called by:
  1827 ;;		_printf
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           
  1832                           ;psect for function _putch
  1833  0831                     _putch:	
  1834                           
  1835                           ;incstack = 0
  1836                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  1837                           ;putch@print_value stored from wreg
  1838  0831  00A7               	movwf	putch@print_value
  1839                           
  1840                           ;lcdv2.h: 167: RC2 = 1;
  1841  0832  1507               	bsf	7,2	;volatile
  1842                           
  1843                           ;lcdv2.h: 168: _delay(20);
  1844  0833  3006               	movlw	6
  1845  0834  00A6               	movwf	??_putch
  1846  0835                     u8617:	
  1847  0835  0BA6               	decfsz	??_putch,f
  1848  0836  2835               	goto	u8617
  1849  0837  0000               	nop
  1850                           
  1851                           ;lcdv2.h: 169: lcd_data = print_value;
  1852  0838  1283               	bcf	3,5	;RP0=0, select bank0
  1853  0839  1303               	bcf	3,6	;RP1=0, select bank0
  1854  083A  0827               	movf	putch@print_value,w
  1855  083B  00D6               	movwf	_lcd_data
  1856                           
  1857                           ;lcdv2.h: 170: lcd_add();
  1858  083C  215F  120A  158A   	fcall	_lcd_add
  1859                           
  1860                           ;lcdv2.h: 171: _delay(100);
  1861  083F  3021               	movlw	33
  1862  0840  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0841  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0842  00A6               	movwf	??_putch
  1865  0843                     u8627:	
  1866  0843  0BA6               	decfsz	??_putch,f
  1867  0844  2843               	goto	u8627
  1868  0845  0008               	return
  1869  0846                     __end_of_putch:	
  1870  0846                     __ptext7:	
  1871 ;; *************** function _clr_display *****************
  1872 ;; Defined at:
  1873 ;;		line 183 in file "lcdv2.h"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;		None
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;		None
  1878 ;; Return value:  Size  Location     Type
  1879 ;;		None               void
  1880 ;; Registers used:
  1881 ;;		wreg, status,2, status,0, pclath, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : 300/0
  1884 ;;		On exit  : 300/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1887 ;;      Params:         0       0       0       0       0
  1888 ;;      Locals:         0       0       0       0       0
  1889 ;;      Temps:          0       2       0       0       0
  1890 ;;      Totals:         0       2       0       0       0
  1891 ;;Total ram usage:        2 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    6
  1894 ;; This function calls:
  1895 ;;		_lcd_add
  1896 ;; This function is called by:
  1897 ;;		_main
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           
  1902                           ;psect for function _clr_display
  1903  0846                     _clr_display:	
  1904                           
  1905                           ;lcdv2.h: 185: RC2 = 0;
  1906                           
  1907                           ;incstack = 0
  1908                           ; Regs used in _clr_display: [wreg+status,2+status,0+pclath+cstack]
  1909  0846  1107               	bcf	7,2	;volatile
  1910                           
  1911                           ;lcdv2.h: 186: _delay(20);
  1912  0847  3006               	movlw	6
  1913  0848  00A6               	movwf	??_clr_display
  1914  0849                     u8637:	
  1915  0849  0BA6               	decfsz	??_clr_display,f
  1916  084A  2849               	goto	u8637
  1917  084B  0000               	nop
  1918                           
  1919                           ;lcdv2.h: 187: lcd_data = 0b00000001;
  1920  084C  1283               	bcf	3,5	;RP0=0, select bank0
  1921  084D  1303               	bcf	3,6	;RP1=0, select bank0
  1922  084E  01D6               	clrf	_lcd_data
  1923  084F  0AD6               	incf	_lcd_data,f
  1924                           
  1925                           ;lcdv2.h: 188: lcd_add();
  1926  0850  215F  120A  158A   	fcall	_lcd_add
  1927                           
  1928                           ;lcdv2.h: 189: _delay((unsigned long)((10)*(4000000/4000.0)));
  1929  0853  300D               	movlw	13
  1930  0854  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0855  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0856  00A7               	movwf	??_clr_display+1
  1933  0857  30FB               	movlw	251
  1934  0858  00A6               	movwf	??_clr_display
  1935  0859                     u8647:	
  1936  0859  0BA6               	decfsz	??_clr_display,f
  1937  085A  2859               	goto	u8647
  1938  085B  0BA7               	decfsz	??_clr_display+1,f
  1939  085C  2859               	goto	u8647
  1940  085D  285E               	nop2
  1941                           
  1942                           ;lcdv2.h: 190: RC2 = 1;
  1943  085E  1283               	bcf	3,5	;RP0=0, select bank0
  1944  085F  1303               	bcf	3,6	;RP1=0, select bank0
  1945  0860  1507               	bsf	7,2	;volatile
  1946  0861  0008               	return
  1947  0862                     __end_of_clr_display:	
  1948  0862                     __ptext26:	
  1949 ;; *************** function _LCDTimeUpdate *****************
  1950 ;; Defined at:
  1951 ;;		line 898 in file "Automated Solar Panel Orientation Setter.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;		None
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;		None
  1956 ;; Return value:  Size  Location     Type
  1957 ;;		None               void
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0, pclath, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 300/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1965 ;;      Params:         0       0       0       0       0
  1966 ;;      Locals:         0       0       0       0       0
  1967 ;;      Temps:          0       2       0       0       0
  1968 ;;      Totals:         0       2       0       0       0
  1969 ;;Total ram usage:        2 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    8
  1972 ;; This function calls:
  1973 ;;		_LCD_print_char
  1974 ;;		___lwdiv
  1975 ;;		___lwmod
  1976 ;; This function is called by:
  1977 ;;		_main
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function _LCDTimeUpdate
  1983  0862                     _LCDTimeUpdate:	
  1984                           
  1985                           ;incstack = 0
  1986 ;; hardware stack exceeded
  1987                           ; Regs used in _LCDTimeUpdate: [wreg+status,2+status,0+pclath+cstack]
  1988  0862  300C               	movlw	12
  1989                           
  1990                           ;Automated Solar Panel Orientation Setter.c: 899: LCD_print_char(1,12,hour/10+48);
  1991  0863  01B3               	clrf	LCD_print_char@row
  1992  0864  0AB3               	incf	LCD_print_char@row,f
  1993  0865  01B4               	clrf	LCD_print_char@row+1
  1994  0866  00B5               	movwf	LCD_print_char@column
  1995  0867  300A               	movlw	10
  1996  0868  01B6               	clrf	LCD_print_char@column+1
  1997  0869  00A5               	movwf	___lwdiv@divisor
  1998  086A  01A6               	clrf	___lwdiv@divisor+1
  1999  086B  0852               	movf	_hour+1,w
  2000  086C  00A8               	movwf	___lwdiv@dividend+1
  2001  086D  0851               	movf	_hour,w
  2002  086E  00A7               	movwf	___lwdiv@dividend
  2003  086F  2111  120A  158A   	fcall	___lwdiv
  2004  0872  0825               	movf	?___lwdiv,w
  2005  0873  3E30               	addlw	48
  2006  0874  00B7               	movwf	LCD_print_char@print_value
  2007  0875  20F5  120A  158A   	fcall	_LCD_print_char
  2008                           
  2009                           ;Automated Solar Panel Orientation Setter.c: 900: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  2010  0878  300D               	movlw	13
  2011  0879  1283               	bcf	3,5	;RP0=0, select bank0
  2012  087A  1303               	bcf	3,6	;RP1=0, select bank0
  2013  087B  00BA               	movwf	??_LCDTimeUpdate+1
  2014  087C  30FB               	movlw	251
  2015  087D  00B9               	movwf	??_LCDTimeUpdate
  2016  087E                     u8787:	
  2017  087E  0BB9               	decfsz	??_LCDTimeUpdate,f
  2018  087F  287E               	goto	u8787
  2019  0880  0BBA               	decfsz	??_LCDTimeUpdate+1,f
  2020  0881  287E               	goto	u8787
  2021  0882  2883               	nop2
  2022                           
  2023                           ;Automated Solar Panel Orientation Setter.c: 901: LCD_print_char(1,13,hour%10+48);
  2024  0883  1283               	bcf	3,5	;RP0=0, select bank0
  2025  0884  1303               	bcf	3,6	;RP1=0, select bank0
  2026  0885  300D               	movlw	13
  2027  0886  01B3               	clrf	LCD_print_char@row
  2028  0887  0AB3               	incf	LCD_print_char@row,f
  2029  0888  01B4               	clrf	LCD_print_char@row+1
  2030  0889  00B5               	movwf	LCD_print_char@column
  2031  088A  300A               	movlw	10
  2032  088B  01B6               	clrf	LCD_print_char@column+1
  2033  088C  00A5               	movwf	___lwmod@divisor
  2034  088D  01A6               	clrf	___lwmod@divisor+1
  2035  088E  0852               	movf	_hour+1,w
  2036  088F  00A8               	movwf	___lwmod@dividend+1
  2037  0890  0851               	movf	_hour,w
  2038  0891  00A7               	movwf	___lwmod@dividend
  2039  0892  213B  120A  158A   	fcall	___lwmod
  2040  0895  0825               	movf	?___lwmod,w
  2041  0896  3E30               	addlw	48
  2042  0897  00B7               	movwf	LCD_print_char@print_value
  2043  0898  20F5  120A  158A   	fcall	_LCD_print_char
  2044                           
  2045                           ;Automated Solar Panel Orientation Setter.c: 902: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  2046  089B  300D               	movlw	13
  2047  089C  1283               	bcf	3,5	;RP0=0, select bank0
  2048  089D  1303               	bcf	3,6	;RP1=0, select bank0
  2049  089E  00BA               	movwf	??_LCDTimeUpdate+1
  2050  089F  30FB               	movlw	251
  2051  08A0  00B9               	movwf	??_LCDTimeUpdate
  2052  08A1                     u8797:	
  2053  08A1  0BB9               	decfsz	??_LCDTimeUpdate,f
  2054  08A2  28A1               	goto	u8797
  2055  08A3  0BBA               	decfsz	??_LCDTimeUpdate+1,f
  2056  08A4  28A1               	goto	u8797
  2057  08A5  28A6               	nop2
  2058                           
  2059                           ;Automated Solar Panel Orientation Setter.c: 903: LCD_print_char(1,15,minute/10+48);
  2060  08A6  1283               	bcf	3,5	;RP0=0, select bank0
  2061  08A7  1303               	bcf	3,6	;RP1=0, select bank0
  2062  08A8  300F               	movlw	15
  2063  08A9  01B3               	clrf	LCD_print_char@row
  2064  08AA  0AB3               	incf	LCD_print_char@row,f
  2065  08AB  01B4               	clrf	LCD_print_char@row+1
  2066  08AC  00B5               	movwf	LCD_print_char@column
  2067  08AD  300A               	movlw	10
  2068  08AE  01B6               	clrf	LCD_print_char@column+1
  2069  08AF  00A5               	movwf	___lwdiv@divisor
  2070  08B0  01A6               	clrf	___lwdiv@divisor+1
  2071  08B1  1683               	bsf	3,5	;RP0=1, select bank1
  2072  08B2  083E               	movf	(_minute+1)^(0+128),w
  2073  08B3  1283               	bcf	3,5	;RP0=0, select bank0
  2074  08B4  00A8               	movwf	___lwdiv@dividend+1
  2075  08B5  1683               	bsf	3,5	;RP0=1, select bank1
  2076  08B6  083D               	movf	_minute^(0+128),w
  2077  08B7  1283               	bcf	3,5	;RP0=0, select bank0
  2078  08B8  00A7               	movwf	___lwdiv@dividend
  2079  08B9  2111  120A  158A   	fcall	___lwdiv
  2080  08BC  0825               	movf	?___lwdiv,w
  2081  08BD  3E30               	addlw	48
  2082  08BE  00B7               	movwf	LCD_print_char@print_value
  2083  08BF  20F5  120A  158A   	fcall	_LCD_print_char
  2084                           
  2085                           ;Automated Solar Panel Orientation Setter.c: 904: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  2086  08C2  300D               	movlw	13
  2087  08C3  1283               	bcf	3,5	;RP0=0, select bank0
  2088  08C4  1303               	bcf	3,6	;RP1=0, select bank0
  2089  08C5  00BA               	movwf	??_LCDTimeUpdate+1
  2090  08C6  30FB               	movlw	251
  2091  08C7  00B9               	movwf	??_LCDTimeUpdate
  2092  08C8                     u8807:	
  2093  08C8  0BB9               	decfsz	??_LCDTimeUpdate,f
  2094  08C9  28C8               	goto	u8807
  2095  08CA  0BBA               	decfsz	??_LCDTimeUpdate+1,f
  2096  08CB  28C8               	goto	u8807
  2097  08CC  28CD               	nop2
  2098                           
  2099                           ;Automated Solar Panel Orientation Setter.c: 905: LCD_print_char(1,16,minute%10+48);
  2100  08CD  1283               	bcf	3,5	;RP0=0, select bank0
  2101  08CE  1303               	bcf	3,6	;RP1=0, select bank0
  2102  08CF  3010               	movlw	16
  2103  08D0  01B3               	clrf	LCD_print_char@row
  2104  08D1  0AB3               	incf	LCD_print_char@row,f
  2105  08D2  01B4               	clrf	LCD_print_char@row+1
  2106  08D3  00B5               	movwf	LCD_print_char@column
  2107  08D4  300A               	movlw	10
  2108  08D5  01B6               	clrf	LCD_print_char@column+1
  2109  08D6  00A5               	movwf	___lwmod@divisor
  2110  08D7  01A6               	clrf	___lwmod@divisor+1
  2111  08D8  1683               	bsf	3,5	;RP0=1, select bank1
  2112  08D9  083E               	movf	(_minute+1)^(0+128),w
  2113  08DA  1283               	bcf	3,5	;RP0=0, select bank0
  2114  08DB  00A8               	movwf	___lwmod@dividend+1
  2115  08DC  1683               	bsf	3,5	;RP0=1, select bank1
  2116  08DD  083D               	movf	_minute^(0+128),w
  2117  08DE  1283               	bcf	3,5	;RP0=0, select bank0
  2118  08DF  00A7               	movwf	___lwmod@dividend
  2119  08E0  213B  120A  158A   	fcall	___lwmod
  2120  08E3  0825               	movf	?___lwmod,w
  2121  08E4  3E30               	addlw	48
  2122  08E5  00B7               	movwf	LCD_print_char@print_value
  2123  08E6  20F5  120A  158A   	fcall	_LCD_print_char
  2124                           
  2125                           ;Automated Solar Panel Orientation Setter.c: 906: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  2126  08E9  300D               	movlw	13
  2127  08EA  1283               	bcf	3,5	;RP0=0, select bank0
  2128  08EB  1303               	bcf	3,6	;RP1=0, select bank0
  2129  08EC  00BA               	movwf	??_LCDTimeUpdate+1
  2130  08ED  30FB               	movlw	251
  2131  08EE  00B9               	movwf	??_LCDTimeUpdate
  2132  08EF                     u8817:	
  2133  08EF  0BB9               	decfsz	??_LCDTimeUpdate,f
  2134  08F0  28EF               	goto	u8817
  2135  08F1  0BBA               	decfsz	??_LCDTimeUpdate+1,f
  2136  08F2  28EF               	goto	u8817
  2137  08F3  28F4               	nop2
  2138  08F4  0008               	return
  2139  08F5                     __end_of_LCDTimeUpdate:	
  2140  08F5                     __ptext29:	
  2141 ;; *************** function _LCD_print_char *****************
  2142 ;; Defined at:
  2143 ;;		line 174 in file "lcdv2.h"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;  row             2   19[BANK0 ] int 
  2146 ;;  column          2   21[BANK0 ] int 
  2147 ;;  print_value     1   23[BANK0 ] unsigned char 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;		None
  2150 ;; Return value:  Size  Location     Type
  2151 ;;		None               void
  2152 ;; Registers used:
  2153 ;;		wreg, status,2, status,0, pclath, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 300/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2159 ;;      Params:         0       5       0       0       0
  2160 ;;      Locals:         0       0       0       0       0
  2161 ;;      Temps:          0       1       0       0       0
  2162 ;;      Totals:         0       6       0       0       0
  2163 ;;Total ram usage:        6 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    7
  2166 ;; This function calls:
  2167 ;;		_lcd_add
  2168 ;;		_position
  2169 ;; This function is called by:
  2170 ;;		_main
  2171 ;;		_LCDTimeUpdate
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           
  2176                           ;psect for function _LCD_print_char
  2177  08F5                     _LCD_print_char:	
  2178                           
  2179                           ;lcdv2.h: 175: position(row,column);
  2180                           
  2181                           ;incstack = 0
  2182                           ; Regs used in _LCD_print_char: [wreg+status,2+status,0+pclath+cstack]
  2183  08F5  0835               	movf	LCD_print_char@column,w
  2184  08F6  00A6               	movwf	position@collum
  2185  08F7  0833               	movf	LCD_print_char@row,w
  2186  08F8  221A  120A  158A   	fcall	_position
  2187                           
  2188                           ;lcdv2.h: 176: RC2 = 1;
  2189  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  2190  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  2191  08FD  1507               	bsf	7,2	;volatile
  2192                           
  2193                           ;lcdv2.h: 177: _delay(20);
  2194  08FE  3006               	movlw	6
  2195  08FF  00B8               	movwf	??_LCD_print_char
  2196  0900                     u8827:	
  2197  0900  0BB8               	decfsz	??_LCD_print_char,f
  2198  0901  2900               	goto	u8827
  2199  0902  0000               	nop
  2200                           
  2201                           ;lcdv2.h: 178: lcd_data = print_value;
  2202  0903  1283               	bcf	3,5	;RP0=0, select bank0
  2203  0904  1303               	bcf	3,6	;RP1=0, select bank0
  2204  0905  0837               	movf	LCD_print_char@print_value,w
  2205  0906  00D6               	movwf	_lcd_data
  2206                           
  2207                           ;lcdv2.h: 179: lcd_add();
  2208  0907  215F  120A  158A   	fcall	_lcd_add
  2209                           
  2210                           ;lcdv2.h: 180: _delay(100);
  2211  090A  3021               	movlw	33
  2212  090B  1283               	bcf	3,5	;RP0=0, select bank0
  2213  090C  1303               	bcf	3,6	;RP1=0, select bank0
  2214  090D  00B8               	movwf	??_LCD_print_char
  2215  090E                     u8837:	
  2216  090E  0BB8               	decfsz	??_LCD_print_char,f
  2217  090F  290E               	goto	u8837
  2218  0910  0008               	return
  2219  0911                     __end_of_LCD_print_char:	
  2220  0911                     __ptext28:	
  2221 ;; *************** function ___lwdiv *****************
  2222 ;; Defined at:
  2223 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  divisor         2    5[BANK0 ] unsigned int 
  2226 ;;  dividend        2    7[BANK0 ] unsigned int 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  quotient        2   10[BANK0 ] unsigned int 
  2229 ;;  counter         1    9[BANK0 ] unsigned char 
  2230 ;; Return value:  Size  Location     Type
  2231 ;;                  2    5[BANK0 ] unsigned int 
  2232 ;; Registers used:
  2233 ;;		wreg, status,2, status,0
  2234 ;; Tracked objects:
  2235 ;;		On entry : 300/0
  2236 ;;		On exit  : 300/0
  2237 ;;		Unchanged: 0/0
  2238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2239 ;;      Params:         0       4       0       0       0
  2240 ;;      Locals:         0       3       0       0       0
  2241 ;;      Temps:          0       0       0       0       0
  2242 ;;      Totals:         0       7       0       0       0
  2243 ;;Total ram usage:        7 bytes
  2244 ;; Hardware stack levels used:    1
  2245 ;; Hardware stack levels required when called:    5
  2246 ;; This function calls:
  2247 ;;		Nothing
  2248 ;; This function is called by:
  2249 ;;		_LCDTimeUpdate
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           
  2254                           ;psect for function ___lwdiv
  2255  0911                     ___lwdiv:	
  2256                           
  2257                           ;incstack = 0
  2258                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2259  0911  01AA               	clrf	___lwdiv@quotient
  2260  0912  01AB               	clrf	___lwdiv@quotient+1
  2261  0913  0825               	movf	___lwdiv@divisor,w
  2262  0914  0426               	iorwf	___lwdiv@divisor+1,w
  2263  0915  1903               	btfsc	3,2
  2264  0916  2936               	goto	l5927
  2265  0917  01A9               	clrf	___lwdiv@counter
  2266  0918                     L12:	
  2267  0918  0AA9               	incf	___lwdiv@counter,f
  2268  0919  1BA6               	btfsc	___lwdiv@divisor+1,7
  2269  091A  291F               	goto	l5915
  2270  091B  1003               	clrc
  2271  091C  0DA5               	rlf	___lwdiv@divisor,f
  2272  091D  0DA6               	rlf	___lwdiv@divisor+1,f
  2273  091E  2918               	goto	L12
  2274  091F                     l5915:	
  2275  091F  1003               	clrc
  2276  0920  0DAA               	rlf	___lwdiv@quotient,f
  2277  0921  0DAB               	rlf	___lwdiv@quotient+1,f
  2278  0922  0826               	movf	___lwdiv@divisor+1,w
  2279  0923  0228               	subwf	___lwdiv@dividend+1,w
  2280  0924  1D03               	skipz
  2281  0925  2928               	goto	u7685
  2282  0926  0825               	movf	___lwdiv@divisor,w
  2283  0927  0227               	subwf	___lwdiv@dividend,w
  2284  0928                     u7685:	
  2285  0928  1C03               	skipc
  2286  0929  2932               	goto	L13
  2287  092A  0825               	movf	___lwdiv@divisor,w
  2288  092B  02A7               	subwf	___lwdiv@dividend,f
  2289  092C  0826               	movf	___lwdiv@divisor+1,w
  2290  092D  1C03               	skipc
  2291  092E  03A8               	decf	___lwdiv@dividend+1,f
  2292  092F  02A8               	subwf	___lwdiv@dividend+1,f
  2293  0930  142A               	bsf	___lwdiv@quotient,0
  2294  0931  1003               	clrc
  2295  0932                     L13:	
  2296  0932  0CA6               	rrf	___lwdiv@divisor+1,f
  2297  0933  0CA5               	rrf	___lwdiv@divisor,f
  2298  0934  0BA9               	decfsz	___lwdiv@counter,f
  2299  0935  291F               	goto	l5915
  2300  0936                     l5927:	
  2301  0936  082B               	movf	___lwdiv@quotient+1,w
  2302  0937  00A6               	movwf	?___lwdiv+1
  2303  0938  082A               	movf	___lwdiv@quotient,w
  2304  0939  00A5               	movwf	?___lwdiv
  2305  093A  0008               	return
  2306  093B                     __end_of___lwdiv:	
  2307  093B                     __ptext27:	
  2308 ;; *************** function ___lwmod *****************
  2309 ;; Defined at:
  2310 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  divisor         2    5[BANK0 ] unsigned int 
  2313 ;;  dividend        2    7[BANK0 ] unsigned int 
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;  counter         1    9[BANK0 ] unsigned char 
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  2    5[BANK0 ] unsigned int 
  2318 ;; Registers used:
  2319 ;;		wreg, status,2, status,0
  2320 ;; Tracked objects:
  2321 ;;		On entry : 300/0
  2322 ;;		On exit  : 300/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2325 ;;      Params:         0       4       0       0       0
  2326 ;;      Locals:         0       1       0       0       0
  2327 ;;      Temps:          0       0       0       0       0
  2328 ;;      Totals:         0       5       0       0       0
  2329 ;;Total ram usage:        5 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:    5
  2332 ;; This function calls:
  2333 ;;		Nothing
  2334 ;; This function is called by:
  2335 ;;		_LCDTimeUpdate
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           
  2340                           ;psect for function ___lwmod
  2341  093B                     ___lwmod:	
  2342                           
  2343                           ;incstack = 0
  2344                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2345  093B  0825               	movf	___lwmod@divisor,w
  2346  093C  0426               	iorwf	___lwmod@divisor+1,w
  2347  093D  1903               	btfsc	3,2
  2348  093E  295A               	goto	l5947
  2349  093F  01A9               	clrf	___lwmod@counter
  2350  0940                     L10:	
  2351  0940  0AA9               	incf	___lwmod@counter,f
  2352  0941  1BA6               	btfsc	___lwmod@divisor+1,7
  2353  0942  2947               	goto	l5939
  2354  0943  1003               	clrc
  2355  0944  0DA5               	rlf	___lwmod@divisor,f
  2356  0945  0DA6               	rlf	___lwmod@divisor+1,f
  2357  0946  2940               	goto	L10
  2358  0947                     l5939:	
  2359  0947  0826               	movf	___lwmod@divisor+1,w
  2360  0948  0228               	subwf	___lwmod@dividend+1,w
  2361  0949  1D03               	skipz
  2362  094A  294D               	goto	u7725
  2363  094B  0825               	movf	___lwmod@divisor,w
  2364  094C  0227               	subwf	___lwmod@dividend,w
  2365  094D                     u7725:	
  2366  094D  1C03               	skipc
  2367  094E  2956               	goto	L11
  2368  094F  0825               	movf	___lwmod@divisor,w
  2369  0950  02A7               	subwf	___lwmod@dividend,f
  2370  0951  0826               	movf	___lwmod@divisor+1,w
  2371  0952  1C03               	skipc
  2372  0953  03A8               	decf	___lwmod@dividend+1,f
  2373  0954  02A8               	subwf	___lwmod@dividend+1,f
  2374  0955  1003               	clrc
  2375  0956                     L11:	
  2376  0956  0CA6               	rrf	___lwmod@divisor+1,f
  2377  0957  0CA5               	rrf	___lwmod@divisor,f
  2378  0958  0BA9               	decfsz	___lwmod@counter,f
  2379  0959  2947               	goto	l5939
  2380  095A                     l5947:	
  2381  095A  0828               	movf	___lwmod@dividend+1,w
  2382  095B  00A6               	movwf	?___lwmod+1
  2383  095C  0827               	movf	___lwmod@dividend,w
  2384  095D  00A5               	movwf	?___lwmod
  2385  095E  0008               	return
  2386  095F                     __end_of___lwmod:	
  2387  095F                     __ptext31:	
  2388 ;; *************** function _lcd_add *****************
  2389 ;; Defined at:
  2390 ;;		line 226 in file "lcdv2.h"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;		None
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;		None               void
  2397 ;; Registers used:
  2398 ;;		wreg, status,2, status,0
  2399 ;; Tracked objects:
  2400 ;;		On entry : 300/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2404 ;;      Params:         0       0       0       0       0
  2405 ;;      Locals:         0       0       0       0       0
  2406 ;;      Temps:          0       1       0       0       0
  2407 ;;      Totals:         0       1       0       0       0
  2408 ;;Total ram usage:        1 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    5
  2411 ;; This function calls:
  2412 ;;		Nothing
  2413 ;; This function is called by:
  2414 ;;		_putch
  2415 ;;		_LCD_print_char
  2416 ;;		_clr_display
  2417 ;;		_position
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           
  2422                           ;psect for function _lcd_add
  2423  095F                     _lcd_add:	
  2424                           
  2425                           ;lcdv2.h: 232: bit0 = lcd_data;
  2426                           
  2427                           ;incstack = 0
  2428                           ; Regs used in _lcd_add: [wreg+status,2+status,0]
  2429  095F  107D               	bcf	_bit0/(0+8),_bit0& (0+7)
  2430  0960  1856               	btfsc	_lcd_data,0
  2431  0961  147D               	bsf	_bit0/(0+8),_bit0& (0+7)
  2432                           
  2433                           ;lcdv2.h: 233: bit1 = lcd_data>>1;
  2434  0962  1283               	bcf	3,5	;RP0=0, select bank0
  2435  0963  1303               	bcf	3,6	;RP1=0, select bank0
  2436  0964  0856               	movf	_lcd_data,w
  2437  0965  00A5               	movwf	??_lcd_add
  2438  0966  1003               	clrc
  2439  0967  0CA5               	rrf	??_lcd_add,f
  2440  0968  10FD               	bcf	_bit1/(0+8),_bit1& (0+7)
  2441  0969  1825               	btfsc	??_lcd_add,0
  2442  096A  14FD               	bsf	_bit1/(0+8),_bit1& (0+7)
  2443                           
  2444                           ;lcdv2.h: 234: bit2 = lcd_data>>2;
  2445  096B  1283               	bcf	3,5	;RP0=0, select bank0
  2446  096C  1303               	bcf	3,6	;RP1=0, select bank0
  2447  096D  0856               	movf	_lcd_data,w
  2448  096E  00A5               	movwf	??_lcd_add
  2449  096F  1003               	clrc
  2450  0970  0CA5               	rrf	??_lcd_add,f
  2451  0971  1003               	clrc
  2452  0972  0CA5               	rrf	??_lcd_add,f
  2453  0973  117D               	bcf	_bit2/(0+8),_bit2& (0+7)
  2454  0974  1825               	btfsc	??_lcd_add,0
  2455  0975  157D               	bsf	_bit2/(0+8),_bit2& (0+7)
  2456                           
  2457                           ;lcdv2.h: 235: bit3 = lcd_data>>3;
  2458  0976  1283               	bcf	3,5	;RP0=0, select bank0
  2459  0977  1303               	bcf	3,6	;RP1=0, select bank0
  2460  0978  0856               	movf	_lcd_data,w
  2461  0979  00A5               	movwf	??_lcd_add
  2462  097A  1003               	clrc
  2463  097B  0CA5               	rrf	??_lcd_add,f
  2464  097C  1003               	clrc
  2465  097D  0CA5               	rrf	??_lcd_add,f
  2466  097E  1003               	clrc
  2467  097F  0CA5               	rrf	??_lcd_add,f
  2468  0980  11FD               	bcf	_bit3/(0+8),_bit3& (0+7)
  2469  0981  1825               	btfsc	??_lcd_add,0
  2470  0982  15FD               	bsf	_bit3/(0+8),_bit3& (0+7)
  2471                           
  2472                           ;lcdv2.h: 236: bit4 = lcd_data>>4;
  2473  0983  1283               	bcf	3,5	;RP0=0, select bank0
  2474  0984  1303               	bcf	3,6	;RP1=0, select bank0
  2475  0985  0856               	movf	_lcd_data,w
  2476  0986  00A5               	movwf	??_lcd_add
  2477  0987  3004               	movlw	4
  2478  0988                     u6095:	
  2479  0988  1003               	clrc
  2480  0989  0CA5               	rrf	??_lcd_add,f
  2481  098A  3EFF               	addlw	-1
  2482  098B  1D03               	skipz
  2483  098C  2988               	goto	u6095
  2484  098D  127D               	bcf	_bit4/(0+8),_bit4& (0+7)
  2485  098E  1825               	btfsc	??_lcd_add,0
  2486  098F  167D               	bsf	_bit4/(0+8),_bit4& (0+7)
  2487                           
  2488                           ;lcdv2.h: 237: bit5 = lcd_data>>5;
  2489  0990  1283               	bcf	3,5	;RP0=0, select bank0
  2490  0991  1303               	bcf	3,6	;RP1=0, select bank0
  2491  0992  0856               	movf	_lcd_data,w
  2492  0993  00A5               	movwf	??_lcd_add
  2493  0994  3005               	movlw	5
  2494  0995                     u6115:	
  2495  0995  1003               	clrc
  2496  0996  0CA5               	rrf	??_lcd_add,f
  2497  0997  3EFF               	addlw	-1
  2498  0998  1D03               	skipz
  2499  0999  2995               	goto	u6115
  2500  099A  12FD               	bcf	_bit5/(0+8),_bit5& (0+7)
  2501  099B  1825               	btfsc	??_lcd_add,0
  2502  099C  16FD               	bsf	_bit5/(0+8),_bit5& (0+7)
  2503                           
  2504                           ;lcdv2.h: 238: bit6 = lcd_data>>6;
  2505  099D  1283               	bcf	3,5	;RP0=0, select bank0
  2506  099E  1303               	bcf	3,6	;RP1=0, select bank0
  2507  099F  0856               	movf	_lcd_data,w
  2508  09A0  00A5               	movwf	??_lcd_add
  2509  09A1  3006               	movlw	6
  2510  09A2                     u6135:	
  2511  09A2  1003               	clrc
  2512  09A3  0CA5               	rrf	??_lcd_add,f
  2513  09A4  3EFF               	addlw	-1
  2514  09A5  1D03               	skipz
  2515  09A6  29A2               	goto	u6135
  2516  09A7  137D               	bcf	_bit6/(0+8),_bit6& (0+7)
  2517  09A8  1825               	btfsc	??_lcd_add,0
  2518  09A9  177D               	bsf	_bit6/(0+8),_bit6& (0+7)
  2519                           
  2520                           ;lcdv2.h: 239: bit7 = lcd_data>>7;
  2521  09AA  1283               	bcf	3,5	;RP0=0, select bank0
  2522  09AB  1303               	bcf	3,6	;RP1=0, select bank0
  2523  09AC  0856               	movf	_lcd_data,w
  2524  09AD  00A5               	movwf	??_lcd_add
  2525  09AE  3007               	movlw	7
  2526  09AF                     u6155:	
  2527  09AF  1003               	clrc
  2528  09B0  0CA5               	rrf	??_lcd_add,f
  2529  09B1  3EFF               	addlw	-1
  2530  09B2  1D03               	skipz
  2531  09B3  29AF               	goto	u6155
  2532  09B4  1258               	bcf	_bit7/(0+8),_bit7& (0+7)
  2533  09B5  1825               	btfsc	??_lcd_add,0
  2534  09B6  1658               	bsf	_bit7/(0+8),_bit7& (0+7)
  2535                           
  2536                           ;lcdv2.h: 241: RC3 = 0;
  2537  09B7  1283               	bcf	3,5	;RP0=0, select bank0
  2538  09B8  1303               	bcf	3,6	;RP1=0, select bank0
  2539  09B9  1187               	bcf	7,3	;volatile
  2540                           
  2541                           ;lcdv2.h: 242: _delay(1);
  2542  09BA  0000               	nop
  2543                           
  2544                           ;lcdv2.h: 243: RC3 = 1;
  2545  09BB  1283               	bcf	3,5	;RP0=0, select bank0
  2546  09BC  1303               	bcf	3,6	;RP1=0, select bank0
  2547  09BD  1587               	bsf	7,3	;volatile
  2548                           
  2549                           ;lcdv2.h: 244: _delay(1);
  2550  09BE  0000               	nop
  2551                           
  2552                           ;lcdv2.h: 246: RC1 = bit4;
  2553  09BF  1E7D               	btfss	_bit4/(0+8),_bit4& (0+7)
  2554  09C0  29C5               	goto	u6170
  2555  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  2556  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  2557  09C3  1487               	bsf	7,1	;volatile
  2558  09C4  29C8               	goto	l5187
  2559  09C5                     u6170:	
  2560  09C5  1283               	bcf	3,5	;RP0=0, select bank0
  2561  09C6  1303               	bcf	3,6	;RP1=0, select bank0
  2562  09C7  1087               	bcf	7,1	;volatile
  2563  09C8                     l5187:	
  2564                           
  2565                           ;lcdv2.h: 247: RD0 = bit5;
  2566  09C8  1EFD               	btfss	_bit5/(0+8),_bit5& (0+7)
  2567  09C9  29CE               	goto	u6190
  2568  09CA  1283               	bcf	3,5	;RP0=0, select bank0
  2569  09CB  1303               	bcf	3,6	;RP1=0, select bank0
  2570  09CC  1408               	bsf	8,0	;volatile
  2571  09CD  29D1               	goto	l5189
  2572  09CE                     u6190:	
  2573  09CE  1283               	bcf	3,5	;RP0=0, select bank0
  2574  09CF  1303               	bcf	3,6	;RP1=0, select bank0
  2575  09D0  1008               	bcf	8,0	;volatile
  2576  09D1                     l5189:	
  2577                           
  2578                           ;lcdv2.h: 248: RC0 = bit6;
  2579  09D1  1F7D               	btfss	_bit6/(0+8),_bit6& (0+7)
  2580  09D2  29D7               	goto	u6210
  2581  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  2582  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  2583  09D5  1407               	bsf	7,0	;volatile
  2584  09D6  29DA               	goto	l5191
  2585  09D7                     u6210:	
  2586  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  2587  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  2588  09D9  1007               	bcf	7,0	;volatile
  2589  09DA                     l5191:	
  2590                           
  2591                           ;lcdv2.h: 249: RD1 = bit7;
  2592  09DA  1E58               	btfss	_bit7/(0+8),_bit7& (0+7)
  2593  09DB  29E0               	goto	u6230
  2594  09DC  1283               	bcf	3,5	;RP0=0, select bank0
  2595  09DD  1303               	bcf	3,6	;RP1=0, select bank0
  2596  09DE  1488               	bsf	8,1	;volatile
  2597  09DF  29E3               	goto	l5193
  2598  09E0                     u6230:	
  2599  09E0  1283               	bcf	3,5	;RP0=0, select bank0
  2600  09E1  1303               	bcf	3,6	;RP1=0, select bank0
  2601  09E2  1088               	bcf	8,1	;volatile
  2602  09E3                     l5193:	
  2603                           
  2604                           ;lcdv2.h: 251: _delay(1);
  2605  09E3  0000               	nop
  2606                           
  2607                           ;lcdv2.h: 252: RC3 = 0;
  2608  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  2609  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  2610  09E6  1187               	bcf	7,3	;volatile
  2611                           
  2612                           ;lcdv2.h: 253: _delay(1);
  2613  09E7  0000               	nop
  2614                           
  2615                           ;lcdv2.h: 257: RC3 = 0;
  2616  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  2617  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  2618  09EA  1187               	bcf	7,3	;volatile
  2619                           
  2620                           ;lcdv2.h: 258: _delay(1);
  2621  09EB  0000               	nop
  2622                           
  2623                           ;lcdv2.h: 259: RC3 = 1;
  2624  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  2625  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  2626  09EE  1587               	bsf	7,3	;volatile
  2627                           
  2628                           ;lcdv2.h: 260: _delay(1);
  2629  09EF  0000               	nop
  2630                           
  2631                           ;lcdv2.h: 262: RC1 = bit0;
  2632  09F0  1C7D               	btfss	_bit0/(0+8),_bit0& (0+7)
  2633  09F1  29F6               	goto	u6250
  2634  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  2635  09F3  1303               	bcf	3,6	;RP1=0, select bank0
  2636  09F4  1487               	bsf	7,1	;volatile
  2637  09F5  29F9               	goto	l5209
  2638  09F6                     u6250:	
  2639  09F6  1283               	bcf	3,5	;RP0=0, select bank0
  2640  09F7  1303               	bcf	3,6	;RP1=0, select bank0
  2641  09F8  1087               	bcf	7,1	;volatile
  2642  09F9                     l5209:	
  2643                           
  2644                           ;lcdv2.h: 263: RD0 = bit1;
  2645  09F9  1CFD               	btfss	_bit1/(0+8),_bit1& (0+7)
  2646  09FA  29FF               	goto	u6270
  2647  09FB  1283               	bcf	3,5	;RP0=0, select bank0
  2648  09FC  1303               	bcf	3,6	;RP1=0, select bank0
  2649  09FD  1408               	bsf	8,0	;volatile
  2650  09FE  2A02               	goto	l5211
  2651  09FF                     u6270:	
  2652  09FF  1283               	bcf	3,5	;RP0=0, select bank0
  2653  0A00  1303               	bcf	3,6	;RP1=0, select bank0
  2654  0A01  1008               	bcf	8,0	;volatile
  2655  0A02                     l5211:	
  2656                           
  2657                           ;lcdv2.h: 264: RC0 = bit2;
  2658  0A02  1D7D               	btfss	_bit2/(0+8),_bit2& (0+7)
  2659  0A03  2A08               	goto	u6290
  2660  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  2661  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  2662  0A06  1407               	bsf	7,0	;volatile
  2663  0A07  2A0B               	goto	l5213
  2664  0A08                     u6290:	
  2665  0A08  1283               	bcf	3,5	;RP0=0, select bank0
  2666  0A09  1303               	bcf	3,6	;RP1=0, select bank0
  2667  0A0A  1007               	bcf	7,0	;volatile
  2668  0A0B                     l5213:	
  2669                           
  2670                           ;lcdv2.h: 265: RD1 = bit3;
  2671  0A0B  1DFD               	btfss	_bit3/(0+8),_bit3& (0+7)
  2672  0A0C  2A11               	goto	u6310
  2673  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  2674  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  2675  0A0F  1488               	bsf	8,1	;volatile
  2676  0A10  2A14               	goto	l5215
  2677  0A11                     u6310:	
  2678  0A11  1283               	bcf	3,5	;RP0=0, select bank0
  2679  0A12  1303               	bcf	3,6	;RP1=0, select bank0
  2680  0A13  1088               	bcf	8,1	;volatile
  2681  0A14                     l5215:	
  2682                           
  2683                           ;lcdv2.h: 267: _delay(1);
  2684  0A14  0000               	nop
  2685                           
  2686                           ;lcdv2.h: 268: RC3 = 0;
  2687  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  2688  0A16  1303               	bcf	3,6	;RP1=0, select bank0
  2689  0A17  1187               	bcf	7,3	;volatile
  2690                           
  2691                           ;lcdv2.h: 269: _delay(1);
  2692  0A18  0000               	nop
  2693  0A19  0008               	return
  2694  0A1A                     __end_of_lcd_add:	
  2695  0A1A                     __ptext30:	
  2696 ;; *************** function _position *****************
  2697 ;; Defined at:
  2698 ;;		line 210 in file "lcdv2.h"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  row             1    wreg     unsigned char 
  2701 ;;  collum          1    6[BANK0 ] unsigned char 
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  row             1   10[BANK0 ] unsigned char 
  2704 ;;  post            1    9[BANK0 ] unsigned char 
  2705 ;; Return value:  Size  Location     Type
  2706 ;;		None               void
  2707 ;; Registers used:
  2708 ;;		wreg, status,2, status,0, pclath, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 300/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2714 ;;      Params:         0       1       0       0       0
  2715 ;;      Locals:         0       2       0       0       0
  2716 ;;      Temps:          0       2       0       0       0
  2717 ;;      Totals:         0       5       0       0       0
  2718 ;;Total ram usage:        5 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    6
  2721 ;; This function calls:
  2722 ;;		_lcd_add
  2723 ;; This function is called by:
  2724 ;;		_LCD_print_char
  2725 ;;		_main
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function _position
  2731  0A1A                     _position:	
  2732                           
  2733                           ;incstack = 0
  2734                           ; Regs used in _position: [wreg+status,2+status,0+pclath+cstack]
  2735                           ;position@row stored from wreg
  2736  0A1A  00AA               	movwf	position@row
  2737                           
  2738                           ;lcdv2.h: 212: char post ;
  2739                           ;lcdv2.h: 213: if( row == 1 ) row = 128;
  2740  0A1B  0B2A               	decfsz	position@row,w
  2741  0A1C  2A1F               	goto	l5225
  2742  0A1D  3080               	movlw	128
  2743  0A1E  00AA               	movwf	position@row
  2744  0A1F                     l5225:	
  2745                           
  2746                           ;lcdv2.h: 214: if( row == 2 ) row = 192;
  2747  0A1F  3002               	movlw	2
  2748  0A20  062A               	xorwf	position@row,w
  2749  0A21  1D03               	btfss	3,2
  2750  0A22  2A25               	goto	l5229
  2751  0A23  30C0               	movlw	192
  2752  0A24  00AA               	movwf	position@row
  2753  0A25                     l5229:	
  2754                           
  2755                           ;lcdv2.h: 215: post = row + collum - 1;
  2756  0A25  0826               	movf	position@collum,w
  2757  0A26  072A               	addwf	position@row,w
  2758  0A27  3EFF               	addlw	255
  2759  0A28  00A9               	movwf	position@post
  2760                           
  2761                           ;lcdv2.h: 216: RC2 = 0;
  2762  0A29  1107               	bcf	7,2	;volatile
  2763                           
  2764                           ;lcdv2.h: 217: _delay(20);
  2765  0A2A  3006               	movlw	6
  2766  0A2B  00A7               	movwf	??_position
  2767  0A2C                     u8847:	
  2768  0A2C  0BA7               	decfsz	??_position,f
  2769  0A2D  2A2C               	goto	u8847
  2770  0A2E  0000               	nop
  2771                           
  2772                           ;lcdv2.h: 218: lcd_data = post ;
  2773  0A2F  1283               	bcf	3,5	;RP0=0, select bank0
  2774  0A30  1303               	bcf	3,6	;RP1=0, select bank0
  2775  0A31  0829               	movf	position@post,w
  2776  0A32  00D6               	movwf	_lcd_data
  2777                           
  2778                           ;lcdv2.h: 219: lcd_add();
  2779  0A33  215F  120A  158A   	fcall	_lcd_add
  2780                           
  2781                           ;lcdv2.h: 220: _delay((unsigned long)((10)*(4000000/4000.0)));
  2782  0A36  300D               	movlw	13
  2783  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  2784  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  2785  0A39  00A8               	movwf	??_position+1
  2786  0A3A  30FB               	movlw	251
  2787  0A3B  00A7               	movwf	??_position
  2788  0A3C                     u8857:	
  2789  0A3C  0BA7               	decfsz	??_position,f
  2790  0A3D  2A3C               	goto	u8857
  2791  0A3E  0BA8               	decfsz	??_position+1,f
  2792  0A3F  2A3C               	goto	u8857
  2793  0A40  2A41               	nop2
  2794  0A41  0008               	return
  2795  0A42                     __end_of_position:	
  2796                           
  2797                           	psect	text3
  2798  1C9B                     __ptext3:	
  2799 ;; *************** function _lcd_init *****************
  2800 ;; Defined at:
  2801 ;;		line 60 in file "lcdv2.h"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  DelayLCD        2    5[BANK0 ] unsigned int 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;		None               void
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, status,0
  2810 ;; Tracked objects:
  2811 ;;		On entry : 300/100
  2812 ;;		On exit  : 300/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2815 ;;      Params:         0       0       0       0       0
  2816 ;;      Locals:         0       2       0       0       0
  2817 ;;      Temps:          0       0       0       0       0
  2818 ;;      Totals:         0       2       0       0       0
  2819 ;;Total ram usage:        2 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    5
  2822 ;; This function calls:
  2823 ;;		Nothing
  2824 ;; This function is called by:
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           
  2830                           ;psect for function _lcd_init
  2831  1C9B                     _lcd_init:	
  2832                           
  2833                           ;lcdv2.h: 63: RC3 = 0;
  2834                           
  2835                           ;incstack = 0
  2836                           ; Regs used in _lcd_init: [wreg+status,2+status,0]
  2837  1C9B  1283               	bcf	3,5	;RP0=0, select bank0
  2838  1C9C  1187               	bcf	7,3	;volatile
  2839                           
  2840                           ;lcdv2.h: 65: unsigned int DelayLCD;
  2841                           ;lcdv2.h: 67: RC2 = 0;
  2842  1C9D  1107               	bcf	7,2	;volatile
  2843                           
  2844                           ;lcdv2.h: 68: RD1 = 0;
  2845  1C9E  1088               	bcf	8,1	;volatile
  2846                           
  2847                           ;lcdv2.h: 69: RC0 = 0;
  2848  1C9F  1007               	bcf	7,0	;volatile
  2849                           
  2850                           ;lcdv2.h: 70: RD0 = 1;
  2851  1CA0  1408               	bsf	8,0	;volatile
  2852                           
  2853                           ;lcdv2.h: 71: RC1 = 0;
  2854  1CA1  1087               	bcf	7,1	;volatile
  2855                           
  2856                           ;lcdv2.h: 72: RC3 = 1;
  2857  1CA2  1587               	bsf	7,3	;volatile
  2858                           
  2859                           ;lcdv2.h: 73: RC3 = 0;
  2860  1CA3  1187               	bcf	7,3	;volatile
  2861                           
  2862                           ;lcdv2.h: 74: RD1 = 1;
  2863  1CA4  1488               	bsf	8,1	;volatile
  2864                           
  2865                           ;lcdv2.h: 75: RC0 = 0;
  2866  1CA5  1007               	bcf	7,0	;volatile
  2867                           
  2868                           ;lcdv2.h: 76: RD0 = 0;
  2869                           
  2870                           ;lcdv2.h: 77: RC1 = 0;
  2871                           
  2872                           ;lcdv2.h: 78: RC3 = 1;
  2873                           
  2874                           ;lcdv2.h: 79: RC3 = 0;
  2875                           
  2876                           ;lcdv2.h: 80: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  2877                           
  2878                           ;lcdv2.h: 83: RC2 = 0;
  2879                           
  2880                           ;lcdv2.h: 84: RD1 = 0;
  2881                           
  2882                           ;lcdv2.h: 85: RC0 = 0;
  2883  1CA6  24E5  160A  158A   	fcall	PL2	;call to abstracted procedure
  2884                           
  2885                           ;lcdv2.h: 86: RD0 = 1;
  2886  1CA9  1408               	bsf	8,0	;volatile
  2887                           
  2888                           ;lcdv2.h: 87: RC1 = 0;
  2889  1CAA  1087               	bcf	7,1	;volatile
  2890                           
  2891                           ;lcdv2.h: 88: RC3 = 1;
  2892  1CAB  1587               	bsf	7,3	;volatile
  2893                           
  2894                           ;lcdv2.h: 89: RC3 = 0;
  2895  1CAC  1187               	bcf	7,3	;volatile
  2896                           
  2897                           ;lcdv2.h: 90: RD1 = 1;
  2898  1CAD  1488               	bsf	8,1	;volatile
  2899                           
  2900                           ;lcdv2.h: 91: RC0 = 0;
  2901  1CAE  1007               	bcf	7,0	;volatile
  2902                           
  2903                           ;lcdv2.h: 92: RD0 = 0;
  2904                           
  2905                           ;lcdv2.h: 93: RC1 = 0;
  2906                           
  2907                           ;lcdv2.h: 94: RC3 = 1;
  2908                           
  2909                           ;lcdv2.h: 95: RC3 = 0;
  2910                           
  2911                           ;lcdv2.h: 96: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  2912                           
  2913                           ;lcdv2.h: 99: RC2 = 0;
  2914                           
  2915                           ;lcdv2.h: 100: RD1 = 0;
  2916                           
  2917                           ;lcdv2.h: 101: RC0 = 0;
  2918  1CAF  24E5  160A  158A   	fcall	PL2	;call to abstracted procedure
  2919                           
  2920                           ;lcdv2.h: 102: RD0 = 0;
  2921  1CB2  1008               	bcf	8,0	;volatile
  2922                           
  2923                           ;lcdv2.h: 103: RC1 = 0;
  2924  1CB3  1087               	bcf	7,1	;volatile
  2925                           
  2926                           ;lcdv2.h: 104: RC3 = 1;
  2927  1CB4  1587               	bsf	7,3	;volatile
  2928                           
  2929                           ;lcdv2.h: 105: RC3 = 0;
  2930  1CB5  1187               	bcf	7,3	;volatile
  2931                           
  2932                           ;lcdv2.h: 106: RD1 = 0;
  2933  1CB6  1088               	bcf	8,1	;volatile
  2934                           
  2935                           ;lcdv2.h: 107: RC0 = 1;
  2936  1CB7  1407               	bsf	7,0	;volatile
  2937                           
  2938                           ;lcdv2.h: 108: RD0 = 1;
  2939  1CB8  1408               	bsf	8,0	;volatile
  2940                           
  2941                           ;lcdv2.h: 109: RC1 = 0;
  2942  1CB9  1087               	bcf	7,1	;volatile
  2943                           
  2944                           ;lcdv2.h: 110: RC3 = 1;
  2945  1CBA  1587               	bsf	7,3	;volatile
  2946                           
  2947                           ;lcdv2.h: 111: RC3 = 0;
  2948  1CBB  1187               	bcf	7,3	;volatile
  2949                           
  2950                           ;lcdv2.h: 112: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  2951  1CBC  01A5               	clrf	lcd_init@DelayLCD
  2952  1CBD  01A6               	clrf	lcd_init@DelayLCD+1
  2953  1CBE                     l5997:	
  2954  1CBE  24F9  160A  158A   	fcall	PL8	;call to abstracted procedure
  2955  1CC1  1903               	skipnz
  2956  1CC2  0225               	subwf	lcd_init@DelayLCD,w
  2957  1CC3  1C03               	skipc
  2958  1CC4  2CBE               	goto	l5997
  2959                           
  2960                           ;lcdv2.h: 115: RC2 = 0;
  2961  1CC5  1107               	bcf	7,2	;volatile
  2962                           
  2963                           ;lcdv2.h: 116: RD1 = 0;
  2964  1CC6  1088               	bcf	8,1	;volatile
  2965                           
  2966                           ;lcdv2.h: 117: RC0 = 0;
  2967  1CC7  1007               	bcf	7,0	;volatile
  2968                           
  2969                           ;lcdv2.h: 118: RD0 = 0;
  2970  1CC8  1008               	bcf	8,0	;volatile
  2971                           
  2972                           ;lcdv2.h: 119: RC1 = 0;
  2973  1CC9  1087               	bcf	7,1	;volatile
  2974                           
  2975                           ;lcdv2.h: 120: RC3 = 1;
  2976  1CCA  1587               	bsf	7,3	;volatile
  2977                           
  2978                           ;lcdv2.h: 121: RC3 = 0;
  2979  1CCB  1187               	bcf	7,3	;volatile
  2980                           
  2981                           ;lcdv2.h: 122: RD1 = 1;
  2982  1CCC  1488               	bsf	8,1	;volatile
  2983                           
  2984                           ;lcdv2.h: 123: RC0 = 1;
  2985  1CCD  1407               	bsf	7,0	;volatile
  2986                           
  2987                           ;lcdv2.h: 124: RD0 = 0;
  2988                           
  2989                           ;lcdv2.h: 125: RC1 = 0;
  2990                           
  2991                           ;lcdv2.h: 126: RC3 = 1;
  2992                           
  2993                           ;lcdv2.h: 127: RC3 = 0;
  2994                           
  2995                           ;lcdv2.h: 128: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  2996                           
  2997                           ;lcdv2.h: 131: RC2 = 0;
  2998                           
  2999                           ;lcdv2.h: 132: RD1 = 0;
  3000                           
  3001                           ;lcdv2.h: 133: RC0 = 0;
  3002  1CCE  24E5  160A  158A   	fcall	PL2	;call to abstracted procedure
  3003                           
  3004                           ;lcdv2.h: 134: RD0 = 0;
  3005  1CD1  1008               	bcf	8,0	;volatile
  3006                           
  3007                           ;lcdv2.h: 135: RC1 = 0;
  3008  1CD2  1087               	bcf	7,1	;volatile
  3009                           
  3010                           ;lcdv2.h: 136: RC3 = 1;
  3011  1CD3  1587               	bsf	7,3	;volatile
  3012                           
  3013                           ;lcdv2.h: 137: RC3 = 0;
  3014  1CD4  1187               	bcf	7,3	;volatile
  3015                           
  3016                           ;lcdv2.h: 138: RD1 = 0;
  3017  1CD5  1088               	bcf	8,1	;volatile
  3018                           
  3019                           ;lcdv2.h: 139: RC0 = 0;
  3020  1CD6  1007               	bcf	7,0	;volatile
  3021                           
  3022                           ;lcdv2.h: 140: RD0 = 0;
  3023  1CD7  1008               	bcf	8,0	;volatile
  3024                           
  3025                           ;lcdv2.h: 141: RC1 = 1;
  3026  1CD8  1487               	bsf	7,1	;volatile
  3027                           
  3028                           ;lcdv2.h: 142: RC3 = 1;
  3029  1CD9  1587               	bsf	7,3	;volatile
  3030                           
  3031                           ;lcdv2.h: 143: RC3 = 0;
  3032  1CDA  1187               	bcf	7,3	;volatile
  3033                           
  3034                           ;lcdv2.h: 144: for(DelayLCD=0;DelayLCD<2500;DelayLCD++);
  3035  1CDB  01A5               	clrf	lcd_init@DelayLCD
  3036  1CDC  01A6               	clrf	lcd_init@DelayLCD+1
  3037  1CDD                     l6017:	
  3038  1CDD  24F9  160A  158A   	fcall	PL8	;call to abstracted procedure
  3039  1CE0  1903               	skipnz
  3040  1CE1  0225               	subwf	lcd_init@DelayLCD,w
  3041  1CE2  1803               	btfsc	3,0
  3042  1CE3  0008               	return
  3043  1CE4  2CDD               	goto	l6017
  3044  1CE5                     __end_of_lcd_init:	
  3045  1CE5                     PL2:	
  3046  1CE5  1008               	bcf	8,0	;volatile
  3047  1CE6  1087               	bcf	7,1	;volatile
  3048  1CE7  1587               	bsf	7,3	;volatile
  3049  1CE8  1187               	bcf	7,3	;volatile
  3050  1CE9  01A5               	clrf	lcd_init@DelayLCD
  3051  1CEA  01A6               	clrf	lcd_init@DelayLCD+1
  3052  1CEB                     l5977:	
  3053  1CEB  0AA5               	incf	lcd_init@DelayLCD,f
  3054  1CEC  1903               	skipnz
  3055  1CED  0AA6               	incf	lcd_init@DelayLCD+1,f
  3056  1CEE  3009               	movlw	9
  3057  1CEF  0226               	subwf	lcd_init@DelayLCD+1,w
  3058  1CF0  30C4               	movlw	196
  3059  1CF1  1903               	skipnz
  3060  1CF2  0225               	subwf	lcd_init@DelayLCD,w
  3061  1CF3  1C03               	skipc
  3062  1CF4  2CEB               	goto	l5977
  3063  1CF5  1107               	bcf	7,2	;volatile
  3064  1CF6  1088               	bcf	8,1	;volatile
  3065  1CF7  1007               	bcf	7,0	;volatile
  3066  1CF8  0008               	return
  3067  1CF9                     __end_ofPL2:	
  3068  1CF9                     PL8:	
  3069  1CF9  0AA5               	incf	lcd_init@DelayLCD,f
  3070  1CFA  1903               	skipnz
  3071  1CFB  0AA6               	incf	lcd_init@DelayLCD+1,f
  3072  1CFC  3009               	movlw	9
  3073  1CFD  0226               	subwf	lcd_init@DelayLCD+1,w
  3074  1CFE  34C4               	retlw	196
  3075  1CFF                     __end_ofPL8:	
  3076                           
  3077                           	psect	text4
  3078  1BED                     __ptext4:	
  3079 ;; *************** function _enableInterrupt *****************
  3080 ;; Defined at:
  3081 ;;		line 7 in file "interrupts.h"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;		None               void
  3088 ;; Registers used:
  3089 ;;		None
  3090 ;; Tracked objects:
  3091 ;;		On entry : 300/100
  3092 ;;		On exit  : 300/100
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3095 ;;      Params:         0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0
  3098 ;;      Totals:         0       0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    5
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           
  3110                           ;psect for function _enableInterrupt
  3111  1BED                     _enableInterrupt:	
  3112                           
  3113                           ;interrupts.h: 9: RBIE = 0;
  3114                           
  3115                           ;incstack = 0
  3116                           ; Regs used in _enableInterrupt: []
  3117  1BED  118B               	bcf	11,3	;volatile
  3118                           
  3119                           ;interrupts.h: 10: INTE = 0;
  3120  1BEE  120B               	bcf	11,4	;volatile
  3121                           
  3122                           ;interrupts.h: 12: PSPIE = 0;
  3123  1BEF  138C               	bcf	12,7	;volatile
  3124                           
  3125                           ;interrupts.h: 13: ADIE = 0;
  3126  1BF0  130C               	bcf	12,6	;volatile
  3127                           
  3128                           ;interrupts.h: 15: TXIE = 0;
  3129  1BF1  120C               	bcf	12,4	;volatile
  3130                           
  3131                           ;interrupts.h: 16: RCIE = 1;
  3132  1BF2  168C               	bsf	12,5	;volatile
  3133                           
  3134                           ;interrupts.h: 18: SSPIE = 0;
  3135  1BF3  118C               	bcf	12,3	;volatile
  3136                           
  3137                           ;interrupts.h: 19: CCP1IE = 0;
  3138  1BF4  110C               	bcf	12,2	;volatile
  3139                           
  3140                           ;interrupts.h: 21: TMR1IE = 1;
  3141  1BF5  140C               	bsf	12,0	;volatile
  3142                           
  3143                           ;interrupts.h: 22: TMR2IE = 0;
  3144  1BF6  108C               	bcf	12,1	;volatile
  3145                           
  3146                           ;interrupts.h: 23: T0IE = 0;
  3147  1BF7  128B               	bcf	11,5	;volatile
  3148                           
  3149                           ;interrupts.h: 25: EEIE = 0;
  3150  1BF8  120D               	bcf	13,4	;volatile
  3151                           
  3152                           ;interrupts.h: 26: BCLIE = 0;
  3153  1BF9  118D               	bcf	13,3	;volatile
  3154                           
  3155                           ;interrupts.h: 27: CCP2IE = 0;
  3156  1BFA  100D               	bcf	13,0	;volatile
  3157                           
  3158                           ;interrupts.h: 30: GIE = 1;
  3159  1BFB  178B               	bsf	11,7	;volatile
  3160                           
  3161                           ;interrupts.h: 31: PEIE = 1;
  3162  1BFC  170B               	bsf	11,6	;volatile
  3163  1BFD  0008               	return
  3164  1BFE                     __end_of_enableInterrupt:	
  3165                           
  3166                           	psect	text5
  3167  07DA                     __ptext5:	
  3168 ;; *************** function _eeprom_write *****************
  3169 ;; Defined at:
  3170 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic\eewrite.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  addr            1    wreg     unsigned char 
  3173 ;;  value           1    8[BANK0 ] unsigned char 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  addr            1    9[BANK0 ] unsigned char 
  3176 ;; Return value:  Size  Location     Type
  3177 ;;		None               void
  3178 ;; Registers used:
  3179 ;;		wreg, status,2, status,0
  3180 ;; Tracked objects:
  3181 ;;		On entry : 300/100
  3182 ;;		On exit  : 300/300
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3185 ;;      Params:         0       1       0       0       0
  3186 ;;      Locals:         0       1       0       0       0
  3187 ;;      Temps:          0       0       0       0       0
  3188 ;;      Totals:         0       2       0       0       0
  3189 ;;Total ram usage:        2 bytes
  3190 ;; Hardware stack levels used:    1
  3191 ;; Hardware stack levels required when called:    5
  3192 ;; This function calls:
  3193 ;;		Nothing
  3194 ;; This function is called by:
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           
  3200                           ;psect for function _eeprom_write
  3201  07DA                     _eeprom_write:	
  3202                           
  3203                           ;incstack = 0
  3204                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3205                           ;eeprom_write@addr stored from wreg
  3206  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  3207  07DB  00A9               	movwf	eeprom_write@addr
  3208  07DC                     l755:	
  3209  07DC  1683               	bsf	3,5	;RP0=1, select bank3
  3210  07DD  1703               	bsf	3,6	;RP1=1, select bank3
  3211  07DE  188C               	btfsc	12,1	;volsfr
  3212  07DF  2FDC               	goto	l755
  3213  07E0  1283               	bcf	3,5	;RP0=0, select bank0
  3214  07E1  1303               	bcf	3,6	;RP1=0, select bank0
  3215  07E2  0829               	movf	eeprom_write@addr,w
  3216  07E3  1703               	bsf	3,6	;RP1=1, select bank2
  3217  07E4  008D               	movwf	13	;volatile
  3218  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  3219  07E6  0828               	movf	eeprom_write@value,w
  3220  07E7  1703               	bsf	3,6	;RP1=1, select bank2
  3221  07E8  008C               	movwf	12	;volatile
  3222  07E9  303F               	movlw	63
  3223  07EA  1683               	bsf	3,5	;RP0=1, select bank3
  3224  07EB  058C               	andwf	12,f	;volsfr
  3225  07EC  1003               	bcf	3,0	;volatile
  3226  07ED  1B8B               	btfsc	11,7	;volatile
  3227  07EE  1403               	bsf	3,0	;volatile
  3228  07EF  138B               	bcf	11,7	;volatile
  3229  07F0  150C               	bsf	12,2	;volsfr
  3230  07F1  3055               	movlw	85
  3231  07F2  008D               	movwf	13	;volsfr
  3232  07F3  30AA               	movlw	170
  3233  07F4  008D               	movwf	13	;volsfr
  3234  07F5  148C               	bsf	12,1	;volsfr
  3235  07F6  110C               	bcf	12,2	;volsfr
  3236  07F7  1803               	btfsc	3,0	;volatile
  3237  07F8  178B               	bsf	11,7	;volatile
  3238  07F9  0008               	return
  3239  07FA                     __end_of_eeprom_write:	
  3240                           
  3241                           	psect	text6
  3242  0800                     __ptext6:	
  3243 ;; *************** function _eeprom_read *****************
  3244 ;; Defined at:
  3245 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic\eeread.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  addr            1    wreg     unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  addr            1    5[BANK0 ] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      unsigned char 
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0
  3254 ;; Tracked objects:
  3255 ;;		On entry : 200/100
  3256 ;;		On exit  : 300/200
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3259 ;;      Params:         0       0       0       0       0
  3260 ;;      Locals:         0       1       0       0       0
  3261 ;;      Temps:          0       0       0       0       0
  3262 ;;      Totals:         0       1       0       0       0
  3263 ;;Total ram usage:        1 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    5
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_main
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function _eeprom_read
  3275  0800                     _eeprom_read:	
  3276                           
  3277                           ;incstack = 0
  3278                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  3279                           ;eeprom_read@addr stored from wreg
  3280  0800  1283               	bcf	3,5	;RP0=0, select bank0
  3281  0801  00A5               	movwf	eeprom_read@addr
  3282  0802  2805               	goto	l733
  3283  0803                     u8021:	
  3284  0803  1283               	bcf	3,5	;RP0=0, select bank0
  3285  0804  1303               	bcf	3,6	;RP1=0, select bank0
  3286  0805                     l733:	
  3287  0805  0064               	clrwdt	;# 
  3288  0806  1683               	bsf	3,5	;RP0=1, select bank3
  3289  0807  1703               	bsf	3,6	;RP1=1, select bank3
  3290  0808  188C               	btfsc	12,1	;volsfr
  3291  0809  2803               	goto	u8021
  3292  080A  1283               	bcf	3,5	;RP0=0, select bank0
  3293  080B  1303               	bcf	3,6	;RP1=0, select bank0
  3294  080C  0825               	movf	eeprom_read@addr,w
  3295  080D  1703               	bsf	3,6	;RP1=1, select bank2
  3296  080E  008D               	movwf	13	;volatile
  3297  080F  303F               	movlw	63
  3298  0810  1683               	bsf	3,5	;RP0=1, select bank3
  3299  0811  058C               	andwf	12,f	;volsfr
  3300  0812  140C               	bsf	12,0	;volsfr
  3301  0813  1003               	clrc
  3302  0814  180C               	btfsc	12,0	;volsfr
  3303  0815  1403               	setc
  3304  0816  1803               	skipnc
  3305  0817  3001               	movlw	1
  3306  0818  1283               	bcf	3,5	;RP0=0, select bank2
  3307  0819  080C               	movf	12,w	;volatile
  3308  081A  0008               	return
  3309  081B                     __end_of_eeprom_read:	
  3310                           
  3311                           	psect	text8
  3312  07FA                     __ptext8:	
  3313 ;; *************** function _atod_init *****************
  3314 ;; Defined at:
  3315 ;;		line 8 in file "a2d.h"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;		None               void
  3322 ;; Registers used:
  3323 ;;		wreg
  3324 ;; Tracked objects:
  3325 ;;		On entry : B00/0
  3326 ;;		On exit  : B00/100
  3327 ;;		Unchanged: 800/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3329 ;;      Params:         0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0
  3331 ;;      Temps:          0       0       0       0       0
  3332 ;;      Totals:         0       0       0       0       0
  3333 ;;Total ram usage:        0 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    5
  3336 ;; This function calls:
  3337 ;;		Nothing
  3338 ;; This function is called by:
  3339 ;;		_main
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _atod_init
  3345  07FA                     _atod_init:	
  3346                           
  3347                           ;a2d.h: 9: ADCON0 = 0b01000010;
  3348                           
  3349                           ;incstack = 0
  3350                           ; Regs used in _atod_init: [wreg]
  3351  07FA  3042               	movlw	66
  3352  07FB  009F               	movwf	31	;volatile
  3353                           
  3354                           ;a2d.h: 10: ADCON1 = 0b10000100;
  3355  07FC  3084               	movlw	132
  3356  07FD  1683               	bsf	3,5	;RP0=1, select bank1
  3357  07FE  009F               	movwf	31	;volatile
  3358  07FF  0008               	return
  3359  0800                     __end_of_atod_init:	
  3360                           
  3361                           	psect	text15
  3362  1C31                     __ptext15:	
  3363 ;; *************** function ___ltmod *****************
  3364 ;; Defined at:
  3365 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ltmod.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  divisor         3    5[BANK0 ] unsigned um
  3368 ;;  dividend        3    8[BANK0 ] unsigned um
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;  counter         1   11[BANK0 ] unsigned char 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  3    5[BANK0 ] unsigned um
  3373 ;; Registers used:
  3374 ;;		wreg, status,2, status,0
  3375 ;; Tracked objects:
  3376 ;;		On entry : 300/0
  3377 ;;		On exit  : 300/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3380 ;;      Params:         0       6       0       0       0
  3381 ;;      Locals:         0       1       0       0       0
  3382 ;;      Temps:          0       0       0       0       0
  3383 ;;      Totals:         0       7       0       0       0
  3384 ;;Total ram usage:        7 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; Hardware stack levels required when called:    5
  3387 ;; This function calls:
  3388 ;;		Nothing
  3389 ;; This function is called by:
  3390 ;;		_main
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           
  3395                           ;psect for function ___ltmod
  3396  1C31                     ___ltmod:	
  3397                           
  3398                           ;incstack = 0
  3399                           ; Regs used in ___ltmod: [wreg+status,2+status,0]
  3400  1C31  0827               	movf	___ltmod@divisor+2,w
  3401  1C32  0426               	iorwf	___ltmod@divisor+1,w
  3402  1C33  0425               	iorwf	___ltmod@divisor,w
  3403  1C34  1903               	skipnz
  3404  1C35  2C5B               	goto	l6397
  3405  1C36  01AB               	clrf	___ltmod@counter
  3406  1C37                     L5:	
  3407  1C37  0AAB               	incf	___ltmod@counter,f
  3408  1C38  1BA7               	btfsc	___ltmod@divisor+2,7
  3409  1C39  2C3F               	goto	l6389
  3410  1C3A  1003               	clrc
  3411  1C3B  0DA5               	rlf	___ltmod@divisor,f
  3412  1C3C  0DA6               	rlf	___ltmod@divisor+1,f
  3413  1C3D  0DA7               	rlf	___ltmod@divisor+2,f
  3414  1C3E  2C37               	goto	L5
  3415  1C3F                     l6389:	
  3416  1C3F  0827               	movf	___ltmod@divisor+2,w
  3417  1C40  022A               	subwf	___ltmod@dividend+2,w
  3418  1C41  1D03               	skipz
  3419  1C42  2C49               	goto	u8215
  3420  1C43  0826               	movf	___ltmod@divisor+1,w
  3421  1C44  0229               	subwf	___ltmod@dividend+1,w
  3422  1C45  1D03               	skipz
  3423  1C46  2C49               	goto	u8215
  3424  1C47  0825               	movf	___ltmod@divisor,w
  3425  1C48  0228               	subwf	___ltmod@dividend,w
  3426  1C49                     u8215:	
  3427  1C49  1C03               	skipc
  3428  1C4A  2C56               	goto	L6
  3429  1C4B  0825               	movf	___ltmod@divisor,w
  3430  1C4C  02A8               	subwf	___ltmod@dividend,f
  3431  1C4D  0826               	movf	___ltmod@divisor+1,w
  3432  1C4E  1C03               	skipc
  3433  1C4F  0F26               	incfsz	___ltmod@divisor+1,w
  3434  1C50  02A9               	subwf	___ltmod@dividend+1,f
  3435  1C51  0827               	movf	___ltmod@divisor+2,w
  3436  1C52  1C03               	skipc
  3437  1C53  0A27               	incf	___ltmod@divisor+2,w
  3438  1C54  02AA               	subwf	___ltmod@dividend+2,f
  3439  1C55  1003               	clrc
  3440  1C56                     L6:	
  3441  1C56  0CA7               	rrf	___ltmod@divisor+2,f
  3442  1C57  0CA6               	rrf	___ltmod@divisor+1,f
  3443  1C58  0CA5               	rrf	___ltmod@divisor,f
  3444  1C59  0BAB               	decfsz	___ltmod@counter,f
  3445  1C5A  2C3F               	goto	l6389
  3446  1C5B                     l6397:	
  3447  1C5B  0828               	movf	___ltmod@dividend,w
  3448  1C5C  00A5               	movwf	?___ltmod
  3449  1C5D  0829               	movf	___ltmod@dividend+1,w
  3450  1C5E  00A6               	movwf	?___ltmod+1
  3451  1C5F  082A               	movf	___ltmod@dividend+2,w
  3452  1C60  00A7               	movwf	?___ltmod+2
  3453  1C61  0008               	return
  3454  1C62                     __end_of___ltmod:	
  3455                           
  3456                           	psect	text16
  3457  1C62                     __ptext16:	
  3458 ;; *************** function ___ltdiv *****************
  3459 ;; Defined at:
  3460 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ltdiv.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;  divisor         3    5[BANK0 ] unsigned um
  3463 ;;  dividend        3    8[BANK0 ] unsigned um
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;  quotient        3   11[BANK0 ] unsigned um
  3466 ;;  counter         1   14[BANK0 ] unsigned char 
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  3    5[BANK0 ] unsigned um
  3469 ;; Registers used:
  3470 ;;		wreg, status,2, status,0
  3471 ;; Tracked objects:
  3472 ;;		On entry : 300/0
  3473 ;;		On exit  : 300/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3476 ;;      Params:         0       6       0       0       0
  3477 ;;      Locals:         0       4       0       0       0
  3478 ;;      Temps:          0       0       0       0       0
  3479 ;;      Totals:         0      10       0       0       0
  3480 ;;Total ram usage:       10 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    5
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_main
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           
  3491                           ;psect for function ___ltdiv
  3492  1C62                     ___ltdiv:	
  3493                           
  3494                           ;incstack = 0
  3495                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  3496  1C62  01AB               	clrf	___ltdiv@quotient
  3497  1C63  01AC               	clrf	___ltdiv@quotient+1
  3498  1C64  01AD               	clrf	___ltdiv@quotient+2
  3499  1C65  0827               	movf	___ltdiv@divisor+2,w
  3500  1C66  0426               	iorwf	___ltdiv@divisor+1,w
  3501  1C67  0425               	iorwf	___ltdiv@divisor,w
  3502  1C68  1903               	skipnz
  3503  1C69  2C94               	goto	l6377
  3504  1C6A  01AE               	clrf	___ltdiv@counter
  3505  1C6B                     L7:	
  3506  1C6B  0AAE               	incf	___ltdiv@counter,f
  3507  1C6C  1BA7               	btfsc	___ltdiv@divisor+2,7
  3508  1C6D  2C73               	goto	l6365
  3509  1C6E  1003               	clrc
  3510  1C6F  0DA5               	rlf	___ltdiv@divisor,f
  3511  1C70  0DA6               	rlf	___ltdiv@divisor+1,f
  3512  1C71  0DA7               	rlf	___ltdiv@divisor+2,f
  3513  1C72  2C6B               	goto	L7
  3514  1C73                     l6365:	
  3515  1C73  1003               	clrc
  3516  1C74  0DAB               	rlf	___ltdiv@quotient,f
  3517  1C75  0DAC               	rlf	___ltdiv@quotient+1,f
  3518  1C76  0DAD               	rlf	___ltdiv@quotient+2,f
  3519  1C77  0827               	movf	___ltdiv@divisor+2,w
  3520  1C78  022A               	subwf	___ltdiv@dividend+2,w
  3521  1C79  1D03               	skipz
  3522  1C7A  2C81               	goto	u8175
  3523  1C7B  0826               	movf	___ltdiv@divisor+1,w
  3524  1C7C  0229               	subwf	___ltdiv@dividend+1,w
  3525  1C7D  1D03               	skipz
  3526  1C7E  2C81               	goto	u8175
  3527  1C7F  0825               	movf	___ltdiv@divisor,w
  3528  1C80  0228               	subwf	___ltdiv@dividend,w
  3529  1C81                     u8175:	
  3530  1C81  1C03               	skipc
  3531  1C82  2C8F               	goto	L8
  3532  1C83  0825               	movf	___ltdiv@divisor,w
  3533  1C84  02A8               	subwf	___ltdiv@dividend,f
  3534  1C85  0826               	movf	___ltdiv@divisor+1,w
  3535  1C86  1C03               	skipc
  3536  1C87  0F26               	incfsz	___ltdiv@divisor+1,w
  3537  1C88  02A9               	subwf	___ltdiv@dividend+1,f
  3538  1C89  0827               	movf	___ltdiv@divisor+2,w
  3539  1C8A  1C03               	skipc
  3540  1C8B  0A27               	incf	___ltdiv@divisor+2,w
  3541  1C8C  02AA               	subwf	___ltdiv@dividend+2,f
  3542  1C8D  142B               	bsf	___ltdiv@quotient,0
  3543  1C8E  1003               	clrc
  3544  1C8F                     L8:	
  3545  1C8F  0CA7               	rrf	___ltdiv@divisor+2,f
  3546  1C90  0CA6               	rrf	___ltdiv@divisor+1,f
  3547  1C91  0CA5               	rrf	___ltdiv@divisor,f
  3548  1C92  0BAE               	decfsz	___ltdiv@counter,f
  3549  1C93  2C73               	goto	l6365
  3550  1C94                     l6377:	
  3551  1C94  082B               	movf	___ltdiv@quotient,w
  3552  1C95  00A5               	movwf	?___ltdiv
  3553  1C96  082C               	movf	___ltdiv@quotient+1,w
  3554  1C97  00A6               	movwf	?___ltdiv+1
  3555  1C98  082D               	movf	___ltdiv@quotient+2,w
  3556  1C99  00A7               	movwf	?___ltdiv+2
  3557  1C9A  0008               	return
  3558  1C9B                     __end_of___ltdiv:	
  3559                           
  3560                           	psect	text17
  3561  158D                     __ptext17:	
  3562 ;; *************** function ___lbtoft *****************
  3563 ;; Defined at:
  3564 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;  c               1    wreg     unsigned char 
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  c               1   17[BANK0 ] unsigned char 
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  3   13[BANK0 ] float 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0, pclath, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 300/200
  3575 ;;		On exit  : 300/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3578 ;;      Params:         0       4       0       0       0
  3579 ;;      Locals:         0       1       0       0       0
  3580 ;;      Temps:          0       0       0       0       0
  3581 ;;      Totals:         0       5       0       0       0
  3582 ;;Total ram usage:        5 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    6
  3585 ;; This function calls:
  3586 ;;		___ftpack
  3587 ;; This function is called by:
  3588 ;;		_main
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592                           
  3593                           ;psect for function ___lbtoft
  3594  158D                     ___lbtoft:	
  3595                           
  3596                           ;incstack = 0
  3597                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3598                           ;___lbtoft@c stored from wreg
  3599  158D  1303               	bcf	3,6	;RP1=0, select bank0
  3600  158E  00B1               	movwf	___lbtoft@c
  3601  158F  00A5               	movwf	___ftpack@arg
  3602  1590  308E               	movlw	142
  3603  1591  01A6               	clrf	___ftpack@arg+1
  3604  1592  01A7               	clrf	___ftpack@arg+2
  3605  1593  00A8               	movwf	___ftpack@exp
  3606  1594  01A9               	clrf	___ftpack@sign
  3607  1595  27B7               	fcall	___ftpack
  3608  1596  0825               	movf	?___ftpack,w
  3609  1597  00AD               	movwf	?___lbtoft
  3610  1598  0826               	movf	?___ftpack+1,w
  3611  1599  00AE               	movwf	?___lbtoft+1
  3612  159A  0827               	movf	?___ftpack+2,w
  3613  159B  00AF               	movwf	?___lbtoft+2
  3614  159C  0008               	return
  3615  159D                     __end_of___lbtoft:	
  3616  159D                     __ptext18:	
  3617 ;; *************** function ___ftdiv *****************
  3618 ;; Defined at:
  3619 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;  f2              3   16[BANK0 ] float 
  3622 ;;  f1              3   19[BANK0 ] float 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  f3              3   26[BANK0 ] float 
  3625 ;;  sign            1   30[BANK0 ] unsigned char 
  3626 ;;  exp             1   29[BANK0 ] unsigned char 
  3627 ;;  cntr            1   25[BANK0 ] unsigned char 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  3   16[BANK0 ] float 
  3630 ;; Registers used:
  3631 ;;		wreg, status,2, status,0, pclath, cstack
  3632 ;; Tracked objects:
  3633 ;;		On entry : 300/0
  3634 ;;		On exit  : 300/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3637 ;;      Params:         0       6       0       0       0
  3638 ;;      Locals:         0       6       0       0       0
  3639 ;;      Temps:          0       3       0       0       0
  3640 ;;      Totals:         0      15       0       0       0
  3641 ;;Total ram usage:       15 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    6
  3644 ;; This function calls:
  3645 ;;		___ftpack
  3646 ;; This function is called by:
  3647 ;;		_main
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           
  3652                           ;psect for function ___ftdiv
  3653  159D                     ___ftdiv:	
  3654                           
  3655                           ;incstack = 0
  3656                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3657  159D  0833               	movf	___ftdiv@f1,w
  3658  159E  00B6               	movwf	??___ftdiv
  3659  159F  0834               	movf	___ftdiv@f1+1,w
  3660  15A0  00B7               	movwf	??___ftdiv+1
  3661  15A1  0835               	movf	___ftdiv@f1+2,w
  3662  15A2  00B8               	movwf	??___ftdiv+2
  3663  15A3  1003               	clrc
  3664  15A4  0D37               	rlf	??___ftdiv+1,w
  3665  15A5  0D38               	rlf	??___ftdiv+2,w
  3666  15A6  00BD               	movwf	___ftdiv@exp
  3667  15A7  083D               	movf	___ftdiv@exp,w
  3668  15A8  1D03               	btfss	3,2
  3669  15A9  2DAE               	goto	l6315
  3670  15AA  01B0               	clrf	?___ftdiv
  3671  15AB  01B1               	clrf	?___ftdiv+1
  3672  15AC  01B2               	clrf	?___ftdiv+2
  3673  15AD  0008               	return
  3674  15AE                     l6315:	
  3675  15AE  0830               	movf	___ftdiv@f2,w
  3676  15AF  00B6               	movwf	??___ftdiv
  3677  15B0  0831               	movf	___ftdiv@f2+1,w
  3678  15B1  00B7               	movwf	??___ftdiv+1
  3679  15B2  0832               	movf	___ftdiv@f2+2,w
  3680  15B3  00B8               	movwf	??___ftdiv+2
  3681  15B4  1003               	clrc
  3682  15B5  0D37               	rlf	??___ftdiv+1,w
  3683  15B6  0D38               	rlf	??___ftdiv+2,w
  3684  15B7  00BE               	movwf	___ftdiv@sign
  3685  15B8  083E               	movf	___ftdiv@sign,w
  3686  15B9  1D03               	btfss	3,2
  3687  15BA  2DBF               	goto	l1055
  3688  15BB  01B0               	clrf	?___ftdiv
  3689  15BC  01B1               	clrf	?___ftdiv+1
  3690  15BD  01B2               	clrf	?___ftdiv+2
  3691  15BE  0008               	return
  3692  15BF                     l1055:	
  3693  15BF  3089               	movlw	137
  3694  15C0  01BA               	clrf	___ftdiv@f3
  3695  15C1  01BB               	clrf	___ftdiv@f3+1
  3696  15C2  01BC               	clrf	___ftdiv@f3+2
  3697  15C3  073E               	addwf	___ftdiv@sign,w
  3698  15C4  00B6               	movwf	??___ftdiv
  3699  15C5  02BD               	subwf	___ftdiv@exp,f
  3700  15C6  0835               	movf	___ftdiv@f1+2,w
  3701  15C7  00BE               	movwf	___ftdiv@sign
  3702  15C8  0832               	movf	___ftdiv@f2+2,w
  3703  15C9  06BE               	xorwf	___ftdiv@sign,f
  3704  15CA  3080               	movlw	128
  3705  15CB  05BE               	andwf	___ftdiv@sign,f
  3706  15CC  3018               	movlw	24
  3707  15CD  17B4               	bsf	___ftdiv@f1+1,7
  3708  15CE  01B5               	clrf	___ftdiv@f1+2
  3709  15CF  17B1               	bsf	___ftdiv@f2+1,7
  3710  15D0  01B2               	clrf	___ftdiv@f2+2
  3711  15D1  00B9               	movwf	___ftdiv@cntr
  3712  15D2                     l6337:	
  3713  15D2  1003               	clrc
  3714  15D3  0DBA               	rlf	___ftdiv@f3,f
  3715  15D4  0DBB               	rlf	___ftdiv@f3+1,f
  3716  15D5  0DBC               	rlf	___ftdiv@f3+2,f
  3717  15D6  0832               	movf	___ftdiv@f2+2,w
  3718  15D7  0235               	subwf	___ftdiv@f1+2,w
  3719  15D8  1D03               	skipz
  3720  15D9  2DE0               	goto	u8135
  3721  15DA  0831               	movf	___ftdiv@f2+1,w
  3722  15DB  0234               	subwf	___ftdiv@f1+1,w
  3723  15DC  1D03               	skipz
  3724  15DD  2DE0               	goto	u8135
  3725  15DE  0830               	movf	___ftdiv@f2,w
  3726  15DF  0233               	subwf	___ftdiv@f1,w
  3727  15E0                     u8135:	
  3728  15E0  1C03               	skipc
  3729  15E1  2DEE               	goto	L9
  3730  15E2  0830               	movf	___ftdiv@f2,w
  3731  15E3  02B3               	subwf	___ftdiv@f1,f
  3732  15E4  0831               	movf	___ftdiv@f2+1,w
  3733  15E5  1C03               	skipc
  3734  15E6  0F31               	incfsz	___ftdiv@f2+1,w
  3735  15E7  02B4               	subwf	___ftdiv@f1+1,f
  3736  15E8  0832               	movf	___ftdiv@f2+2,w
  3737  15E9  1C03               	skipc
  3738  15EA  0A32               	incf	___ftdiv@f2+2,w
  3739  15EB  02B5               	subwf	___ftdiv@f1+2,f
  3740  15EC  143A               	bsf	___ftdiv@f3,0
  3741  15ED  1003               	clrc
  3742  15EE                     L9:	
  3743  15EE  0DB3               	rlf	___ftdiv@f1,f
  3744  15EF  0DB4               	rlf	___ftdiv@f1+1,f
  3745  15F0  0DB5               	rlf	___ftdiv@f1+2,f
  3746  15F1  0BB9               	decfsz	___ftdiv@cntr,f
  3747  15F2  2DD2               	goto	l6337
  3748  15F3  083A               	movf	___ftdiv@f3,w
  3749  15F4  00A5               	movwf	___ftpack@arg
  3750  15F5  083B               	movf	___ftdiv@f3+1,w
  3751  15F6  00A6               	movwf	___ftpack@arg+1
  3752  15F7  083C               	movf	___ftdiv@f3+2,w
  3753  15F8  00A7               	movwf	___ftpack@arg+2
  3754  15F9  083D               	movf	___ftdiv@exp,w
  3755  15FA  00A8               	movwf	___ftpack@exp
  3756  15FB  083E               	movf	___ftdiv@sign,w
  3757  15FC  00A9               	movwf	___ftpack@sign
  3758  15FD  27B7               	fcall	___ftpack
  3759  15FE  0825               	movf	?___ftpack,w
  3760  15FF  00B0               	movwf	?___ftdiv
  3761  1600  0826               	movf	?___ftpack+1,w
  3762  1601  00B1               	movwf	?___ftdiv+1
  3763  1602  0827               	movf	?___ftpack+2,w
  3764  1603  00B2               	movwf	?___ftdiv+2
  3765  1604  0008               	return
  3766  1605                     __end_of___ftdiv:	
  3767  1605                     __ptext9:	
  3768 ;; *************** function _a2d_read *****************
  3769 ;; Defined at:
  3770 ;;		line 778 in file "Automated Solar Panel Orientation Setter.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;		None
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;		None
  3775 ;; Return value:  Size  Location     Type
  3776 ;;		None               void
  3777 ;; Registers used:
  3778 ;;		wreg, status,2, status,0, pclath, cstack
  3779 ;; Tracked objects:
  3780 ;;		On entry : 300/0
  3781 ;;		On exit  : 300/0
  3782 ;;		Unchanged: 0/0
  3783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3784 ;;      Params:         0       0       0       0       0
  3785 ;;      Locals:         0       0       0       0       0
  3786 ;;      Temps:          0       0       0       0       0
  3787 ;;      Totals:         0       0       0       0       0
  3788 ;;Total ram usage:        0 bytes
  3789 ;; Hardware stack levels used:    1
  3790 ;; Hardware stack levels required when called:    7
  3791 ;; This function calls:
  3792 ;;		___awdiv
  3793 ;;		___ftmul
  3794 ;;		___fttol
  3795 ;;		___lwtoft
  3796 ;;		___wmul
  3797 ;;		_read_a2d_value
  3798 ;; This function is called by:
  3799 ;;		_main
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           
  3804                           ;psect for function _a2d_read
  3805  1605                     _a2d_read:	
  3806                           
  3807                           ;Automated Solar Panel Orientation Setter.c: 779: ldr1 = read_a2d_value(0);
  3808                           
  3809                           ;incstack = 0
  3810                           ; Regs used in _a2d_read: [wreg+status,2+status,0+pclath+cstack]
  3811  1605  3000               	movlw	0
  3812  1606  2692  160A  118A   	fcall	_read_a2d_value
  3813  1609  0826               	movf	?_read_a2d_value+1,w
  3814  160A  1683               	bsf	3,5	;RP0=1, select bank1
  3815  160B  00BC               	movwf	(_ldr1+1)^(0+128)
  3816  160C  1283               	bcf	3,5	;RP0=0, select bank0
  3817  160D  0825               	movf	?_read_a2d_value,w
  3818  160E  1683               	bsf	3,5	;RP0=1, select bank1
  3819  160F  00BB               	movwf	_ldr1^(0+128)
  3820                           
  3821                           ;Automated Solar Panel Orientation Setter.c: 780: ldr2 = read_a2d_value(1);
  3822  1610  3001               	movlw	1
  3823  1611  2692  160A  118A   	fcall	_read_a2d_value
  3824  1614  0826               	movf	?_read_a2d_value+1,w
  3825  1615  00D4               	movwf	_ldr2+1
  3826  1616  0825               	movf	?_read_a2d_value,w
  3827  1617  00D3               	movwf	_ldr2
  3828                           
  3829                           ;Automated Solar Panel Orientation Setter.c: 781: ldr2 = ldr2 + (int)(ldr2*0.35);
  3830  1618  0854               	movf	_ldr2+1,w
  3831  1619  00AE               	movwf	___lwtoft@c+1
  3832  161A  0853               	movf	_ldr2,w
  3833  161B  00AD               	movwf	___lwtoft@c
  3834  161C  27A7  160A  118A   	fcall	___lwtoft
  3835  161F  082D               	movf	?___lwtoft,w
  3836  1620  00B5               	movwf	___ftmul@f2
  3837  1621  082E               	movf	?___lwtoft+1,w
  3838  1622  00B6               	movwf	___ftmul@f2+1
  3839  1623  082F               	movf	?___lwtoft+2,w
  3840  1624  00B7               	movwf	___ftmul@f2+2
  3841  1625  3033               	movlw	51
  3842  1626  00B2               	movwf	___ftmul@f1
  3843  1627  30B3               	movlw	179
  3844  1628  00B3               	movwf	___ftmul@f1+1
  3845  1629  303E               	movlw	62
  3846  162A  00B4               	movwf	___ftmul@f1+2
  3847  162B  26D1  160A  118A   	fcall	___ftmul
  3848  162E  0832               	movf	?___ftmul,w
  3849  162F  00C1               	movwf	___fttol@f1
  3850  1630  0833               	movf	?___ftmul+1,w
  3851  1631  00C2               	movwf	___fttol@f1+1
  3852  1632  0834               	movf	?___ftmul+2,w
  3853  1633  00C3               	movwf	___fttol@f1+2
  3854  1634  274C  160A  118A   	fcall	___fttol
  3855  1637  0841               	movf	?___fttol,w
  3856  1638  07D3               	addwf	_ldr2,f
  3857  1639  1803               	skipnc
  3858  163A  0AD4               	incf	_ldr2+1,f
  3859  163B  0842               	movf	?___fttol+1,w
  3860  163C  07D4               	addwf	_ldr2+1,f
  3861                           
  3862                           ;Automated Solar Panel Orientation Setter.c: 782: V_Bat = read_a2d_value(2);
  3863  163D  3002               	movlw	2
  3864  163E  2692  160A  118A   	fcall	_read_a2d_value
  3865  1641  0826               	movf	?_read_a2d_value+1,w
  3866  1642  1683               	bsf	3,5	;RP0=1, select bank1
  3867  1643  00C9               	movwf	(_V_Bat+1)^(0+128)
  3868  1644  1283               	bcf	3,5	;RP0=0, select bank0
  3869  1645  0825               	movf	?_read_a2d_value,w
  3870  1646  1683               	bsf	3,5	;RP0=1, select bank1
  3871  1647  00C8               	movwf	_V_Bat^(0+128)
  3872                           
  3873                           ;Automated Solar Panel Orientation Setter.c: 783: V_Bat2 = (int)V_Bat*5*11/1023;
  3874  1648  30FF               	movlw	255
  3875  1649  1283               	bcf	3,5	;RP0=0, select bank0
  3876  164A  00AB               	movwf	___awdiv@divisor
  3877  164B  3003               	movlw	3
  3878  164C  00AC               	movwf	___awdiv@divisor+1
  3879  164D  1683               	bsf	3,5	;RP0=1, select bank1
  3880  164E  0849               	movf	(_V_Bat+1)^(0+128),w
  3881  164F  1283               	bcf	3,5	;RP0=0, select bank0
  3882  1650  00A6               	movwf	___wmul@multiplier+1
  3883  1651  1683               	bsf	3,5	;RP0=1, select bank1
  3884  1652  0848               	movf	_V_Bat^(0+128),w
  3885  1653  1283               	bcf	3,5	;RP0=0, select bank0
  3886  1654  00A5               	movwf	___wmul@multiplier
  3887  1655  3037               	movlw	55
  3888  1656  00A7               	movwf	___wmul@multiplicand
  3889  1657  01A8               	clrf	___wmul@multiplicand+1
  3890  1658  26B8               	fcall	___wmul
  3891  1659  0826               	movf	?___wmul+1,w
  3892  165A  00AE               	movwf	___awdiv@dividend+1
  3893  165B  0825               	movf	?___wmul,w
  3894  165C  00AD               	movwf	___awdiv@dividend
  3895  165D  120A  158A  271E  160A  118A  	fcall	___awdiv
  3896  1662  082B               	movf	?___awdiv,w
  3897  1663  1683               	bsf	3,5	;RP0=1, select bank1
  3898  1664  00B4               	movwf	_V_Bat2^(0+128)
  3899  1665  1283               	bcf	3,5	;RP0=0, select bank0
  3900  1666  082C               	movf	?___awdiv+1,w
  3901  1667  1683               	bsf	3,5	;RP0=1, select bank1
  3902  1668  00B5               	movwf	(_V_Bat2+1)^(0+128)
  3903  1669  3000               	movlw	0
  3904  166A  1283               	bcf	3,5	;RP0=0, select bank0
  3905  166B  1BAC               	btfsc	?___awdiv+1,7
  3906  166C  30FF               	movlw	255
  3907  166D  1683               	bsf	3,5	;RP0=1, select bank1
  3908  166E  00B6               	movwf	(_V_Bat2+2)^(0+128)
  3909                           
  3910                           ;Automated Solar Panel Orientation Setter.c: 784: C_Bat = read_a2d_value(3);
  3911  166F  3003               	movlw	3
  3912  1670  2692  160A  118A   	fcall	_read_a2d_value
  3913  1673  0826               	movf	?_read_a2d_value+1,w
  3914  1674  1683               	bsf	3,5	;RP0=1, select bank1
  3915  1675  00C7               	movwf	(_C_Bat+1)^(0+128)
  3916  1676  1283               	bcf	3,5	;RP0=0, select bank0
  3917  1677  0825               	movf	?_read_a2d_value,w
  3918  1678  1683               	bsf	3,5	;RP0=1, select bank1
  3919  1679  00C6               	movwf	_C_Bat^(0+128)
  3920                           
  3921                           ;Automated Solar Panel Orientation Setter.c: 785: C_Bat2 = (int)C_Bat*5*11/1023;
  3922  167A  30FF               	movlw	255
  3923  167B  1283               	bcf	3,5	;RP0=0, select bank0
  3924  167C  00AB               	movwf	___awdiv@divisor
  3925  167D  3003               	movlw	3
  3926  167E  00AC               	movwf	___awdiv@divisor+1
  3927  167F  1683               	bsf	3,5	;RP0=1, select bank1
  3928  1680  0847               	movf	(_C_Bat+1)^(0+128),w
  3929  1681  1283               	bcf	3,5	;RP0=0, select bank0
  3930  1682  00A6               	movwf	___wmul@multiplier+1
  3931  1683  1683               	bsf	3,5	;RP0=1, select bank1
  3932  1684  0846               	movf	_C_Bat^(0+128),w
  3933  1685  1283               	bcf	3,5	;RP0=0, select bank0
  3934  1686  00A5               	movwf	___wmul@multiplier
  3935  1687  3037               	movlw	55
  3936  1688  00A7               	movwf	___wmul@multiplicand
  3937  1689  01A8               	clrf	___wmul@multiplicand+1
  3938  168A  26B8               	fcall	___wmul
  3939  168B  0826               	movf	?___wmul+1,w
  3940  168C  00AE               	movwf	___awdiv@dividend+1
  3941  168D  0825               	movf	?___wmul,w
  3942  168E  00AD               	movwf	___awdiv@dividend
  3943  168F  120A  158A  2F1E   	ljmp	l5371
  3944  1692                     __end_of_a2d_read:	
  3945  1692                     __ptext10:	
  3946 ;; *************** function _read_a2d_value *****************
  3947 ;; Defined at:
  3948 ;;		line 13 in file "a2d.h"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  channel         1    wreg     unsigned char 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  channel         1    8[BANK0 ] unsigned char 
  3953 ;;  a2d_value       2    9[BANK0 ] unsigned int 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  2    5[BANK0 ] unsigned int 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0
  3958 ;; Tracked objects:
  3959 ;;		On entry : 200/0
  3960 ;;		On exit  : 300/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3963 ;;      Params:         0       2       0       0       0
  3964 ;;      Locals:         0       3       0       0       0
  3965 ;;      Temps:          0       1       0       0       0
  3966 ;;      Totals:         0       6       0       0       0
  3967 ;;Total ram usage:        6 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    5
  3970 ;; This function calls:
  3971 ;;		Nothing
  3972 ;; This function is called by:
  3973 ;;		_a2d_read
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           
  3978                           ;psect for function _read_a2d_value
  3979  1692                     _read_a2d_value:	
  3980                           
  3981                           ;incstack = 0
  3982                           ; Regs used in _read_a2d_value: [wreg+status,2+status,0]
  3983                           ;read_a2d_value@channel stored from wreg
  3984  1692  1283               	bcf	3,5	;RP0=0, select bank0
  3985  1693  00A8               	movwf	read_a2d_value@channel
  3986                           
  3987                           ;a2d.h: 14: unsigned int a2d_value;
  3988                           ;a2d.h: 15: channel = channel << 3;
  3989  1694  0DA8               	rlf	read_a2d_value@channel,f
  3990  1695  0DA8               	rlf	read_a2d_value@channel,f
  3991  1696  0D28               	rlf	read_a2d_value@channel,w
  3992  1697  39F8               	andlw	248
  3993  1698  00A8               	movwf	read_a2d_value@channel
  3994                           
  3995                           ;a2d.h: 16: ADCON0 = ADCON0 & 0b11000111;
  3996  1699  30C7               	movlw	199
  3997  169A  059F               	andwf	31,f	;volatile
  3998                           
  3999                           ;a2d.h: 17: ADCON0 = ADCON0 | channel;
  4000  169B  0828               	movf	read_a2d_value@channel,w
  4001  169C  049F               	iorwf	31,f	;volatile
  4002                           
  4003                           ;a2d.h: 18: ADON = 1;
  4004  169D  141F               	bsf	31,0	;volatile
  4005                           
  4006                           ;a2d.h: 19: _delay(50);
  4007  169E  3010               	movlw	16
  4008  169F  00A7               	movwf	??_read_a2d_value
  4009  16A0                     u8657:	
  4010  16A0  0BA7               	decfsz	??_read_a2d_value,f
  4011  16A1  2EA0               	goto	u8657
  4012  16A2  0000               	nop
  4013                           
  4014                           ;a2d.h: 20: GO = 1;
  4015  16A3  1283               	bcf	3,5	;RP0=0, select bank0
  4016  16A4  1303               	bcf	3,6	;RP1=0, select bank0
  4017  16A5  151F               	bsf	31,2	;volatile
  4018  16A6                     l263:	
  4019                           ;a2d.h: 21: while( GO == 1 );
  4020                           
  4021  16A6  191F               	btfsc	31,2	;volatile
  4022  16A7  2EA6               	goto	l263
  4023                           
  4024                           ;a2d.h: 22: a2d_value = ADRESH;
  4025  16A8  081E               	movf	30,w	;volatile
  4026  16A9  00A9               	movwf	read_a2d_value@a2d_value
  4027  16AA  01AA               	clrf	read_a2d_value@a2d_value+1
  4028                           
  4029                           ;a2d.h: 23: a2d_value = a2d_value << 8;
  4030  16AB  00AA               	movwf	read_a2d_value@a2d_value+1
  4031  16AC  01A9               	clrf	read_a2d_value@a2d_value
  4032                           
  4033                           ;a2d.h: 24: a2d_value = a2d_value + ADRESL;
  4034  16AD  1683               	bsf	3,5	;RP0=1, select bank1
  4035  16AE  081E               	movf	30,w	;volatile
  4036  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  4037  16B0  07A9               	addwf	read_a2d_value@a2d_value,f
  4038  16B1  1803               	skipnc
  4039  16B2  0AAA               	incf	read_a2d_value@a2d_value+1,f
  4040                           
  4041                           ;a2d.h: 25: return a2d_value;
  4042  16B3  082A               	movf	read_a2d_value@a2d_value+1,w
  4043  16B4  00A6               	movwf	?_read_a2d_value+1
  4044  16B5  0829               	movf	read_a2d_value@a2d_value,w
  4045  16B6  00A5               	movwf	?_read_a2d_value
  4046  16B7  0008               	return
  4047  16B8                     __end_of_read_a2d_value:	
  4048  16B8                     __ptext11:	
  4049 ;; *************** function ___wmul *****************
  4050 ;; Defined at:
  4051 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  multiplier      2    5[BANK0 ] unsigned int 
  4054 ;;  multiplicand    2    7[BANK0 ] unsigned int 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  product         2    9[BANK0 ] unsigned int 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  2    5[BANK0 ] unsigned int 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 300/0
  4063 ;;		On exit  : 300/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4066 ;;      Params:         0       4       0       0       0
  4067 ;;      Locals:         0       2       0       0       0
  4068 ;;      Temps:          0       0       0       0       0
  4069 ;;      Totals:         0       6       0       0       0
  4070 ;;Total ram usage:        6 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    5
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_main
  4077 ;;		_a2d_read
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function ___wmul
  4083  16B8                     ___wmul:	
  4084                           
  4085                           ;incstack = 0
  4086                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4087  16B8  01A9               	clrf	___wmul@product
  4088  16B9  01AA               	clrf	___wmul@product+1
  4089  16BA                     l5799:	
  4090  16BA  1C25               	btfss	___wmul@multiplier,0
  4091  16BB  2EC2               	goto	l5803
  4092  16BC  0827               	movf	___wmul@multiplicand,w
  4093  16BD  07A9               	addwf	___wmul@product,f
  4094  16BE  1803               	skipnc
  4095  16BF  0AAA               	incf	___wmul@product+1,f
  4096  16C0  0828               	movf	___wmul@multiplicand+1,w
  4097  16C1  07AA               	addwf	___wmul@product+1,f
  4098  16C2                     l5803:	
  4099  16C2  1003               	clrc
  4100  16C3  0DA7               	rlf	___wmul@multiplicand,f
  4101  16C4  0DA8               	rlf	___wmul@multiplicand+1,f
  4102  16C5  1003               	clrc
  4103  16C6  0CA6               	rrf	___wmul@multiplier+1,f
  4104  16C7  0CA5               	rrf	___wmul@multiplier,f
  4105  16C8  0825               	movf	___wmul@multiplier,w
  4106  16C9  0426               	iorwf	___wmul@multiplier+1,w
  4107  16CA  1D03               	btfss	3,2
  4108  16CB  2EBA               	goto	l5799
  4109  16CC  082A               	movf	___wmul@product+1,w
  4110  16CD  00A6               	movwf	?___wmul+1
  4111  16CE  0829               	movf	___wmul@product,w
  4112  16CF  00A5               	movwf	?___wmul
  4113  16D0  0008               	return
  4114  16D1                     __end_of___wmul:	
  4115  16D1                     __ptext14:	
  4116 ;; *************** function ___ftmul *****************
  4117 ;; Defined at:
  4118 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  f1              3   18[BANK0 ] float 
  4121 ;;  f2              3   21[BANK0 ] float 
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;  f3_as_produc    3   28[BANK0 ] unsigned um
  4124 ;;  sign            1   32[BANK0 ] unsigned char 
  4125 ;;  cntr            1   31[BANK0 ] unsigned char 
  4126 ;;  exp             1   27[BANK0 ] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  3   18[BANK0 ] float 
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0, pclath, cstack
  4131 ;; Tracked objects:
  4132 ;;		On entry : 300/0
  4133 ;;		On exit  : 300/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4136 ;;      Params:         0       6       0       0       0
  4137 ;;      Locals:         0       6       0       0       0
  4138 ;;      Temps:          0       3       0       0       0
  4139 ;;      Totals:         0      15       0       0       0
  4140 ;;Total ram usage:       15 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    6
  4143 ;; This function calls:
  4144 ;;		___ftpack
  4145 ;; This function is called by:
  4146 ;;		_main
  4147 ;;		_a2d_read
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           
  4152                           ;psect for function ___ftmul
  4153  16D1                     ___ftmul:	
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4157  16D1  0832               	movf	___ftmul@f1,w
  4158  16D2  00B8               	movwf	??___ftmul
  4159  16D3  0833               	movf	___ftmul@f1+1,w
  4160  16D4  00B9               	movwf	??___ftmul+1
  4161  16D5  0834               	movf	___ftmul@f1+2,w
  4162  16D6  00BA               	movwf	??___ftmul+2
  4163  16D7  1003               	clrc
  4164  16D8  0D39               	rlf	??___ftmul+1,w
  4165  16D9  0D3A               	rlf	??___ftmul+2,w
  4166  16DA  00BB               	movwf	___ftmul@exp
  4167  16DB  083B               	movf	___ftmul@exp,w
  4168  16DC  1D03               	btfss	3,2
  4169  16DD  2EE2               	goto	l5817
  4170  16DE  01B2               	clrf	?___ftmul
  4171  16DF  01B3               	clrf	?___ftmul+1
  4172  16E0  01B4               	clrf	?___ftmul+2
  4173  16E1  0008               	return
  4174  16E2                     l5817:	
  4175  16E2  0835               	movf	___ftmul@f2,w
  4176  16E3  00B8               	movwf	??___ftmul
  4177  16E4  0836               	movf	___ftmul@f2+1,w
  4178  16E5  00B9               	movwf	??___ftmul+1
  4179  16E6  0837               	movf	___ftmul@f2+2,w
  4180  16E7  00BA               	movwf	??___ftmul+2
  4181  16E8  1003               	clrc
  4182  16E9  0D39               	rlf	??___ftmul+1,w
  4183  16EA  0D3A               	rlf	??___ftmul+2,w
  4184  16EB  00C0               	movwf	___ftmul@sign
  4185  16EC  0840               	movf	___ftmul@sign,w
  4186  16ED  1D03               	btfss	3,2
  4187  16EE  2EF3               	goto	l5821
  4188  16EF  01B2               	clrf	?___ftmul
  4189  16F0  01B3               	clrf	?___ftmul+1
  4190  16F1  01B4               	clrf	?___ftmul+2
  4191  16F2  0008               	return
  4192  16F3                     l5821:	
  4193  16F3  0840               	movf	___ftmul@sign,w
  4194  16F4  3E7B               	addlw	123
  4195  16F5  07BB               	addwf	___ftmul@exp,f
  4196  16F6  0834               	movf	___ftmul@f1+2,w
  4197  16F7  00C0               	movwf	___ftmul@sign
  4198  16F8  0837               	movf	___ftmul@f2+2,w
  4199  16F9  06C0               	xorwf	___ftmul@sign,f
  4200  16FA  3080               	movlw	128
  4201  16FB  05C0               	andwf	___ftmul@sign,f
  4202  16FC  3007               	movlw	7
  4203  16FD  17B3               	bsf	___ftmul@f1+1,7
  4204  16FE  17B6               	bsf	___ftmul@f2+1,7
  4205  16FF  01B7               	clrf	___ftmul@f2+2
  4206  1700  01BC               	clrf	___ftmul@f3_as_product
  4207  1701  01BD               	clrf	___ftmul@f3_as_product+1
  4208  1702  01BE               	clrf	___ftmul@f3_as_product+2
  4209  1703  00BF               	movwf	___ftmul@cntr
  4210  1704                     l5839:	
  4211  1704  1C32               	btfss	___ftmul@f1,0
  4212  1705  2F14               	goto	l5843
  4213  1706  0835               	movf	___ftmul@f2,w
  4214  1707  07BC               	addwf	___ftmul@f3_as_product,f
  4215  1708  0836               	movf	___ftmul@f2+1,w
  4216  1709  1103               	clrz
  4217  170A  1803               	skipnc
  4218  170B  0A36               	incf	___ftmul@f2+1,w
  4219  170C  1D03               	btfss	3,2
  4220  170D  07BD               	addwf	___ftmul@f3_as_product+1,f
  4221  170E  0837               	movf	___ftmul@f2+2,w
  4222  170F  1103               	clrz
  4223  1710  1803               	skipnc
  4224  1711  0A37               	incf	___ftmul@f2+2,w
  4225  1712  1D03               	btfss	3,2
  4226  1713  07BE               	addwf	___ftmul@f3_as_product+2,f
  4227  1714                     l5843:	
  4228  1714  1003               	clrc
  4229  1715  0CB4               	rrf	___ftmul@f1+2,f
  4230  1716  0CB3               	rrf	___ftmul@f1+1,f
  4231  1717  0CB2               	rrf	___ftmul@f1,f
  4232  1718  1003               	clrc
  4233  1719  0DB5               	rlf	___ftmul@f2,f
  4234  171A  0DB6               	rlf	___ftmul@f2+1,f
  4235  171B  0DB7               	rlf	___ftmul@f2+2,f
  4236  171C  0BBF               	decfsz	___ftmul@cntr,f
  4237  171D  2F04               	goto	l5839
  4238  171E  3009               	movlw	9
  4239  171F  00BF               	movwf	___ftmul@cntr
  4240  1720                     l5851:	
  4241  1720  1C32               	btfss	___ftmul@f1,0
  4242  1721  2F30               	goto	l5855
  4243  1722  0835               	movf	___ftmul@f2,w
  4244  1723  07BC               	addwf	___ftmul@f3_as_product,f
  4245  1724  0836               	movf	___ftmul@f2+1,w
  4246  1725  1103               	clrz
  4247  1726  1803               	skipnc
  4248  1727  0A36               	incf	___ftmul@f2+1,w
  4249  1728  1D03               	btfss	3,2
  4250  1729  07BD               	addwf	___ftmul@f3_as_product+1,f
  4251  172A  0837               	movf	___ftmul@f2+2,w
  4252  172B  1103               	clrz
  4253  172C  1803               	skipnc
  4254  172D  0A37               	incf	___ftmul@f2+2,w
  4255  172E  1D03               	btfss	3,2
  4256  172F  07BE               	addwf	___ftmul@f3_as_product+2,f
  4257  1730                     l5855:	
  4258  1730  1003               	clrc
  4259  1731  0CB4               	rrf	___ftmul@f1+2,f
  4260  1732  0CB3               	rrf	___ftmul@f1+1,f
  4261  1733  0CB2               	rrf	___ftmul@f1,f
  4262  1734  1003               	clrc
  4263  1735  0CBE               	rrf	___ftmul@f3_as_product+2,f
  4264  1736  0CBD               	rrf	___ftmul@f3_as_product+1,f
  4265  1737  0CBC               	rrf	___ftmul@f3_as_product,f
  4266  1738  0BBF               	decfsz	___ftmul@cntr,f
  4267  1739  2F20               	goto	l5851
  4268  173A  083C               	movf	___ftmul@f3_as_product,w
  4269  173B  00A5               	movwf	___ftpack@arg
  4270  173C  083D               	movf	___ftmul@f3_as_product+1,w
  4271  173D  00A6               	movwf	___ftpack@arg+1
  4272  173E  083E               	movf	___ftmul@f3_as_product+2,w
  4273  173F  00A7               	movwf	___ftpack@arg+2
  4274  1740  083B               	movf	___ftmul@exp,w
  4275  1741  00A8               	movwf	___ftpack@exp
  4276  1742  0840               	movf	___ftmul@sign,w
  4277  1743  00A9               	movwf	___ftpack@sign
  4278  1744  27B7               	fcall	___ftpack
  4279  1745  0825               	movf	?___ftpack,w
  4280  1746  00B2               	movwf	?___ftmul
  4281  1747  0826               	movf	?___ftpack+1,w
  4282  1748  00B3               	movwf	?___ftmul+1
  4283  1749  0827               	movf	?___ftpack+2,w
  4284  174A  00B4               	movwf	?___ftmul+2
  4285  174B  0008               	return
  4286  174C                     __end_of___ftmul:	
  4287  174C                     __ptext13:	
  4288 ;; *************** function ___fttol *****************
  4289 ;; Defined at:
  4290 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  f1              3   33[BANK0 ] float 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;  lval            4   41[BANK0 ] unsigned long 
  4295 ;;  exp1            1   45[BANK0 ] unsigned char 
  4296 ;;  sign1           1   40[BANK0 ] unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  4   33[BANK0 ] long 
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0
  4301 ;; Tracked objects:
  4302 ;;		On entry : 300/0
  4303 ;;		On exit  : 300/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4306 ;;      Params:         0       4       0       0       0
  4307 ;;      Locals:         0       6       0       0       0
  4308 ;;      Temps:          0       3       0       0       0
  4309 ;;      Totals:         0      13       0       0       0
  4310 ;;Total ram usage:       13 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    5
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_main
  4317 ;;		_a2d_read
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           
  4322                           ;psect for function ___fttol
  4323  174C                     ___fttol:	
  4324                           
  4325                           ;incstack = 0
  4326                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4327  174C  27F9  160A  118A   	fcall	PL32	;call to abstracted procedure
  4328  174F  1003               	clrc
  4329  1750  0D46               	rlf	??___fttol+1,w
  4330  1751  0D47               	rlf	??___fttol+2,w
  4331  1752  00CD               	movwf	___fttol@exp1
  4332  1753  084D               	movf	___fttol@exp1,w
  4333  1754  1D03               	btfss	3,2
  4334  1755  2F5B               	goto	l5869
  4335  1756                     l5867:	
  4336  1756  01C1               	clrf	?___fttol
  4337  1757  01C2               	clrf	?___fttol+1
  4338  1758  01C3               	clrf	?___fttol+2
  4339  1759  01C4               	clrf	?___fttol+3
  4340  175A  0008               	return
  4341  175B                     l5869:	
  4342  175B  27F9  160A  118A   	fcall	PL32	;call to abstracted procedure
  4343  175E  3017               	movlw	23
  4344  175F                     u7595:	
  4345  175F  1003               	clrc
  4346  1760  0CC7               	rrf	??___fttol+2,f
  4347  1761  0CC6               	rrf	??___fttol+1,f
  4348  1762  0CC5               	rrf	??___fttol,f
  4349  1763  3EFF               	addlw	-1
  4350  1764  1D03               	skipz
  4351  1765  2F5F               	goto	u7595
  4352  1766  0845               	movf	??___fttol,w
  4353  1767  00C8               	movwf	___fttol@sign1
  4354  1768  17C2               	bsf	___fttol@f1+1,7
  4355  1769  01C3               	clrf	___fttol@f1+2
  4356  176A  0841               	movf	___fttol@f1,w
  4357  176B  00C9               	movwf	___fttol@lval
  4358  176C  0842               	movf	___fttol@f1+1,w
  4359  176D  00CA               	movwf	___fttol@lval+1
  4360  176E  0843               	movf	___fttol@f1+2,w
  4361  176F  00CB               	movwf	___fttol@lval+2
  4362  1770  308E               	movlw	142
  4363  1771  01CC               	clrf	___fttol@lval+3
  4364  1772  02CD               	subwf	___fttol@exp1,f
  4365  1773  1FCD               	btfss	___fttol@exp1,7
  4366  1774  2F82               	goto	l5889
  4367  1775  084D               	movf	___fttol@exp1,w
  4368  1776  3A80               	xorlw	128
  4369  1777  3E8F               	addlw	143
  4370  1778  1C03               	btfss	3,0
  4371  1779  2F56               	goto	l5867
  4372  177A                     l5885:	
  4373  177A  1003               	clrc
  4374  177B  0CCC               	rrf	___fttol@lval+3,f
  4375  177C  0CCB               	rrf	___fttol@lval+2,f
  4376  177D  0CCA               	rrf	___fttol@lval+1,f
  4377  177E  0CC9               	rrf	___fttol@lval,f
  4378  177F  0FCD               	incfsz	___fttol@exp1,f
  4379  1780  2F7A               	goto	l5885
  4380  1781  2F90               	goto	l5897
  4381  1782                     l5889:	
  4382  1782  3018               	movlw	24
  4383  1783  024D               	subwf	___fttol@exp1,w
  4384  1784  1803               	btfsc	3,0
  4385  1785  2F56               	goto	l5867
  4386  1786                     l5895:	
  4387  1786  084D               	movf	___fttol@exp1,w
  4388  1787  1903               	btfsc	3,2
  4389  1788  2F90               	goto	l5897
  4390  1789  1003               	clrc
  4391  178A  0DC9               	rlf	___fttol@lval,f
  4392  178B  0DCA               	rlf	___fttol@lval+1,f
  4393  178C  0DCB               	rlf	___fttol@lval+2,f
  4394  178D  0DCC               	rlf	___fttol@lval+3,f
  4395  178E  03CD               	decf	___fttol@exp1,f
  4396  178F  2F86               	goto	l5895
  4397  1790                     l5897:	
  4398  1790  0848               	movf	___fttol@sign1,w
  4399  1791  1903               	btfsc	3,2
  4400  1792  2F9E               	goto	l5901
  4401  1793  09C9               	comf	___fttol@lval,f
  4402  1794  09CA               	comf	___fttol@lval+1,f
  4403  1795  09CB               	comf	___fttol@lval+2,f
  4404  1796  09CC               	comf	___fttol@lval+3,f
  4405  1797  0AC9               	incf	___fttol@lval,f
  4406  1798  1903               	skipnz
  4407  1799  0ACA               	incf	___fttol@lval+1,f
  4408  179A  1903               	skipnz
  4409  179B  0ACB               	incf	___fttol@lval+2,f
  4410  179C  1903               	skipnz
  4411  179D  0ACC               	incf	___fttol@lval+3,f
  4412  179E                     l5901:	
  4413  179E  084C               	movf	___fttol@lval+3,w
  4414  179F  00C4               	movwf	?___fttol+3
  4415  17A0  084B               	movf	___fttol@lval+2,w
  4416  17A1  00C3               	movwf	?___fttol+2
  4417  17A2  084A               	movf	___fttol@lval+1,w
  4418  17A3  00C2               	movwf	?___fttol+1
  4419  17A4  0849               	movf	___fttol@lval,w
  4420  17A5  00C1               	movwf	?___fttol
  4421  17A6  0008               	return
  4422  17A7                     __end_of___fttol:	
  4423  17A7                     __ptext12:	
  4424 ;; *************** function ___lwtoft *****************
  4425 ;; Defined at:
  4426 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;  c               2   13[BANK0 ] unsigned int 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;		None
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  3   13[BANK0 ] float 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2, status,0, pclath, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 300/0
  4437 ;;		On exit  : 300/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4440 ;;      Params:         0       3       0       0       0
  4441 ;;      Locals:         0       0       0       0       0
  4442 ;;      Temps:          0       0       0       0       0
  4443 ;;      Totals:         0       3       0       0       0
  4444 ;;Total ram usage:        3 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    6
  4447 ;; This function calls:
  4448 ;;		___ftpack
  4449 ;; This function is called by:
  4450 ;;		_main
  4451 ;;		_a2d_read
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function ___lwtoft
  4457  17A7                     ___lwtoft:	
  4458                           
  4459                           ;incstack = 0
  4460                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4461  17A7  082D               	movf	___lwtoft@c,w
  4462  17A8  00A5               	movwf	___ftpack@arg
  4463  17A9  082E               	movf	___lwtoft@c+1,w
  4464  17AA  00A6               	movwf	___ftpack@arg+1
  4465  17AB  308E               	movlw	142
  4466  17AC  01A7               	clrf	___ftpack@arg+2
  4467  17AD  00A8               	movwf	___ftpack@exp
  4468  17AE  01A9               	clrf	___ftpack@sign
  4469  17AF  27B7               	fcall	___ftpack
  4470  17B0  0825               	movf	?___ftpack,w
  4471  17B1  00AD               	movwf	?___lwtoft
  4472  17B2  0826               	movf	?___ftpack+1,w
  4473  17B3  00AE               	movwf	?___lwtoft+1
  4474  17B4  0827               	movf	?___ftpack+2,w
  4475  17B5  00AF               	movwf	?___lwtoft+2
  4476  17B6  0008               	return
  4477  17B7                     __end_of___lwtoft:	
  4478  17B7                     __ptext19:	
  4479 ;; *************** function ___ftpack *****************
  4480 ;; Defined at:
  4481 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;  arg             3    5[BANK0 ] unsigned um
  4484 ;;  exp             1    8[BANK0 ] unsigned char 
  4485 ;;  sign            1    9[BANK0 ] unsigned char 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  3    5[BANK0 ] float 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0
  4492 ;; Tracked objects:
  4493 ;;		On entry : 300/0
  4494 ;;		On exit  : 300/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4497 ;;      Params:         0       5       0       0       0
  4498 ;;      Locals:         0       0       0       0       0
  4499 ;;      Temps:          0       3       0       0       0
  4500 ;;      Totals:         0       8       0       0       0
  4501 ;;Total ram usage:        8 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    5
  4504 ;; This function calls:
  4505 ;;		Nothing
  4506 ;; This function is called by:
  4507 ;;		___ftdiv
  4508 ;;		___ftmul
  4509 ;;		___lbtoft
  4510 ;;		___lwtoft
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           
  4515                           ;psect for function ___ftpack
  4516  17B7                     ___ftpack:	
  4517                           
  4518                           ;incstack = 0
  4519                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4520  17B7  0828               	movf	___ftpack@exp,w
  4521  17B8  1903               	btfsc	3,2
  4522  17B9  2FBF               	goto	l1001
  4523  17BA  0827               	movf	___ftpack@arg+2,w
  4524  17BB  0426               	iorwf	___ftpack@arg+1,w
  4525  17BC  0425               	iorwf	___ftpack@arg,w
  4526  17BD  1D03               	skipz
  4527  17BE  2FC8               	goto	l5353
  4528  17BF                     l1001:	
  4529  17BF  01A5               	clrf	?___ftpack
  4530  17C0  01A6               	clrf	?___ftpack+1
  4531  17C1  01A7               	clrf	?___ftpack+2
  4532  17C2  0008               	return
  4533  17C3                     l5351:	
  4534  17C3  0AA8               	incf	___ftpack@exp,f
  4535  17C4  1003               	clrc
  4536  17C5  0CA7               	rrf	___ftpack@arg+2,f
  4537  17C6  0CA6               	rrf	___ftpack@arg+1,f
  4538  17C7  0CA5               	rrf	___ftpack@arg,f
  4539  17C8                     l5353:	
  4540  17C8  30FE               	movlw	254
  4541  17C9  0527               	andwf	___ftpack@arg+2,w
  4542  17CA  1903               	btfsc	3,2
  4543  17CB  2FD7               	goto	l5357
  4544  17CC  2FC3               	goto	l5351
  4545  17CD                     l5355:	
  4546  17CD  0AA8               	incf	___ftpack@exp,f
  4547  17CE  0AA5               	incf	___ftpack@arg,f
  4548  17CF  1903               	skipnz
  4549  17D0  0AA6               	incf	___ftpack@arg+1,f
  4550  17D1  1903               	skipnz
  4551  17D2  0AA7               	incf	___ftpack@arg+2,f
  4552  17D3  1003               	clrc
  4553  17D4  0CA7               	rrf	___ftpack@arg+2,f
  4554  17D5  0CA6               	rrf	___ftpack@arg+1,f
  4555  17D6  0CA5               	rrf	___ftpack@arg,f
  4556  17D7                     l5357:	
  4557  17D7  30FF               	movlw	255
  4558  17D8  0527               	andwf	___ftpack@arg+2,w
  4559  17D9  1903               	btfsc	3,2
  4560  17DA  2FE5               	goto	l5361
  4561  17DB  2FCD               	goto	l5355
  4562  17DC                     l5363:	
  4563  17DC  3002               	movlw	2
  4564  17DD  0228               	subwf	___ftpack@exp,w
  4565  17DE  1C03               	btfss	3,0
  4566  17DF  2FE7               	goto	l1013
  4567  17E0  03A8               	decf	___ftpack@exp,f
  4568  17E1  1003               	clrc
  4569  17E2  0DA5               	rlf	___ftpack@arg,f
  4570  17E3  0DA6               	rlf	___ftpack@arg+1,f
  4571  17E4  0DA7               	rlf	___ftpack@arg+2,f
  4572  17E5                     l5361:	
  4573  17E5  1FA6               	btfss	___ftpack@arg+1,7
  4574  17E6  2FDC               	goto	l5363
  4575  17E7                     l1013:	
  4576  17E7  1C28               	btfss	___ftpack@exp,0
  4577  17E8  13A6               	bcf	___ftpack@arg+1,7
  4578  17E9  1003               	clrc
  4579  17EA  0CA8               	rrf	___ftpack@exp,f
  4580  17EB  0828               	movf	___ftpack@exp,w
  4581  17EC  00AC               	movwf	??___ftpack+2
  4582  17ED  01AB               	clrf	??___ftpack+1
  4583  17EE  01AA               	clrf	??___ftpack
  4584  17EF  082A               	movf	??___ftpack,w
  4585  17F0  04A5               	iorwf	___ftpack@arg,f
  4586  17F1  082B               	movf	??___ftpack+1,w
  4587  17F2  04A6               	iorwf	___ftpack@arg+1,f
  4588  17F3  082C               	movf	??___ftpack+2,w
  4589  17F4  04A7               	iorwf	___ftpack@arg+2,f
  4590  17F5  0829               	movf	___ftpack@sign,w
  4591  17F6  1D03               	btfss	3,2
  4592  17F7  17A7               	bsf	___ftpack@arg+2,7
  4593  17F8  0008               	return
  4594  17F9                     __end_of___ftpack:	
  4595  17F9                     PL32:	
  4596  17F9  0841               	movf	___fttol@f1,w
  4597  17FA  00C5               	movwf	??___fttol
  4598  17FB  0842               	movf	___fttol@f1+1,w
  4599  17FC  00C6               	movwf	??___fttol+1
  4600  17FD  0843               	movf	___fttol@f1+2,w
  4601  17FE  00C7               	movwf	??___fttol+2
  4602  17FF  0008               	return
  4603  1800                     __end_ofPL32:	
  4604                           
  4605                           	psect	text20
  4606  1BDE                     __ptext20:	
  4607 ;; *************** function ___bmul *****************
  4608 ;; Defined at:
  4609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul8.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  multiplier      1    wreg     unsigned char 
  4612 ;;  multiplicand    1    5[BANK0 ] unsigned char 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  multiplier      1    7[BANK0 ] unsigned char 
  4615 ;;  product         1    6[BANK0 ] unsigned char 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  1    wreg      unsigned char 
  4618 ;; Registers used:
  4619 ;;		wreg, status,2, status,0
  4620 ;; Tracked objects:
  4621 ;;		On entry : 300/100
  4622 ;;		On exit  : 300/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4625 ;;      Params:         0       1       0       0       0
  4626 ;;      Locals:         0       2       0       0       0
  4627 ;;      Temps:          0       0       0       0       0
  4628 ;;      Totals:         0       3       0       0       0
  4629 ;;Total ram usage:        3 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    5
  4632 ;; This function calls:
  4633 ;;		Nothing
  4634 ;; This function is called by:
  4635 ;;		_main
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           
  4640                           ;psect for function ___bmul
  4641  1BDE                     ___bmul:	
  4642                           
  4643                           ;incstack = 0
  4644                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4645                           ;___bmul@multiplier stored from wreg
  4646  1BDE  1283               	bcf	3,5	;RP0=0, select bank0
  4647  1BDF  00A7               	movwf	___bmul@multiplier
  4648  1BE0  01A6               	clrf	___bmul@product
  4649  1BE1                     l6299:	
  4650  1BE1  0825               	movf	___bmul@multiplicand,w
  4651  1BE2  1827               	btfsc	___bmul@multiplier,0
  4652  1BE3  07A6               	addwf	___bmul@product,f
  4653  1BE4  1003               	clrc
  4654  1BE5  0DA5               	rlf	___bmul@multiplicand,f
  4655  1BE6  1003               	clrc
  4656  1BE7  0CA7               	rrf	___bmul@multiplier,f
  4657  1BE8  0827               	movf	___bmul@multiplier,w
  4658  1BE9  1D03               	btfss	3,2
  4659  1BEA  2BE1               	goto	l6299
  4660  1BEB  0826               	movf	___bmul@product,w
  4661  1BEC  0008               	return
  4662  1BED                     __end_of___bmul:	
  4663                           
  4664                           	psect	text21
  4665  1BD0                     __ptext21:	
  4666 ;; *************** function _Timer1_Init *****************
  4667 ;; Defined at:
  4668 ;;		line 4 in file "timer1.h"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;		None
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;		None
  4673 ;; Return value:  Size  Location     Type
  4674 ;;		None               void
  4675 ;; Registers used:
  4676 ;;		wreg
  4677 ;; Tracked objects:
  4678 ;;		On entry : 0/0
  4679 ;;		On exit  : 300/100
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4682 ;;      Params:         0       0       0       0       0
  4683 ;;      Locals:         0       0       0       0       0
  4684 ;;      Temps:          0       0       0       0       0
  4685 ;;      Totals:         0       0       0       0       0
  4686 ;;Total ram usage:        0 bytes
  4687 ;; Hardware stack levels used:    1
  4688 ;; Hardware stack levels required when called:    5
  4689 ;; This function calls:
  4690 ;;		Nothing
  4691 ;; This function is called by:
  4692 ;;		_main
  4693 ;; This function uses a non-reentrant model
  4694 ;;
  4695                           
  4696                           
  4697                           ;psect for function _Timer1_Init
  4698  1BD0                     _Timer1_Init:	
  4699                           
  4700                           ;timer1.h: 6: T1CKPS1 = 0;
  4701                           
  4702                           ;incstack = 0
  4703                           ; Regs used in _Timer1_Init: [wreg]
  4704  1BD0  1283               	bcf	3,5	;RP0=0, select bank0
  4705  1BD1  1303               	bcf	3,6	;RP1=0, select bank0
  4706  1BD2  1290               	bcf	16,5	;volatile
  4707                           
  4708                           ;timer1.h: 7: T1CKPS0 = 1;
  4709  1BD3  1610               	bsf	16,4	;volatile
  4710                           
  4711                           ;timer1.h: 8: TMR1CS = 0;
  4712  1BD4  1090               	bcf	16,1	;volatile
  4713                           
  4714                           ;timer1.h: 9: TMR1ON = 1;
  4715  1BD5  1410               	bsf	16,0	;volatile
  4716                           
  4717                           ;timer1.h: 10: T1OSCEN = 0;
  4718  1BD6  1190               	bcf	16,3	;volatile
  4719                           
  4720                           ;timer1.h: 11: TMR1L = 0xB0;
  4721  1BD7  30B0               	movlw	176
  4722  1BD8  008E               	movwf	14	;volatile
  4723                           
  4724                           ;timer1.h: 12: TMR1H = 60;
  4725  1BD9  303C               	movlw	60
  4726  1BDA  008F               	movwf	15	;volatile
  4727                           
  4728                           ;timer1.h: 13: TMR1IE = 1;
  4729  1BDB  1683               	bsf	3,5	;RP0=1, select bank1
  4730  1BDC  140C               	bsf	12,0	;volatile
  4731  1BDD  0008               	return
  4732  1BDE                     __end_of_Timer1_Init:	
  4733                           
  4734                           	psect	text22
  4735  1C17                     __ptext22:	
  4736 ;; *************** function _Setup_IOports *****************
  4737 ;; Defined at:
  4738 ;;		line 56 in file "setup.h"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;		None               void
  4745 ;; Registers used:
  4746 ;;		wreg, status,2
  4747 ;; Tracked objects:
  4748 ;;		On entry : B00/0
  4749 ;;		On exit  : B00/0
  4750 ;;		Unchanged: 800/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4752 ;;      Params:         0       0       0       0       0
  4753 ;;      Locals:         0       0       0       0       0
  4754 ;;      Temps:          0       0       0       0       0
  4755 ;;      Totals:         0       0       0       0       0
  4756 ;;Total ram usage:        0 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    5
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_main
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           
  4767                           ;psect for function _Setup_IOports
  4768  1C17                     _Setup_IOports:	
  4769                           
  4770                           ;setup.h: 58: TRISA = 0b11111111;
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _Setup_IOports: [wreg+status,2]
  4774  1C17  30FF               	movlw	255
  4775  1C18  1683               	bsf	3,5	;RP0=1, select bank1
  4776  1C19  0085               	movwf	5	;volatile
  4777                           
  4778                           ;setup.h: 59: PORTA = 0b00000000;
  4779  1C1A  1283               	bcf	3,5	;RP0=0, select bank0
  4780  1C1B  0185               	clrf	5	;volatile
  4781                           
  4782                           ;setup.h: 61: TRISB = 0b11000000;
  4783  1C1C  30C0               	movlw	192
  4784  1C1D  1683               	bsf	3,5	;RP0=1, select bank1
  4785  1C1E  0086               	movwf	6	;volatile
  4786                           
  4787                           ;setup.h: 62: PORTB = 0b00000000;
  4788  1C1F  1283               	bcf	3,5	;RP0=0, select bank0
  4789  1C20  0186               	clrf	6	;volatile
  4790                           
  4791                           ;setup.h: 64: TRISC = 0b10000000;
  4792  1C21  3080               	movlw	128
  4793  1C22  1683               	bsf	3,5	;RP0=1, select bank1
  4794  1C23  0087               	movwf	7	;volatile
  4795                           
  4796                           ;setup.h: 65: PORTC = 0b00000000;
  4797  1C24  1283               	bcf	3,5	;RP0=0, select bank0
  4798  1C25  0187               	clrf	7	;volatile
  4799                           
  4800                           ;setup.h: 67: TRISD = 0b11001100;
  4801  1C26  30CC               	movlw	204
  4802  1C27  1683               	bsf	3,5	;RP0=1, select bank1
  4803  1C28  0088               	movwf	8	;volatile
  4804                           
  4805                           ;setup.h: 68: PORTD = 0b00000000;
  4806  1C29  1283               	bcf	3,5	;RP0=0, select bank0
  4807  1C2A  0188               	clrf	8	;volatile
  4808                           
  4809                           ;setup.h: 70: TRISE = 0b10000000;
  4810  1C2B  3080               	movlw	128
  4811  1C2C  1683               	bsf	3,5	;RP0=1, select bank1
  4812  1C2D  0089               	movwf	9	;volatile
  4813                           
  4814                           ;setup.h: 71: PORTE = 0b00000000;
  4815  1C2E  1283               	bcf	3,5	;RP0=0, select bank0
  4816  1C2F  0189               	clrf	9	;volatile
  4817  1C30  0008               	return
  4818  1C31                     __end_of_Setup_IOports:	
  4819                           
  4820                           	psect	text23
  4821  0CD6                     __ptext23:	
  4822 ;; *************** function _Serial_Print_Int *****************
  4823 ;; Defined at:
  4824 ;;		line 141 in file "serialv2.h"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  val             2   19[BANK0 ] int 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;		None
  4829 ;; Return value:  Size  Location     Type
  4830 ;;		None               void
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4833 ;; Tracked objects:
  4834 ;;		On entry : 300/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4838 ;;      Params:         0       2       0       0       0
  4839 ;;      Locals:         0       0       0       0       0
  4840 ;;      Temps:          0       1       0       0       0
  4841 ;;      Totals:         0       3       0       0       0
  4842 ;;Total ram usage:        3 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    6
  4845 ;; This function calls:
  4846 ;;		___awdiv
  4847 ;;		___awmod
  4848 ;; This function is called by:
  4849 ;;		_main
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           
  4854                           ;psect for function _Serial_Print_Int
  4855  0CD6                     _Serial_Print_Int:	
  4856                           
  4857                           ;serialv2.h: 144: if(val < 0){
  4858                           
  4859                           ;incstack = 0
  4860                           ; Regs used in _Serial_Print_Int: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4861  0CD6  1FB4               	btfss	Serial_Print_Int@val+1,7
  4862  0CD7  2CE7               	goto	l6059
  4863  0CD8                     l359:	
  4864  0CD8  1E0C               	btfss	12,4	;volatile
  4865  0CD9  2CD8               	goto	l359
  4866                           
  4867                           ;serialv2.h: 146: TXREG = '-';
  4868  0CDA  302D               	movlw	45
  4869  0CDB  0099               	movwf	25	;volatile
  4870                           
  4871                           ;serialv2.h: 147: _delay(10);
  4872  0CDC  3003               	movlw	3
  4873  0CDD  00B5               	movwf	??_Serial_Print_Int
  4874  0CDE                     u8667:	
  4875  0CDE  0BB5               	decfsz	??_Serial_Print_Int,f
  4876  0CDF  2CDE               	goto	u8667
  4877                           
  4878                           ;serialv2.h: 148: val = -val;
  4879  0CE0  1283               	bcf	3,5	;RP0=0, select bank0
  4880  0CE1  1303               	bcf	3,6	;RP1=0, select bank0
  4881  0CE2  09B3               	comf	Serial_Print_Int@val,f
  4882  0CE3  09B4               	comf	Serial_Print_Int@val+1,f
  4883  0CE4  0AB3               	incf	Serial_Print_Int@val,f
  4884  0CE5  1903               	skipnz
  4885  0CE6  0AB4               	incf	Serial_Print_Int@val+1,f
  4886  0CE7                     l6059:	
  4887                           
  4888                           ;serialv2.h: 149: }
  4889                           ;serialv2.h: 150: if(val > 9999){
  4890  0CE7  0834               	movf	Serial_Print_Int@val+1,w
  4891  0CE8  3A80               	xorlw	128
  4892  0CE9  00FF               	movwf	127
  4893  0CEA  30A7               	movlw	167
  4894  0CEB  027F               	subwf	127,w
  4895  0CEC  1D03               	skipz
  4896  0CED  2CF0               	goto	u7835
  4897  0CEE  3010               	movlw	16
  4898  0CEF  0233               	subwf	Serial_Print_Int@val,w
  4899  0CF0                     u7835:	
  4900  0CF0  1C03               	skipc
  4901  0CF1  2D68               	goto	l6087
  4902  0CF2                     l363:	
  4903  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  4904  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  4905  0CF4  1E0C               	btfss	12,4	;volatile
  4906  0CF5  2CF2               	goto	l363
  4907                           
  4908                           ;serialv2.h: 152: TXREG = val/10000+48;
  4909  0CF6  3010               	movlw	16
  4910  0CF7  00AB               	movwf	___awdiv@divisor
  4911  0CF8  3027               	movlw	39
  4912  0CF9  00AC               	movwf	___awdiv@divisor+1
  4913  0CFA  0834               	movf	Serial_Print_Int@val+1,w
  4914  0CFB  00AE               	movwf	___awdiv@dividend+1
  4915  0CFC  0833               	movf	Serial_Print_Int@val,w
  4916  0CFD  00AD               	movwf	___awdiv@dividend
  4917  0CFE  271E  120A  158A   	fcall	___awdiv
  4918  0D01  082B               	movf	?___awdiv,w
  4919  0D02  3E30               	addlw	48
  4920  0D03  0099               	movwf	25	;volatile
  4921                           
  4922                           ;serialv2.h: 153: _delay(10);
  4923  0D04  3003               	movlw	3
  4924  0D05  00B5               	movwf	??_Serial_Print_Int
  4925  0D06                     u8677:	
  4926  0D06  0BB5               	decfsz	??_Serial_Print_Int,f
  4927  0D07  2D06               	goto	u8677
  4928                           
  4929                           ;serialv2.h: 154: val = val%10000;
  4930  0D08  27F9  120A  158A   	fcall	PL34	;call to abstracted procedure
  4931  0D0B  0834               	movf	Serial_Print_Int@val+1,w
  4932  0D0C  00A8               	movwf	___awmod@dividend+1
  4933  0D0D  0833               	movf	Serial_Print_Int@val,w
  4934  0D0E  00A7               	movwf	___awmod@dividend
  4935  0D0F  2763  120A  158A   	fcall	___awmod
  4936  0D12  0826               	movf	?___awmod+1,w
  4937  0D13  00B4               	movwf	Serial_Print_Int@val+1
  4938  0D14  0825               	movf	?___awmod,w
  4939  0D15  00B3               	movwf	Serial_Print_Int@val
  4940  0D16                     l366:	
  4941                           ;serialv2.h: 156: while(!TXIF);
  4942                           
  4943  0D16  1E0C               	btfss	12,4	;volatile
  4944  0D17  2D16               	goto	l366
  4945                           
  4946                           ;serialv2.h: 157: TXREG = val/1000+48;
  4947  0D18  27D7  120A  158A   	fcall	PL18	;call to abstracted procedure
  4948  0D1B  271E  120A  158A   	fcall	___awdiv
  4949  0D1E  082B               	movf	?___awdiv,w
  4950  0D1F  3E30               	addlw	48
  4951  0D20  0099               	movwf	25	;volatile
  4952                           
  4953                           ;serialv2.h: 158: _delay(10);
  4954  0D21  3003               	movlw	3
  4955  0D22  00B5               	movwf	??_Serial_Print_Int
  4956  0D23                     u8687:	
  4957  0D23  0BB5               	decfsz	??_Serial_Print_Int,f
  4958  0D24  2D23               	goto	u8687
  4959                           
  4960                           ;serialv2.h: 159: val = val%1000;
  4961  0D25  27B2  120A  158A   	fcall	PL10	;call to abstracted procedure
  4962  0D28  2763  120A  158A   	fcall	___awmod
  4963  0D2B  0826               	movf	?___awmod+1,w
  4964  0D2C  00B4               	movwf	Serial_Print_Int@val+1
  4965  0D2D  0825               	movf	?___awmod,w
  4966  0D2E  00B3               	movwf	Serial_Print_Int@val
  4967  0D2F                     l369:	
  4968                           ;serialv2.h: 161: while(!TXIF);
  4969                           
  4970  0D2F  1E0C               	btfss	12,4	;volatile
  4971  0D30  2D2F               	goto	l369
  4972                           
  4973                           ;serialv2.h: 162: TXREG = val/100+48;
  4974  0D31  27BD  120A  158A   	fcall	PL12	;call to abstracted procedure
  4975  0D34  271E  120A  158A   	fcall	___awdiv
  4976  0D37  082B               	movf	?___awdiv,w
  4977  0D38  3E30               	addlw	48
  4978  0D39  0099               	movwf	25	;volatile
  4979                           
  4980                           ;serialv2.h: 163: _delay(10);
  4981  0D3A  3003               	movlw	3
  4982  0D3B  00B5               	movwf	??_Serial_Print_Int
  4983  0D3C                     u8697:	
  4984  0D3C  0BB5               	decfsz	??_Serial_Print_Int,f
  4985  0D3D  2D3C               	goto	u8697
  4986                           
  4987                           ;serialv2.h: 164: val = val%100;
  4988  0D3E  3064               	movlw	100
  4989  0D3F  27A0  120A  158A   	fcall	PL4	;call to abstracted procedure
  4990  0D42  2763  120A  158A   	fcall	___awmod
  4991  0D45  0826               	movf	?___awmod+1,w
  4992  0D46  00B4               	movwf	Serial_Print_Int@val+1
  4993  0D47  0825               	movf	?___awmod,w
  4994  0D48  00B3               	movwf	Serial_Print_Int@val
  4995  0D49                     l372:	
  4996                           ;serialv2.h: 166: while(!TXIF);
  4997                           
  4998  0D49  1E0C               	btfss	12,4	;volatile
  4999  0D4A  2D49               	goto	l372
  5000  0D4B                     l6081:	
  5001                           
  5002                           ;serialv2.h: 167: TXREG = val/10+48;
  5003  0D4B  300A               	movlw	10
  5004  0D4C  00AB               	movwf	___awdiv@divisor
  5005  0D4D  01AC               	clrf	___awdiv@divisor+1
  5006  0D4E  0834               	movf	Serial_Print_Int@val+1,w
  5007  0D4F  00AE               	movwf	___awdiv@dividend+1
  5008  0D50  0833               	movf	Serial_Print_Int@val,w
  5009  0D51  00AD               	movwf	___awdiv@dividend
  5010  0D52  271E  120A  158A   	fcall	___awdiv
  5011  0D55  082B               	movf	?___awdiv,w
  5012  0D56  3E30               	addlw	48
  5013  0D57  0099               	movwf	25	;volatile
  5014                           
  5015                           ;serialv2.h: 168: _delay(10);
  5016  0D58  3003               	movlw	3
  5017  0D59  00B5               	movwf	??_Serial_Print_Int
  5018  0D5A                     u8707:	
  5019  0D5A  0BB5               	decfsz	??_Serial_Print_Int,f
  5020  0D5B  2D5A               	goto	u8707
  5021                           
  5022                           ;serialv2.h: 169: val = val%10;
  5023  0D5C  300A               	movlw	10
  5024  0D5D  27A0  120A  158A   	fcall	PL4	;call to abstracted procedure
  5025  0D60  2763  120A  158A   	fcall	___awmod
  5026  0D63  0826               	movf	?___awmod+1,w
  5027  0D64  00B4               	movwf	Serial_Print_Int@val+1
  5028  0D65  0825               	movf	?___awmod,w
  5029  0D66  00B3               	movwf	Serial_Print_Int@val
  5030                           
  5031                           ;serialv2.h: 170: }
  5032  0D67  2DE3               	goto	l399
  5033  0D68                     l6087:	
  5034                           
  5035                           ;serialv2.h: 171: else if(val > 999){
  5036  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  5037  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  5038  0D6A  0834               	movf	Serial_Print_Int@val+1,w
  5039  0D6B  3A80               	xorlw	128
  5040  0D6C  00FF               	movwf	127
  5041  0D6D  3083               	movlw	131
  5042  0D6E  027F               	subwf	127,w
  5043  0D6F  1D03               	skipz
  5044  0D70  2D73               	goto	u7885
  5045  0D71  30E8               	movlw	232
  5046  0D72  0233               	subwf	Serial_Print_Int@val,w
  5047  0D73                     u7885:	
  5048  0D73  1C03               	skipc
  5049  0D74  2DAD               	goto	l6109
  5050  0D75                     l377:	
  5051  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  5052  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  5053  0D77  1E0C               	btfss	12,4	;volatile
  5054  0D78  2D75               	goto	l377
  5055                           
  5056                           ;serialv2.h: 173: TXREG = val/1000+48;
  5057  0D79  27D7  120A  158A   	fcall	PL18	;call to abstracted procedure
  5058  0D7C  271E  120A  158A   	fcall	___awdiv
  5059  0D7F  082B               	movf	?___awdiv,w
  5060  0D80  3E30               	addlw	48
  5061  0D81  0099               	movwf	25	;volatile
  5062                           
  5063                           ;serialv2.h: 174: _delay(10);
  5064  0D82  3003               	movlw	3
  5065  0D83  00B5               	movwf	??_Serial_Print_Int
  5066  0D84                     u8717:	
  5067  0D84  0BB5               	decfsz	??_Serial_Print_Int,f
  5068  0D85  2D84               	goto	u8717
  5069                           
  5070                           ;serialv2.h: 175: val = val%1000;
  5071  0D86  27B2  120A  158A   	fcall	PL10	;call to abstracted procedure
  5072  0D89  2763  120A  158A   	fcall	___awmod
  5073  0D8C  0826               	movf	?___awmod+1,w
  5074  0D8D  00B4               	movwf	Serial_Print_Int@val+1
  5075  0D8E  0825               	movf	?___awmod,w
  5076  0D8F  00B3               	movwf	Serial_Print_Int@val
  5077  0D90                     l380:	
  5078                           ;serialv2.h: 177: while(!TXIF);
  5079                           
  5080  0D90  1E0C               	btfss	12,4	;volatile
  5081  0D91  2D90               	goto	l380
  5082                           
  5083                           ;serialv2.h: 178: TXREG = val/100+48;
  5084  0D92  27BD  120A  158A   	fcall	PL12	;call to abstracted procedure
  5085  0D95  271E  120A  158A   	fcall	___awdiv
  5086  0D98  082B               	movf	?___awdiv,w
  5087  0D99  3E30               	addlw	48
  5088  0D9A  0099               	movwf	25	;volatile
  5089                           
  5090                           ;serialv2.h: 179: _delay(10);
  5091  0D9B  3003               	movlw	3
  5092  0D9C  00B5               	movwf	??_Serial_Print_Int
  5093  0D9D                     u8727:	
  5094  0D9D  0BB5               	decfsz	??_Serial_Print_Int,f
  5095  0D9E  2D9D               	goto	u8727
  5096                           
  5097                           ;serialv2.h: 180: val = val%100;
  5098  0D9F  3064               	movlw	100
  5099  0DA0  27A0  120A  158A   	fcall	PL4	;call to abstracted procedure
  5100  0DA3  2763  120A  158A   	fcall	___awmod
  5101  0DA6  0826               	movf	?___awmod+1,w
  5102  0DA7  00B4               	movwf	Serial_Print_Int@val+1
  5103  0DA8  0825               	movf	?___awmod,w
  5104  0DA9  00B3               	movwf	Serial_Print_Int@val
  5105  0DAA                     l383:	
  5106                           ;serialv2.h: 182: while(!TXIF);
  5107                           
  5108  0DAA  1A0C               	btfsc	12,4	;volatile
  5109  0DAB  2D4B               	goto	l6081
  5110  0DAC  2DAA               	goto	l383
  5111  0DAD                     l6109:	
  5112                           
  5113                           ;serialv2.h: 187: else if(val > 99){
  5114  0DAD  27E9  120A  158A   	fcall	PL24	;call to abstracted procedure
  5115  0DB0  1D03               	skipz
  5116  0DB1  2DB4               	goto	u7925
  5117  0DB2  3064               	movlw	100
  5118  0DB3  0233               	subwf	Serial_Print_Int@val,w
  5119  0DB4                     u7925:	
  5120  0DB4  1C03               	skipc
  5121  0DB5  2DD5               	goto	l6125
  5122  0DB6                     l388:	
  5123  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  5124  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  5125  0DB8  1E0C               	btfss	12,4	;volatile
  5126  0DB9  2DB6               	goto	l388
  5127                           
  5128                           ;serialv2.h: 189: TXREG = val/100+48;
  5129  0DBA  27BD  120A  158A   	fcall	PL12	;call to abstracted procedure
  5130  0DBD  271E  120A  158A   	fcall	___awdiv
  5131  0DC0  082B               	movf	?___awdiv,w
  5132  0DC1  3E30               	addlw	48
  5133  0DC2  0099               	movwf	25	;volatile
  5134                           
  5135                           ;serialv2.h: 190: _delay(10);
  5136  0DC3  3003               	movlw	3
  5137  0DC4  00B5               	movwf	??_Serial_Print_Int
  5138  0DC5                     u8737:	
  5139  0DC5  0BB5               	decfsz	??_Serial_Print_Int,f
  5140  0DC6  2DC5               	goto	u8737
  5141                           
  5142                           ;serialv2.h: 191: val = val%100;
  5143  0DC7  3064               	movlw	100
  5144  0DC8  27A0  120A  158A   	fcall	PL4	;call to abstracted procedure
  5145  0DCB  2763  120A  158A   	fcall	___awmod
  5146  0DCE  0826               	movf	?___awmod+1,w
  5147  0DCF  00B4               	movwf	Serial_Print_Int@val+1
  5148  0DD0  0825               	movf	?___awmod,w
  5149  0DD1  00B3               	movwf	Serial_Print_Int@val
  5150  0DD2                     l391:	
  5151                           ;serialv2.h: 193: while(!TXIF);
  5152                           
  5153  0DD2  1A0C               	btfsc	12,4	;volatile
  5154  0DD3  2D4B               	goto	l6081
  5155  0DD4  2DD2               	goto	l391
  5156  0DD5                     l6125:	
  5157                           
  5158                           ;serialv2.h: 198: else if(val > 9){
  5159  0DD5  27E9  120A  158A   	fcall	PL24	;call to abstracted procedure
  5160  0DD8  1D03               	skipz
  5161  0DD9  2DDC               	goto	u7955
  5162  0DDA  300A               	movlw	10
  5163  0DDB  0233               	subwf	Serial_Print_Int@val,w
  5164  0DDC                     u7955:	
  5165  0DDC  1C03               	skipc
  5166  0DDD  2DE3               	goto	l399
  5167  0DDE                     l396:	
  5168  0DDE  1283               	bcf	3,5	;RP0=0, select bank0
  5169  0DDF  1303               	bcf	3,6	;RP1=0, select bank0
  5170  0DE0  1A0C               	btfsc	12,4	;volatile
  5171  0DE1  2D4B               	goto	l6081
  5172  0DE2  2DDE               	goto	l396
  5173  0DE3                     l399:	
  5174  0DE3  1283               	bcf	3,5	;RP0=0, select bank0
  5175  0DE4  1303               	bcf	3,6	;RP1=0, select bank0
  5176  0DE5  1E0C               	btfss	12,4	;volatile
  5177  0DE6  2DE3               	goto	l399
  5178                           
  5179                           ;serialv2.h: 205: TXREG = val+48;
  5180  0DE7  0833               	movf	Serial_Print_Int@val,w
  5181  0DE8  3E30               	addlw	48
  5182  0DE9  0099               	movwf	25	;volatile
  5183                           
  5184                           ;serialv2.h: 206: _delay(10);
  5185  0DEA  3003               	movlw	3
  5186  0DEB  00B5               	movwf	??_Serial_Print_Int
  5187  0DEC                     u8747:	
  5188  0DEC  0BB5               	decfsz	??_Serial_Print_Int,f
  5189  0DED  2DEC               	goto	u8747
  5190  0DEE  0008               	return
  5191  0DEF                     __end_of_Serial_Print_Int:	
  5192  0DEF                     __ptext34:	
  5193 ;; *************** function _Serial_Println_Int *****************
  5194 ;; Defined at:
  5195 ;;		line 58 in file "serialv2.h"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  val             2   19[BANK0 ] int 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;		None               void
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : 300/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5209 ;;      Params:         0       2       0       0       0
  5210 ;;      Locals:         0       0       0       0       0
  5211 ;;      Temps:          0       1       0       0       0
  5212 ;;      Totals:         0       3       0       0       0
  5213 ;;Total ram usage:        3 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    6
  5216 ;; This function calls:
  5217 ;;		___awdiv
  5218 ;;		___awmod
  5219 ;; This function is called by:
  5220 ;;		_main
  5221 ;;		_CheckMode
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _Serial_Println_Int
  5227  0DEF                     _Serial_Println_Int:	
  5228                           
  5229                           ;serialv2.h: 61: if(val < 0){
  5230                           
  5231                           ;incstack = 0
  5232                           ; Regs used in _Serial_Println_Int: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5233  0DEF  1FB4               	btfss	Serial_Println_Int@val+1,7
  5234  0DF0  2E00               	goto	l5503
  5235  0DF1                     l300:	
  5236  0DF1  1E0C               	btfss	12,4	;volatile
  5237  0DF2  2DF1               	goto	l300
  5238                           
  5239                           ;serialv2.h: 63: TXREG = '-';
  5240  0DF3  302D               	movlw	45
  5241  0DF4  0099               	movwf	25	;volatile
  5242                           
  5243                           ;serialv2.h: 64: _delay(10);
  5244  0DF5  3003               	movlw	3
  5245  0DF6  00B5               	movwf	??_Serial_Println_Int
  5246  0DF7                     u8867:	
  5247  0DF7  0BB5               	decfsz	??_Serial_Println_Int,f
  5248  0DF8  2DF7               	goto	u8867
  5249                           
  5250                           ;serialv2.h: 65: val = -val;
  5251  0DF9  1283               	bcf	3,5	;RP0=0, select bank0
  5252  0DFA  1303               	bcf	3,6	;RP1=0, select bank0
  5253  0DFB  09B3               	comf	Serial_Println_Int@val,f
  5254  0DFC  09B4               	comf	Serial_Println_Int@val+1,f
  5255  0DFD  0AB3               	incf	Serial_Println_Int@val,f
  5256  0DFE  1903               	skipnz
  5257  0DFF  0AB4               	incf	Serial_Println_Int@val+1,f
  5258  0E00                     l5503:	
  5259                           
  5260                           ;serialv2.h: 66: }
  5261                           ;serialv2.h: 67: if(val > 9999){
  5262  0E00  0834               	movf	Serial_Println_Int@val+1,w
  5263  0E01  3A80               	xorlw	128
  5264  0E02  00FF               	movwf	127
  5265  0E03  30A7               	movlw	167
  5266  0E04  027F               	subwf	127,w
  5267  0E05  1D03               	skipz
  5268  0E06  2E09               	goto	u6865
  5269  0E07  3010               	movlw	16
  5270  0E08  0233               	subwf	Serial_Println_Int@val,w
  5271  0E09                     u6865:	
  5272  0E09  1C03               	skipc
  5273  0E0A  2E82               	goto	l5531
  5274  0E0B                     l304:	
  5275  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  5276  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  5277  0E0D  1E0C               	btfss	12,4	;volatile
  5278  0E0E  2E0B               	goto	l304
  5279                           
  5280                           ;serialv2.h: 69: TXREG = val/10000+48;
  5281  0E0F  3010               	movlw	16
  5282  0E10  00AB               	movwf	___awdiv@divisor
  5283  0E11  3027               	movlw	39
  5284  0E12  00AC               	movwf	___awdiv@divisor+1
  5285  0E13  0834               	movf	Serial_Println_Int@val+1,w
  5286  0E14  00AE               	movwf	___awdiv@dividend+1
  5287  0E15  0833               	movf	Serial_Println_Int@val,w
  5288  0E16  00AD               	movwf	___awdiv@dividend
  5289  0E17  271E  120A  158A   	fcall	___awdiv
  5290  0E1A  082B               	movf	?___awdiv,w
  5291  0E1B  3E30               	addlw	48
  5292  0E1C  0099               	movwf	25	;volatile
  5293                           
  5294                           ;serialv2.h: 70: _delay(10);
  5295  0E1D  3003               	movlw	3
  5296  0E1E  00B5               	movwf	??_Serial_Println_Int
  5297  0E1F                     u8877:	
  5298  0E1F  0BB5               	decfsz	??_Serial_Println_Int,f
  5299  0E20  2E1F               	goto	u8877
  5300                           
  5301                           ;serialv2.h: 71: val = val%10000;
  5302  0E21  27F9  120A  158A   	fcall	PL34	;call to abstracted procedure
  5303  0E24  0834               	movf	Serial_Println_Int@val+1,w
  5304  0E25  00A8               	movwf	___awmod@dividend+1
  5305  0E26  0833               	movf	Serial_Println_Int@val,w
  5306  0E27  00A7               	movwf	___awmod@dividend
  5307  0E28  2763  120A  158A   	fcall	___awmod
  5308  0E2B  0826               	movf	?___awmod+1,w
  5309  0E2C  00B4               	movwf	Serial_Println_Int@val+1
  5310  0E2D  0825               	movf	?___awmod,w
  5311  0E2E  00B3               	movwf	Serial_Println_Int@val
  5312  0E2F                     l307:	
  5313                           ;serialv2.h: 73: while(!TXIF);
  5314                           
  5315  0E2F  1E0C               	btfss	12,4	;volatile
  5316  0E30  2E2F               	goto	l307
  5317                           
  5318                           ;serialv2.h: 74: TXREG = val/1000+48;
  5319  0E31  27E0  120A  158A   	fcall	PL20	;call to abstracted procedure
  5320  0E34  271E  120A  158A   	fcall	___awdiv
  5321  0E37  082B               	movf	?___awdiv,w
  5322  0E38  3E30               	addlw	48
  5323  0E39  0099               	movwf	25	;volatile
  5324                           
  5325                           ;serialv2.h: 75: _delay(10);
  5326  0E3A  3003               	movlw	3
  5327  0E3B  00B5               	movwf	??_Serial_Println_Int
  5328  0E3C                     u8887:	
  5329  0E3C  0BB5               	decfsz	??_Serial_Println_Int,f
  5330  0E3D  2E3C               	goto	u8887
  5331                           
  5332                           ;serialv2.h: 76: val = val%1000;
  5333  0E3E  30E8               	movlw	232
  5334  0E3F  27CD  120A  158A   	fcall	PL16	;call to abstracted procedure
  5335  0E42  2763  120A  158A   	fcall	___awmod
  5336  0E45  0826               	movf	?___awmod+1,w
  5337  0E46  00B4               	movwf	Serial_Println_Int@val+1
  5338  0E47  0825               	movf	?___awmod,w
  5339  0E48  00B3               	movwf	Serial_Println_Int@val
  5340  0E49                     l310:	
  5341                           ;serialv2.h: 78: while(!TXIF);
  5342                           
  5343  0E49  1E0C               	btfss	12,4	;volatile
  5344  0E4A  2E49               	goto	l310
  5345                           
  5346                           ;serialv2.h: 79: TXREG = val/100+48;
  5347  0E4B  27C5  120A  158A   	fcall	PL14	;call to abstracted procedure
  5348  0E4E  271E  120A  158A   	fcall	___awdiv
  5349  0E51  082B               	movf	?___awdiv,w
  5350  0E52  3E30               	addlw	48
  5351  0E53  0099               	movwf	25	;volatile
  5352                           
  5353                           ;serialv2.h: 80: _delay(10);
  5354  0E54  3003               	movlw	3
  5355  0E55  00B5               	movwf	??_Serial_Println_Int
  5356  0E56                     u8897:	
  5357  0E56  0BB5               	decfsz	??_Serial_Println_Int,f
  5358  0E57  2E56               	goto	u8897
  5359                           
  5360                           ;serialv2.h: 81: val = val%100;
  5361  0E58  3064               	movlw	100
  5362  0E59  27A9  120A  158A   	fcall	PL6	;call to abstracted procedure
  5363  0E5C  2763  120A  158A   	fcall	___awmod
  5364  0E5F  0826               	movf	?___awmod+1,w
  5365  0E60  00B4               	movwf	Serial_Println_Int@val+1
  5366  0E61  0825               	movf	?___awmod,w
  5367  0E62  00B3               	movwf	Serial_Println_Int@val
  5368  0E63                     l313:	
  5369                           ;serialv2.h: 83: while(!TXIF);
  5370                           
  5371  0E63  1E0C               	btfss	12,4	;volatile
  5372  0E64  2E63               	goto	l313
  5373  0E65                     l5525:	
  5374                           
  5375                           ;serialv2.h: 84: TXREG = val/10+48;
  5376  0E65  300A               	movlw	10
  5377  0E66  00AB               	movwf	___awdiv@divisor
  5378  0E67  01AC               	clrf	___awdiv@divisor+1
  5379  0E68  0834               	movf	Serial_Println_Int@val+1,w
  5380  0E69  00AE               	movwf	___awdiv@dividend+1
  5381  0E6A  0833               	movf	Serial_Println_Int@val,w
  5382  0E6B  00AD               	movwf	___awdiv@dividend
  5383  0E6C  271E  120A  158A   	fcall	___awdiv
  5384  0E6F  082B               	movf	?___awdiv,w
  5385  0E70  3E30               	addlw	48
  5386  0E71  0099               	movwf	25	;volatile
  5387                           
  5388                           ;serialv2.h: 85: _delay(10);
  5389  0E72  3003               	movlw	3
  5390  0E73  00B5               	movwf	??_Serial_Println_Int
  5391  0E74                     u8907:	
  5392  0E74  0BB5               	decfsz	??_Serial_Println_Int,f
  5393  0E75  2E74               	goto	u8907
  5394                           
  5395                           ;serialv2.h: 86: val = val%10;
  5396  0E76  300A               	movlw	10
  5397  0E77  27A9  120A  158A   	fcall	PL6	;call to abstracted procedure
  5398  0E7A  2763  120A  158A   	fcall	___awmod
  5399  0E7D  0826               	movf	?___awmod+1,w
  5400  0E7E  00B4               	movwf	Serial_Println_Int@val+1
  5401  0E7F  0825               	movf	?___awmod,w
  5402  0E80  00B3               	movwf	Serial_Println_Int@val
  5403                           
  5404                           ;serialv2.h: 87: }
  5405  0E81  2EFE               	goto	l340
  5406  0E82                     l5531:	
  5407                           
  5408                           ;serialv2.h: 88: else if(val > 999){
  5409  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  5410  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  5411  0E84  0834               	movf	Serial_Println_Int@val+1,w
  5412  0E85  3A80               	xorlw	128
  5413  0E86  00FF               	movwf	127
  5414  0E87  3083               	movlw	131
  5415  0E88  027F               	subwf	127,w
  5416  0E89  1D03               	skipz
  5417  0E8A  2E8D               	goto	u6915
  5418  0E8B  30E8               	movlw	232
  5419  0E8C  0233               	subwf	Serial_Println_Int@val,w
  5420  0E8D                     u6915:	
  5421  0E8D  1C03               	skipc
  5422  0E8E  2EC8               	goto	l5553
  5423  0E8F                     l318:	
  5424  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  5425  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  5426  0E91  1E0C               	btfss	12,4	;volatile
  5427  0E92  2E8F               	goto	l318
  5428                           
  5429                           ;serialv2.h: 90: TXREG = val/1000+48;
  5430  0E93  27E0  120A  158A   	fcall	PL20	;call to abstracted procedure
  5431  0E96  271E  120A  158A   	fcall	___awdiv
  5432  0E99  082B               	movf	?___awdiv,w
  5433  0E9A  3E30               	addlw	48
  5434  0E9B  0099               	movwf	25	;volatile
  5435                           
  5436                           ;serialv2.h: 91: _delay(10);
  5437  0E9C  3003               	movlw	3
  5438  0E9D  00B5               	movwf	??_Serial_Println_Int
  5439  0E9E                     u8917:	
  5440  0E9E  0BB5               	decfsz	??_Serial_Println_Int,f
  5441  0E9F  2E9E               	goto	u8917
  5442                           
  5443                           ;serialv2.h: 92: val = val%1000;
  5444  0EA0  30E8               	movlw	232
  5445  0EA1  27CD  120A  158A   	fcall	PL16	;call to abstracted procedure
  5446  0EA4  2763  120A  158A   	fcall	___awmod
  5447  0EA7  0826               	movf	?___awmod+1,w
  5448  0EA8  00B4               	movwf	Serial_Println_Int@val+1
  5449  0EA9  0825               	movf	?___awmod,w
  5450  0EAA  00B3               	movwf	Serial_Println_Int@val
  5451  0EAB                     l321:	
  5452                           ;serialv2.h: 94: while(!TXIF);
  5453                           
  5454  0EAB  1E0C               	btfss	12,4	;volatile
  5455  0EAC  2EAB               	goto	l321
  5456                           
  5457                           ;serialv2.h: 95: TXREG = val/100+48;
  5458  0EAD  27C5  120A  158A   	fcall	PL14	;call to abstracted procedure
  5459  0EB0  271E  120A  158A   	fcall	___awdiv
  5460  0EB3  082B               	movf	?___awdiv,w
  5461  0EB4  3E30               	addlw	48
  5462  0EB5  0099               	movwf	25	;volatile
  5463                           
  5464                           ;serialv2.h: 96: _delay(10);
  5465  0EB6  3003               	movlw	3
  5466  0EB7  00B5               	movwf	??_Serial_Println_Int
  5467  0EB8                     u8927:	
  5468  0EB8  0BB5               	decfsz	??_Serial_Println_Int,f
  5469  0EB9  2EB8               	goto	u8927
  5470                           
  5471                           ;serialv2.h: 97: val = val%100;
  5472  0EBA  3064               	movlw	100
  5473  0EBB  27A9  120A  158A   	fcall	PL6	;call to abstracted procedure
  5474  0EBE  2763  120A  158A   	fcall	___awmod
  5475  0EC1  0826               	movf	?___awmod+1,w
  5476  0EC2  00B4               	movwf	Serial_Println_Int@val+1
  5477  0EC3  0825               	movf	?___awmod,w
  5478  0EC4  00B3               	movwf	Serial_Println_Int@val
  5479  0EC5                     l324:	
  5480                           ;serialv2.h: 99: while(!TXIF);
  5481                           
  5482  0EC5  1A0C               	btfsc	12,4	;volatile
  5483  0EC6  2E65               	goto	l5525
  5484  0EC7  2EC5               	goto	l324
  5485  0EC8                     l5553:	
  5486                           
  5487                           ;serialv2.h: 104: else if(val > 99){
  5488  0EC8  27F1  120A  158A   	fcall	PL26	;call to abstracted procedure
  5489  0ECB  1D03               	skipz
  5490  0ECC  2ECF               	goto	u6955
  5491  0ECD  3064               	movlw	100
  5492  0ECE  0233               	subwf	Serial_Println_Int@val,w
  5493  0ECF                     u6955:	
  5494  0ECF  1C03               	skipc
  5495  0ED0  2EF0               	goto	l5569
  5496  0ED1                     l329:	
  5497  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  5498  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  5499  0ED3  1E0C               	btfss	12,4	;volatile
  5500  0ED4  2ED1               	goto	l329
  5501                           
  5502                           ;serialv2.h: 106: TXREG = val/100+48;
  5503  0ED5  27C5  120A  158A   	fcall	PL14	;call to abstracted procedure
  5504  0ED8  271E  120A  158A   	fcall	___awdiv
  5505  0EDB  082B               	movf	?___awdiv,w
  5506  0EDC  3E30               	addlw	48
  5507  0EDD  0099               	movwf	25	;volatile
  5508                           
  5509                           ;serialv2.h: 107: _delay(10);
  5510  0EDE  3003               	movlw	3
  5511  0EDF  00B5               	movwf	??_Serial_Println_Int
  5512  0EE0                     u8937:	
  5513  0EE0  0BB5               	decfsz	??_Serial_Println_Int,f
  5514  0EE1  2EE0               	goto	u8937
  5515                           
  5516                           ;serialv2.h: 108: val = val%100;
  5517  0EE2  3064               	movlw	100
  5518  0EE3  27A9  120A  158A   	fcall	PL6	;call to abstracted procedure
  5519  0EE6  2763  120A  158A   	fcall	___awmod
  5520  0EE9  0826               	movf	?___awmod+1,w
  5521  0EEA  00B4               	movwf	Serial_Println_Int@val+1
  5522  0EEB  0825               	movf	?___awmod,w
  5523  0EEC  00B3               	movwf	Serial_Println_Int@val
  5524  0EED                     l332:	
  5525                           ;serialv2.h: 110: while(!TXIF);
  5526                           
  5527  0EED  1A0C               	btfsc	12,4	;volatile
  5528  0EEE  2E65               	goto	l5525
  5529  0EEF  2EED               	goto	l332
  5530  0EF0                     l5569:	
  5531                           
  5532                           ;serialv2.h: 115: else if(val > 9){
  5533  0EF0  27F1  120A  158A   	fcall	PL26	;call to abstracted procedure
  5534  0EF3  1D03               	skipz
  5535  0EF4  2EF7               	goto	u6985
  5536  0EF5  300A               	movlw	10
  5537  0EF6  0233               	subwf	Serial_Println_Int@val,w
  5538  0EF7                     u6985:	
  5539  0EF7  1C03               	skipc
  5540  0EF8  2EFE               	goto	l340
  5541  0EF9                     l337:	
  5542  0EF9  1283               	bcf	3,5	;RP0=0, select bank0
  5543  0EFA  1303               	bcf	3,6	;RP1=0, select bank0
  5544  0EFB  1A0C               	btfsc	12,4	;volatile
  5545  0EFC  2E65               	goto	l5525
  5546  0EFD  2EF9               	goto	l337
  5547  0EFE                     l340:	
  5548  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  5549  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  5550  0F00  1E0C               	btfss	12,4	;volatile
  5551  0F01  2EFE               	goto	l340
  5552                           
  5553                           ;serialv2.h: 122: TXREG = val+48;
  5554  0F02  0833               	movf	Serial_Println_Int@val,w
  5555  0F03  3E30               	addlw	48
  5556  0F04  0099               	movwf	25	;volatile
  5557                           
  5558                           ;serialv2.h: 123: _delay(10);
  5559  0F05  3003               	movlw	3
  5560  0F06  00B5               	movwf	??_Serial_Println_Int
  5561  0F07                     u8947:	
  5562  0F07  0BB5               	decfsz	??_Serial_Println_Int,f
  5563  0F08  2F07               	goto	u8947
  5564  0F09                     l343:	
  5565                           ;serialv2.h: 124: while(!TXIF);
  5566                           
  5567  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  5568  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  5569  0F0B  1E0C               	btfss	12,4	;volatile
  5570  0F0C  2F09               	goto	l343
  5571                           
  5572                           ;serialv2.h: 125: TXREG = 13;
  5573  0F0D  300D               	movlw	13
  5574  0F0E  0099               	movwf	25	;volatile
  5575                           
  5576                           ;serialv2.h: 126: _delay(10);
  5577  0F0F  3003               	movlw	3
  5578  0F10  00B5               	movwf	??_Serial_Println_Int
  5579  0F11                     u8957:	
  5580  0F11  0BB5               	decfsz	??_Serial_Println_Int,f
  5581  0F12  2F11               	goto	u8957
  5582  0F13                     l346:	
  5583                           ;serialv2.h: 127: while(!TXIF);
  5584                           
  5585  0F13  1283               	bcf	3,5	;RP0=0, select bank0
  5586  0F14  1303               	bcf	3,6	;RP1=0, select bank0
  5587  0F15  1E0C               	btfss	12,4	;volatile
  5588  0F16  2F13               	goto	l346
  5589                           
  5590                           ;serialv2.h: 128: TXREG = 10;
  5591  0F17  300A               	movlw	10
  5592  0F18  0099               	movwf	25	;volatile
  5593                           
  5594                           ;serialv2.h: 129: _delay(10);
  5595  0F19  3003               	movlw	3
  5596  0F1A  00B5               	movwf	??_Serial_Println_Int
  5597  0F1B                     u8967:	
  5598  0F1B  0BB5               	decfsz	??_Serial_Println_Int,f
  5599  0F1C  2F1B               	goto	u8967
  5600  0F1D  0008               	return
  5601  0F1E                     __end_of_Serial_Println_Int:	
  5602  0F1E                     __ptext36:	
  5603 ;; *************** function ___awdiv *****************
  5604 ;; Defined at:
  5605 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;  divisor         2   11[BANK0 ] int 
  5608 ;;  dividend        2   13[BANK0 ] int 
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  quotient        2   17[BANK0 ] int 
  5611 ;;  sign            1   16[BANK0 ] unsigned char 
  5612 ;;  counter         1   15[BANK0 ] unsigned char 
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  2   11[BANK0 ] int 
  5615 ;; Registers used:
  5616 ;;		wreg, status,2, status,0
  5617 ;; Tracked objects:
  5618 ;;		On entry : 300/0
  5619 ;;		On exit  : 300/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5622 ;;      Params:         0       4       0       0       0
  5623 ;;      Locals:         0       4       0       0       0
  5624 ;;      Temps:          0       0       0       0       0
  5625 ;;      Totals:         0       8       0       0       0
  5626 ;;Total ram usage:        8 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    5
  5629 ;; This function calls:
  5630 ;;		Nothing
  5631 ;; This function is called by:
  5632 ;;		_Serial_Println_Int
  5633 ;;		_Serial_Print_Int
  5634 ;;		_main
  5635 ;;		_a2d_read
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           
  5640                           ;psect for function ___awdiv
  5641  0F1E                     ___awdiv:	
  5642  0F1E                     l5371:	
  5643                           ;incstack = 0
  5644                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5645                           
  5646  0F1E  01B0               	clrf	___awdiv@sign
  5647  0F1F  1FAC               	btfss	___awdiv@divisor+1,7
  5648  0F20  2F28               	goto	l5379
  5649  0F21  09AB               	comf	___awdiv@divisor,f
  5650  0F22  09AC               	comf	___awdiv@divisor+1,f
  5651  0F23  0AAB               	incf	___awdiv@divisor,f
  5652  0F24  1903               	skipnz
  5653  0F25  0AAC               	incf	___awdiv@divisor+1,f
  5654  0F26  01B0               	clrf	___awdiv@sign
  5655  0F27  0AB0               	incf	___awdiv@sign,f
  5656  0F28                     l5379:	
  5657  0F28  1FAE               	btfss	___awdiv@dividend+1,7
  5658  0F29  2F31               	goto	l5385
  5659  0F2A  09AD               	comf	___awdiv@dividend,f
  5660  0F2B  09AE               	comf	___awdiv@dividend+1,f
  5661  0F2C  0AAD               	incf	___awdiv@dividend,f
  5662  0F2D  1903               	skipnz
  5663  0F2E  0AAE               	incf	___awdiv@dividend+1,f
  5664  0F2F  3001               	movlw	1
  5665  0F30  06B0               	xorwf	___awdiv@sign,f
  5666  0F31                     l5385:	
  5667  0F31  01B1               	clrf	___awdiv@quotient
  5668  0F32  01B2               	clrf	___awdiv@quotient+1
  5669  0F33  082B               	movf	___awdiv@divisor,w
  5670  0F34  042C               	iorwf	___awdiv@divisor+1,w
  5671  0F35  1903               	btfsc	3,2
  5672  0F36  2F56               	goto	l5407
  5673  0F37  01AF               	clrf	___awdiv@counter
  5674  0F38                     L16:	
  5675  0F38  0AAF               	incf	___awdiv@counter,f
  5676  0F39  1BAC               	btfsc	___awdiv@divisor+1,7
  5677  0F3A  2F3F               	goto	l5395
  5678  0F3B  1003               	clrc
  5679  0F3C  0DAB               	rlf	___awdiv@divisor,f
  5680  0F3D  0DAC               	rlf	___awdiv@divisor+1,f
  5681  0F3E  2F38               	goto	L16
  5682  0F3F                     l5395:	
  5683  0F3F  1003               	clrc
  5684  0F40  0DB1               	rlf	___awdiv@quotient,f
  5685  0F41  0DB2               	rlf	___awdiv@quotient+1,f
  5686  0F42  082C               	movf	___awdiv@divisor+1,w
  5687  0F43  022E               	subwf	___awdiv@dividend+1,w
  5688  0F44  1D03               	skipz
  5689  0F45  2F48               	goto	u6715
  5690  0F46  082B               	movf	___awdiv@divisor,w
  5691  0F47  022D               	subwf	___awdiv@dividend,w
  5692  0F48                     u6715:	
  5693  0F48  1C03               	skipc
  5694  0F49  2F52               	goto	L17
  5695  0F4A  082B               	movf	___awdiv@divisor,w
  5696  0F4B  02AD               	subwf	___awdiv@dividend,f
  5697  0F4C  082C               	movf	___awdiv@divisor+1,w
  5698  0F4D  1C03               	skipc
  5699  0F4E  03AE               	decf	___awdiv@dividend+1,f
  5700  0F4F  02AE               	subwf	___awdiv@dividend+1,f
  5701  0F50  1431               	bsf	___awdiv@quotient,0
  5702  0F51  1003               	clrc
  5703  0F52                     L17:	
  5704  0F52  0CAC               	rrf	___awdiv@divisor+1,f
  5705  0F53  0CAB               	rrf	___awdiv@divisor,f
  5706  0F54  0BAF               	decfsz	___awdiv@counter,f
  5707  0F55  2F3F               	goto	l5395
  5708  0F56                     l5407:	
  5709  0F56  0830               	movf	___awdiv@sign,w
  5710  0F57  1903               	btfsc	3,2
  5711  0F58  2F5E               	goto	l5411
  5712  0F59  09B1               	comf	___awdiv@quotient,f
  5713  0F5A  09B2               	comf	___awdiv@quotient+1,f
  5714  0F5B  0AB1               	incf	___awdiv@quotient,f
  5715  0F5C  1903               	skipnz
  5716  0F5D  0AB2               	incf	___awdiv@quotient+1,f
  5717  0F5E                     l5411:	
  5718  0F5E  0832               	movf	___awdiv@quotient+1,w
  5719  0F5F  00AC               	movwf	?___awdiv+1
  5720  0F60  0831               	movf	___awdiv@quotient,w
  5721  0F61  00AB               	movwf	?___awdiv
  5722  0F62  0008               	return
  5723  0F63                     __end_of___awdiv:	
  5724  0F63                     __ptext35:	
  5725 ;; *************** function ___awmod *****************
  5726 ;; Defined at:
  5727 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  divisor         2    5[BANK0 ] int 
  5730 ;;  dividend        2    7[BANK0 ] int 
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;  sign            1   10[BANK0 ] unsigned char 
  5733 ;;  counter         1    9[BANK0 ] unsigned char 
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  2    5[BANK0 ] int 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0
  5738 ;; Tracked objects:
  5739 ;;		On entry : 300/0
  5740 ;;		On exit  : 300/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5743 ;;      Params:         0       4       0       0       0
  5744 ;;      Locals:         0       2       0       0       0
  5745 ;;      Temps:          0       0       0       0       0
  5746 ;;      Totals:         0       6       0       0       0
  5747 ;;Total ram usage:        6 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    5
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_Serial_Println_Int
  5754 ;;		_Serial_Print_Int
  5755 ;;		_main
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function ___awmod
  5761  0F63                     ___awmod:	
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5765  0F63  01AA               	clrf	___awmod@sign
  5766  0F64  1FA8               	btfss	___awmod@dividend+1,7
  5767  0F65  2F6D               	goto	l5423
  5768  0F66  09A7               	comf	___awmod@dividend,f
  5769  0F67  09A8               	comf	___awmod@dividend+1,f
  5770  0F68  0AA7               	incf	___awmod@dividend,f
  5771  0F69  1903               	skipnz
  5772  0F6A  0AA8               	incf	___awmod@dividend+1,f
  5773  0F6B  01AA               	clrf	___awmod@sign
  5774  0F6C  0AAA               	incf	___awmod@sign,f
  5775  0F6D                     l5423:	
  5776  0F6D  1FA6               	btfss	___awmod@divisor+1,7
  5777  0F6E  2F74               	goto	l5427
  5778  0F6F  09A5               	comf	___awmod@divisor,f
  5779  0F70  09A6               	comf	___awmod@divisor+1,f
  5780  0F71  0AA5               	incf	___awmod@divisor,f
  5781  0F72  1903               	skipnz
  5782  0F73  0AA6               	incf	___awmod@divisor+1,f
  5783  0F74                     l5427:	
  5784  0F74  0825               	movf	___awmod@divisor,w
  5785  0F75  0426               	iorwf	___awmod@divisor+1,w
  5786  0F76  1903               	btfsc	3,2
  5787  0F77  2F93               	goto	l5443
  5788  0F78  01A9               	clrf	___awmod@counter
  5789  0F79                     L14:	
  5790  0F79  0AA9               	incf	___awmod@counter,f
  5791  0F7A  1BA6               	btfsc	___awmod@divisor+1,7
  5792  0F7B  2F80               	goto	l5435
  5793  0F7C  1003               	clrc
  5794  0F7D  0DA5               	rlf	___awmod@divisor,f
  5795  0F7E  0DA6               	rlf	___awmod@divisor+1,f
  5796  0F7F  2F79               	goto	L14
  5797  0F80                     l5435:	
  5798  0F80  0826               	movf	___awmod@divisor+1,w
  5799  0F81  0228               	subwf	___awmod@dividend+1,w
  5800  0F82  1D03               	skipz
  5801  0F83  2F86               	goto	u6785
  5802  0F84  0825               	movf	___awmod@divisor,w
  5803  0F85  0227               	subwf	___awmod@dividend,w
  5804  0F86                     u6785:	
  5805  0F86  1C03               	skipc
  5806  0F87  2F8F               	goto	L15
  5807  0F88  0825               	movf	___awmod@divisor,w
  5808  0F89  02A7               	subwf	___awmod@dividend,f
  5809  0F8A  0826               	movf	___awmod@divisor+1,w
  5810  0F8B  1C03               	skipc
  5811  0F8C  03A8               	decf	___awmod@dividend+1,f
  5812  0F8D  02A8               	subwf	___awmod@dividend+1,f
  5813  0F8E  1003               	clrc
  5814  0F8F                     L15:	
  5815  0F8F  0CA6               	rrf	___awmod@divisor+1,f
  5816  0F90  0CA5               	rrf	___awmod@divisor,f
  5817  0F91  0BA9               	decfsz	___awmod@counter,f
  5818  0F92  2F80               	goto	l5435
  5819  0F93                     l5443:	
  5820  0F93  082A               	movf	___awmod@sign,w
  5821  0F94  1903               	btfsc	3,2
  5822  0F95  2F9B               	goto	l5447
  5823  0F96  09A7               	comf	___awmod@dividend,f
  5824  0F97  09A8               	comf	___awmod@dividend+1,f
  5825  0F98  0AA7               	incf	___awmod@dividend,f
  5826  0F99  1903               	skipnz
  5827  0F9A  0AA8               	incf	___awmod@dividend+1,f
  5828  0F9B                     l5447:	
  5829  0F9B  0828               	movf	___awmod@dividend+1,w
  5830  0F9C  00A6               	movwf	?___awmod+1
  5831  0F9D  0827               	movf	___awmod@dividend,w
  5832  0F9E  00A5               	movwf	?___awmod
  5833  0F9F  0008               	return
  5834  0FA0                     __end_of___awmod:	
  5835  0FA0                     PL4:	
  5836  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  5837  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  5838  0FA2  00A5               	movwf	___awmod@divisor
  5839  0FA3  01A6               	clrf	___awmod@divisor+1
  5840  0FA4  0834               	movf	Serial_Print_Int@val+1,w
  5841  0FA5  00A8               	movwf	___awmod@dividend+1
  5842  0FA6  0833               	movf	Serial_Print_Int@val,w
  5843  0FA7  00A7               	movwf	___awmod@dividend
  5844  0FA8  0008               	return
  5845  0FA9                     __end_ofPL4:	
  5846  0FA9                     PL6:	
  5847  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  5848  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  5849  0FAB  00A5               	movwf	___awmod@divisor
  5850  0FAC  01A6               	clrf	___awmod@divisor+1
  5851  0FAD  0834               	movf	Serial_Println_Int@val+1,w
  5852  0FAE  00A8               	movwf	___awmod@dividend+1
  5853  0FAF  0833               	movf	Serial_Println_Int@val,w
  5854  0FB0  00A7               	movwf	___awmod@dividend
  5855  0FB1  0008               	return
  5856  0FB2                     __end_ofPL6:	
  5857  0FB2                     PL10:	
  5858  0FB2  30E8               	movlw	232
  5859  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  5860  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  5861  0FB5  00A5               	movwf	___awmod@divisor
  5862  0FB6  3003               	movlw	3
  5863  0FB7  00A6               	movwf	___awmod@divisor+1
  5864  0FB8  0834               	movf	Serial_Print_Int@val+1,w
  5865  0FB9  00A8               	movwf	___awmod@dividend+1
  5866  0FBA  0833               	movf	Serial_Print_Int@val,w
  5867  0FBB  00A7               	movwf	___awmod@dividend
  5868  0FBC  0008               	return
  5869  0FBD                     __end_ofPL10:	
  5870  0FBD                     PL12:	
  5871  0FBD  3064               	movlw	100
  5872  0FBE  00AB               	movwf	___awdiv@divisor
  5873  0FBF  01AC               	clrf	___awdiv@divisor+1
  5874  0FC0  0834               	movf	Serial_Print_Int@val+1,w
  5875  0FC1  00AE               	movwf	___awdiv@dividend+1
  5876  0FC2  0833               	movf	Serial_Print_Int@val,w
  5877  0FC3  00AD               	movwf	___awdiv@dividend
  5878  0FC4  0008               	return
  5879  0FC5                     __end_ofPL12:	
  5880  0FC5                     PL14:	
  5881  0FC5  3064               	movlw	100
  5882  0FC6  00AB               	movwf	___awdiv@divisor
  5883  0FC7  01AC               	clrf	___awdiv@divisor+1
  5884  0FC8  0834               	movf	Serial_Println_Int@val+1,w
  5885  0FC9  00AE               	movwf	___awdiv@dividend+1
  5886  0FCA  0833               	movf	Serial_Println_Int@val,w
  5887  0FCB  00AD               	movwf	___awdiv@dividend
  5888  0FCC  0008               	return
  5889  0FCD                     __end_ofPL14:	
  5890  0FCD                     PL16:	
  5891  0FCD  1283               	bcf	3,5	;RP0=0, select bank0
  5892  0FCE  1303               	bcf	3,6	;RP1=0, select bank0
  5893  0FCF  00A5               	movwf	___awmod@divisor
  5894  0FD0  3003               	movlw	3
  5895  0FD1  00A6               	movwf	___awmod@divisor+1
  5896  0FD2  0834               	movf	Serial_Println_Int@val+1,w
  5897  0FD3  00A8               	movwf	___awmod@dividend+1
  5898  0FD4  0833               	movf	Serial_Println_Int@val,w
  5899  0FD5  00A7               	movwf	___awmod@dividend
  5900  0FD6  0008               	return
  5901  0FD7                     __end_ofPL16:	
  5902  0FD7                     PL18:	
  5903  0FD7  30E8               	movlw	232
  5904  0FD8  00AB               	movwf	___awdiv@divisor
  5905  0FD9  3003               	movlw	3
  5906  0FDA  00AC               	movwf	___awdiv@divisor+1
  5907  0FDB  0834               	movf	Serial_Print_Int@val+1,w
  5908  0FDC  00AE               	movwf	___awdiv@dividend+1
  5909  0FDD  0833               	movf	Serial_Print_Int@val,w
  5910  0FDE  00AD               	movwf	___awdiv@dividend
  5911  0FDF  0008               	return
  5912  0FE0                     __end_ofPL18:	
  5913  0FE0                     PL20:	
  5914  0FE0  30E8               	movlw	232
  5915  0FE1  00AB               	movwf	___awdiv@divisor
  5916  0FE2  3003               	movlw	3
  5917  0FE3  00AC               	movwf	___awdiv@divisor+1
  5918  0FE4  0834               	movf	Serial_Println_Int@val+1,w
  5919  0FE5  00AE               	movwf	___awdiv@dividend+1
  5920  0FE6  0833               	movf	Serial_Println_Int@val,w
  5921  0FE7  00AD               	movwf	___awdiv@dividend
  5922  0FE8  0008               	return
  5923  0FE9                     __end_ofPL20:	
  5924  0FE9                     PL24:	
  5925  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  5926  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  5927  0FEB  0834               	movf	Serial_Print_Int@val+1,w
  5928  0FEC  3A80               	xorlw	128
  5929  0FED  00FF               	movwf	127
  5930  0FEE  3080               	movlw	128
  5931  0FEF  027F               	subwf	127,w
  5932  0FF0  0008               	return
  5933  0FF1                     __end_ofPL24:	
  5934  0FF1                     PL26:	
  5935  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  5936  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  5937  0FF3  0834               	movf	Serial_Println_Int@val+1,w
  5938  0FF4  3A80               	xorlw	128
  5939  0FF5  00FF               	movwf	127
  5940  0FF6  3080               	movlw	128
  5941  0FF7  027F               	subwf	127,w
  5942  0FF8  0008               	return
  5943  0FF9                     __end_ofPL26:	
  5944  0FF9                     PL34:	
  5945  0FF9  3010               	movlw	16
  5946  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  5947  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  5948  0FFC  00A5               	movwf	___awmod@divisor
  5949  0FFD  3027               	movlw	39
  5950  0FFE  00A6               	movwf	___awmod@divisor+1
  5951  0FFF  0008               	return
  5952  1000                     __end_ofPL34:	
  5953                           
  5954                           	psect	text24
  5955  1BFE                     __ptext24:	
  5956 ;; *************** function _Serial_NewLine *****************
  5957 ;; Defined at:
  5958 ;;		line 37 in file "serialv2.h"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;		None
  5963 ;; Return value:  Size  Location     Type
  5964 ;;		None               void
  5965 ;; Registers used:
  5966 ;;		wreg
  5967 ;; Tracked objects:
  5968 ;;		On entry : 300/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5972 ;;      Params:         0       0       0       0       0
  5973 ;;      Locals:         0       0       0       0       0
  5974 ;;      Temps:          0       1       0       0       0
  5975 ;;      Totals:         0       1       0       0       0
  5976 ;;Total ram usage:        1 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    5
  5979 ;; This function calls:
  5980 ;;		Nothing
  5981 ;; This function is called by:
  5982 ;;		_main
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           
  5987                           ;psect for function _Serial_NewLine
  5988  1BFE                     _Serial_NewLine:	
  5989  1BFE                     l281:	
  5990                           ;serialv2.h: 38: while(!TXIF);
  5991                           
  5992                           ;incstack = 0
  5993                           ; Regs used in _Serial_NewLine: [wreg]
  5994                           
  5995  1BFE  1E0C               	btfss	12,4	;volatile
  5996  1BFF  2BFE               	goto	l281
  5997                           
  5998                           ;serialv2.h: 39: TXREG = 13;
  5999  1C00  300D               	movlw	13
  6000  1C01  0099               	movwf	25	;volatile
  6001                           
  6002                           ;serialv2.h: 40: _delay((unsigned long)((1)*(4000000/4000.0)));
  6003  1C02  30F9               	movlw	249
  6004  1C03  00A5               	movwf	??_Serial_NewLine
  6005  1C04                     u8757:	
  6006  1C04  0000               	nop
  6007  1C05  0BA5               	decfsz	??_Serial_NewLine,f
  6008  1C06  2C04               	goto	u8757
  6009  1C07  2C08               	nop2	;nop
  6010  1C08  0000               	nop
  6011  1C09                     l284:	
  6012                           ;serialv2.h: 41: while(!TXIF);
  6013                           
  6014  1C09  1283               	bcf	3,5	;RP0=0, select bank0
  6015  1C0A  1303               	bcf	3,6	;RP1=0, select bank0
  6016  1C0B  1E0C               	btfss	12,4	;volatile
  6017  1C0C  2C09               	goto	l284
  6018                           
  6019                           ;serialv2.h: 42: TXREG = 10;
  6020  1C0D  300A               	movlw	10
  6021  1C0E  0099               	movwf	25	;volatile
  6022                           
  6023                           ;serialv2.h: 43: _delay((unsigned long)((1)*(4000000/4000.0)));
  6024  1C0F  30F9               	movlw	249
  6025  1C10  00A5               	movwf	??_Serial_NewLine
  6026  1C11                     u8767:	
  6027  1C11  0000               	nop
  6028  1C12  0BA5               	decfsz	??_Serial_NewLine,f
  6029  1C13  2C11               	goto	u8767
  6030  1C14  2C15               	nop2	;nop
  6031  1C15  0000               	nop
  6032  1C16  0008               	return
  6033  1C17                     __end_of_Serial_NewLine:	
  6034                           
  6035                           	psect	text25
  6036  10C1                     __ptext25:	
  6037 ;; *************** function _Serial_Init *****************
  6038 ;; Defined at:
  6039 ;;		line 10 in file "serialv2.h"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;		None
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;		None
  6044 ;; Return value:  Size  Location     Type
  6045 ;;		None               void
  6046 ;; Registers used:
  6047 ;;		wreg
  6048 ;; Tracked objects:
  6049 ;;		On entry : 300/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6053 ;;      Params:         0       0       0       0       0
  6054 ;;      Locals:         0       0       0       0       0
  6055 ;;      Temps:          0       3       0       0       0
  6056 ;;      Totals:         0       3       0       0       0
  6057 ;;Total ram usage:        3 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    5
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_main
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           
  6068                           ;psect for function _Serial_Init
  6069  10C1                     _Serial_Init:	
  6070                           
  6071                           ;serialv2.h: 13: SPEN = 1;
  6072                           
  6073                           ;incstack = 0
  6074                           ; Regs used in _Serial_Init: [wreg]
  6075  10C1  1798               	bsf	24,7	;volatile
  6076                           
  6077                           ;serialv2.h: 14: RX9 = 0;
  6078  10C2  1318               	bcf	24,6	;volatile
  6079                           
  6080                           ;serialv2.h: 15: CREN = 1;
  6081  10C3  1618               	bsf	24,4	;volatile
  6082                           
  6083                           ;serialv2.h: 16: TX9 = 0;
  6084  10C4  1683               	bsf	3,5	;RP0=1, select bank1
  6085  10C5  1318               	bcf	24,6	;volatile
  6086                           
  6087                           ;serialv2.h: 17: TXEN = 1;
  6088  10C6  1698               	bsf	24,5	;volatile
  6089                           
  6090                           ;serialv2.h: 18: SYNC = 0;
  6091  10C7  1218               	bcf	24,4	;volatile
  6092                           
  6093                           ;serialv2.h: 19: BRGH = 1;
  6094  10C8  1518               	bsf	24,2	;volatile
  6095                           
  6096                           ;serialv2.h: 20: SPBRG = 129;
  6097  10C9  3081               	movlw	129
  6098  10CA  0099               	movwf	25	;volatile
  6099                           
  6100                           ;serialv2.h: 21: RCIE = 1;
  6101  10CB  168C               	bsf	12,5	;volatile
  6102                           
  6103                           ;serialv2.h: 22: TXIE = 0;
  6104  10CC  120C               	bcf	12,4	;volatile
  6105                           
  6106                           ;serialv2.h: 23: ADDEN = 0;
  6107  10CD  1283               	bcf	3,5	;RP0=0, select bank0
  6108  10CE  1198               	bcf	24,3	;volatile
  6109                           
  6110                           ;serialv2.h: 24: _delay((unsigned long)((500)*(4000000/4000.0)));
  6111  10CF  3003               	movlw	3
  6112  10D0  00A7               	movwf	??_Serial_Init+2
  6113  10D1  308A               	movlw	138
  6114  10D2  00A6               	movwf	??_Serial_Init+1
  6115  10D3  3056               	movlw	86
  6116  10D4  00A5               	movwf	??_Serial_Init
  6117  10D5                     u8777:	
  6118  10D5  0BA5               	decfsz	??_Serial_Init,f
  6119  10D6  28D5               	goto	u8777
  6120  10D7  0BA6               	decfsz	??_Serial_Init+1,f
  6121  10D8  28D5               	goto	u8777
  6122  10D9  0BA7               	decfsz	??_Serial_Init+2,f
  6123  10DA  28D5               	goto	u8777
  6124  10DB  28DC               	nop2
  6125  10DC  0008               	return
  6126  10DD                     __end_of_Serial_Init:	
  6127                           
  6128                           	psect	text32
  6129  10DD                     __ptext32:	
  6130 ;; *************** function _CheckMode *****************
  6131 ;; Defined at:
  6132 ;;		line 539 in file "Automated Solar Panel Orientation Setter.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;		None
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;  pressedKey      1   22[BANK0 ] unsigned char 
  6137 ;; Return value:  Size  Location     Type
  6138 ;;		None               void
  6139 ;; Registers used:
  6140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/100
  6143 ;;		On exit  : 300/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6146 ;;      Params:         0       0       0       0       0
  6147 ;;      Locals:         0       1       0       0       0
  6148 ;;      Temps:          0       0       0       0       0
  6149 ;;      Totals:         0       1       0       0       0
  6150 ;;Total ram usage:        1 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    7
  6153 ;; This function calls:
  6154 ;;		_CheckKeyPad
  6155 ;;		_Serial_Print
  6156 ;;		_Serial_Println_Int
  6157 ;;		_nop
  6158 ;; This function is called by:
  6159 ;;		_main
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           
  6164                           ;psect for function _CheckMode
  6165  10DD                     _CheckMode:	
  6166                           
  6167                           ;Automated Solar Panel Orientation Setter.c: 540: char pressedKey;
  6168                           ;Automated Solar Panel Orientation Setter.c: 541: pressedKey = CheckKeyPad();
  6169                           
  6170                           ;incstack = 0
  6171                           ; Regs used in _CheckMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6172  10DD  2172  160A  118A   	fcall	_CheckKeyPad
  6173  10E0  00B6               	movwf	CheckMode@pressedKey
  6174                           
  6175                           ;Automated Solar Panel Orientation Setter.c: 543: if( pressedKey=='*' ){
  6176  10E1  3A2A               	xorlw	42
  6177  10E2  1D03               	btfss	3,2
  6178  10E3  0008               	return
  6179                           
  6180                           ;Automated Solar Panel Orientation Setter.c: 544: currentMode++;
  6181  10E4  1683               	bsf	3,5	;RP0=1, select bank1
  6182  10E5  0AB9               	incf	_currentMode^(0+128),f
  6183  10E6  1903               	skipnz
  6184  10E7  0ABA               	incf	(_currentMode+1)^(0+128),f
  6185                           
  6186                           ;Automated Solar Panel Orientation Setter.c: 545: if (currentMode>4) currentMode = 1;
  6187  10E8  3000               	movlw	0
  6188  10E9  023A               	subwf	(_currentMode+1)^(0+128),w
  6189  10EA  3005               	movlw	5
  6190  10EB  1903               	skipnz
  6191  10EC  0239               	subwf	_currentMode^(0+128),w
  6192  10ED  1C03               	skipc
  6193  10EE  28F2               	goto	l6203
  6194  10EF  01B9               	clrf	_currentMode^(0+128)
  6195  10F0  0AB9               	incf	_currentMode^(0+128),f
  6196  10F1  01BA               	clrf	(_currentMode+1)^(0+128)
  6197  10F2                     l6203:	
  6198                           
  6199                           ;Automated Solar Panel Orientation Setter.c: 546: state = currentMode;
  6200  10F2  0839               	movf	_currentMode^(0+128),w
  6201  10F3  1283               	bcf	3,5	;RP0=0, select bank0
  6202  10F4  00D7               	movwf	_state
  6203                           
  6204                           ;Automated Solar Panel Orientation Setter.c: 548: RC1 = 1;
  6205  10F5  1487               	bsf	7,1	;volatile
  6206                           
  6207                           ;Automated Solar Panel Orientation Setter.c: 549: Serial_Print("Switched to Mode : ");
  6208  10F6  3001               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  6209  10F7  2312               	fcall	_Serial_Print
  6210                           
  6211                           ;Automated Solar Panel Orientation Setter.c: 550: Serial_Println_Int((int)state);
  6212  10F8  0857               	movf	_state,w
  6213  10F9  00B3               	movwf	Serial_Println_Int@val
  6214  10FA  01B4               	clrf	Serial_Println_Int@val+1
  6215  10FB  120A  158A  25EF  160A  118A  	fcall	_Serial_Println_Int
  6216                           
  6217                           ;Automated Solar Panel Orientation Setter.c: 551: RC1 = 0;
  6218  1100  1283               	bcf	3,5	;RP0=0, select bank0
  6219  1101  1303               	bcf	3,6	;RP1=0, select bank0
  6220  1102  1087               	bcf	7,1	;volatile
  6221                           
  6222                           ;Automated Solar Panel Orientation Setter.c: 553: ; nop();nop();nop();nop();nop();nop();
      +                          nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop(
      +                          );nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();no
      +                          p();;
  6223  1103  216D  160A  118A   	fcall	_nop
  6224  1106  216D  160A  118A   	fcall	_nop
  6225  1109  216D  160A  118A   	fcall	_nop
  6226  110C  216D  160A  118A   	fcall	_nop
  6227  110F  216D  160A  118A   	fcall	_nop
  6228  1112  216D  160A  118A   	fcall	_nop
  6229  1115  216D  160A  118A   	fcall	_nop
  6230  1118  216D  160A  118A   	fcall	_nop
  6231  111B  216D  160A  118A   	fcall	_nop
  6232  111E  216D  160A  118A   	fcall	_nop
  6233  1121  216D  160A  118A   	fcall	_nop
  6234  1124  216D  160A  118A   	fcall	_nop
  6235  1127  216D  160A  118A   	fcall	_nop
  6236  112A  216D  160A  118A   	fcall	_nop
  6237  112D  216D  160A  118A   	fcall	_nop
  6238  1130  216D  160A  118A   	fcall	_nop
  6239  1133  216D  160A  118A   	fcall	_nop
  6240  1136  216D  160A  118A   	fcall	_nop
  6241  1139  216D  160A  118A   	fcall	_nop
  6242  113C  216D  160A  118A   	fcall	_nop
  6243  113F  216D  160A  118A   	fcall	_nop
  6244  1142  216D  160A  118A   	fcall	_nop
  6245  1145  216D  160A  118A   	fcall	_nop
  6246  1148  216D  160A  118A   	fcall	_nop
  6247  114B  216D  160A  118A   	fcall	_nop
  6248  114E  216D  160A  118A   	fcall	_nop
  6249  1151  216D  160A  118A   	fcall	_nop
  6250  1154  216D  160A  118A   	fcall	_nop
  6251  1157  216D  160A  118A   	fcall	_nop
  6252  115A  216D  160A  118A   	fcall	_nop
  6253  115D  216D  160A  118A   	fcall	_nop
  6254  1160  216D  160A  118A   	fcall	_nop
  6255  1163  216D  160A  118A   	fcall	_nop
  6256  1166  216D  160A  118A   	fcall	_nop
  6257  1169  216D  160A  118A   	fcall	_nop
  6258  116C  296D               	ljmp	l5451
  6259  116D                     __end_of_CheckMode:	
  6260  116D                     __ptext33:	
  6261 ;; *************** function _nop *****************
  6262 ;; Defined at:
  6263 ;;		line 50 in file "setup.h"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;		None
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;		None
  6268 ;; Return value:  Size  Location     Type
  6269 ;;		None               void
  6270 ;; Registers used:
  6271 ;;		wreg
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/100
  6274 ;;		On exit  : 300/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6277 ;;      Params:         0       0       0       0       0
  6278 ;;      Locals:         0       0       0       0       0
  6279 ;;      Temps:          0       0       0       0       0
  6280 ;;      Totals:         0       0       0       0       0
  6281 ;;Total ram usage:        0 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    5
  6284 ;; This function calls:
  6285 ;;		Nothing
  6286 ;; This function is called by:
  6287 ;;		_main
  6288 ;;		_CheckMode
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           
  6293                           ;psect for function _nop
  6294  116D                     _nop:	
  6295  116D                     l5451:	
  6296                           ;incstack = 0
  6297                           ; Regs used in _nop: [wreg]
  6298                           
  6299                           
  6300                           ;setup.h: 51: Nop = !Nop;
  6301  116D  3002               	movlw	(0+1) shl (_Nop& (0+7))
  6302  116E  1283               	bcf	3,5	;RP0=0, select bank0
  6303  116F  1303               	bcf	3,6	;RP1=0, select bank0
  6304  1170  06D8               	xorwf	_Nop/(0+8),f
  6305  1171  0008               	return
  6306  1172                     __end_of_nop:	
  6307  1172                     __ptext38:	
  6308 ;; *************** function _CheckKeyPad *****************
  6309 ;; Defined at:
  6310 ;;		line 570 in file "Automated Solar Panel Orientation Setter.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;		None
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;  rowNo           2   12[BANK0 ] int 
  6315 ;;  colomnNo        2   10[BANK0 ] int 
  6316 ;;  charactor       1    9[BANK0 ] unsigned char 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  1    wreg      unsigned char 
  6319 ;; Registers used:
  6320 ;;		wreg, status,2, status,0, pclath, cstack
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 300/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6326 ;;      Params:         0       0       0       0       0
  6327 ;;      Locals:         0       5       0       0       0
  6328 ;;      Temps:          0       0       0       0       0
  6329 ;;      Totals:         0       5       0       0       0
  6330 ;;Total ram usage:        5 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:    6
  6333 ;; This function calls:
  6334 ;;		_ColomnNo
  6335 ;;		_RowNo
  6336 ;; This function is called by:
  6337 ;;		_main
  6338 ;;		_CheckMode
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           
  6343                           ;psect for function _CheckKeyPad
  6344  1172                     _CheckKeyPad:	
  6345                           
  6346                           ;Automated Solar Panel Orientation Setter.c: 571: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6347                           
  6348                           ;incstack = 0
  6349                           ; Regs used in _CheckKeyPad: [wreg+status,2+status,0+pclath+cstack]
  6350  1172  1283               	bcf	3,5	;RP0=0, select bank0
  6351  1173  1303               	bcf	3,6	;RP1=0, select bank0
  6352  1174  1207               	bcf	7,4	;volatile
  6353  1175  1288               	bcf	8,5	;volatile
  6354  1176  1287               	bcf	7,5	;volatile
  6355  1177  1208               	bcf	8,4	;volatile
  6356                           
  6357                           ;Automated Solar Panel Orientation Setter.c: 572: char charactor = '$';
  6358  1178  3024               	movlw	36
  6359  1179  00A9               	movwf	CheckKeyPad@charactor
  6360                           
  6361                           ;Automated Solar Panel Orientation Setter.c: 574: int rowNo = RowNo();
  6362  117A  22F9  160A  118A   	fcall	_RowNo
  6363  117D  0826               	movf	?_RowNo+1,w
  6364  117E  00AD               	movwf	CheckKeyPad@rowNo+1
  6365  117F  0825               	movf	?_RowNo,w
  6366  1180  00AC               	movwf	CheckKeyPad@rowNo
  6367                           
  6368                           ;Automated Solar Panel Orientation Setter.c: 575: if (rowNo != 0){
  6369  1181  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6370  1182  1903               	btfsc	3,2
  6371  1183  2A4D               	goto	l5743
  6372                           
  6373                           ;Automated Solar Panel Orientation Setter.c: 576: colomnNo = ColomnNo(rowNo);
  6374  1184  082D               	movf	CheckKeyPad@rowNo+1,w
  6375  1185  00A6               	movwf	ColomnNo@rowNo+1
  6376  1186  082C               	movf	CheckKeyPad@rowNo,w
  6377  1187  00A5               	movwf	ColomnNo@rowNo
  6378  1188  226D  160A  118A   	fcall	_ColomnNo
  6379  118B  0826               	movf	?_ColomnNo+1,w
  6380  118C  00AB               	movwf	CheckKeyPad@colomnNo+1
  6381  118D  0825               	movf	?_ColomnNo,w
  6382  118E  00AA               	movwf	CheckKeyPad@colomnNo
  6383                           
  6384                           ;Automated Solar Panel Orientation Setter.c: 577: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6385  118F  1207               	bcf	7,4	;volatile
  6386  1190  1288               	bcf	8,5	;volatile
  6387  1191  1287               	bcf	7,5	;volatile
  6388  1192  1208               	bcf	8,4	;volatile
  6389                           
  6390                           ;Automated Solar Panel Orientation Setter.c: 578: if(colomnNo==1 && rowNo == 1) characto
      +                          r = '1';
  6391  1193  032A               	decf	CheckKeyPad@colomnNo,w
  6392  1194  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6393  1195  1D03               	btfss	3,2
  6394  1196  299D               	goto	l5651
  6395  1197  032C               	decf	CheckKeyPad@rowNo,w
  6396  1198  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6397  1199  1D03               	btfss	3,2
  6398  119A  299D               	goto	l5651
  6399  119B  3031               	movlw	49
  6400  119C  2A4C               	goto	L18
  6401  119D                     l5651:	
  6402                           
  6403                           ;Automated Solar Panel Orientation Setter.c: 579: else if(colomnNo==1 && rowNo == 2) cha
      +                          ractor = '2';
  6404  119D  032A               	decf	CheckKeyPad@colomnNo,w
  6405  119E  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6406  119F  1D03               	btfss	3,2
  6407  11A0  29A8               	goto	l5657
  6408  11A1  3002               	movlw	2
  6409  11A2  062C               	xorwf	CheckKeyPad@rowNo,w
  6410  11A3  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6411  11A4  1D03               	btfss	3,2
  6412  11A5  29A8               	goto	l5657
  6413  11A6  3032               	movlw	50
  6414  11A7  2A4C               	goto	L18
  6415  11A8                     l5657:	
  6416                           
  6417                           ;Automated Solar Panel Orientation Setter.c: 580: else if(colomnNo==1 && rowNo == 3) cha
      +                          ractor = '3';
  6418  11A8  032A               	decf	CheckKeyPad@colomnNo,w
  6419  11A9  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6420  11AA  1D03               	btfss	3,2
  6421  11AB  29B3               	goto	l5663
  6422  11AC  3003               	movlw	3
  6423  11AD  062C               	xorwf	CheckKeyPad@rowNo,w
  6424  11AE  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6425  11AF  1D03               	btfss	3,2
  6426  11B0  29B3               	goto	l5663
  6427  11B1  3033               	movlw	51
  6428  11B2  2A4C               	goto	L18
  6429  11B3                     l5663:	
  6430                           
  6431                           ;Automated Solar Panel Orientation Setter.c: 581: else if(colomnNo==1 && rowNo == 4) cha
      +                          ractor = 'A';
  6432  11B3  032A               	decf	CheckKeyPad@colomnNo,w
  6433  11B4  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6434  11B5  1D03               	btfss	3,2
  6435  11B6  29BE               	goto	l5669
  6436  11B7  3004               	movlw	4
  6437  11B8  062C               	xorwf	CheckKeyPad@rowNo,w
  6438  11B9  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6439  11BA  1D03               	btfss	3,2
  6440  11BB  29BE               	goto	l5669
  6441  11BC  3041               	movlw	65
  6442  11BD  2A4C               	goto	L18
  6443  11BE                     l5669:	
  6444                           
  6445                           ;Automated Solar Panel Orientation Setter.c: 583: else if(colomnNo==2 && rowNo == 1) cha
      +                          ractor = '4';
  6446  11BE  3002               	movlw	2
  6447  11BF  062A               	xorwf	CheckKeyPad@colomnNo,w
  6448  11C0  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6449  11C1  1D03               	btfss	3,2
  6450  11C2  29C9               	goto	l5675
  6451  11C3  032C               	decf	CheckKeyPad@rowNo,w
  6452  11C4  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6453  11C5  1D03               	btfss	3,2
  6454  11C6  29C9               	goto	l5675
  6455  11C7  3034               	movlw	52
  6456  11C8  2A4C               	goto	L18
  6457  11C9                     l5675:	
  6458                           
  6459                           ;Automated Solar Panel Orientation Setter.c: 584: else if(colomnNo==2 && rowNo == 2) cha
      +                          ractor = '5';
  6460  11C9  3002               	movlw	2
  6461  11CA  062A               	xorwf	CheckKeyPad@colomnNo,w
  6462  11CB  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6463  11CC  3002               	movlw	2
  6464  11CD  1D03               	btfss	3,2
  6465  11CE  29D6               	goto	L19
  6466  11CF  062C               	xorwf	CheckKeyPad@rowNo,w
  6467  11D0  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6468  11D1  1D03               	btfss	3,2
  6469  11D2  29D5               	goto	l5681
  6470  11D3  3035               	movlw	53
  6471  11D4  2A4C               	goto	L18
  6472  11D5                     l5681:	
  6473                           
  6474                           ;Automated Solar Panel Orientation Setter.c: 585: else if(colomnNo==2 && rowNo == 3) cha
      +                          ractor = '6';
  6475  11D5  3002               	movlw	2
  6476  11D6                     L19:	
  6477  11D6  062A               	xorwf	CheckKeyPad@colomnNo,w
  6478  11D7  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6479  11D8  1D03               	btfss	3,2
  6480  11D9  29E1               	goto	l5687
  6481  11DA  3003               	movlw	3
  6482  11DB  062C               	xorwf	CheckKeyPad@rowNo,w
  6483  11DC  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6484  11DD  1D03               	btfss	3,2
  6485  11DE  29E1               	goto	l5687
  6486  11DF  3036               	movlw	54
  6487  11E0  2A4C               	goto	L18
  6488  11E1                     l5687:	
  6489                           
  6490                           ;Automated Solar Panel Orientation Setter.c: 586: else if(colomnNo==2 && rowNo == 4) cha
      +                          ractor = 'B';
  6491  11E1  3002               	movlw	2
  6492  11E2  062A               	xorwf	CheckKeyPad@colomnNo,w
  6493  11E3  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6494  11E4  1D03               	btfss	3,2
  6495  11E5  29ED               	goto	l5693
  6496  11E6  3004               	movlw	4
  6497  11E7  062C               	xorwf	CheckKeyPad@rowNo,w
  6498  11E8  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6499  11E9  1D03               	btfss	3,2
  6500  11EA  29ED               	goto	l5693
  6501  11EB  3042               	movlw	66
  6502  11EC  2A4C               	goto	L18
  6503  11ED                     l5693:	
  6504                           
  6505                           ;Automated Solar Panel Orientation Setter.c: 588: else if(colomnNo==3 && rowNo == 1) cha
      +                          ractor = '7';
  6506  11ED  3003               	movlw	3
  6507  11EE  062A               	xorwf	CheckKeyPad@colomnNo,w
  6508  11EF  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6509  11F0  1D03               	btfss	3,2
  6510  11F1  29F8               	goto	l5699
  6511  11F2  032C               	decf	CheckKeyPad@rowNo,w
  6512  11F3  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6513  11F4  1D03               	btfss	3,2
  6514  11F5  29F8               	goto	l5699
  6515  11F6  3037               	movlw	55
  6516  11F7  2A4C               	goto	L18
  6517  11F8                     l5699:	
  6518                           
  6519                           ;Automated Solar Panel Orientation Setter.c: 589: else if(colomnNo==3 && rowNo == 2) cha
      +                          ractor = '8';
  6520  11F8  3003               	movlw	3
  6521  11F9  062A               	xorwf	CheckKeyPad@colomnNo,w
  6522  11FA  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6523  11FB  1D03               	btfss	3,2
  6524  11FC  2A04               	goto	l5705
  6525  11FD  3002               	movlw	2
  6526  11FE  062C               	xorwf	CheckKeyPad@rowNo,w
  6527  11FF  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6528  1200  1D03               	btfss	3,2
  6529  1201  2A04               	goto	l5705
  6530  1202  3038               	movlw	56
  6531  1203  2A4C               	goto	L18
  6532  1204                     l5705:	
  6533                           
  6534                           ;Automated Solar Panel Orientation Setter.c: 590: else if(colomnNo==3 && rowNo == 3) cha
      +                          ractor = '9';
  6535  1204  3003               	movlw	3
  6536  1205  062A               	xorwf	CheckKeyPad@colomnNo,w
  6537  1206  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6538  1207  3003               	movlw	3
  6539  1208  1D03               	btfss	3,2
  6540  1209  2A11               	goto	L20
  6541  120A  062C               	xorwf	CheckKeyPad@rowNo,w
  6542  120B  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6543  120C  1D03               	btfss	3,2
  6544  120D  2A10               	goto	l5711
  6545  120E  3039               	movlw	57
  6546  120F  2A4C               	goto	L18
  6547  1210                     l5711:	
  6548                           
  6549                           ;Automated Solar Panel Orientation Setter.c: 591: else if(colomnNo==3 && rowNo == 4) cha
      +                          ractor = 'C';
  6550  1210  3003               	movlw	3
  6551  1211                     L20:	
  6552  1211  062A               	xorwf	CheckKeyPad@colomnNo,w
  6553  1212  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6554  1213  3004               	movlw	4
  6555  1214  1D03               	btfss	3,2
  6556  1215  2A1D               	goto	L21
  6557  1216  062C               	xorwf	CheckKeyPad@rowNo,w
  6558  1217  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6559  1218  1D03               	btfss	3,2
  6560  1219  2A1C               	goto	l5717
  6561  121A  3043               	movlw	67
  6562  121B  2A4C               	goto	L18
  6563  121C                     l5717:	
  6564                           
  6565                           ;Automated Solar Panel Orientation Setter.c: 593: else if(colomnNo==4 && rowNo == 1) cha
      +                          ractor = '*';
  6566  121C  3004               	movlw	4
  6567  121D                     L21:	
  6568  121D  062A               	xorwf	CheckKeyPad@colomnNo,w
  6569  121E  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6570  121F  1D03               	btfss	3,2
  6571  1220  2A27               	goto	l5723
  6572  1221  032C               	decf	CheckKeyPad@rowNo,w
  6573  1222  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6574  1223  1D03               	btfss	3,2
  6575  1224  2A27               	goto	l5723
  6576  1225  302A               	movlw	42
  6577  1226  2A4C               	goto	L18
  6578  1227                     l5723:	
  6579                           
  6580                           ;Automated Solar Panel Orientation Setter.c: 594: else if(colomnNo==4 && rowNo == 2) cha
      +                          ractor = '0';
  6581  1227  3004               	movlw	4
  6582  1228  062A               	xorwf	CheckKeyPad@colomnNo,w
  6583  1229  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6584  122A  1D03               	btfss	3,2
  6585  122B  2A33               	goto	l5729
  6586  122C  3002               	movlw	2
  6587  122D  062C               	xorwf	CheckKeyPad@rowNo,w
  6588  122E  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6589  122F  1D03               	btfss	3,2
  6590  1230  2A33               	goto	l5729
  6591  1231  3030               	movlw	48
  6592  1232  2A4C               	goto	L18
  6593  1233                     l5729:	
  6594                           
  6595                           ;Automated Solar Panel Orientation Setter.c: 595: else if(colomnNo==4 && rowNo == 3) cha
      +                          ractor = '#';
  6596  1233  3004               	movlw	4
  6597  1234  062A               	xorwf	CheckKeyPad@colomnNo,w
  6598  1235  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6599  1236  1D03               	btfss	3,2
  6600  1237  2A3F               	goto	l5735
  6601  1238  3003               	movlw	3
  6602  1239  062C               	xorwf	CheckKeyPad@rowNo,w
  6603  123A  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6604  123B  1D03               	btfss	3,2
  6605  123C  2A3F               	goto	l5735
  6606  123D  3023               	movlw	35
  6607  123E  2A4C               	goto	L18
  6608  123F                     l5735:	
  6609                           
  6610                           ;Automated Solar Panel Orientation Setter.c: 596: else if(colomnNo==4 && rowNo == 4) cha
      +                          ractor = 'D';
  6611  123F  3004               	movlw	4
  6612  1240  062A               	xorwf	CheckKeyPad@colomnNo,w
  6613  1241  042B               	iorwf	CheckKeyPad@colomnNo+1,w
  6614  1242  1D03               	btfss	3,2
  6615  1243  2A4B               	goto	l5741
  6616  1244  3004               	movlw	4
  6617  1245  062C               	xorwf	CheckKeyPad@rowNo,w
  6618  1246  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6619  1247  1D03               	btfss	3,2
  6620  1248  2A4B               	goto	l5741
  6621  1249  3044               	movlw	68
  6622  124A  2A4C               	goto	L18
  6623  124B                     l5741:	
  6624                           
  6625                           ;Automated Solar Panel Orientation Setter.c: 598: else charactor = '@';
  6626  124B  3040               	movlw	64
  6627  124C                     L18:	
  6628  124C  00A9               	movwf	CheckKeyPad@charactor
  6629  124D                     l5743:	
  6630                           
  6631                           ;Automated Solar Panel Orientation Setter.c: 599: }
  6632                           ;Automated Solar Panel Orientation Setter.c: 604: if(rowNo==1) while(RD2==0);
  6633  124D  032C               	decf	CheckKeyPad@rowNo,w
  6634  124E  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6635  124F  1D03               	btfss	3,2
  6636  1250  2A54               	goto	l5747
  6637  1251                     l591:	
  6638  1251  1908               	btfsc	8,2	;volatile
  6639  1252  2A6B               	goto	l5759
  6640  1253  2A51               	goto	l591
  6641  1254                     l5747:	
  6642                           
  6643                           ;Automated Solar Panel Orientation Setter.c: 605: else if(rowNo==2) while(RD7==0);
  6644  1254  3002               	movlw	2
  6645  1255  062C               	xorwf	CheckKeyPad@rowNo,w
  6646  1256  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6647  1257  1D03               	btfss	3,2
  6648  1258  2A5C               	goto	l5751
  6649  1259                     l596:	
  6650  1259  1B88               	btfsc	8,7	;volatile
  6651  125A  2A6B               	goto	l5759
  6652  125B  2A59               	goto	l596
  6653  125C                     l5751:	
  6654                           
  6655                           ;Automated Solar Panel Orientation Setter.c: 606: else if(rowNo==3) while(RD3==0);
  6656  125C  3003               	movlw	3
  6657  125D  062C               	xorwf	CheckKeyPad@rowNo,w
  6658  125E  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6659  125F  1D03               	btfss	3,2
  6660  1260  2A64               	goto	l5755
  6661  1261                     l601:	
  6662  1261  1988               	btfsc	8,3	;volatile
  6663  1262  2A6B               	goto	l5759
  6664  1263  2A61               	goto	l601
  6665  1264                     l5755:	
  6666                           
  6667                           ;Automated Solar Panel Orientation Setter.c: 607: else if(rowNo==4) while(RD6==0);
  6668  1264  3004               	movlw	4
  6669  1265  062C               	xorwf	CheckKeyPad@rowNo,w
  6670  1266  042D               	iorwf	CheckKeyPad@rowNo+1,w
  6671  1267  1D03               	btfss	3,2
  6672  1268  2A6B               	goto	l5759
  6673  1269                     l606:	
  6674  1269  1F08               	btfss	8,6	;volatile
  6675  126A  2A69               	goto	l606
  6676  126B                     l5759:	
  6677                           
  6678                           ;Automated Solar Panel Orientation Setter.c: 610: return charactor;
  6679  126B  0829               	movf	CheckKeyPad@charactor,w
  6680  126C  0008               	return
  6681  126D                     __end_of_CheckKeyPad:	
  6682  126D                     __ptext40:	
  6683 ;; *************** function _ColomnNo *****************
  6684 ;; Defined at:
  6685 ;;		line 613 in file "Automated Solar Panel Orientation Setter.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;  rowNo           2    5[BANK0 ] int 
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;		None
  6690 ;; Return value:  Size  Location     Type
  6691 ;;                  2    5[BANK0 ] int 
  6692 ;; Registers used:
  6693 ;;		wreg, status,2, status,0
  6694 ;; Tracked objects:
  6695 ;;		On entry : 300/0
  6696 ;;		On exit  : 300/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6699 ;;      Params:         0       2       0       0       0
  6700 ;;      Locals:         0       0       0       0       0
  6701 ;;      Temps:          0       0       0       0       0
  6702 ;;      Totals:         0       2       0       0       0
  6703 ;;Total ram usage:        2 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:    5
  6706 ;; This function calls:
  6707 ;;		Nothing
  6708 ;; This function is called by:
  6709 ;;		_CheckKeyPad
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _ColomnNo
  6715  126D                     _ColomnNo:	
  6716                           
  6717                           ;Automated Solar Panel Orientation Setter.c: 614: RC4 = 0; RD5 = 0; RC5=0; RD4=0;
  6718                           
  6719                           ;incstack = 0
  6720                           ; Regs used in _ColomnNo: [wreg+status,2+status,0]
  6721  126D  1207               	bcf	7,4	;volatile
  6722  126E  1288               	bcf	8,5	;volatile
  6723  126F  1287               	bcf	7,5	;volatile
  6724  1270  1208               	bcf	8,4	;volatile
  6725                           
  6726                           ;Automated Solar Panel Orientation Setter.c: 615: if(rowNo==1){
  6727  1271  0325               	decf	ColomnNo@rowNo,w
  6728  1272  0426               	iorwf	ColomnNo@rowNo+1,w
  6729  1273  1D03               	btfss	3,2
  6730  1274  2A9D               	goto	l5283
  6731                           
  6732                           ;Automated Solar Panel Orientation Setter.c: 616: RC4 = 1;
  6733  1275  1607               	bsf	7,4	;volatile
  6734                           
  6735                           ;Automated Solar Panel Orientation Setter.c: 617: _delay(1);
  6736  1276  0000               	nop
  6737                           
  6738                           ;Automated Solar Panel Orientation Setter.c: 618: if(RD2==1){
  6739  1277  1283               	bcf	3,5	;RP0=0, select bank0
  6740  1278  1303               	bcf	3,6	;RP1=0, select bank0
  6741  1279  1D08               	btfss	8,2	;volatile
  6742  127A  2A7F               	goto	l613
  6743  127B                     l5267:	
  6744                           
  6745                           ;Automated Solar Panel Orientation Setter.c: 619: return 1;
  6746  127B  01A5               	clrf	?_ColomnNo
  6747  127C  0AA5               	incf	?_ColomnNo,f
  6748  127D  01A6               	clrf	?_ColomnNo+1
  6749  127E  0008               	return
  6750  127F                     l613:	
  6751                           
  6752                           ;Automated Solar Panel Orientation Setter.c: 620: }
  6753                           ;Automated Solar Panel Orientation Setter.c: 621: RD5 = 1;
  6754  127F  1688               	bsf	8,5	;volatile
  6755                           
  6756                           ;Automated Solar Panel Orientation Setter.c: 622: _delay(1);
  6757  1280  0000               	nop
  6758                           
  6759                           ;Automated Solar Panel Orientation Setter.c: 623: if(RD2==1){
  6760  1281  1283               	bcf	3,5	;RP0=0, select bank0
  6761  1282  1303               	bcf	3,6	;RP1=0, select bank0
  6762  1283  1D08               	btfss	8,2	;volatile
  6763  1284  2A89               	goto	l615
  6764  1285                     l5271:	
  6765                           
  6766                           ;Automated Solar Panel Orientation Setter.c: 624: return 2;
  6767  1285  3002               	movlw	2
  6768  1286  00A5               	movwf	?_ColomnNo
  6769  1287  01A6               	clrf	?_ColomnNo+1
  6770  1288  0008               	return
  6771  1289                     l615:	
  6772                           
  6773                           ;Automated Solar Panel Orientation Setter.c: 625: }
  6774                           ;Automated Solar Panel Orientation Setter.c: 626: RC5 = 1;
  6775  1289  1687               	bsf	7,5	;volatile
  6776                           
  6777                           ;Automated Solar Panel Orientation Setter.c: 627: _delay(1);
  6778  128A  0000               	nop
  6779                           
  6780                           ;Automated Solar Panel Orientation Setter.c: 628: if(RD2==1){
  6781  128B  1283               	bcf	3,5	;RP0=0, select bank0
  6782  128C  1303               	bcf	3,6	;RP1=0, select bank0
  6783  128D  1D08               	btfss	8,2	;volatile
  6784  128E  2A93               	goto	l616
  6785  128F                     l5275:	
  6786                           
  6787                           ;Automated Solar Panel Orientation Setter.c: 629: return 3;
  6788  128F  3003               	movlw	3
  6789  1290  00A5               	movwf	?_ColomnNo
  6790  1291  01A6               	clrf	?_ColomnNo+1
  6791  1292  0008               	return
  6792  1293                     l616:	
  6793                           
  6794                           ;Automated Solar Panel Orientation Setter.c: 630: }
  6795                           ;Automated Solar Panel Orientation Setter.c: 631: RD4 = 1;
  6796  1293  1608               	bsf	8,4	;volatile
  6797                           
  6798                           ;Automated Solar Panel Orientation Setter.c: 632: _delay(1);
  6799  1294  0000               	nop
  6800                           
  6801                           ;Automated Solar Panel Orientation Setter.c: 633: if(RD2==1){
  6802  1295  1283               	bcf	3,5	;RP0=0, select bank0
  6803  1296  1303               	bcf	3,6	;RP1=0, select bank0
  6804  1297  1D08               	btfss	8,2	;volatile
  6805  1298  2AF6               	goto	l5343
  6806  1299                     l5279:	
  6807                           
  6808                           ;Automated Solar Panel Orientation Setter.c: 634: return 4;
  6809  1299  3004               	movlw	4
  6810  129A  00A5               	movwf	?_ColomnNo
  6811  129B  01A6               	clrf	?_ColomnNo+1
  6812  129C  0008               	return
  6813  129D                     l5283:	
  6814                           
  6815                           ;Automated Solar Panel Orientation Setter.c: 637: else if(rowNo==2){
  6816  129D  3002               	movlw	2
  6817  129E  0625               	xorwf	ColomnNo@rowNo,w
  6818  129F  0426               	iorwf	ColomnNo@rowNo+1,w
  6819  12A0  1D03               	btfss	3,2
  6820  12A1  2ABB               	goto	l5303
  6821                           
  6822                           ;Automated Solar Panel Orientation Setter.c: 638: RC4 = 1;
  6823  12A2  1607               	bsf	7,4	;volatile
  6824                           
  6825                           ;Automated Solar Panel Orientation Setter.c: 639: _delay(1);
  6826  12A3  0000               	nop
  6827                           
  6828                           ;Automated Solar Panel Orientation Setter.c: 640: if(RD7==1){
  6829  12A4  1283               	bcf	3,5	;RP0=0, select bank0
  6830  12A5  1303               	bcf	3,6	;RP1=0, select bank0
  6831  12A6  1B88               	btfsc	8,7	;volatile
  6832  12A7  2A7B               	goto	l5267
  6833                           
  6834                           ;Automated Solar Panel Orientation Setter.c: 642: }
  6835                           ;Automated Solar Panel Orientation Setter.c: 643: RD5 = 1;
  6836  12A8  1688               	bsf	8,5	;volatile
  6837                           
  6838                           ;Automated Solar Panel Orientation Setter.c: 644: _delay(1);
  6839  12A9  0000               	nop
  6840                           
  6841                           ;Automated Solar Panel Orientation Setter.c: 645: if(RD7==1){
  6842  12AA  1283               	bcf	3,5	;RP0=0, select bank0
  6843  12AB  1303               	bcf	3,6	;RP1=0, select bank0
  6844  12AC  1B88               	btfsc	8,7	;volatile
  6845  12AD  2A85               	goto	l5271
  6846                           
  6847                           ;Automated Solar Panel Orientation Setter.c: 647: }
  6848                           ;Automated Solar Panel Orientation Setter.c: 648: RC5 = 1;
  6849  12AE  1687               	bsf	7,5	;volatile
  6850                           
  6851                           ;Automated Solar Panel Orientation Setter.c: 649: _delay(1);
  6852  12AF  0000               	nop
  6853                           
  6854                           ;Automated Solar Panel Orientation Setter.c: 650: if(RD7==1){
  6855  12B0  1283               	bcf	3,5	;RP0=0, select bank0
  6856  12B1  1303               	bcf	3,6	;RP1=0, select bank0
  6857  12B2  1B88               	btfsc	8,7	;volatile
  6858  12B3  2A8F               	goto	l5275
  6859                           
  6860                           ;Automated Solar Panel Orientation Setter.c: 652: }
  6861                           ;Automated Solar Panel Orientation Setter.c: 653: RD4 = 1;
  6862  12B4  1608               	bsf	8,4	;volatile
  6863                           
  6864                           ;Automated Solar Panel Orientation Setter.c: 654: _delay(1);
  6865  12B5  0000               	nop
  6866                           
  6867                           ;Automated Solar Panel Orientation Setter.c: 655: if(RD7==1){
  6868  12B6  1283               	bcf	3,5	;RP0=0, select bank0
  6869  12B7  1303               	bcf	3,6	;RP1=0, select bank0
  6870  12B8  1B88               	btfsc	8,7	;volatile
  6871  12B9  2A99               	goto	l5279
  6872  12BA  2AF6               	goto	l5343
  6873  12BB                     l5303:	
  6874                           
  6875                           ;Automated Solar Panel Orientation Setter.c: 659: else if(rowNo==3){
  6876  12BB  3003               	movlw	3
  6877  12BC  0625               	xorwf	ColomnNo@rowNo,w
  6878  12BD  0426               	iorwf	ColomnNo@rowNo+1,w
  6879  12BE  1D03               	btfss	3,2
  6880  12BF  2AD9               	goto	l5323
  6881                           
  6882                           ;Automated Solar Panel Orientation Setter.c: 660: RC4 = 1;
  6883  12C0  1607               	bsf	7,4	;volatile
  6884                           
  6885                           ;Automated Solar Panel Orientation Setter.c: 661: _delay(1);
  6886  12C1  0000               	nop
  6887                           
  6888                           ;Automated Solar Panel Orientation Setter.c: 662: if(RD3==1){
  6889  12C2  1283               	bcf	3,5	;RP0=0, select bank0
  6890  12C3  1303               	bcf	3,6	;RP1=0, select bank0
  6891  12C4  1988               	btfsc	8,3	;volatile
  6892  12C5  2A7B               	goto	l5267
  6893                           
  6894                           ;Automated Solar Panel Orientation Setter.c: 664: }
  6895                           ;Automated Solar Panel Orientation Setter.c: 665: RD5 = 1;
  6896  12C6  1688               	bsf	8,5	;volatile
  6897                           
  6898                           ;Automated Solar Panel Orientation Setter.c: 666: _delay(1);
  6899  12C7  0000               	nop
  6900                           
  6901                           ;Automated Solar Panel Orientation Setter.c: 667: if(RD3==1){
  6902  12C8  1283               	bcf	3,5	;RP0=0, select bank0
  6903  12C9  1303               	bcf	3,6	;RP1=0, select bank0
  6904  12CA  1988               	btfsc	8,3	;volatile
  6905  12CB  2A85               	goto	l5271
  6906                           
  6907                           ;Automated Solar Panel Orientation Setter.c: 669: }
  6908                           ;Automated Solar Panel Orientation Setter.c: 670: RC5 = 1;
  6909  12CC  1687               	bsf	7,5	;volatile
  6910                           
  6911                           ;Automated Solar Panel Orientation Setter.c: 671: _delay(1);
  6912  12CD  0000               	nop
  6913                           
  6914                           ;Automated Solar Panel Orientation Setter.c: 672: if(RD3==1){
  6915  12CE  1283               	bcf	3,5	;RP0=0, select bank0
  6916  12CF  1303               	bcf	3,6	;RP1=0, select bank0
  6917  12D0  1988               	btfsc	8,3	;volatile
  6918  12D1  2A8F               	goto	l5275
  6919                           
  6920                           ;Automated Solar Panel Orientation Setter.c: 674: }
  6921                           ;Automated Solar Panel Orientation Setter.c: 675: RD4 = 1;
  6922  12D2  1608               	bsf	8,4	;volatile
  6923                           
  6924                           ;Automated Solar Panel Orientation Setter.c: 676: _delay(1);
  6925  12D3  0000               	nop
  6926                           
  6927                           ;Automated Solar Panel Orientation Setter.c: 677: if(RD3==1){
  6928  12D4  1283               	bcf	3,5	;RP0=0, select bank0
  6929  12D5  1303               	bcf	3,6	;RP1=0, select bank0
  6930  12D6  1988               	btfsc	8,3	;volatile
  6931  12D7  2A99               	goto	l5279
  6932  12D8  2AF6               	goto	l5343
  6933  12D9                     l5323:	
  6934                           
  6935                           ;Automated Solar Panel Orientation Setter.c: 681: else if(rowNo==4){
  6936  12D9  3004               	movlw	4
  6937  12DA  0625               	xorwf	ColomnNo@rowNo,w
  6938  12DB  0426               	iorwf	ColomnNo@rowNo+1,w
  6939  12DC  1D03               	btfss	3,2
  6940  12DD  2AF6               	goto	l5343
  6941                           
  6942                           ;Automated Solar Panel Orientation Setter.c: 682: RC4 = 1;
  6943  12DE  1607               	bsf	7,4	;volatile
  6944                           
  6945                           ;Automated Solar Panel Orientation Setter.c: 683: _delay(1);
  6946  12DF  0000               	nop
  6947                           
  6948                           ;Automated Solar Panel Orientation Setter.c: 684: if(RD6==1){
  6949  12E0  1283               	bcf	3,5	;RP0=0, select bank0
  6950  12E1  1303               	bcf	3,6	;RP1=0, select bank0
  6951  12E2  1B08               	btfsc	8,6	;volatile
  6952  12E3  2A7B               	goto	l5267
  6953                           
  6954                           ;Automated Solar Panel Orientation Setter.c: 686: }
  6955                           ;Automated Solar Panel Orientation Setter.c: 687: RD5 = 1;
  6956  12E4  1688               	bsf	8,5	;volatile
  6957                           
  6958                           ;Automated Solar Panel Orientation Setter.c: 688: _delay(1);
  6959  12E5  0000               	nop
  6960                           
  6961                           ;Automated Solar Panel Orientation Setter.c: 689: if(RD6==1){
  6962  12E6  1283               	bcf	3,5	;RP0=0, select bank0
  6963  12E7  1303               	bcf	3,6	;RP1=0, select bank0
  6964  12E8  1B08               	btfsc	8,6	;volatile
  6965  12E9  2A85               	goto	l5271
  6966                           
  6967                           ;Automated Solar Panel Orientation Setter.c: 691: }
  6968                           ;Automated Solar Panel Orientation Setter.c: 692: RC5 = 1;
  6969  12EA  1687               	bsf	7,5	;volatile
  6970                           
  6971                           ;Automated Solar Panel Orientation Setter.c: 693: _delay(1);
  6972  12EB  0000               	nop
  6973                           
  6974                           ;Automated Solar Panel Orientation Setter.c: 694: if(RD6==1){
  6975  12EC  1283               	bcf	3,5	;RP0=0, select bank0
  6976  12ED  1303               	bcf	3,6	;RP1=0, select bank0
  6977  12EE  1B08               	btfsc	8,6	;volatile
  6978  12EF  2A8F               	goto	l5275
  6979                           
  6980                           ;Automated Solar Panel Orientation Setter.c: 696: }
  6981                           ;Automated Solar Panel Orientation Setter.c: 697: RD4 = 1;
  6982  12F0  1608               	bsf	8,4	;volatile
  6983                           
  6984                           ;Automated Solar Panel Orientation Setter.c: 698: _delay(1);
  6985  12F1  0000               	nop
  6986                           
  6987                           ;Automated Solar Panel Orientation Setter.c: 699: if(RD6==1){
  6988  12F2  1283               	bcf	3,5	;RP0=0, select bank0
  6989  12F3  1303               	bcf	3,6	;RP1=0, select bank0
  6990  12F4  1B08               	btfsc	8,6	;volatile
  6991  12F5  2A99               	goto	l5279
  6992  12F6                     l5343:	
  6993                           
  6994                           ;Automated Solar Panel Orientation Setter.c: 701: }
  6995                           ;Automated Solar Panel Orientation Setter.c: 702: }
  6996                           ;Automated Solar Panel Orientation Setter.c: 703: return 0;
  6997  12F6  01A5               	clrf	?_ColomnNo
  6998  12F7  01A6               	clrf	?_ColomnNo+1
  6999  12F8  0008               	return
  7000  12F9                     __end_of_ColomnNo:	
  7001  12F9                     __ptext39:	
  7002 ;; *************** function _RowNo *****************
  7003 ;; Defined at:
  7004 ;;		line 706 in file "Automated Solar Panel Orientation Setter.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;		None
  7007 ;; Auto vars:     Size  Location     Type
  7008 ;;  row             2    7[BANK0 ] int 
  7009 ;; Return value:  Size  Location     Type
  7010 ;;                  2    5[BANK0 ] int 
  7011 ;; Registers used:
  7012 ;;		wreg, status,2, status,0
  7013 ;; Tracked objects:
  7014 ;;		On entry : 300/0
  7015 ;;		On exit  : 300/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7018 ;;      Params:         0       2       0       0       0
  7019 ;;      Locals:         0       2       0       0       0
  7020 ;;      Temps:          0       0       0       0       0
  7021 ;;      Totals:         0       4       0       0       0
  7022 ;;Total ram usage:        4 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    5
  7025 ;; This function calls:
  7026 ;;		Nothing
  7027 ;; This function is called by:
  7028 ;;		_CheckKeyPad
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           
  7033                           ;psect for function _RowNo
  7034  12F9                     _RowNo:	
  7035                           
  7036                           ;Automated Solar Panel Orientation Setter.c: 707: int row;
  7037                           ;Automated Solar Panel Orientation Setter.c: 708: if( RD2!=1){
  7038                           
  7039                           ;incstack = 0
  7040                           ; Regs used in _RowNo: [wreg+status,2+status,0]
  7041  12F9  1908               	btfsc	8,2	;volatile
  7042  12FA  2AFE               	goto	l638
  7043                           
  7044                           ;Automated Solar Panel Orientation Setter.c: 709: row = 1;
  7045  12FB  01A7               	clrf	RowNo@row
  7046  12FC  0AA7               	incf	RowNo@row,f
  7047  12FD  2B0C               	goto	L22
  7048  12FE                     l638:	
  7049                           ;Automated Solar Panel Orientation Setter.c: 710: }
  7050                           
  7051                           
  7052                           ;Automated Solar Panel Orientation Setter.c: 711: else if( RD7!=1 ){
  7053  12FE  1B88               	btfsc	8,7	;volatile
  7054  12FF  2B02               	goto	l640
  7055                           
  7056                           ;Automated Solar Panel Orientation Setter.c: 712: row = 2;
  7057  1300  3002               	movlw	2
  7058  1301  2B09               	goto	L24
  7059  1302                     l640:	
  7060                           ;Automated Solar Panel Orientation Setter.c: 713: }
  7061                           
  7062                           
  7063                           ;Automated Solar Panel Orientation Setter.c: 714: else if( RD3!=1 ){
  7064  1302  1988               	btfsc	8,3	;volatile
  7065  1303  2B06               	goto	l642
  7066                           
  7067                           ;Automated Solar Panel Orientation Setter.c: 715: row = 3;
  7068  1304  3003               	movlw	3
  7069  1305  2B09               	goto	L24
  7070  1306                     l642:	
  7071                           ;Automated Solar Panel Orientation Setter.c: 716: }
  7072                           
  7073                           
  7074                           ;Automated Solar Panel Orientation Setter.c: 717: else if( RD6!=1 ){
  7075  1306  1B08               	btfsc	8,6	;volatile
  7076  1307  2B0B               	goto	l5255
  7077                           
  7078                           ;Automated Solar Panel Orientation Setter.c: 718: row = 4;
  7079  1308  3004               	movlw	4
  7080  1309                     L24:	
  7081  1309  00A7               	movwf	RowNo@row
  7082  130A  2B0C               	goto	L22
  7083  130B                     l5255:	
  7084                           ;Automated Solar Panel Orientation Setter.c: 719: }
  7085                           
  7086                           
  7087                           ;Automated Solar Panel Orientation Setter.c: 720: else{
  7088                           ;Automated Solar Panel Orientation Setter.c: 721: row = 0;
  7089  130B  01A7               	clrf	RowNo@row
  7090  130C                     L22:	
  7091  130C  01A8               	clrf	RowNo@row+1
  7092                           
  7093                           ;Automated Solar Panel Orientation Setter.c: 722: }
  7094                           ;Automated Solar Panel Orientation Setter.c: 723: return row;
  7095  130D  0828               	movf	RowNo@row+1,w
  7096  130E  00A6               	movwf	?_RowNo+1
  7097  130F  0827               	movf	RowNo@row,w
  7098  1310  00A5               	movwf	?_RowNo
  7099  1311  0008               	return
  7100  1312                     __end_of_RowNo:	
  7101  1312                     __ptext37:	
  7102 ;; *************** function _Serial_Print *****************
  7103 ;; Defined at:
  7104 ;;		line 27 in file "serialv2.h"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;  a               1    wreg     PTR const unsigned char 
  7107 ;;		 -> STR_28(20), STR_27(20), STR_26(20), STR_25(20), 
  7108 ;;		 -> STR_22(3), STR_21(3), STR_20(3), STR_19(3), 
  7109 ;;		 -> STR_16(3), STR_15(3), STR_14(3), STR_13(3), 
  7110 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(3), 
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;  a               1    6[BANK0 ] PTR const unsigned char 
  7113 ;;		 -> STR_28(20), STR_27(20), STR_26(20), STR_25(20), 
  7114 ;;		 -> STR_22(3), STR_21(3), STR_20(3), STR_19(3), 
  7115 ;;		 -> STR_16(3), STR_15(3), STR_14(3), STR_13(3), 
  7116 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(3), 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;		None               void
  7119 ;; Registers used:
  7120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 300/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7126 ;;      Params:         0       0       0       0       0
  7127 ;;      Locals:         0       1       0       0       0
  7128 ;;      Temps:          0       1       0       0       0
  7129 ;;      Totals:         0       2       0       0       0
  7130 ;;Total ram usage:        2 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:    5
  7133 ;; This function calls:
  7134 ;;		Nothing
  7135 ;; This function is called by:
  7136 ;;		_main
  7137 ;;		_CheckMode
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           
  7142                           ;psect for function _Serial_Print
  7143  1312                     _Serial_Print:	
  7144                           
  7145                           ;incstack = 0
  7146                           ; Regs used in _Serial_Print: [wreg-fsr0h+status,2+status,0+pclath]
  7147                           ;Serial_Print@a stored from wreg
  7148  1312  1283               	bcf	3,5	;RP0=0, select bank0
  7149  1313  1303               	bcf	3,6	;RP1=0, select bank0
  7150  1314  00A6               	movwf	Serial_Print@a
  7151  1315                     l5493:	
  7152                           ;serialv2.h: 28: while( *a!='\0'){
  7153                           
  7154  1315  0826               	movf	Serial_Print@a,w
  7155  1316  0084               	movwf	4
  7156  1317  160A  118A  2000  160A  118A  	fcall	stringdir
  7157  131C  3A00               	xorlw	0
  7158  131D  1903               	btfsc	3,2
  7159  131E  0008               	return
  7160  131F                     l274:	
  7161  131F  1E0C               	btfss	12,4	;volatile
  7162  1320  2B1F               	goto	l274
  7163                           
  7164                           ;serialv2.h: 30: TXREG = *a;
  7165  1321  0826               	movf	Serial_Print@a,w
  7166  1322  0084               	movwf	4
  7167  1323  160A  118A  2000  160A  118A  	fcall	stringdir
  7168  1328  0099               	movwf	25	;volatile
  7169                           
  7170                           ;serialv2.h: 31: _delay(10);
  7171  1329  3003               	movlw	3
  7172  132A  00A5               	movwf	??_Serial_Print
  7173  132B                     u8977:	
  7174  132B  0BA5               	decfsz	??_Serial_Print,f
  7175  132C  2B2B               	goto	u8977
  7176                           
  7177                           ;serialv2.h: 32: a = a+1;
  7178  132D  1283               	bcf	3,5	;RP0=0, select bank0
  7179  132E  1303               	bcf	3,6	;RP1=0, select bank0
  7180  132F  0AA6               	incf	Serial_Print@a,f
  7181  1330  2B15               	goto	l5493
  7182  1331                     __end_of_Serial_Print:	
  7183                           
  7184                           	psect	text41
  7185  1CFF                     __ptext41:	
  7186 ;; *************** function _Calculate *****************
  7187 ;; Defined at:
  7188 ;;		line 788 in file "Automated Solar Panel Orientation Setter.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;		None
  7193 ;; Return value:  Size  Location     Type
  7194 ;;		None               void
  7195 ;; Registers used:
  7196 ;;		wreg, status,2, status,0, pclath, cstack
  7197 ;; Tracked objects:
  7198 ;;		On entry : 300/0
  7199 ;;		On exit  : 200/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7202 ;;      Params:         0       0       0       0       0
  7203 ;;      Locals:         0       0       0       0       0
  7204 ;;      Temps:          0       2       0       0       0
  7205 ;;      Totals:         0       2       0       0       0
  7206 ;;Total ram usage:        2 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    6
  7209 ;; This function calls:
  7210 ;;		_RotateMotorLeft
  7211 ;;		_RotateMotorRight
  7212 ;; This function is called by:
  7213 ;;		_main
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _Calculate
  7219  1CFF                     _Calculate:	
  7220                           
  7221                           ;Automated Solar Panel Orientation Setter.c: 794: if(ldr1 > ldr2){
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in _Calculate: [wreg+status,2+status,0+pclath+cstack]
  7225  1CFF  1683               	bsf	3,5	;RP0=1, select bank1
  7226  1D00  083C               	movf	(_ldr1+1)^(0+128),w
  7227  1D01  1283               	bcf	3,5	;RP0=0, select bank0
  7228  1D02  0254               	subwf	_ldr2+1,w
  7229  1D03  1D03               	skipz
  7230  1D04  2D09               	goto	u8055
  7231  1D05  1683               	bsf	3,5	;RP0=1, select bank1
  7232  1D06  083B               	movf	_ldr1^(0+128),w
  7233  1D07  1283               	bcf	3,5	;RP0=0, select bank0
  7234  1D08  0253               	subwf	_ldr2,w
  7235  1D09                     u8055:	
  7236  1D09  1803               	skipnc
  7237  1D0A  2D22               	goto	l6291
  7238                           
  7239                           ;Automated Solar Panel Orientation Setter.c: 795: if(ldr1 - ldr2 > 25){
  7240  1D0B  0853               	movf	_ldr2,w
  7241  1D0C  1683               	bsf	3,5	;RP0=1, select bank1
  7242  1D0D  023B               	subwf	_ldr1^(0+128),w
  7243  1D0E  1283               	bcf	3,5	;RP0=0, select bank0
  7244  1D0F  00AB               	movwf	??_Calculate
  7245  1D10  0854               	movf	_ldr2+1,w
  7246  1D11  1C03               	skipc
  7247  1D12  0A54               	incf	_ldr2+1,w
  7248  1D13  1683               	bsf	3,5	;RP0=1, select bank1
  7249  1D14  023C               	subwf	(_ldr1+1)^(0+128),w
  7250  1D15  1283               	bcf	3,5	;RP0=0, select bank0
  7251  1D16  00AC               	movwf	??_Calculate+1
  7252  1D17  3000               	movlw	0
  7253  1D18  022C               	subwf	??_Calculate+1,w
  7254  1D19  301A               	movlw	26
  7255  1D1A  1903               	skipnz
  7256  1D1B  022B               	subwf	??_Calculate,w
  7257  1D1C  1C03               	skipc
  7258  1D1D  0008               	return
  7259                           
  7260                           ;Automated Solar Panel Orientation Setter.c: 796: RotateMotorLeft(1);
  7261  1D1E  01A5               	clrf	RotateMotorLeft@value
  7262  1D1F  0AA5               	incf	RotateMotorLeft@value,f
  7263  1D20  01A6               	clrf	RotateMotorLeft@value+1
  7264  1D21  2D43               	ljmp	l5763
  7265  1D22                     l6291:	
  7266                           
  7267                           ;Automated Solar Panel Orientation Setter.c: 799: else if (ldr2 > ldr1){
  7268  1D22  0854               	movf	_ldr2+1,w
  7269  1D23  1683               	bsf	3,5	;RP0=1, select bank1
  7270  1D24  023C               	subwf	(_ldr1+1)^(0+128),w
  7271  1D25  1D03               	skipz
  7272  1D26  2D2B               	goto	u8075
  7273  1D27  1283               	bcf	3,5	;RP0=0, select bank0
  7274  1D28  0853               	movf	_ldr2,w
  7275  1D29  1683               	bsf	3,5	;RP0=1, select bank1
  7276  1D2A  023B               	subwf	_ldr1^(0+128),w
  7277  1D2B                     u8075:	
  7278  1D2B  1803               	skipnc
  7279  1D2C  0008               	return
  7280                           
  7281                           ;Automated Solar Panel Orientation Setter.c: 800: if(ldr2 - ldr1 > 25){
  7282  1D2D  083B               	movf	_ldr1^(0+128),w
  7283  1D2E  1283               	bcf	3,5	;RP0=0, select bank0
  7284  1D2F  0253               	subwf	_ldr2,w
  7285  1D30  00AB               	movwf	??_Calculate
  7286  1D31  1683               	bsf	3,5	;RP0=1, select bank1
  7287  1D32  083C               	movf	(_ldr1+1)^(0+128),w
  7288  1D33  1C03               	skipc
  7289  1D34  0A3C               	incf	(_ldr1+1)^(0+128),w
  7290  1D35  1283               	bcf	3,5	;RP0=0, select bank0
  7291  1D36  0254               	subwf	_ldr2+1,w
  7292  1D37  00AC               	movwf	??_Calculate+1
  7293  1D38  3000               	movlw	0
  7294  1D39  022C               	subwf	??_Calculate+1,w
  7295  1D3A  301A               	movlw	26
  7296  1D3B  1903               	skipnz
  7297  1D3C  022B               	subwf	??_Calculate,w
  7298  1D3D  1C03               	skipc
  7299  1D3E  0008               	return
  7300                           
  7301                           ;Automated Solar Panel Orientation Setter.c: 801: RotateMotorRight(1);
  7302  1D3F  01A5               	clrf	RotateMotorRight@value
  7303  1D40  0AA5               	incf	RotateMotorRight@value,f
  7304  1D41  01A6               	clrf	RotateMotorRight@value+1
  7305  1D42  2D8F               	ljmp	l5591
  7306  1D43                     __end_of_Calculate:	
  7307  1D43                     __ptext43:	
  7308 ;; *************** function _RotateMotorLeft *****************
  7309 ;; Defined at:
  7310 ;;		line 737 in file "Automated Solar Panel Orientation Setter.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  value           2    5[BANK0 ] int 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;		None               void
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0
  7319 ;; Tracked objects:
  7320 ;;		On entry : 300/0
  7321 ;;		On exit  : 300/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7324 ;;      Params:         0       2       0       0       0
  7325 ;;      Locals:         0       0       0       0       0
  7326 ;;      Temps:          0       2       0       0       0
  7327 ;;      Totals:         0       4       0       0       0
  7328 ;;Total ram usage:        4 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    5
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_main
  7335 ;;		_Calculate
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           
  7340                           ;psect for function _RotateMotorLeft
  7341  1D43                     _RotateMotorLeft:	
  7342  1D43                     l5763:	
  7343                           ;incstack = 0
  7344                           ; Regs used in _RotateMotorLeft: [wreg+status,2+status,0]
  7345                           
  7346                           
  7347                           ;Automated Solar Panel Orientation Setter.c: 739: if(sterpper_counts < 100 ){
  7348  1D43  3000               	movlw	0
  7349  1D44  1683               	bsf	3,5	;RP0=1, select bank1
  7350  1D45  0244               	subwf	(_sterpper_counts+1)^(0+128),w
  7351  1D46  3064               	movlw	100
  7352  1D47  1903               	skipnz
  7353  1D48  0243               	subwf	_sterpper_counts^(0+128),w
  7354  1D49  1803               	skipnc
  7355  1D4A  2D8E               	goto	l654
  7356                           
  7357                           ;Automated Solar Panel Orientation Setter.c: 740: for(i=0; i<value; i++){
  7358  1D4B  01E1               	clrf	_i^(0+128)
  7359  1D4C                     l655:	
  7360  1D4C  1283               	bcf	3,5	;RP0=0, select bank0
  7361  1D4D  0826               	movf	RotateMotorLeft@value+1,w
  7362  1D4E  3A80               	xorlw	128
  7363  1D4F  3C80               	sublw	128
  7364  1D50  1D03               	skipz
  7365  1D51  2D55               	goto	u7475
  7366  1D52  0825               	movf	RotateMotorLeft@value,w
  7367  1D53  1683               	bsf	3,5	;RP0=1, select bank1
  7368  1D54  0261               	subwf	_i^(0+128),w
  7369  1D55                     u7475:	
  7370  1D55  1803               	btfsc	3,0
  7371  1D56  2D8E               	goto	l654
  7372                           
  7373                           ;Automated Solar Panel Orientation Setter.c: 741: RB2=0; RB3=1; RB4=1; RB5=1;
  7374  1D57  25FB  160A  158A   	fcall	PL38	;call to abstracted procedure
  7375                           
  7376                           ;Automated Solar Panel Orientation Setter.c: 742: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7377  1D5A  3014               	movlw	20
  7378  1D5B  00A8               	movwf	??_RotateMotorLeft+1
  7379  1D5C  3079               	movlw	121
  7380  1D5D  00A7               	movwf	??_RotateMotorLeft
  7381  1D5E                     u9027:	
  7382  1D5E  0BA7               	decfsz	??_RotateMotorLeft,f
  7383  1D5F  2D5E               	goto	u9027
  7384  1D60  0BA8               	decfsz	??_RotateMotorLeft+1,f
  7385  1D61  2D5E               	goto	u9027
  7386  1D62  2D63               	nop2
  7387                           
  7388                           ;Automated Solar Panel Orientation Setter.c: 743: RB2=1; RB3=0; RB4=1; RB5=1;
  7389  1D63  25ED  160A  158A   	fcall	PL30	;call to abstracted procedure
  7390                           
  7391                           ;Automated Solar Panel Orientation Setter.c: 744: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7392  1D66  3014               	movlw	20
  7393  1D67  00A8               	movwf	??_RotateMotorLeft+1
  7394  1D68  3079               	movlw	121
  7395  1D69  00A7               	movwf	??_RotateMotorLeft
  7396  1D6A                     u9037:	
  7397  1D6A  0BA7               	decfsz	??_RotateMotorLeft,f
  7398  1D6B  2D6A               	goto	u9037
  7399  1D6C  0BA8               	decfsz	??_RotateMotorLeft+1,f
  7400  1D6D  2D6A               	goto	u9037
  7401  1D6E  2D6F               	nop2
  7402                           
  7403                           ;Automated Solar Panel Orientation Setter.c: 745: RB2=1; RB3=1; RB4=0; RB5=1;
  7404  1D6F  25F4  160A  158A   	fcall	PL36	;call to abstracted procedure
  7405                           
  7406                           ;Automated Solar Panel Orientation Setter.c: 746: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7407  1D72  3014               	movlw	20
  7408  1D73  00A8               	movwf	??_RotateMotorLeft+1
  7409  1D74  3079               	movlw	121
  7410  1D75  00A7               	movwf	??_RotateMotorLeft
  7411  1D76                     u9047:	
  7412  1D76  0BA7               	decfsz	??_RotateMotorLeft,f
  7413  1D77  2D76               	goto	u9047
  7414  1D78  0BA8               	decfsz	??_RotateMotorLeft+1,f
  7415  1D79  2D76               	goto	u9047
  7416  1D7A  2D7B               	nop2
  7417                           
  7418                           ;Automated Solar Panel Orientation Setter.c: 747: RB2=1; RB3=1; RB4=1; RB5=0;
  7419  1D7B  25E6  160A  158A   	fcall	PL28	;call to abstracted procedure
  7420                           
  7421                           ;Automated Solar Panel Orientation Setter.c: 748: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7422  1D7E  3014               	movlw	20
  7423  1D7F  00A8               	movwf	??_RotateMotorLeft+1
  7424  1D80  3079               	movlw	121
  7425  1D81  00A7               	movwf	??_RotateMotorLeft
  7426  1D82                     u9057:	
  7427  1D82  0BA7               	decfsz	??_RotateMotorLeft,f
  7428  1D83  2D82               	goto	u9057
  7429  1D84  0BA8               	decfsz	??_RotateMotorLeft+1,f
  7430  1D85  2D82               	goto	u9057
  7431  1D86  2D87               	nop2
  7432                           
  7433                           ;Automated Solar Panel Orientation Setter.c: 749: sterpper_counts++;
  7434  1D87  1683               	bsf	3,5	;RP0=1, select bank1
  7435  1D88  1303               	bcf	3,6	;RP1=0, select bank1
  7436  1D89  0AC3               	incf	_sterpper_counts^(0+128),f
  7437  1D8A  1903               	skipnz
  7438  1D8B  0AC4               	incf	(_sterpper_counts+1)^(0+128),f
  7439  1D8C  0AE1               	incf	_i^(0+128),f
  7440  1D8D  2D4C               	goto	l655
  7441  1D8E                     l654:	
  7442                           
  7443                           ;Automated Solar Panel Orientation Setter.c: 750: }
  7444                           ;Automated Solar Panel Orientation Setter.c: 751: }
  7445                           ;Automated Solar Panel Orientation Setter.c: 752: RB2=1; RB3=1; RB4=1; RB5=1;
  7446  1D8E  2DDF               	ljmp	PL22	;call to abstracted procedure
  7447  1D8F                     __end_of_RotateMotorLeft:	
  7448  1D8F                     __ptext42:	
  7449 ;; *************** function _RotateMotorRight *****************
  7450 ;; Defined at:
  7451 ;;		line 755 in file "Automated Solar Panel Orientation Setter.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  value           2    5[BANK0 ] int 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  i               2    9[BANK0 ] int 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;		None               void
  7458 ;; Registers used:
  7459 ;;		wreg, status,2, status,0
  7460 ;; Tracked objects:
  7461 ;;		On entry : 300/0
  7462 ;;		On exit  : 300/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7465 ;;      Params:         0       2       0       0       0
  7466 ;;      Locals:         0       2       0       0       0
  7467 ;;      Temps:          0       2       0       0       0
  7468 ;;      Totals:         0       6       0       0       0
  7469 ;;Total ram usage:        6 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    5
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_main
  7476 ;;		_Calculate
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function _RotateMotorRight
  7482  1D8F                     _RotateMotorRight:	
  7483  1D8F                     l5591:	
  7484                           ;incstack = 0
  7485                           ; Regs used in _RotateMotorRight: [wreg+status,2+status,0]
  7486                           
  7487                           
  7488                           ;Automated Solar Panel Orientation Setter.c: 759: if(sterpper_counts > 0 ){
  7489  1D8F  1683               	bsf	3,5	;RP0=1, select bank1
  7490  1D90  0843               	movf	_sterpper_counts^(0+128),w
  7491  1D91  0444               	iorwf	(_sterpper_counts+1)^(0+128),w
  7492  1D92  1903               	btfsc	3,2
  7493  1D93  2DDE               	goto	l665
  7494                           
  7495                           ;Automated Solar Panel Orientation Setter.c: 760: for(i=0; i<value; i++){
  7496  1D94  1283               	bcf	3,5	;RP0=0, select bank0
  7497  1D95  01A9               	clrf	RotateMotorRight@i
  7498  1D96  01AA               	clrf	RotateMotorRight@i+1
  7499  1D97                     l5623:	
  7500  1D97  082A               	movf	RotateMotorRight@i+1,w
  7501  1D98  3A80               	xorlw	128
  7502  1D99  00A7               	movwf	??_RotateMotorRight
  7503  1D9A  0826               	movf	RotateMotorRight@value+1,w
  7504  1D9B  3A80               	xorlw	128
  7505  1D9C  0227               	subwf	??_RotateMotorRight,w
  7506  1D9D  1D03               	skipz
  7507  1D9E  2DA1               	goto	u7045
  7508  1D9F  0825               	movf	RotateMotorRight@value,w
  7509  1DA0  0229               	subwf	RotateMotorRight@i,w
  7510  1DA1                     u7045:	
  7511  1DA1  1803               	btfsc	3,0
  7512  1DA2  2DDE               	goto	l665
  7513                           
  7514                           ;Automated Solar Panel Orientation Setter.c: 761: RB2=1; RB3=1; RB4=1; RB5=0;
  7515  1DA3  25E6  160A  158A   	fcall	PL28	;call to abstracted procedure
  7516                           
  7517                           ;Automated Solar Panel Orientation Setter.c: 762: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7518  1DA6  3014               	movlw	20
  7519  1DA7  00A8               	movwf	??_RotateMotorRight+1
  7520  1DA8  3079               	movlw	121
  7521  1DA9  00A7               	movwf	??_RotateMotorRight
  7522  1DAA                     u8987:	
  7523  1DAA  0BA7               	decfsz	??_RotateMotorRight,f
  7524  1DAB  2DAA               	goto	u8987
  7525  1DAC  0BA8               	decfsz	??_RotateMotorRight+1,f
  7526  1DAD  2DAA               	goto	u8987
  7527  1DAE  2DAF               	nop2
  7528                           
  7529                           ;Automated Solar Panel Orientation Setter.c: 763: RB2=1; RB3=1; RB4=0; RB5=1;
  7530  1DAF  25F4  160A  158A   	fcall	PL36	;call to abstracted procedure
  7531                           
  7532                           ;Automated Solar Panel Orientation Setter.c: 764: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7533  1DB2  3014               	movlw	20
  7534  1DB3  00A8               	movwf	??_RotateMotorRight+1
  7535  1DB4  3079               	movlw	121
  7536  1DB5  00A7               	movwf	??_RotateMotorRight
  7537  1DB6                     u8997:	
  7538  1DB6  0BA7               	decfsz	??_RotateMotorRight,f
  7539  1DB7  2DB6               	goto	u8997
  7540  1DB8  0BA8               	decfsz	??_RotateMotorRight+1,f
  7541  1DB9  2DB6               	goto	u8997
  7542  1DBA  2DBB               	nop2
  7543                           
  7544                           ;Automated Solar Panel Orientation Setter.c: 765: RB2=1; RB3=0; RB4=1; RB5=1;
  7545  1DBB  25ED  160A  158A   	fcall	PL30	;call to abstracted procedure
  7546                           
  7547                           ;Automated Solar Panel Orientation Setter.c: 766: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7548  1DBE  3014               	movlw	20
  7549  1DBF  00A8               	movwf	??_RotateMotorRight+1
  7550  1DC0  3079               	movlw	121
  7551  1DC1  00A7               	movwf	??_RotateMotorRight
  7552  1DC2                     u9007:	
  7553  1DC2  0BA7               	decfsz	??_RotateMotorRight,f
  7554  1DC3  2DC2               	goto	u9007
  7555  1DC4  0BA8               	decfsz	??_RotateMotorRight+1,f
  7556  1DC5  2DC2               	goto	u9007
  7557  1DC6  2DC7               	nop2
  7558                           
  7559                           ;Automated Solar Panel Orientation Setter.c: 767: RB2=0; RB3=1; RB4=1; RB5=1;
  7560  1DC7  25FB  160A  158A   	fcall	PL38	;call to abstracted procedure
  7561                           
  7562                           ;Automated Solar Panel Orientation Setter.c: 768: _delay((unsigned long)((15)*(4000000/4
      +                          000.0)));
  7563  1DCA  3014               	movlw	20
  7564  1DCB  00A8               	movwf	??_RotateMotorRight+1
  7565  1DCC  3079               	movlw	121
  7566  1DCD  00A7               	movwf	??_RotateMotorRight
  7567  1DCE                     u9017:	
  7568  1DCE  0BA7               	decfsz	??_RotateMotorRight,f
  7569  1DCF  2DCE               	goto	u9017
  7570  1DD0  0BA8               	decfsz	??_RotateMotorRight+1,f
  7571  1DD1  2DCE               	goto	u9017
  7572  1DD2  2DD3               	nop2
  7573                           
  7574                           ;Automated Solar Panel Orientation Setter.c: 769: sterpper_counts--;
  7575  1DD3  3001               	movlw	1
  7576  1DD4  1683               	bsf	3,5	;RP0=1, select bank1
  7577  1DD5  1303               	bcf	3,6	;RP1=0, select bank1
  7578  1DD6  02C3               	subwf	_sterpper_counts^(0+128),f
  7579  1DD7  1C03               	skipc
  7580  1DD8  03C4               	decf	(_sterpper_counts+1)^(0+128),f
  7581  1DD9  1283               	bcf	3,5	;RP0=0, select bank0
  7582  1DDA  0AA9               	incf	RotateMotorRight@i,f
  7583  1DDB  1903               	skipnz
  7584  1DDC  0AAA               	incf	RotateMotorRight@i+1,f
  7585  1DDD  2D97               	goto	l5623
  7586  1DDE                     l665:	
  7587                           ;Automated Solar Panel Orientation Setter.c: 772: else{
  7588                           
  7589                           
  7590                           ;Automated Solar Panel Orientation Setter.c: 774: }
  7591                           ;Automated Solar Panel Orientation Setter.c: 775: RB2=1; RB3=1; RB4=1; RB5=1;
  7592  1DDE  2DDF               	ljmp	PL22	;call to abstracted procedure
  7593  1DDF                     __end_of_RotateMotorRight:	
  7594  1DDF                     PL22:	
  7595  1DDF  1283               	bcf	3,5	;RP0=0, select bank0
  7596  1DE0  1303               	bcf	3,6	;RP1=0, select bank0
  7597  1DE1  1506               	bsf	6,2	;volatile
  7598  1DE2  1586               	bsf	6,3	;volatile
  7599  1DE3  1606               	bsf	6,4	;volatile
  7600  1DE4  1686               	bsf	6,5	;volatile
  7601  1DE5  0008               	return
  7602  1DE6                     __end_ofPL22:	
  7603  1DE6                     PL28:	
  7604  1DE6  1283               	bcf	3,5	;RP0=0, select bank0
  7605  1DE7  1303               	bcf	3,6	;RP1=0, select bank0
  7606  1DE8  1506               	bsf	6,2	;volatile
  7607  1DE9  1586               	bsf	6,3	;volatile
  7608  1DEA  1606               	bsf	6,4	;volatile
  7609  1DEB  1286               	bcf	6,5	;volatile
  7610  1DEC  0008               	return
  7611  1DED                     __end_ofPL28:	
  7612  1DED                     PL30:	
  7613  1DED  1283               	bcf	3,5	;RP0=0, select bank0
  7614  1DEE  1303               	bcf	3,6	;RP1=0, select bank0
  7615  1DEF  1506               	bsf	6,2	;volatile
  7616  1DF0  1186               	bcf	6,3	;volatile
  7617  1DF1  1606               	bsf	6,4	;volatile
  7618  1DF2  1686               	bsf	6,5	;volatile
  7619  1DF3  0008               	return
  7620  1DF4                     __end_ofPL30:	
  7621  1DF4                     PL36:	
  7622  1DF4  1283               	bcf	3,5	;RP0=0, select bank0
  7623  1DF5  1303               	bcf	3,6	;RP1=0, select bank0
  7624  1DF6  1506               	bsf	6,2	;volatile
  7625  1DF7  1586               	bsf	6,3	;volatile
  7626  1DF8  1206               	bcf	6,4	;volatile
  7627  1DF9  1686               	bsf	6,5	;volatile
  7628  1DFA  0008               	return
  7629  1DFB                     __end_ofPL36:	
  7630  1DFB                     PL38:	
  7631  1DFB  1283               	bcf	3,5	;RP0=0, select bank0
  7632  1DFC  1303               	bcf	3,6	;RP1=0, select bank0
  7633  1DFD  1106               	bcf	6,2	;volatile
  7634  1DFE  1586               	bsf	6,3	;volatile
  7635  1DFF  1606               	bsf	6,4	;volatile
  7636  1E00  1686               	bsf	6,5	;volatile
  7637  1E01  0008               	return
  7638  1E02                     __end_ofPL38:	
  7639                           
  7640                           	psect	text44
  7641  1331                     __ptext44:	
  7642 ;; *************** function _isr *****************
  7643 ;; Defined at:
  7644 ;;		line 807 in file "Automated Solar Panel Orientation Setter.c"
  7645 ;; Parameters:    Size  Location     Type
  7646 ;;		None
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;		None
  7649 ;; Return value:  Size  Location     Type
  7650 ;;		None               void
  7651 ;; Registers used:
  7652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 300/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7658 ;;      Params:         0       0       0       0       0
  7659 ;;      Locals:         0       0       0       0       0
  7660 ;;      Temps:          0       3       0       0       0
  7661 ;;      Totals:         0       3       0       0       0
  7662 ;;Total ram usage:        3 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    4
  7665 ;; This function calls:
  7666 ;;		i1_LCDTimeUpdate
  7667 ;;		i1_LCD_print_char
  7668 ;;		i1___lwmod
  7669 ;; This function is called by:
  7670 ;;		Interrupt level 1
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           
  7675                           ;psect for function _isr
  7676  1331                     _isr:	
  7677                           
  7678                           ;Automated Solar Panel Orientation Setter.c: 808: if(TMR1IF==1){
  7679  1331  1C0C               	btfss	12,0	;volatile
  7680  1332  2B8A               	goto	i1l5141
  7681                           
  7682                           ;Automated Solar Panel Orientation Setter.c: 809: msecond ++;
  7683  1333  1683               	bsf	3,5	;RP0=1, select bank1
  7684  1334  0ABF               	incf	_msecond^(0+128),f
  7685  1335  1903               	skipnz
  7686  1336  0AC0               	incf	(_msecond+1)^(0+128),f
  7687                           
  7688                           ;Automated Solar Panel Orientation Setter.c: 810: if(msecond == 50){
  7689  1337  3032               	movlw	50
  7690  1338  063F               	xorwf	_msecond^(0+128),w
  7691  1339  0440               	iorwf	(_msecond+1)^(0+128),w
  7692  133A  1D03               	btfss	3,2
  7693  133B  2B84               	goto	i1l681
  7694                           
  7695                           ;Automated Solar Panel Orientation Setter.c: 811: second ++;
  7696  133C  0AC1               	incf	_second^(0+128),f
  7697  133D  1903               	skipnz
  7698  133E  0AC2               	incf	(_second+1)^(0+128),f
  7699                           
  7700                           ;Automated Solar Panel Orientation Setter.c: 813: if(TimeBlink_on){
  7701  133F  1283               	bcf	3,5	;RP0=0, select bank0
  7702  1340  1D58               	btfss	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  7703  1341  2B5D               	goto	i1l5117
  7704                           
  7705                           ;Automated Solar Panel Orientation Setter.c: 814: if(BlinkDet){
  7706  1342  1C58               	btfss	_BlinkDet/(0+8),_BlinkDet& (0+7)
  7707  1343  2B4B               	goto	i1l5113
  7708  1344  300E               	movlw	14
  7709                           
  7710                           ;Automated Solar Panel Orientation Setter.c: 815: LCD_print_char(1,14,':');
  7711  1345  01F7               	clrf	i1LCD_print_char@row
  7712  1346  0AF7               	incf	i1LCD_print_char@row,f
  7713  1347  01F8               	clrf	i1LCD_print_char@row+1
  7714  1348  00F9               	movwf	i1LCD_print_char@column
  7715  1349  303A               	movlw	58
  7716  134A  2B51               	goto	L25
  7717  134B                     i1l5113:	
  7718                           ;Automated Solar Panel Orientation Setter.c: 816: }
  7719                           
  7720  134B  300E               	movlw	14
  7721                           
  7722                           ;Automated Solar Panel Orientation Setter.c: 817: else{
  7723                           ;Automated Solar Panel Orientation Setter.c: 818: LCD_print_char(1,14,' ');
  7724  134C  01F7               	clrf	i1LCD_print_char@row
  7725  134D  0AF7               	incf	i1LCD_print_char@row,f
  7726  134E  01F8               	clrf	i1LCD_print_char@row+1
  7727  134F  00F9               	movwf	i1LCD_print_char@column
  7728  1350  3020               	movlw	32
  7729  1351                     L25:	
  7730  1351  01FA               	clrf	i1LCD_print_char@column+1
  7731  1352  00FB               	movwf	i1LCD_print_char@print_value
  7732  1353  2443  160A  118A   	fcall	i1_LCD_print_char
  7733                           
  7734                           ;Automated Solar Panel Orientation Setter.c: 819: }
  7735                           ;Automated Solar Panel Orientation Setter.c: 820: LCDTimeUpdate();
  7736  1356  23B6  160A  118A   	fcall	i1_LCDTimeUpdate
  7737                           
  7738                           ;Automated Solar Panel Orientation Setter.c: 821: BlinkDet = !BlinkDet;
  7739  1359  3001               	movlw	(0+1) shl (_BlinkDet& (0+7))
  7740  135A  1283               	bcf	3,5	;RP0=0, select bank0
  7741  135B  1303               	bcf	3,6	;RP1=0, select bank0
  7742  135C  06D8               	xorwf	_BlinkDet/(0+8),f
  7743  135D                     i1l5117:	
  7744                           
  7745                           ;Automated Solar Panel Orientation Setter.c: 822: }
  7746                           ;Automated Solar Panel Orientation Setter.c: 824: RD6 = !RD6;
  7747  135D  3040               	movlw	64
  7748  135E  0688               	xorwf	8,f
  7749                           
  7750                           ;Automated Solar Panel Orientation Setter.c: 825: msecond = 0;
  7751  135F  1683               	bsf	3,5	;RP0=1, select bank1
  7752  1360  303C               	movlw	60
  7753  1361  01BF               	clrf	_msecond^(0+128)
  7754  1362  01C0               	clrf	(_msecond+1)^(0+128)
  7755                           
  7756                           ;Automated Solar Panel Orientation Setter.c: 826: if( second == 60){
  7757  1363  0641               	xorwf	_second^(0+128),w
  7758  1364  0442               	iorwf	(_second+1)^(0+128),w
  7759  1365  1D03               	btfss	3,2
  7760  1366  2B84               	goto	i1l681
  7761                           
  7762                           ;Automated Solar Panel Orientation Setter.c: 833: minute ++;
  7763  1367  0ABD               	incf	_minute^(0+128),f
  7764  1368  1903               	skipnz
  7765  1369  0ABE               	incf	(_minute+1)^(0+128),f
  7766  136A  301E               	movlw	30
  7767                           
  7768                           ;Automated Solar Panel Orientation Setter.c: 834: second = 0;
  7769  136B  01C1               	clrf	_second^(0+128)
  7770  136C  01C2               	clrf	(_second+1)^(0+128)
  7771                           
  7772                           ;Automated Solar Panel Orientation Setter.c: 836: x = minute%30 ;
  7773  136D  00F0               	movwf	i1___lwmod@divisor
  7774  136E  01F1               	clrf	i1___lwmod@divisor+1
  7775  136F  083E               	movf	(_minute+1)^(0+128),w
  7776  1370  00F3               	movwf	i1___lwmod@dividend+1
  7777  1371  083D               	movf	_minute^(0+128),w
  7778  1372  00F2               	movwf	i1___lwmod@dividend
  7779  1373  2487  160A  118A   	fcall	i1___lwmod
  7780  1376  0870               	movf	?i1___lwmod,w
  7781  1377  1683               	bsf	3,5	;RP0=1, select bank1
  7782  1378  00C5               	movwf	_x^(0+128)
  7783                           
  7784                           ;Automated Solar Panel Orientation Setter.c: 840: }
  7785                           ;Automated Solar Panel Orientation Setter.c: 843: if( minute == 60){
  7786  1379  303C               	movlw	60
  7787  137A  063D               	xorwf	_minute^(0+128),w
  7788  137B  043E               	iorwf	(_minute+1)^(0+128),w
  7789  137C  1D03               	btfss	3,2
  7790  137D  2B84               	goto	i1l681
  7791                           
  7792                           ;Automated Solar Panel Orientation Setter.c: 844: minute = 0;
  7793  137E  01BD               	clrf	_minute^(0+128)
  7794  137F  01BE               	clrf	(_minute+1)^(0+128)
  7795                           
  7796                           ;Automated Solar Panel Orientation Setter.c: 845: hour ++;
  7797  1380  1283               	bcf	3,5	;RP0=0, select bank0
  7798  1381  0AD1               	incf	_hour,f
  7799  1382  1903               	skipnz
  7800  1383  0AD2               	incf	_hour+1,f
  7801  1384                     i1l681:	
  7802                           
  7803                           ;Automated Solar Panel Orientation Setter.c: 847: }
  7804                           ;Automated Solar Panel Orientation Setter.c: 848: }
  7805                           ;Automated Solar Panel Orientation Setter.c: 849: }
  7806                           ;Automated Solar Panel Orientation Setter.c: 850: TMR1IF = 0;
  7807  1384  1283               	bcf	3,5	;RP0=0, select bank0
  7808  1385  100C               	bcf	12,0	;volatile
  7809                           
  7810                           ;Automated Solar Panel Orientation Setter.c: 851: TMR1L = 0xB0;
  7811  1386  30B0               	movlw	176
  7812  1387  008E               	movwf	14	;volatile
  7813                           
  7814                           ;Automated Solar Panel Orientation Setter.c: 852: TMR1H = 0x3C;
  7815  1388  303C               	movlw	60
  7816  1389  008F               	movwf	15	;volatile
  7817  138A                     i1l5141:	
  7818                           
  7819                           ;Automated Solar Panel Orientation Setter.c: 853: }
  7820                           ;Automated Solar Panel Orientation Setter.c: 854: if( RCIF == 1){
  7821  138A  1E8C               	btfss	12,5	;volatile
  7822  138B  2BA7               	goto	i1l5165
  7823                           
  7824                           ;Automated Solar Panel Orientation Setter.c: 855: if ((FERR == 0) && (OERR == 0)){
  7825  138C  1D18               	btfss	24,2	;volatile
  7826  138D  1898               	btfsc	24,1	;volatile
  7827  138E  2BA1               	goto	i1l690
  7828                           
  7829                           ;Automated Solar Panel Orientation Setter.c: 856: wtmp = RCREG;
  7830  138F  081A               	movf	26,w	;volatile
  7831                           
  7832                           ;Automated Solar Panel Orientation Setter.c: 857: if( RCREG=='*' || j > 20-1 ){
  7833  1390  302A               	movlw	42
  7834  1391  061A               	xorwf	26,w
  7835  1392  1903               	btfsc	3,2
  7836  1393  2B98               	goto	i1l5153
  7837  1394  3014               	movlw	20
  7838  1395  0255               	subwf	_j,w
  7839  1396  1C03               	skipc
  7840  1397  2B99               	goto	i1l5155
  7841  1398                     i1l5153:	
  7842                           
  7843                           ;Automated Solar Panel Orientation Setter.c: 858: j=0;
  7844  1398  01D5               	clrf	_j
  7845  1399                     i1l5155:	
  7846                           
  7847                           ;Automated Solar Panel Orientation Setter.c: 859: }
  7848                           ;Automated Solar Panel Orientation Setter.c: 860: buffer[j] = RCREG;
  7849  1399  0855               	movf	_j,w
  7850  139A  3EA0               	addlw	(low (_buffer| 0))& (0+255)
  7851  139B  0084               	movwf	4
  7852  139C  081A               	movf	26,w	;volatile
  7853  139D  1383               	bcf	3,7	;select IRP bank1
  7854  139E  0080               	movwf	0
  7855                           
  7856                           ;Automated Solar Panel Orientation Setter.c: 861: j ++;
  7857  139F  0AD5               	incf	_j,f
  7858                           
  7859                           ;Automated Solar Panel Orientation Setter.c: 862: }
  7860  13A0  2BA6               	goto	i1l5163
  7861  13A1                     i1l690:	
  7862                           
  7863                           ;Automated Solar Panel Orientation Setter.c: 863: else{
  7864                           ;Automated Solar Panel Orientation Setter.c: 865: CREN = 0;
  7865  13A1  1218               	bcf	24,4	;volatile
  7866                           
  7867                           ;Automated Solar Panel Orientation Setter.c: 866: FERR = 0;
  7868  13A2  1118               	bcf	24,2	;volatile
  7869                           
  7870                           ;Automated Solar Panel Orientation Setter.c: 867: wtmp = RCREG;
  7871  13A3  081A               	movf	26,w	;volatile
  7872                           
  7873                           ;Automated Solar Panel Orientation Setter.c: 868: wtmp = RCREG;
  7874  13A4  081A               	movf	26,w	;volatile
  7875                           
  7876                           ;Automated Solar Panel Orientation Setter.c: 869: CREN = 1;
  7877  13A5  1618               	bsf	24,4	;volatile
  7878  13A6                     i1l5163:	
  7879                           
  7880                           ;Automated Solar Panel Orientation Setter.c: 870: }
  7881                           ;Automated Solar Panel Orientation Setter.c: 871: RCIF = 0;
  7882  13A6  128C               	bcf	12,5	;volatile
  7883  13A7                     i1l5165:	
  7884                           
  7885                           ;Automated Solar Panel Orientation Setter.c: 872: }
  7886                           ;Automated Solar Panel Orientation Setter.c: 873: if(OERR == 1){
  7887  13A7  1C98               	btfss	24,1	;volatile
  7888  13A8  2BAD               	goto	i1l696
  7889                           
  7890                           ;Automated Solar Panel Orientation Setter.c: 874: CREN = 0;
  7891  13A9  1218               	bcf	24,4	;volatile
  7892                           
  7893                           ;Automated Solar Panel Orientation Setter.c: 876: wtmp = RCREG;
  7894  13AA  081A               	movf	26,w	;volatile
  7895                           
  7896                           ;Automated Solar Panel Orientation Setter.c: 877: wtmp = RCREG;
  7897  13AB  081A               	movf	26,w	;volatile
  7898                           
  7899                           ;Automated Solar Panel Orientation Setter.c: 878: CREN = 1;
  7900  13AC  1618               	bsf	24,4	;volatile
  7901  13AD                     i1l696:	
  7902  13AD  0824               	movf	??_isr+2,w
  7903  13AE  008A               	movwf	10
  7904  13AF  0823               	movf	??_isr+1,w
  7905  13B0  0084               	movwf	4
  7906  13B1  0E22               	swapf	??_isr^0,w
  7907  13B2  0083               	movwf	3
  7908  13B3  0EFE               	swapf	126,f
  7909  13B4  0E7E               	swapf	126,w
  7910  13B5  0009               	retfie
  7911  13B6                     __end_of_isr:	
  7912  13B6                     __ptext45:	
  7913 ;; *************** function i1_LCDTimeUpdate *****************
  7914 ;; Defined at:
  7915 ;;		line 898 in file "Automated Solar Panel Orientation Setter.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;		None
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;		None
  7920 ;; Return value:  Size  Location     Type
  7921 ;;		None               void
  7922 ;; Registers used:
  7923 ;;		wreg, status,2, status,0, pclath, cstack
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7929 ;;      Params:         0       0       0       0       0
  7930 ;;      Locals:         0       0       0       0       0
  7931 ;;      Temps:          0       2       0       0       0
  7932 ;;      Totals:         0       2       0       0       0
  7933 ;;Total ram usage:        2 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    3
  7936 ;; This function calls:
  7937 ;;		i1_LCD_print_char
  7938 ;;		i1___lwdiv
  7939 ;;		i1___lwmod
  7940 ;; This function is called by:
  7941 ;;		_isr
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           
  7946                           ;psect for function i1_LCDTimeUpdate
  7947  13B6                     i1_LCDTimeUpdate:	
  7948                           
  7949                           ;incstack = 0
  7950 ;; hardware stack exceeded
  7951                           ; Regs used in i1_LCDTimeUpdate: [wreg+status,2+status,0+pclath+cstack]
  7952  13B6  300C               	movlw	12
  7953                           
  7954                           ;Automated Solar Panel Orientation Setter.c: 899: LCD_print_char(1,12,hour/10+48);
  7955  13B7  01F7               	clrf	i1LCD_print_char@row
  7956  13B8  0AF7               	incf	i1LCD_print_char@row,f
  7957  13B9  01F8               	clrf	i1LCD_print_char@row+1
  7958  13BA  00F9               	movwf	i1LCD_print_char@column
  7959  13BB  300A               	movlw	10
  7960  13BC  01FA               	clrf	i1LCD_print_char@column+1
  7961  13BD  00F0               	movwf	i1___lwdiv@divisor
  7962  13BE  01F1               	clrf	i1___lwdiv@divisor+1
  7963  13BF  1283               	bcf	3,5	;RP0=0, select bank0
  7964  13C0  1303               	bcf	3,6	;RP1=0, select bank0
  7965  13C1  0852               	movf	_hour+1,w
  7966  13C2  00F3               	movwf	i1___lwdiv@dividend+1
  7967  13C3  0851               	movf	_hour,w
  7968  13C4  00F2               	movwf	i1___lwdiv@dividend
  7969  13C5  245D  160A  118A   	fcall	i1___lwdiv
  7970  13C8  0870               	movf	?i1___lwdiv,w
  7971  13C9  3E30               	addlw	48
  7972  13CA  00FB               	movwf	i1LCD_print_char@print_value
  7973  13CB  2443  160A  118A   	fcall	i1_LCD_print_char
  7974                           
  7975                           ;Automated Solar Panel Orientation Setter.c: 900: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  7976  13CE  300D               	movlw	13
  7977  13CF  1283               	bcf	3,5	;RP0=0, select bank0
  7978  13D0  1303               	bcf	3,6	;RP1=0, select bank0
  7979  13D1  00A1               	movwf	??i1_LCDTimeUpdate+1
  7980  13D2  30FB               	movlw	251
  7981  13D3  00A0               	movwf	??i1_LCDTimeUpdate
  7982  13D4                     u906_27:	
  7983  13D4  0BA0               	decfsz	??i1_LCDTimeUpdate,f
  7984  13D5  2BD4               	goto	u906_27
  7985  13D6  0BA1               	decfsz	??i1_LCDTimeUpdate+1,f
  7986  13D7  2BD4               	goto	u906_27
  7987  13D8  2BD9               	nop2
  7988  13D9  300D               	movlw	13
  7989                           
  7990                           ;Automated Solar Panel Orientation Setter.c: 901: LCD_print_char(1,13,hour%10+48);
  7991  13DA  01F7               	clrf	i1LCD_print_char@row
  7992  13DB  0AF7               	incf	i1LCD_print_char@row,f
  7993  13DC  01F8               	clrf	i1LCD_print_char@row+1
  7994  13DD  00F9               	movwf	i1LCD_print_char@column
  7995  13DE  300A               	movlw	10
  7996  13DF  01FA               	clrf	i1LCD_print_char@column+1
  7997  13E0  00F0               	movwf	i1___lwmod@divisor
  7998  13E1  01F1               	clrf	i1___lwmod@divisor+1
  7999  13E2  1283               	bcf	3,5	;RP0=0, select bank0
  8000  13E3  1303               	bcf	3,6	;RP1=0, select bank0
  8001  13E4  0852               	movf	_hour+1,w
  8002  13E5  00F3               	movwf	i1___lwmod@dividend+1
  8003  13E6  0851               	movf	_hour,w
  8004  13E7  00F2               	movwf	i1___lwmod@dividend
  8005  13E8  2487  160A  118A   	fcall	i1___lwmod
  8006  13EB  0870               	movf	?i1___lwmod,w
  8007  13EC  3E30               	addlw	48
  8008  13ED  00FB               	movwf	i1LCD_print_char@print_value
  8009  13EE  2443  160A  118A   	fcall	i1_LCD_print_char
  8010                           
  8011                           ;Automated Solar Panel Orientation Setter.c: 902: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  8012  13F1  300D               	movlw	13
  8013  13F2  1283               	bcf	3,5	;RP0=0, select bank0
  8014  13F3  1303               	bcf	3,6	;RP1=0, select bank0
  8015  13F4  00A1               	movwf	??i1_LCDTimeUpdate+1
  8016  13F5  30FB               	movlw	251
  8017  13F6  00A0               	movwf	??i1_LCDTimeUpdate
  8018  13F7                     u907_27:	
  8019  13F7  0BA0               	decfsz	??i1_LCDTimeUpdate,f
  8020  13F8  2BF7               	goto	u907_27
  8021  13F9  0BA1               	decfsz	??i1_LCDTimeUpdate+1,f
  8022  13FA  2BF7               	goto	u907_27
  8023  13FB  2BFC               	nop2
  8024  13FC  300F               	movlw	15
  8025                           
  8026                           ;Automated Solar Panel Orientation Setter.c: 903: LCD_print_char(1,15,minute/10+48);
  8027  13FD  01F7               	clrf	i1LCD_print_char@row
  8028  13FE  0AF7               	incf	i1LCD_print_char@row,f
  8029  13FF  01F8               	clrf	i1LCD_print_char@row+1
  8030  1400  00F9               	movwf	i1LCD_print_char@column
  8031  1401  300A               	movlw	10
  8032  1402  01FA               	clrf	i1LCD_print_char@column+1
  8033  1403  00F0               	movwf	i1___lwdiv@divisor
  8034  1404  01F1               	clrf	i1___lwdiv@divisor+1
  8035  1405  1683               	bsf	3,5	;RP0=1, select bank1
  8036  1406  1303               	bcf	3,6	;RP1=0, select bank1
  8037  1407  083E               	movf	(_minute+1)^(0+128),w
  8038  1408  00F3               	movwf	i1___lwdiv@dividend+1
  8039  1409  083D               	movf	_minute^(0+128),w
  8040  140A  00F2               	movwf	i1___lwdiv@dividend
  8041  140B  245D  160A  118A   	fcall	i1___lwdiv
  8042  140E  0870               	movf	?i1___lwdiv,w
  8043  140F  3E30               	addlw	48
  8044  1410  00FB               	movwf	i1LCD_print_char@print_value
  8045  1411  2443  160A  118A   	fcall	i1_LCD_print_char
  8046                           
  8047                           ;Automated Solar Panel Orientation Setter.c: 904: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  8048  1414  300D               	movlw	13
  8049  1415  1283               	bcf	3,5	;RP0=0, select bank0
  8050  1416  1303               	bcf	3,6	;RP1=0, select bank0
  8051  1417  00A1               	movwf	??i1_LCDTimeUpdate+1
  8052  1418  30FB               	movlw	251
  8053  1419  00A0               	movwf	??i1_LCDTimeUpdate
  8054  141A                     u908_27:	
  8055  141A  0BA0               	decfsz	??i1_LCDTimeUpdate,f
  8056  141B  2C1A               	goto	u908_27
  8057  141C  0BA1               	decfsz	??i1_LCDTimeUpdate+1,f
  8058  141D  2C1A               	goto	u908_27
  8059  141E  2C1F               	nop2
  8060  141F  3010               	movlw	16
  8061                           
  8062                           ;Automated Solar Panel Orientation Setter.c: 905: LCD_print_char(1,16,minute%10+48);
  8063  1420  01F7               	clrf	i1LCD_print_char@row
  8064  1421  0AF7               	incf	i1LCD_print_char@row,f
  8065  1422  01F8               	clrf	i1LCD_print_char@row+1
  8066  1423  00F9               	movwf	i1LCD_print_char@column
  8067  1424  300A               	movlw	10
  8068  1425  01FA               	clrf	i1LCD_print_char@column+1
  8069  1426  00F0               	movwf	i1___lwmod@divisor
  8070  1427  01F1               	clrf	i1___lwmod@divisor+1
  8071  1428  1683               	bsf	3,5	;RP0=1, select bank1
  8072  1429  1303               	bcf	3,6	;RP1=0, select bank1
  8073  142A  083E               	movf	(_minute+1)^(0+128),w
  8074  142B  00F3               	movwf	i1___lwmod@dividend+1
  8075  142C  083D               	movf	_minute^(0+128),w
  8076  142D  00F2               	movwf	i1___lwmod@dividend
  8077  142E  2487  160A  118A   	fcall	i1___lwmod
  8078  1431  0870               	movf	?i1___lwmod,w
  8079  1432  3E30               	addlw	48
  8080  1433  00FB               	movwf	i1LCD_print_char@print_value
  8081  1434  2443  160A  118A   	fcall	i1_LCD_print_char
  8082                           
  8083                           ;Automated Solar Panel Orientation Setter.c: 906: _delay((unsigned long)((10)*(4000000/4
      +                          000.0)));
  8084  1437  300D               	movlw	13
  8085  1438  1283               	bcf	3,5	;RP0=0, select bank0
  8086  1439  1303               	bcf	3,6	;RP1=0, select bank0
  8087  143A  00A1               	movwf	??i1_LCDTimeUpdate+1
  8088  143B  30FB               	movlw	251
  8089  143C  00A0               	movwf	??i1_LCDTimeUpdate
  8090  143D                     u909_27:	
  8091  143D  0BA0               	decfsz	??i1_LCDTimeUpdate,f
  8092  143E  2C3D               	goto	u909_27
  8093  143F  0BA1               	decfsz	??i1_LCDTimeUpdate+1,f
  8094  1440  2C3D               	goto	u909_27
  8095  1441  2C42               	nop2
  8096  1442  0008               	return
  8097  1443                     __end_ofi1_LCDTimeUpdate:	
  8098  1443                     __ptext48:	
  8099 ;; *************** function i1_LCD_print_char *****************
  8100 ;; Defined at:
  8101 ;;		line 174 in file "lcdv2.h"
  8102 ;; Parameters:    Size  Location     Type
  8103 ;;  row             2    7[COMMON] int 
  8104 ;;  column          2    9[COMMON] int 
  8105 ;;  print_value     1   11[COMMON] unsigned char 
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;		None
  8108 ;; Return value:  Size  Location     Type
  8109 ;;		None               void
  8110 ;; Registers used:
  8111 ;;		wreg, status,2, status,0, pclath, cstack
  8112 ;; Tracked objects:
  8113 ;;		On entry : 200/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8117 ;;      Params:         5       0       0       0       0
  8118 ;;      Locals:         0       0       0       0       0
  8119 ;;      Temps:          1       0       0       0       0
  8120 ;;      Totals:         6       0       0       0       0
  8121 ;;Total ram usage:        6 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    2
  8124 ;; This function calls:
  8125 ;;		i1_lcd_add
  8126 ;;		i1_position
  8127 ;; This function is called by:
  8128 ;;		_isr
  8129 ;;		i1_LCDTimeUpdate
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           
  8134                           ;psect for function i1_LCD_print_char
  8135  1443                     i1_LCD_print_char:	
  8136                           
  8137                           ;lcdv2.h: 175: position(row,column);
  8138                           
  8139                           ;incstack = 0
  8140                           ; Regs used in i1_LCD_print_char: [wreg+status,2+status,0+pclath+cstack]
  8141  1443  0879               	movf	i1LCD_print_char@column,w
  8142  1444  00F1               	movwf	i1position@collum
  8143  1445  0877               	movf	i1LCD_print_char@row,w
  8144  1446  2566  160A  118A   	fcall	i1_position
  8145                           
  8146                           ;lcdv2.h: 176: RC2 = 1;
  8147  1449  1283               	bcf	3,5	;RP0=0, select bank0
  8148  144A  1303               	bcf	3,6	;RP1=0, select bank0
  8149  144B  1507               	bsf	7,2	;volatile
  8150                           
  8151                           ;lcdv2.h: 177: _delay(20);
  8152  144C  3006               	movlw	6
  8153  144D  00FC               	movwf	??i1_LCD_print_char
  8154  144E                     u910_27:	
  8155  144E  0BFC               	decfsz	??i1_LCD_print_char,f
  8156  144F  2C4E               	goto	u910_27
  8157  1450  0000               	nop
  8158                           
  8159                           ;lcdv2.h: 178: lcd_data = print_value;
  8160  1451  087B               	movf	i1LCD_print_char@print_value,w
  8161  1452  1283               	bcf	3,5	;RP0=0, select bank0
  8162  1453  1303               	bcf	3,6	;RP1=0, select bank0
  8163  1454  00D6               	movwf	_lcd_data
  8164                           
  8165                           ;lcdv2.h: 179: lcd_add();
  8166  1455  24AB  160A  118A   	fcall	i1_lcd_add
  8167                           
  8168                           ;lcdv2.h: 180: _delay(100);
  8169  1458  3021               	movlw	33
  8170  1459  00FC               	movwf	??i1_LCD_print_char
  8171  145A                     u911_27:	
  8172  145A  0BFC               	decfsz	??i1_LCD_print_char,f
  8173  145B  2C5A               	goto	u911_27
  8174  145C  0008               	return
  8175  145D                     __end_ofi1_LCD_print_char:	
  8176  145D                     __ptext47:	
  8177 ;; *************** function i1___lwdiv *****************
  8178 ;; Defined at:
  8179 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  divisor         2    0[COMMON] unsigned int 
  8182 ;;  dividend        2    2[COMMON] unsigned int 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  __lwdiv         2    4[COMMON] unsigned int 
  8185 ;;  __lwdiv         1    6[COMMON] unsigned char 
  8186 ;; Return value:  Size  Location     Type
  8187 ;;                  2    0[COMMON] unsigned int 
  8188 ;; Registers used:
  8189 ;;		wreg, status,2, status,0
  8190 ;; Tracked objects:
  8191 ;;		On entry : 200/0
  8192 ;;		On exit  : 200/0
  8193 ;;		Unchanged: 200/0
  8194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8195 ;;      Params:         4       0       0       0       0
  8196 ;;      Locals:         3       0       0       0       0
  8197 ;;      Temps:          0       0       0       0       0
  8198 ;;      Totals:         7       0       0       0       0
  8199 ;;Total ram usage:        7 bytes
  8200 ;; Hardware stack levels used:    1
  8201 ;; This function calls:
  8202 ;;		Nothing
  8203 ;; This function is called by:
  8204 ;;		i1_LCDTimeUpdate
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           
  8209                           ;psect for function i1___lwdiv
  8210  145D                     i1___lwdiv:	
  8211                           
  8212                           ;incstack = 0
  8213                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  8214  145D  01F4               	clrf	i1___lwdiv@quotient
  8215  145E  01F5               	clrf	i1___lwdiv@quotient+1
  8216  145F  0870               	movf	i1___lwdiv@divisor,w
  8217  1460  0471               	iorwf	i1___lwdiv@divisor+1,w
  8218  1461  1903               	btfsc	3,2
  8219  1462  2C82               	goto	i1l4083
  8220  1463  01F6               	clrf	i1___lwdiv@counter
  8221  1464                     L28:	
  8222  1464  0AF6               	incf	i1___lwdiv@counter,f
  8223  1465  1BF1               	btfsc	i1___lwdiv@divisor+1,7
  8224  1466  2C6B               	goto	i1l4071
  8225  1467  1003               	clrc
  8226  1468  0DF0               	rlf	i1___lwdiv@divisor,f
  8227  1469  0DF1               	rlf	i1___lwdiv@divisor+1,f
  8228  146A  2C64               	goto	L28
  8229  146B                     i1l4071:	
  8230  146B  1003               	clrc
  8231  146C  0DF4               	rlf	i1___lwdiv@quotient,f
  8232  146D  0DF5               	rlf	i1___lwdiv@quotient+1,f
  8233  146E  0871               	movf	i1___lwdiv@divisor+1,w
  8234  146F  0273               	subwf	i1___lwdiv@dividend+1,w
  8235  1470  1D03               	skipz
  8236  1471  2C74               	goto	u504_25
  8237  1472  0870               	movf	i1___lwdiv@divisor,w
  8238  1473  0272               	subwf	i1___lwdiv@dividend,w
  8239  1474                     u504_25:	
  8240  1474  1C03               	skipc
  8241  1475  2C7E               	goto	L29
  8242  1476  0870               	movf	i1___lwdiv@divisor,w
  8243  1477  02F2               	subwf	i1___lwdiv@dividend,f
  8244  1478  0871               	movf	i1___lwdiv@divisor+1,w
  8245  1479  1C03               	skipc
  8246  147A  03F3               	decf	i1___lwdiv@dividend+1,f
  8247  147B  02F3               	subwf	i1___lwdiv@dividend+1,f
  8248  147C  1474               	bsf	i1___lwdiv@quotient,0
  8249  147D  1003               	clrc
  8250  147E                     L29:	
  8251  147E  0CF1               	rrf	i1___lwdiv@divisor+1,f
  8252  147F  0CF0               	rrf	i1___lwdiv@divisor,f
  8253  1480  0BF6               	decfsz	i1___lwdiv@counter,f
  8254  1481  2C6B               	goto	i1l4071
  8255  1482                     i1l4083:	
  8256  1482  0875               	movf	i1___lwdiv@quotient+1,w
  8257  1483  00F1               	movwf	?i1___lwdiv+1
  8258  1484  0874               	movf	i1___lwdiv@quotient,w
  8259  1485  00F0               	movwf	?i1___lwdiv
  8260  1486  0008               	return
  8261  1487                     __end_ofi1___lwdiv:	
  8262  1487                     __ptext46:	
  8263 ;; *************** function i1___lwmod *****************
  8264 ;; Defined at:
  8265 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;  divisor         2    0[COMMON] unsigned int 
  8268 ;;  dividend        2    2[COMMON] unsigned int 
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;  __lwmod         1    4[COMMON] unsigned char 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  2    0[COMMON] unsigned int 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0
  8275 ;; Tracked objects:
  8276 ;;		On entry : 200/100
  8277 ;;		On exit  : 200/0
  8278 ;;		Unchanged: 200/0
  8279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8280 ;;      Params:         4       0       0       0       0
  8281 ;;      Locals:         1       0       0       0       0
  8282 ;;      Temps:          0       0       0       0       0
  8283 ;;      Totals:         5       0       0       0       0
  8284 ;;Total ram usage:        5 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; This function calls:
  8287 ;;		Nothing
  8288 ;; This function is called by:
  8289 ;;		_isr
  8290 ;;		i1_LCDTimeUpdate
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           
  8295                           ;psect for function i1___lwmod
  8296  1487                     i1___lwmod:	
  8297                           
  8298                           ;incstack = 0
  8299                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  8300  1487  0870               	movf	i1___lwmod@divisor,w
  8301  1488  0471               	iorwf	i1___lwmod@divisor+1,w
  8302  1489  1903               	btfsc	3,2
  8303  148A  2CA6               	goto	i1l4103
  8304  148B  01F4               	clrf	i1___lwmod@counter
  8305  148C                     L26:	
  8306  148C  0AF4               	incf	i1___lwmod@counter,f
  8307  148D  1BF1               	btfsc	i1___lwmod@divisor+1,7
  8308  148E  2C93               	goto	i1l4095
  8309  148F  1003               	clrc
  8310  1490  0DF0               	rlf	i1___lwmod@divisor,f
  8311  1491  0DF1               	rlf	i1___lwmod@divisor+1,f
  8312  1492  2C8C               	goto	L26
  8313  1493                     i1l4095:	
  8314  1493  0871               	movf	i1___lwmod@divisor+1,w
  8315  1494  0273               	subwf	i1___lwmod@dividend+1,w
  8316  1495  1D03               	skipz
  8317  1496  2C99               	goto	u508_25
  8318  1497  0870               	movf	i1___lwmod@divisor,w
  8319  1498  0272               	subwf	i1___lwmod@dividend,w
  8320  1499                     u508_25:	
  8321  1499  1C03               	skipc
  8322  149A  2CA2               	goto	L27
  8323  149B  0870               	movf	i1___lwmod@divisor,w
  8324  149C  02F2               	subwf	i1___lwmod@dividend,f
  8325  149D  0871               	movf	i1___lwmod@divisor+1,w
  8326  149E  1C03               	skipc
  8327  149F  03F3               	decf	i1___lwmod@dividend+1,f
  8328  14A0  02F3               	subwf	i1___lwmod@dividend+1,f
  8329  14A1  1003               	clrc
  8330  14A2                     L27:	
  8331  14A2  0CF1               	rrf	i1___lwmod@divisor+1,f
  8332  14A3  0CF0               	rrf	i1___lwmod@divisor,f
  8333  14A4  0BF4               	decfsz	i1___lwmod@counter,f
  8334  14A5  2C93               	goto	i1l4095
  8335  14A6                     i1l4103:	
  8336  14A6  0873               	movf	i1___lwmod@dividend+1,w
  8337  14A7  00F1               	movwf	?i1___lwmod+1
  8338  14A8  0872               	movf	i1___lwmod@dividend,w
  8339  14A9  00F0               	movwf	?i1___lwmod
  8340  14AA  0008               	return
  8341  14AB                     __end_ofi1___lwmod:	
  8342  14AB                     __ptext50:	
  8343 ;; *************** function i1_lcd_add *****************
  8344 ;; Defined at:
  8345 ;;		line 226 in file "lcdv2.h"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;		None
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;		None
  8350 ;; Return value:  Size  Location     Type
  8351 ;;		None               void
  8352 ;; Registers used:
  8353 ;;		wreg, status,2, status,0
  8354 ;; Tracked objects:
  8355 ;;		On entry : 300/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8359 ;;      Params:         0       0       0       0       0
  8360 ;;      Locals:         0       0       0       0       0
  8361 ;;      Temps:          1       0       0       0       0
  8362 ;;      Totals:         1       0       0       0       0
  8363 ;;Total ram usage:        1 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; This function calls:
  8366 ;;		Nothing
  8367 ;; This function is called by:
  8368 ;;		i1_LCD_print_char
  8369 ;;		i1_position
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           
  8374                           ;psect for function i1_lcd_add
  8375  14AB                     i1_lcd_add:	
  8376                           
  8377                           ;lcdv2.h: 232: bit0 = lcd_data;
  8378                           
  8379                           ;incstack = 0
  8380                           ; Regs used in i1_lcd_add: [wreg+status,2+status,0]
  8381  14AB  107D               	bcf	_bit0/(0+8),_bit0& (0+7)
  8382  14AC  1856               	btfsc	_lcd_data,0
  8383  14AD  147D               	bsf	_bit0/(0+8),_bit0& (0+7)
  8384                           
  8385                           ;lcdv2.h: 233: bit1 = lcd_data>>1;
  8386  14AE  1283               	bcf	3,5	;RP0=0, select bank0
  8387  14AF  1303               	bcf	3,6	;RP1=0, select bank0
  8388  14B0  0856               	movf	_lcd_data,w
  8389  14B1  00F0               	movwf	??i1_lcd_add
  8390  14B2  1003               	clrc
  8391  14B3  0CF0               	rrf	??i1_lcd_add,f
  8392  14B4  10FD               	bcf	_bit1/(0+8),_bit1& (0+7)
  8393  14B5  1870               	btfsc	??i1_lcd_add,0
  8394  14B6  14FD               	bsf	_bit1/(0+8),_bit1& (0+7)
  8395                           
  8396                           ;lcdv2.h: 234: bit2 = lcd_data>>2;
  8397  14B7  1283               	bcf	3,5	;RP0=0, select bank0
  8398  14B8  1303               	bcf	3,6	;RP1=0, select bank0
  8399  14B9  0856               	movf	_lcd_data,w
  8400  14BA  00F0               	movwf	??i1_lcd_add
  8401  14BB  1003               	clrc
  8402  14BC  0CF0               	rrf	??i1_lcd_add,f
  8403  14BD  1003               	clrc
  8404  14BE  0CF0               	rrf	??i1_lcd_add,f
  8405  14BF  117D               	bcf	_bit2/(0+8),_bit2& (0+7)
  8406  14C0  1870               	btfsc	??i1_lcd_add,0
  8407  14C1  157D               	bsf	_bit2/(0+8),_bit2& (0+7)
  8408                           
  8409                           ;lcdv2.h: 235: bit3 = lcd_data>>3;
  8410  14C2  1283               	bcf	3,5	;RP0=0, select bank0
  8411  14C3  1303               	bcf	3,6	;RP1=0, select bank0
  8412  14C4  0856               	movf	_lcd_data,w
  8413  14C5  00F0               	movwf	??i1_lcd_add
  8414  14C6  1003               	clrc
  8415  14C7  0CF0               	rrf	??i1_lcd_add,f
  8416  14C8  1003               	clrc
  8417  14C9  0CF0               	rrf	??i1_lcd_add,f
  8418  14CA  1003               	clrc
  8419  14CB  0CF0               	rrf	??i1_lcd_add,f
  8420  14CC  11FD               	bcf	_bit3/(0+8),_bit3& (0+7)
  8421  14CD  1870               	btfsc	??i1_lcd_add,0
  8422  14CE  15FD               	bsf	_bit3/(0+8),_bit3& (0+7)
  8423                           
  8424                           ;lcdv2.h: 236: bit4 = lcd_data>>4;
  8425  14CF  1283               	bcf	3,5	;RP0=0, select bank0
  8426  14D0  1303               	bcf	3,6	;RP1=0, select bank0
  8427  14D1  0856               	movf	_lcd_data,w
  8428  14D2  00F0               	movwf	??i1_lcd_add
  8429  14D3  3004               	movlw	4
  8430  14D4                     u335_25:	
  8431  14D4  1003               	clrc
  8432  14D5  0CF0               	rrf	??i1_lcd_add,f
  8433  14D6  3EFF               	addlw	-1
  8434  14D7  1D03               	skipz
  8435  14D8  2CD4               	goto	u335_25
  8436  14D9  127D               	bcf	_bit4/(0+8),_bit4& (0+7)
  8437  14DA  1870               	btfsc	??i1_lcd_add,0
  8438  14DB  167D               	bsf	_bit4/(0+8),_bit4& (0+7)
  8439                           
  8440                           ;lcdv2.h: 237: bit5 = lcd_data>>5;
  8441  14DC  1283               	bcf	3,5	;RP0=0, select bank0
  8442  14DD  1303               	bcf	3,6	;RP1=0, select bank0
  8443  14DE  0856               	movf	_lcd_data,w
  8444  14DF  00F0               	movwf	??i1_lcd_add
  8445  14E0  3005               	movlw	5
  8446  14E1                     u337_25:	
  8447  14E1  1003               	clrc
  8448  14E2  0CF0               	rrf	??i1_lcd_add,f
  8449  14E3  3EFF               	addlw	-1
  8450  14E4  1D03               	skipz
  8451  14E5  2CE1               	goto	u337_25
  8452  14E6  12FD               	bcf	_bit5/(0+8),_bit5& (0+7)
  8453  14E7  1870               	btfsc	??i1_lcd_add,0
  8454  14E8  16FD               	bsf	_bit5/(0+8),_bit5& (0+7)
  8455                           
  8456                           ;lcdv2.h: 238: bit6 = lcd_data>>6;
  8457  14E9  1283               	bcf	3,5	;RP0=0, select bank0
  8458  14EA  1303               	bcf	3,6	;RP1=0, select bank0
  8459  14EB  0856               	movf	_lcd_data,w
  8460  14EC  00F0               	movwf	??i1_lcd_add
  8461  14ED  3006               	movlw	6
  8462  14EE                     u339_25:	
  8463  14EE  1003               	clrc
  8464  14EF  0CF0               	rrf	??i1_lcd_add,f
  8465  14F0  3EFF               	addlw	-1
  8466  14F1  1D03               	skipz
  8467  14F2  2CEE               	goto	u339_25
  8468  14F3  137D               	bcf	_bit6/(0+8),_bit6& (0+7)
  8469  14F4  1870               	btfsc	??i1_lcd_add,0
  8470  14F5  177D               	bsf	_bit6/(0+8),_bit6& (0+7)
  8471                           
  8472                           ;lcdv2.h: 239: bit7 = lcd_data>>7;
  8473  14F6  1283               	bcf	3,5	;RP0=0, select bank0
  8474  14F7  1303               	bcf	3,6	;RP1=0, select bank0
  8475  14F8  0856               	movf	_lcd_data,w
  8476  14F9  00F0               	movwf	??i1_lcd_add
  8477  14FA  3007               	movlw	7
  8478  14FB                     u341_25:	
  8479  14FB  1003               	clrc
  8480  14FC  0CF0               	rrf	??i1_lcd_add,f
  8481  14FD  3EFF               	addlw	-1
  8482  14FE  1D03               	skipz
  8483  14FF  2CFB               	goto	u341_25
  8484  1500  1258               	bcf	_bit7/(0+8),_bit7& (0+7)
  8485  1501  1870               	btfsc	??i1_lcd_add,0
  8486  1502  1658               	bsf	_bit7/(0+8),_bit7& (0+7)
  8487                           
  8488                           ;lcdv2.h: 241: RC3 = 0;
  8489  1503  1283               	bcf	3,5	;RP0=0, select bank0
  8490  1504  1303               	bcf	3,6	;RP1=0, select bank0
  8491  1505  1187               	bcf	7,3	;volatile
  8492                           
  8493                           ;lcdv2.h: 242: _delay(1);
  8494  1506  0000               	nop
  8495                           
  8496                           ;lcdv2.h: 243: RC3 = 1;
  8497  1507  1283               	bcf	3,5	;RP0=0, select bank0
  8498  1508  1303               	bcf	3,6	;RP1=0, select bank0
  8499  1509  1587               	bsf	7,3	;volatile
  8500                           
  8501                           ;lcdv2.h: 244: _delay(1);
  8502  150A  0000               	nop
  8503                           
  8504                           ;lcdv2.h: 246: RC1 = bit4;
  8505  150B  1E7D               	btfss	_bit4/(0+8),_bit4& (0+7)
  8506  150C  2D11               	goto	u343_20
  8507  150D  1283               	bcf	3,5	;RP0=0, select bank0
  8508  150E  1303               	bcf	3,6	;RP1=0, select bank0
  8509  150F  1487               	bsf	7,1	;volatile
  8510  1510  2D14               	goto	i1l3259
  8511  1511                     u343_20:	
  8512  1511  1283               	bcf	3,5	;RP0=0, select bank0
  8513  1512  1303               	bcf	3,6	;RP1=0, select bank0
  8514  1513  1087               	bcf	7,1	;volatile
  8515  1514                     i1l3259:	
  8516                           
  8517                           ;lcdv2.h: 247: RD0 = bit5;
  8518  1514  1EFD               	btfss	_bit5/(0+8),_bit5& (0+7)
  8519  1515  2D1A               	goto	u345_20
  8520  1516  1283               	bcf	3,5	;RP0=0, select bank0
  8521  1517  1303               	bcf	3,6	;RP1=0, select bank0
  8522  1518  1408               	bsf	8,0	;volatile
  8523  1519  2D1D               	goto	i1l3261
  8524  151A                     u345_20:	
  8525  151A  1283               	bcf	3,5	;RP0=0, select bank0
  8526  151B  1303               	bcf	3,6	;RP1=0, select bank0
  8527  151C  1008               	bcf	8,0	;volatile
  8528  151D                     i1l3261:	
  8529                           
  8530                           ;lcdv2.h: 248: RC0 = bit6;
  8531  151D  1F7D               	btfss	_bit6/(0+8),_bit6& (0+7)
  8532  151E  2D23               	goto	u347_20
  8533  151F  1283               	bcf	3,5	;RP0=0, select bank0
  8534  1520  1303               	bcf	3,6	;RP1=0, select bank0
  8535  1521  1407               	bsf	7,0	;volatile
  8536  1522  2D26               	goto	i1l3263
  8537  1523                     u347_20:	
  8538  1523  1283               	bcf	3,5	;RP0=0, select bank0
  8539  1524  1303               	bcf	3,6	;RP1=0, select bank0
  8540  1525  1007               	bcf	7,0	;volatile
  8541  1526                     i1l3263:	
  8542                           
  8543                           ;lcdv2.h: 249: RD1 = bit7;
  8544  1526  1E58               	btfss	_bit7/(0+8),_bit7& (0+7)
  8545  1527  2D2C               	goto	u349_20
  8546  1528  1283               	bcf	3,5	;RP0=0, select bank0
  8547  1529  1303               	bcf	3,6	;RP1=0, select bank0
  8548  152A  1488               	bsf	8,1	;volatile
  8549  152B  2D2F               	goto	i1l3265
  8550  152C                     u349_20:	
  8551  152C  1283               	bcf	3,5	;RP0=0, select bank0
  8552  152D  1303               	bcf	3,6	;RP1=0, select bank0
  8553  152E  1088               	bcf	8,1	;volatile
  8554  152F                     i1l3265:	
  8555                           
  8556                           ;lcdv2.h: 251: _delay(1);
  8557  152F  0000               	nop
  8558                           
  8559                           ;lcdv2.h: 252: RC3 = 0;
  8560  1530  1283               	bcf	3,5	;RP0=0, select bank0
  8561  1531  1303               	bcf	3,6	;RP1=0, select bank0
  8562  1532  1187               	bcf	7,3	;volatile
  8563                           
  8564                           ;lcdv2.h: 253: _delay(1);
  8565  1533  0000               	nop
  8566                           
  8567                           ;lcdv2.h: 257: RC3 = 0;
  8568  1534  1283               	bcf	3,5	;RP0=0, select bank0
  8569  1535  1303               	bcf	3,6	;RP1=0, select bank0
  8570  1536  1187               	bcf	7,3	;volatile
  8571                           
  8572                           ;lcdv2.h: 258: _delay(1);
  8573  1537  0000               	nop
  8574                           
  8575                           ;lcdv2.h: 259: RC3 = 1;
  8576  1538  1283               	bcf	3,5	;RP0=0, select bank0
  8577  1539  1303               	bcf	3,6	;RP1=0, select bank0
  8578  153A  1587               	bsf	7,3	;volatile
  8579                           
  8580                           ;lcdv2.h: 260: _delay(1);
  8581  153B  0000               	nop
  8582                           
  8583                           ;lcdv2.h: 262: RC1 = bit0;
  8584  153C  1C7D               	btfss	_bit0/(0+8),_bit0& (0+7)
  8585  153D  2D42               	goto	u351_20
  8586  153E  1283               	bcf	3,5	;RP0=0, select bank0
  8587  153F  1303               	bcf	3,6	;RP1=0, select bank0
  8588  1540  1487               	bsf	7,1	;volatile
  8589  1541  2D45               	goto	i1l3281
  8590  1542                     u351_20:	
  8591  1542  1283               	bcf	3,5	;RP0=0, select bank0
  8592  1543  1303               	bcf	3,6	;RP1=0, select bank0
  8593  1544  1087               	bcf	7,1	;volatile
  8594  1545                     i1l3281:	
  8595                           
  8596                           ;lcdv2.h: 263: RD0 = bit1;
  8597  1545  1CFD               	btfss	_bit1/(0+8),_bit1& (0+7)
  8598  1546  2D4B               	goto	u353_20
  8599  1547  1283               	bcf	3,5	;RP0=0, select bank0
  8600  1548  1303               	bcf	3,6	;RP1=0, select bank0
  8601  1549  1408               	bsf	8,0	;volatile
  8602  154A  2D4E               	goto	i1l3283
  8603  154B                     u353_20:	
  8604  154B  1283               	bcf	3,5	;RP0=0, select bank0
  8605  154C  1303               	bcf	3,6	;RP1=0, select bank0
  8606  154D  1008               	bcf	8,0	;volatile
  8607  154E                     i1l3283:	
  8608                           
  8609                           ;lcdv2.h: 264: RC0 = bit2;
  8610  154E  1D7D               	btfss	_bit2/(0+8),_bit2& (0+7)
  8611  154F  2D54               	goto	u355_20
  8612  1550  1283               	bcf	3,5	;RP0=0, select bank0
  8613  1551  1303               	bcf	3,6	;RP1=0, select bank0
  8614  1552  1407               	bsf	7,0	;volatile
  8615  1553  2D57               	goto	i1l3285
  8616  1554                     u355_20:	
  8617  1554  1283               	bcf	3,5	;RP0=0, select bank0
  8618  1555  1303               	bcf	3,6	;RP1=0, select bank0
  8619  1556  1007               	bcf	7,0	;volatile
  8620  1557                     i1l3285:	
  8621                           
  8622                           ;lcdv2.h: 265: RD1 = bit3;
  8623  1557  1DFD               	btfss	_bit3/(0+8),_bit3& (0+7)
  8624  1558  2D5D               	goto	u357_20
  8625  1559  1283               	bcf	3,5	;RP0=0, select bank0
  8626  155A  1303               	bcf	3,6	;RP1=0, select bank0
  8627  155B  1488               	bsf	8,1	;volatile
  8628  155C  2D60               	goto	i1l3287
  8629  155D                     u357_20:	
  8630  155D  1283               	bcf	3,5	;RP0=0, select bank0
  8631  155E  1303               	bcf	3,6	;RP1=0, select bank0
  8632  155F  1088               	bcf	8,1	;volatile
  8633  1560                     i1l3287:	
  8634                           
  8635                           ;lcdv2.h: 267: _delay(1);
  8636  1560  0000               	nop
  8637                           
  8638                           ;lcdv2.h: 268: RC3 = 0;
  8639  1561  1283               	bcf	3,5	;RP0=0, select bank0
  8640  1562  1303               	bcf	3,6	;RP1=0, select bank0
  8641  1563  1187               	bcf	7,3	;volatile
  8642                           
  8643                           ;lcdv2.h: 269: _delay(1);
  8644  1564  0000               	nop
  8645  1565  0008               	return
  8646  1566                     __end_ofi1_lcd_add:	
  8647  007E                     btemp	set	126	;btemp
  8648  007E                     wtemp	set	126
  8649  007E                     wtemp0	set	126
  8650  0080                     wtemp1	set	128
  8651  0082                     wtemp2	set	130
  8652  0084                     wtemp3	set	132
  8653  0086                     wtemp4	set	134
  8654  0088                     wtemp5	set	136
  8655  007F                     wtemp6	set	127
  8656  007E                     ttemp	set	126
  8657  007E                     ttemp0	set	126
  8658  0081                     ttemp1	set	129
  8659  0084                     ttemp2	set	132
  8660  0087                     ttemp3	set	135
  8661  007F                     ttemp4	set	127
  8662  007E                     ltemp	set	126
  8663  007E                     ltemp0	set	126
  8664  0082                     ltemp1	set	130
  8665  0086                     ltemp2	set	134
  8666  0080                     ltemp3	set	128
  8667  1566                     __ptext49:	
  8668 ;; *************** function i1_position *****************
  8669 ;; Defined at:
  8670 ;;		line 210 in file "lcdv2.h"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;  row             1    wreg     unsigned char 
  8673 ;;  collum          1    1[COMMON] unsigned char 
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;  row             1    5[COMMON] unsigned char 
  8676 ;;  position        1    4[COMMON] unsigned char 
  8677 ;; Return value:  Size  Location     Type
  8678 ;;		None               void
  8679 ;; Registers used:
  8680 ;;		wreg, status,2, status,0, pclath, cstack
  8681 ;; Tracked objects:
  8682 ;;		On entry : 200/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8686 ;;      Params:         1       0       0       0       0
  8687 ;;      Locals:         2       0       0       0       0
  8688 ;;      Temps:          2       0       0       0       0
  8689 ;;      Totals:         5       0       0       0       0
  8690 ;;Total ram usage:        5 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    1
  8693 ;; This function calls:
  8694 ;;		i1_lcd_add
  8695 ;; This function is called by:
  8696 ;;		i1_LCD_print_char
  8697 ;; This function uses a non-reentrant model
  8698 ;;
  8699                           
  8700                           
  8701                           ;psect for function i1_position
  8702  1566                     i1_position:	
  8703                           
  8704                           ;incstack = 0
  8705                           ; Regs used in i1_position: [wreg+status,2+status,0+pclath+cstack]
  8706                           ;i1position@row stored from wreg
  8707  1566  00F5               	movwf	i1position@row
  8708                           
  8709                           ;lcdv2.h: 212: char post ;
  8710                           ;lcdv2.h: 213: if( row == 1 ) row = 128;
  8711  1567  0B75               	decfsz	i1position@row,w
  8712  1568  2D6B               	goto	i1l3527
  8713  1569  3080               	movlw	128
  8714  156A  00F5               	movwf	i1position@row
  8715  156B                     i1l3527:	
  8716                           
  8717                           ;lcdv2.h: 214: if( row == 2 ) row = 192;
  8718  156B  3002               	movlw	2
  8719  156C  0675               	xorwf	i1position@row,w
  8720  156D  1D03               	btfss	3,2
  8721  156E  2D71               	goto	i1l3531
  8722  156F  30C0               	movlw	192
  8723  1570  00F5               	movwf	i1position@row
  8724  1571                     i1l3531:	
  8725                           
  8726                           ;lcdv2.h: 215: post = row + collum - 1;
  8727  1571  0871               	movf	i1position@collum,w
  8728  1572  0775               	addwf	i1position@row,w
  8729  1573  3EFF               	addlw	255
  8730  1574  00F4               	movwf	i1position@post
  8731                           
  8732                           ;lcdv2.h: 216: RC2 = 0;
  8733  1575  1283               	bcf	3,5	;RP0=0, select bank0
  8734  1576  1107               	bcf	7,2	;volatile
  8735                           
  8736                           ;lcdv2.h: 217: _delay(20);
  8737  1577  3006               	movlw	6
  8738  1578  00F2               	movwf	??i1_position
  8739  1579                     u912_27:	
  8740  1579  0BF2               	decfsz	??i1_position,f
  8741  157A  2D79               	goto	u912_27
  8742  157B  0000               	nop
  8743                           
  8744                           ;lcdv2.h: 218: lcd_data = post ;
  8745  157C  0874               	movf	i1position@post,w
  8746  157D  1283               	bcf	3,5	;RP0=0, select bank0
  8747  157E  1303               	bcf	3,6	;RP1=0, select bank0
  8748  157F  00D6               	movwf	_lcd_data
  8749                           
  8750                           ;lcdv2.h: 219: lcd_add();
  8751  1580  24AB  160A  118A   	fcall	i1_lcd_add
  8752                           
  8753                           ;lcdv2.h: 220: _delay((unsigned long)((10)*(4000000/4000.0)));
  8754  1583  300D               	movlw	13
  8755  1584  00F3               	movwf	??i1_position+1
  8756  1585  30FB               	movlw	251
  8757  1586  00F2               	movwf	??i1_position
  8758  1587                     u913_27:	
  8759  1587  0BF2               	decfsz	??i1_position,f
  8760  1588  2D87               	goto	u913_27
  8761  1589  0BF3               	decfsz	??i1_position+1,f
  8762  158A  2D87               	goto	u913_27
  8763  158B  2D8C               	nop2
  8764  158C  0008               	return
  8765  158D                     __end_ofi1_position:	
  8766                           
  8767                           	psect	intentry
  8768  0004                     __pintentry:	
  8769                           ;incstack = 0
  8770 ;; hardware stack exceeded
  8771                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8772                           
  8773  0004                     interrupt_function:	
  8774  007E                     saved_w	set	btemp
  8775  0004  00FE               	movwf	btemp
  8776  0005  0E03               	swapf	3,w
  8777  0006  1283               	bcf	3,5	;RP0=0, select bank0
  8778  0007  1303               	bcf	3,6	;RP1=0, select bank0
  8779  0008  00A2               	movwf	??_isr
  8780  0009  0804               	movf	4,w
  8781  000A  00A3               	movwf	??_isr+1
  8782  000B  080A               	movf	10,w
  8783  000C  00A4               	movwf	??_isr+2
  8784  000D  160A  118A  2B31   	ljmp	_isr
  8785                           
  8786                           	psect	maintext_split_1
  8787  0A42                     l6507:	
  8788                           
  8789                           ;Automated Solar Panel Orientation Setter.c: 188: }
  8790                           ;Automated Solar Panel Orientation Setter.c: 189: }
  8791                           ;Automated Solar Panel Orientation Setter.c: 190: }
  8792                           ;Automated Solar Panel Orientation Setter.c: 191: }
  8793                           ;Automated Solar Panel Orientation Setter.c: 192: }
  8794                           ;Automated Solar Panel Orientation Setter.c: 193: }
  8795                           ;Automated Solar Panel Orientation Setter.c: 194: }
  8796                           ;Automated Solar Panel Orientation Setter.c: 195: }
  8797                           ;Automated Solar Panel Orientation Setter.c: 196: hour = newTimeHr;
  8798  0A42  1683               	bsf	3,5	;RP0=1, select bank1
  8799  0A43  0850               	movf	(main@newTimeHr+1)^(0+128),w
  8800  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  8801  0A45  00D2               	movwf	_hour+1
  8802  0A46  1683               	bsf	3,5	;RP0=1, select bank1
  8803  0A47  084F               	movf	main@newTimeHr^(0+128),w
  8804  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  8805  0A49  00D1               	movwf	_hour
  8806                           
  8807                           ;Automated Solar Panel Orientation Setter.c: 197: minute = newTimeMin;
  8808  0A4A  1683               	bsf	3,5	;RP0=1, select bank1
  8809  0A4B  0852               	movf	(main@newTimeMin+1)^(0+128),w
  8810  0A4C  00BE               	movwf	(_minute+1)^(0+128)
  8811  0A4D  0851               	movf	main@newTimeMin^(0+128),w
  8812  0A4E  00BD               	movwf	_minute^(0+128)
  8813                           
  8814                           ;Automated Solar Panel Orientation Setter.c: 198: state = 1;
  8815  0A4F  1283               	bcf	3,5	;RP0=0, select bank0
  8816  0A50  01D7               	clrf	_state
  8817  0A51  0AD7               	incf	_state,f
  8818                           
  8819                           ;Automated Solar Panel Orientation Setter.c: 201: TimeBlink_on = 1;
  8820  0A52  1558               	bsf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  8821                           
  8822                           ;Automated Solar Panel Orientation Setter.c: 202: LCDTimeUpdate();
  8823  0A53  120A  158A  2062  120A  158A  	fcall	_LCDTimeUpdate
  8824                           
  8825                           ;Automated Solar Panel Orientation Setter.c: 203: break;
  8826  0A58  120A  118A  2DDE   	goto	l6933
  8827  0A5B                     l6515:	
  8828                           
  8829                           ;Automated Solar Panel Orientation Setter.c: 206: clr_display();
  8830  0A5B  120A  158A  2046  120A  158A  	fcall	_clr_display
  8831  0A60  3001               	movlw	1
  8832                           
  8833                           ;Automated Solar Panel Orientation Setter.c: 207: TimeBlink_on = 0;
  8834  0A61  1158               	bcf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  8835                           
  8836                           ;Automated Solar Panel Orientation Setter.c: 208: position(1,1);
  8837  0A62  01A6               	clrf	position@collum
  8838  0A63  0AA6               	incf	position@collum,f
  8839  0A64  120A  158A  221A  120A  158A  	fcall	_position
  8840                           
  8841                           ;Automated Solar Panel Orientation Setter.c: 209: printf("Time  - 06:00   ");
  8842  0A69  3048               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  8843  0A6A  120A  158A  201B  120A  158A  	fcall	_printf
  8844  0A6F  3002               	movlw	2
  8845                           
  8846                           ;Automated Solar Panel Orientation Setter.c: 210: position(2,1);
  8847  0A70  01A6               	clrf	position@collum
  8848  0A71  0AA6               	incf	position@collum,f
  8849  0A72  120A  158A  221A  120A  158A  	fcall	_position
  8850                           
  8851                           ;Automated Solar Panel Orientation Setter.c: 211: printf("Angle - 000D    ");
  8852  0A77  3037               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  8853  0A78  120A  158A  201B  120A  158A  	fcall	_printf
  8854                           
  8855                           ;Automated Solar Panel Orientation Setter.c: 212: state = 42;
  8856  0A7D  302A               	movlw	42
  8857  0A7E  120A  118A  2DDD   	goto	L1
  8858  0A81                     l504:	
  8859                           ;Automated Solar Panel Orientation Setter.c: 215: case 42:
  8860                           
  8861                           ;Automated Solar Panel Orientation Setter.c: 213: break;
  8862                           
  8863  0A81  300C               	movlw	12
  8864                           
  8865                           ;Automated Solar Panel Orientation Setter.c: 217: TimeBlink_on = 0;
  8866  0A82  1158               	bcf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  8867                           
  8868                           ;Automated Solar Panel Orientation Setter.c: 219: angleCount = 12;
  8869  0A83  1683               	bsf	3,5	;RP0=1, select bank1
  8870  0A84  00B7               	movwf	_angleCount^(0+128)
  8871  0A85  01B8               	clrf	(_angleCount+1)^(0+128)
  8872                           
  8873                           ;Automated Solar Panel Orientation Setter.c: 220: int angle_old;
  8874                           ;Automated Solar Panel Orientation Setter.c: 221: int angle;
  8875                           ;Automated Solar Panel Orientation Setter.c: 223: angleChanged = 1;
  8876  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  8877  0A87  15D8               	bsf	_angleChanged/(0+8),_angleChanged& (0+7)
  8878                           
  8879                           ;Automated Solar Panel Orientation Setter.c: 225: angle_old = eeprom_read(12-angleCount)
      +                          ;
  8880  0A88  1683               	bsf	3,5	;RP0=1, select bank1
  8881  0A89  0837               	movf	_angleCount^(0+128),w
  8882  0A8A  3C0C               	sublw	12
  8883  0A8B  120A  158A  2000  120A  158A  	fcall	_eeprom_read
  8884  0A90  1683               	bsf	3,5	;RP0=1, select bank1
  8885  0A91  1303               	bcf	3,6	;RP1=0, select bank1
  8886  0A92  00DC               	movwf	main@angle_old^(0+128)
  8887  0A93  3002               	movlw	2
  8888  0A94  01DD               	clrf	(main@angle_old+1)^(0+128)
  8889                           
  8890                           ;Automated Solar Panel Orientation Setter.c: 226: LCD_print_char(2,9,angle_old/100+48);
  8891  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  8892  0A96  00B3               	movwf	LCD_print_char@row
  8893  0A97  3009               	movlw	9
  8894  0A98  01B4               	clrf	LCD_print_char@row+1
  8895  0A99  00B5               	movwf	LCD_print_char@column
  8896  0A9A  3064               	movlw	100
  8897  0A9B  01B6               	clrf	LCD_print_char@column+1
  8898  0A9C  00AB               	movwf	___awdiv@divisor
  8899  0A9D  01AC               	clrf	___awdiv@divisor+1
  8900  0A9E  1683               	bsf	3,5	;RP0=1, select bank1
  8901  0A9F  085D               	movf	(main@angle_old+1)^(0+128),w
  8902  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  8903  0AA1  00AE               	movwf	___awdiv@dividend+1
  8904  0AA2  1683               	bsf	3,5	;RP0=1, select bank1
  8905  0AA3  085C               	movf	main@angle_old^(0+128),w
  8906  0AA4  1283               	bcf	3,5	;RP0=0, select bank0
  8907  0AA5  00AD               	movwf	___awdiv@dividend
  8908  0AA6  120A  158A  271E  120A  158A  	fcall	___awdiv
  8909  0AAB  082B               	movf	?___awdiv,w
  8910  0AAC  3E30               	addlw	48
  8911  0AAD  00B7               	movwf	LCD_print_char@print_value
  8912  0AAE  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  8913                           
  8914                           ;Automated Solar Panel Orientation Setter.c: 227: LCD_print_char(2,10,angle_old%100/10+4
      +                          8);
  8915  0AB3  3002               	movlw	2
  8916  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  8917  0AB5  1303               	bcf	3,6	;RP1=0, select bank0
  8918  0AB6  00B3               	movwf	LCD_print_char@row
  8919  0AB7  300A               	movlw	10
  8920  0AB8  01B4               	clrf	LCD_print_char@row+1
  8921  0AB9  00B5               	movwf	LCD_print_char@column
  8922  0ABA  01B6               	clrf	LCD_print_char@column+1
  8923  0ABB  00AB               	movwf	___awdiv@divisor
  8924  0ABC  01AC               	clrf	___awdiv@divisor+1
  8925  0ABD  1683               	bsf	3,5	;RP0=1, select bank1
  8926  0ABE  085D               	movf	(main@angle_old+1)^(0+128),w
  8927  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
  8928  0AC0  00A8               	movwf	___awmod@dividend+1
  8929  0AC1  1683               	bsf	3,5	;RP0=1, select bank1
  8930  0AC2  085C               	movf	main@angle_old^(0+128),w
  8931  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  8932  0AC4  00A7               	movwf	___awmod@dividend
  8933  0AC5  3064               	movlw	100
  8934  0AC6  00A5               	movwf	___awmod@divisor
  8935  0AC7  01A6               	clrf	___awmod@divisor+1
  8936  0AC8  120A  158A  2763  120A  158A  	fcall	___awmod
  8937  0ACD  0826               	movf	?___awmod+1,w
  8938  0ACE  00AE               	movwf	___awdiv@dividend+1
  8939  0ACF  0825               	movf	?___awmod,w
  8940  0AD0  00AD               	movwf	___awdiv@dividend
  8941  0AD1  120A  158A  271E  120A  158A  	fcall	___awdiv
  8942  0AD6  082B               	movf	?___awdiv,w
  8943  0AD7  3E30               	addlw	48
  8944  0AD8  00B7               	movwf	LCD_print_char@print_value
  8945  0AD9  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  8946                           
  8947                           ;Automated Solar Panel Orientation Setter.c: 228: LCD_print_char(2,11,angle_old%100%10+4
      +                          8);
  8948  0ADE  1683               	bsf	3,5	;RP0=1, select bank1
  8949  0ADF  1303               	bcf	3,6	;RP1=0, select bank1
  8950  0AE0  085D               	movf	(main@angle_old+1)^(0+128),w
  8951  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  8952  0AE2  00A8               	movwf	___awmod@dividend+1
  8953  0AE3  1683               	bsf	3,5	;RP0=1, select bank1
  8954  0AE4  085C               	movf	main@angle_old^(0+128),w
  8955  0AE5  1283               	bcf	3,5	;RP0=0, select bank0
  8956  0AE6  00A7               	movwf	___awmod@dividend
  8957  0AE7  3064               	movlw	100
  8958  0AE8  00A5               	movwf	___awmod@divisor
  8959  0AE9  01A6               	clrf	___awmod@divisor+1
  8960  0AEA  120A  158A  2763  120A  158A  	fcall	___awmod
  8961  0AEF  0826               	movf	?___awmod+1,w
  8962  0AF0  1683               	bsf	3,5	;RP0=1, select bank1
  8963  0AF1  00DB               	movwf	(_main$814+1)^(0+128)
  8964  0AF2  1283               	bcf	3,5	;RP0=0, select bank0
  8965  0AF3  0825               	movf	?___awmod,w
  8966  0AF4  1683               	bsf	3,5	;RP0=1, select bank1
  8967  0AF5  00DA               	movwf	_main$814^(0+128)
  8968                           
  8969                           ;Automated Solar Panel Orientation Setter.c: 228: LCD_print_char(2,11,angle_old%100%10+4
      +                          8);
  8970  0AF6  3002               	movlw	2
  8971  0AF7  1283               	bcf	3,5	;RP0=0, select bank0
  8972  0AF8  00B3               	movwf	LCD_print_char@row
  8973  0AF9  300B               	movlw	11
  8974  0AFA  01B4               	clrf	LCD_print_char@row+1
  8975  0AFB  00B5               	movwf	LCD_print_char@column
  8976  0AFC  300A               	movlw	10
  8977  0AFD  01B6               	clrf	LCD_print_char@column+1
  8978  0AFE  00A5               	movwf	___awmod@divisor
  8979  0AFF  01A6               	clrf	___awmod@divisor+1
  8980  0B00  1683               	bsf	3,5	;RP0=1, select bank1
  8981  0B01  085B               	movf	(_main$814+1)^(0+128),w
  8982  0B02  1283               	bcf	3,5	;RP0=0, select bank0
  8983  0B03  00A8               	movwf	___awmod@dividend+1
  8984  0B04  1683               	bsf	3,5	;RP0=1, select bank1
  8985  0B05  085A               	movf	_main$814^(0+128),w
  8986  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  8987  0B07  00A7               	movwf	___awmod@dividend
  8988  0B08  120A  158A  2763  120A  158A  	fcall	___awmod
  8989  0B0D  0825               	movf	?___awmod,w
  8990  0B0E  3E30               	addlw	48
  8991  0B0F  00B7               	movwf	LCD_print_char@print_value
  8992  0B10  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  8993  0B15                     l6591:	
  8994                           ;Automated Solar Panel Orientation Setter.c: 230: while(angleCount){
  8995                           
  8996  0B15  1683               	bsf	3,5	;RP0=1, select bank1
  8997  0B16  1303               	bcf	3,6	;RP1=0, select bank1
  8998  0B17  0837               	movf	_angleCount^(0+128),w
  8999  0B18  0438               	iorwf	(_angleCount+1)^(0+128),w
  9000  0B19  160A  158A  1903   	btfsc	3,2
  9001  0B1C  2E02               	goto	l516
  9002                           
  9003                           ;Automated Solar Panel Orientation Setter.c: 231: pressedKey = CheckKeyPad();
  9004  0B1D  160A  118A  2172  120A  158A  	fcall	_CheckKeyPad
  9005  0B22  1683               	bsf	3,5	;RP0=1, select bank1
  9006  0B23  00E0               	movwf	main@pressedKey^(0+128)
  9007                           
  9008                           ;Automated Solar Panel Orientation Setter.c: 232: if( pressedKey>=48 && pressedKey<58 ){
  9009  0B24  3030               	movlw	48
  9010  0B25  0260               	subwf	main@pressedKey^(0+128),w
  9011  0B26  1C03               	skipc
  9012  0B27  2CD3               	goto	l507
  9013  0B28  303A               	movlw	58
  9014  0B29  0260               	subwf	main@pressedKey^(0+128),w
  9015  0B2A  1803               	skipnc
  9016  0B2B  2CD3               	goto	l507
  9017                           
  9018                           ;Automated Solar Panel Orientation Setter.c: 233: LCD_print_char(2,9,pressedKey);
  9019  0B2C  3002               	movlw	2
  9020  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  9021  0B2E  00B3               	movwf	LCD_print_char@row
  9022  0B2F  3009               	movlw	9
  9023  0B30  01B4               	clrf	LCD_print_char@row+1
  9024  0B31  00B5               	movwf	LCD_print_char@column
  9025  0B32  01B6               	clrf	LCD_print_char@column+1
  9026  0B33  1683               	bsf	3,5	;RP0=1, select bank1
  9027  0B34  0860               	movf	main@pressedKey^(0+128),w
  9028  0B35  1283               	bcf	3,5	;RP0=0, select bank0
  9029  0B36  00B7               	movwf	LCD_print_char@print_value
  9030  0B37  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  9031                           
  9032                           ;Automated Solar Panel Orientation Setter.c: 234: angle = (pressedKey-48)*100;
  9033  0B3C  1683               	bsf	3,5	;RP0=1, select bank1
  9034  0B3D  1303               	bcf	3,6	;RP1=0, select bank1
  9035  0B3E  0860               	movf	main@pressedKey^(0+128),w
  9036  0B3F  1283               	bcf	3,5	;RP0=0, select bank0
  9037  0B40  00A5               	movwf	___wmul@multiplier
  9038  0B41  30D0               	movlw	-48
  9039  0B42  01A6               	clrf	___wmul@multiplier+1
  9040  0B43  07A5               	addwf	___wmul@multiplier,f
  9041  0B44  1C03               	skipc
  9042  0B45  03A6               	decf	___wmul@multiplier+1,f
  9043  0B46  3064               	movlw	100
  9044  0B47  00A7               	movwf	___wmul@multiplicand
  9045  0B48  01A8               	clrf	___wmul@multiplicand+1
  9046  0B49  160A  118A  26B8  120A  158A  	fcall	___wmul
  9047  0B4E  0826               	movf	?___wmul+1,w
  9048  0B4F  1683               	bsf	3,5	;RP0=1, select bank1
  9049  0B50  00D7               	movwf	(main@angle+1)^(0+128)
  9050  0B51  1283               	bcf	3,5	;RP0=0, select bank0
  9051  0B52  0825               	movf	?___wmul,w
  9052  0B53  1683               	bsf	3,5	;RP0=1, select bank1
  9053  0B54  00D6               	movwf	main@angle^(0+128)
  9054                           
  9055                           ;Automated Solar Panel Orientation Setter.c: 236: pressedKey = '@';
  9056  0B55  3040               	movlw	64
  9057  0B56  00E0               	movwf	main@pressedKey^(0+128)
  9058  0B57                     l508:	
  9059                           ;Automated Solar Panel Orientation Setter.c: 237: while(angleChanged){
  9060                           
  9061  0B57  1283               	bcf	3,5	;RP0=0, select bank0
  9062  0B58  1DD8               	btfss	_angleChanged/(0+8),_angleChanged& (0+7)
  9063  0B59  2CD3               	goto	l507
  9064                           
  9065                           ;Automated Solar Panel Orientation Setter.c: 238: pressedKey = CheckKeyPad();
  9066  0B5A  160A  118A  2172  120A  158A  	fcall	_CheckKeyPad
  9067  0B5F  1683               	bsf	3,5	;RP0=1, select bank1
  9068  0B60  00E0               	movwf	main@pressedKey^(0+128)
  9069                           
  9070                           ;Automated Solar Panel Orientation Setter.c: 239: if( pressedKey>=48 && pressedKey<58 ){
  9071  0B61  3030               	movlw	48
  9072  0B62  0260               	subwf	main@pressedKey^(0+128),w
  9073  0B63  1C03               	skipc
  9074  0B64  2B57               	goto	l508
  9075  0B65  303A               	movlw	58
  9076  0B66  0260               	subwf	main@pressedKey^(0+128),w
  9077  0B67  1803               	skipnc
  9078  0B68  2B57               	goto	l508
  9079                           
  9080                           ;Automated Solar Panel Orientation Setter.c: 240: LCD_print_char(2,10,pressedKey);
  9081  0B69  3002               	movlw	2
  9082  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  9083  0B6B  00B3               	movwf	LCD_print_char@row
  9084  0B6C  300A               	movlw	10
  9085  0B6D  01B4               	clrf	LCD_print_char@row+1
  9086  0B6E  00B5               	movwf	LCD_print_char@column
  9087  0B6F  01B6               	clrf	LCD_print_char@column+1
  9088  0B70  1683               	bsf	3,5	;RP0=1, select bank1
  9089  0B71  0860               	movf	main@pressedKey^(0+128),w
  9090  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  9091  0B73  00B7               	movwf	LCD_print_char@print_value
  9092  0B74  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  9093                           
  9094                           ;Automated Solar Panel Orientation Setter.c: 241: angle = angle + (pressedKey-48)*10;
  9095  0B79  1683               	bsf	3,5	;RP0=1, select bank1
  9096  0B7A  1303               	bcf	3,6	;RP1=0, select bank1
  9097  0B7B  0860               	movf	main@pressedKey^(0+128),w
  9098  0B7C  1283               	bcf	3,5	;RP0=0, select bank0
  9099  0B7D  00A5               	movwf	___wmul@multiplier
  9100  0B7E  300A               	movlw	10
  9101  0B7F  01A6               	clrf	___wmul@multiplier+1
  9102  0B80  00A7               	movwf	___wmul@multiplicand
  9103  0B81  01A8               	clrf	___wmul@multiplicand+1
  9104  0B82  160A  118A  26B8  120A  158A  	fcall	___wmul
  9105  0B87  1683               	bsf	3,5	;RP0=1, select bank1
  9106  0B88  0856               	movf	main@angle^(0+128),w
  9107  0B89  1283               	bcf	3,5	;RP0=0, select bank0
  9108  0B8A  0725               	addwf	?___wmul,w
  9109  0B8B  00CE               	movwf	??_main
  9110  0B8C  1683               	bsf	3,5	;RP0=1, select bank1
  9111  0B8D  0857               	movf	(main@angle+1)^(0+128),w
  9112  0B8E  1803               	skipnc
  9113  0B8F  0A57               	incf	(main@angle+1)^(0+128),w
  9114  0B90  1283               	bcf	3,5	;RP0=0, select bank0
  9115  0B91  0726               	addwf	?___wmul+1,w
  9116  0B92  00CF               	movwf	??_main+1
  9117  0B93  084E               	movf	??_main,w
  9118  0B94  3E20               	addlw	32
  9119  0B95  1683               	bsf	3,5	;RP0=1, select bank1
  9120  0B96  00D6               	movwf	main@angle^(0+128)
  9121  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  9122  0B98  084F               	movf	??_main+1,w
  9123  0B99  1803               	skipnc
  9124  0B9A  3E01               	addlw	1
  9125  0B9B  3EFE               	addlw	254
  9126  0B9C  1683               	bsf	3,5	;RP0=1, select bank1
  9127  0B9D  00D7               	movwf	(main@angle+1)^(0+128)
  9128  0B9E                     l6557:	
  9129                           ;Automated Solar Panel Orientation Setter.c: 243: while(angleChanged){
  9130                           
  9131                           
  9132                           ;Automated Solar Panel Orientation Setter.c: 242: pressedKey = '@';
  9133  0B9E  3040               	movlw	64
  9134  0B9F  1683               	bsf	3,5	;RP0=1, select bank1
  9135  0BA0  00E0               	movwf	main@pressedKey^(0+128)
  9136  0BA1                     l6589:	
  9137  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  9138  0BA2  1DD8               	btfss	_angleChanged/(0+8),_angleChanged& (0+7)
  9139  0BA3  2B57               	goto	l508
  9140                           
  9141                           ;Automated Solar Panel Orientation Setter.c: 244: pressedKey = CheckKeyPad();
  9142  0BA4  160A  118A  2172  120A  158A  	fcall	_CheckKeyPad
  9143  0BA9  1683               	bsf	3,5	;RP0=1, select bank1
  9144  0BAA  00E0               	movwf	main@pressedKey^(0+128)
  9145                           
  9146                           ;Automated Solar Panel Orientation Setter.c: 245: if( pressedKey>=48 && pressedKey<58 ){
  9147  0BAB  3030               	movlw	48
  9148  0BAC  0260               	subwf	main@pressedKey^(0+128),w
  9149  0BAD  1C03               	skipc
  9150  0BAE  2BA1               	goto	l6589
  9151  0BAF  303A               	movlw	58
  9152  0BB0  0260               	subwf	main@pressedKey^(0+128),w
  9153  0BB1  1803               	skipnc
  9154  0BB2  2BA1               	goto	l6589
  9155                           
  9156                           ;Automated Solar Panel Orientation Setter.c: 246: LCD_print_char(2,11,pressedKey);
  9157  0BB3  3002               	movlw	2
  9158  0BB4  1283               	bcf	3,5	;RP0=0, select bank0
  9159  0BB5  00B3               	movwf	LCD_print_char@row
  9160  0BB6  300B               	movlw	11
  9161  0BB7  01B4               	clrf	LCD_print_char@row+1
  9162  0BB8  00B5               	movwf	LCD_print_char@column
  9163  0BB9  01B6               	clrf	LCD_print_char@column+1
  9164  0BBA  1683               	bsf	3,5	;RP0=1, select bank1
  9165  0BBB  0860               	movf	main@pressedKey^(0+128),w
  9166  0BBC  1283               	bcf	3,5	;RP0=0, select bank0
  9167  0BBD  00B7               	movwf	LCD_print_char@print_value
  9168  0BBE  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  9169                           
  9170                           ;Automated Solar Panel Orientation Setter.c: 248: LCD_print_char(1,9,(48+(7+12-angleCoun
      +                          t)/10));
  9171  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  9172  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  9173  0BC5  3009               	movlw	9
  9174  0BC6  01B3               	clrf	LCD_print_char@row
  9175  0BC7  0AB3               	incf	LCD_print_char@row,f
  9176  0BC8  01B4               	clrf	LCD_print_char@row+1
  9177  0BC9  00B5               	movwf	LCD_print_char@column
  9178  0BCA  3013               	movlw	19
  9179  0BCB  01B6               	clrf	LCD_print_char@column+1
  9180  0BCC  00AD               	movwf	___awdiv@dividend
  9181  0BCD  01AE               	clrf	___awdiv@dividend+1
  9182  0BCE  1683               	bsf	3,5	;RP0=1, select bank1
  9183  0BCF  0837               	movf	_angleCount^(0+128),w
  9184  0BD0  1283               	bcf	3,5	;RP0=0, select bank0
  9185  0BD1  02AD               	subwf	___awdiv@dividend,f
  9186  0BD2  1683               	bsf	3,5	;RP0=1, select bank1
  9187  0BD3  0838               	movf	(_angleCount+1)^(0+128),w
  9188  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  9189  0BD5  1C03               	skipc
  9190  0BD6  03AE               	decf	___awdiv@dividend+1,f
  9191  0BD7  02AE               	subwf	___awdiv@dividend+1,f
  9192  0BD8  300A               	movlw	10
  9193  0BD9  00AB               	movwf	___awdiv@divisor
  9194  0BDA  01AC               	clrf	___awdiv@divisor+1
  9195  0BDB  120A  158A  271E  120A  158A  	fcall	___awdiv
  9196  0BE0  082B               	movf	?___awdiv,w
  9197  0BE1  3E30               	addlw	48
  9198  0BE2  00B7               	movwf	LCD_print_char@print_value
  9199  0BE3  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  9200                           
  9201                           ;Automated Solar Panel Orientation Setter.c: 249: LCD_print_char(1,10,(48+(7+12-angleCou
      +                          nt)%10));
  9202  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  9203  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  9204  0BEA  300A               	movlw	10
  9205  0BEB  01B3               	clrf	LCD_print_char@row
  9206  0BEC  0AB3               	incf	LCD_print_char@row,f
  9207  0BED  01B4               	clrf	LCD_print_char@row+1
  9208  0BEE  00B5               	movwf	LCD_print_char@column
  9209  0BEF  3013               	movlw	19
  9210  0BF0  01B6               	clrf	LCD_print_char@column+1
  9211  0BF1  00A7               	movwf	___awmod@dividend
  9212  0BF2  01A8               	clrf	___awmod@dividend+1
  9213  0BF3  1683               	bsf	3,5	;RP0=1, select bank1
  9214  0BF4  0837               	movf	_angleCount^(0+128),w
  9215  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  9216  0BF6  02A7               	subwf	___awmod@dividend,f
  9217  0BF7  1683               	bsf	3,5	;RP0=1, select bank1
  9218  0BF8  0838               	movf	(_angleCount+1)^(0+128),w
  9219  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  9220  0BFA  1C03               	skipc
  9221  0BFB  03A8               	decf	___awmod@dividend+1,f
  9222  0BFC  02A8               	subwf	___awmod@dividend+1,f
  9223  0BFD  300A               	movlw	10
  9224  0BFE  00A5               	movwf	___awmod@divisor
  9225  0BFF  01A6               	clrf	___awmod@divisor+1
  9226  0C00  120A  158A  2763  120A  158A  	fcall	___awmod
  9227  0C05  0825               	movf	?___awmod,w
  9228  0C06  3E30               	addlw	48
  9229  0C07  00B7               	movwf	LCD_print_char@print_value
  9230  0C08  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  9231                           
  9232                           ;Automated Solar Panel Orientation Setter.c: 251: _delay((unsigned long)((1000)*(4000000
      +                          /4000.0)));
  9233  0C0D  3006               	movlw	6
  9234  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  9235  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  9236  0C10  00D0               	movwf	??_main+2
  9237  0C11  3013               	movlw	19
  9238  0C12  00CF               	movwf	??_main+1
  9239  0C13  30B1               	movlw	177
  9240  0C14  00CE               	movwf	??_main
  9241  0C15                     u8577:	
  9242  0C15  0BCE               	decfsz	??_main,f
  9243  0C16  2C15               	goto	u8577
  9244  0C17  0BCF               	decfsz	??_main+1,f
  9245  0C18  2C15               	goto	u8577
  9246  0C19  0BD0               	decfsz	??_main+2,f
  9247  0C1A  2C15               	goto	u8577
  9248  0C1B  2C1C               	nop2
  9249                           
  9250                           ;Automated Solar Panel Orientation Setter.c: 253: angle = angle + (pressedKey-48);
  9251  0C1C  1683               	bsf	3,5	;RP0=1, select bank1
  9252  0C1D  1303               	bcf	3,6	;RP1=0, select bank1
  9253  0C1E  0860               	movf	main@pressedKey^(0+128),w
  9254  0C1F  0756               	addwf	main@angle^(0+128),w
  9255  0C20  1283               	bcf	3,5	;RP0=0, select bank0
  9256  0C21  00CE               	movwf	??_main
  9257  0C22  1683               	bsf	3,5	;RP0=1, select bank1
  9258  0C23  0857               	movf	(main@angle+1)^(0+128),w
  9259  0C24  1803               	skipnc
  9260  0C25  0A57               	incf	(main@angle+1)^(0+128),w
  9261  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  9262  0C27  00CF               	movwf	??_main+1
  9263  0C28  084E               	movf	??_main,w
  9264  0C29  3ED0               	addlw	208
  9265  0C2A  1683               	bsf	3,5	;RP0=1, select bank1
  9266  0C2B  00D6               	movwf	main@angle^(0+128)
  9267  0C2C  1283               	bcf	3,5	;RP0=0, select bank0
  9268  0C2D  084F               	movf	??_main+1,w
  9269  0C2E  1803               	skipnc
  9270  0C2F  3E01               	addlw	1
  9271  0C30  3EFF               	addlw	255
  9272  0C31  1683               	bsf	3,5	;RP0=1, select bank1
  9273  0C32  00D7               	movwf	(main@angle+1)^(0+128)
  9274                           
  9275                           ;Automated Solar Panel Orientation Setter.c: 254: eeprom_write(12-angleCount, angle );
  9276  0C33  0856               	movf	main@angle^(0+128),w
  9277  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  9278  0C35  00A8               	movwf	eeprom_write@value
  9279  0C36  1683               	bsf	3,5	;RP0=1, select bank1
  9280  0C37  0837               	movf	_angleCount^(0+128),w
  9281  0C38  3C0C               	sublw	12
  9282  0C39  120A  118A  27DA  120A  158A  	fcall	_eeprom_write
  9283                           
  9284                           ;Automated Solar Panel Orientation Setter.c: 255: angleCount--;
  9285  0C3E  30FF               	movlw	-1
  9286  0C3F  1303               	bcf	3,6	;RP1=0, select bank1
  9287  0C40  07B7               	addwf	_angleCount^(0+128),f
  9288  0C41  1C03               	skipc
  9289  0C42  03B8               	decf	(_angleCount+1)^(0+128),f
  9290                           
  9291                           ;Automated Solar Panel Orientation Setter.c: 257: angle_old = eeprom_read(12-angleCount)
      +                          ;
  9292  0C43  0837               	movf	_angleCount^(0+128),w
  9293  0C44  3C0C               	sublw	12
  9294  0C45  120A  158A  2000  120A  158A  	fcall	_eeprom_read
  9295  0C4A  1683               	bsf	3,5	;RP0=1, select bank1
  9296  0C4B  1303               	bcf	3,6	;RP1=0, select bank1
  9297  0C4C  00DC               	movwf	main@angle_old^(0+128)
  9298  0C4D  3002               	movlw	2
  9299  0C4E  01DD               	clrf	(main@angle_old+1)^(0+128)
  9300                           
  9301                           ;Automated Solar Panel Orientation Setter.c: 259: LCD_print_char(2,9,angle_old/100+48);
  9302  0C4F  1283               	bcf	3,5	;RP0=0, select bank0
  9303  0C50  00B3               	movwf	LCD_print_char@row
  9304  0C51  3009               	movlw	9
  9305  0C52  01B4               	clrf	LCD_print_char@row+1
  9306  0C53  00B5               	movwf	LCD_print_char@column
  9307  0C54  3064               	movlw	100
  9308  0C55  01B6               	clrf	LCD_print_char@column+1
  9309  0C56  00AB               	movwf	___awdiv@divisor
  9310  0C57  01AC               	clrf	___awdiv@divisor+1
  9311  0C58  1683               	bsf	3,5	;RP0=1, select bank1
  9312  0C59  085D               	movf	(main@angle_old+1)^(0+128),w
  9313  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  9314  0C5B  00AE               	movwf	___awdiv@dividend+1
  9315  0C5C  1683               	bsf	3,5	;RP0=1, select bank1
  9316  0C5D  085C               	movf	main@angle_old^(0+128),w
  9317  0C5E  1283               	bcf	3,5	;RP0=0, select bank0
  9318  0C5F  00AD               	movwf	___awdiv@dividend
  9319  0C60  120A  158A  271E  120A  158A  	fcall	___awdiv
  9320  0C65  082B               	movf	?___awdiv,w
  9321  0C66  3E30               	addlw	48
  9322  0C67  00B7               	movwf	LCD_print_char@print_value
  9323  0C68  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  9324                           
  9325                           ;Automated Solar Panel Orientation Setter.c: 260: LCD_print_char(2,10,angle_old%100/10+4
      +                          8);
  9326  0C6D  3002               	movlw	2
  9327  0C6E  1283               	bcf	3,5	;RP0=0, select bank0
  9328  0C6F  1303               	bcf	3,6	;RP1=0, select bank0
  9329  0C70  00B3               	movwf	LCD_print_char@row
  9330  0C71  300A               	movlw	10
  9331  0C72  01B4               	clrf	LCD_print_char@row+1
  9332  0C73  00B5               	movwf	LCD_print_char@column
  9333  0C74  01B6               	clrf	LCD_print_char@column+1
  9334  0C75  00AB               	movwf	___awdiv@divisor
  9335  0C76  01AC               	clrf	___awdiv@divisor+1
  9336  0C77  1683               	bsf	3,5	;RP0=1, select bank1
  9337  0C78  085D               	movf	(main@angle_old+1)^(0+128),w
  9338  0C79  1283               	bcf	3,5	;RP0=0, select bank0
  9339  0C7A  00A8               	movwf	___awmod@dividend+1
  9340  0C7B  1683               	bsf	3,5	;RP0=1, select bank1
  9341  0C7C  085C               	movf	main@angle_old^(0+128),w
  9342  0C7D  1283               	bcf	3,5	;RP0=0, select bank0
  9343  0C7E  00A7               	movwf	___awmod@dividend
  9344  0C7F  3064               	movlw	100
  9345  0C80  00A5               	movwf	___awmod@divisor
  9346  0C81  01A6               	clrf	___awmod@divisor+1
  9347  0C82  120A  158A  2763  120A  158A  	fcall	___awmod
  9348  0C87  0826               	movf	?___awmod+1,w
  9349  0C88  00AE               	movwf	___awdiv@dividend+1
  9350  0C89  0825               	movf	?___awmod,w
  9351  0C8A  00AD               	movwf	___awdiv@dividend
  9352  0C8B  120A  158A  271E  120A  158A  	fcall	___awdiv
  9353  0C90  082B               	movf	?___awdiv,w
  9354  0C91  3E30               	addlw	48
  9355  0C92  00B7               	movwf	LCD_print_char@print_value
  9356  0C93  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  9357                           
  9358                           ;Automated Solar Panel Orientation Setter.c: 261: LCD_print_char(2,11,angle_old%100%10+4
      +                          8);
  9359  0C98  1683               	bsf	3,5	;RP0=1, select bank1
  9360  0C99  1303               	bcf	3,6	;RP1=0, select bank1
  9361  0C9A  085D               	movf	(main@angle_old+1)^(0+128),w
  9362  0C9B  1283               	bcf	3,5	;RP0=0, select bank0
  9363  0C9C  00A8               	movwf	___awmod@dividend+1
  9364  0C9D  1683               	bsf	3,5	;RP0=1, select bank1
  9365  0C9E  085C               	movf	main@angle_old^(0+128),w
  9366  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
  9367  0CA0  00A7               	movwf	___awmod@dividend
  9368  0CA1  3064               	movlw	100
  9369  0CA2  00A5               	movwf	___awmod@divisor
  9370  0CA3  01A6               	clrf	___awmod@divisor+1
  9371  0CA4  120A  158A  2763  120A  158A  	fcall	___awmod
  9372  0CA9  0826               	movf	?___awmod+1,w
  9373  0CAA  1683               	bsf	3,5	;RP0=1, select bank1
  9374  0CAB  00DB               	movwf	(_main$814+1)^(0+128)
  9375  0CAC  1283               	bcf	3,5	;RP0=0, select bank0
  9376  0CAD  0825               	movf	?___awmod,w
  9377  0CAE  1683               	bsf	3,5	;RP0=1, select bank1
  9378  0CAF  00DA               	movwf	_main$814^(0+128)
  9379                           
  9380                           ;Automated Solar Panel Orientation Setter.c: 261: LCD_print_char(2,11,angle_old%100%10+4
      +                          8);
  9381  0CB0  3002               	movlw	2
  9382  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  9383  0CB2  00B3               	movwf	LCD_print_char@row
  9384  0CB3  300B               	movlw	11
  9385  0CB4  01B4               	clrf	LCD_print_char@row+1
  9386  0CB5  00B5               	movwf	LCD_print_char@column
  9387  0CB6  300A               	movlw	10
  9388  0CB7  01B6               	clrf	LCD_print_char@column+1
  9389  0CB8  00A5               	movwf	___awmod@divisor
  9390  0CB9  01A6               	clrf	___awmod@divisor+1
  9391  0CBA  1683               	bsf	3,5	;RP0=1, select bank1
  9392  0CBB  085B               	movf	(_main$814+1)^(0+128),w
  9393  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  9394  0CBD  00A8               	movwf	___awmod@dividend+1
  9395  0CBE  1683               	bsf	3,5	;RP0=1, select bank1
  9396  0CBF  085A               	movf	_main$814^(0+128),w
  9397  0CC0  1283               	bcf	3,5	;RP0=0, select bank0
  9398  0CC1  00A7               	movwf	___awmod@dividend
  9399  0CC2  120A  158A  2763  120A  158A  	fcall	___awmod
  9400  0CC7  0825               	movf	?___awmod,w
  9401  0CC8  3E30               	addlw	48
  9402  0CC9  00B7               	movwf	LCD_print_char@print_value
  9403  0CCA  120A  158A  20F5  120A  158A  	fcall	_LCD_print_char
  9404                           
  9405                           ;Automated Solar Panel Orientation Setter.c: 265: angleChanged = 0;
  9406  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  9407  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  9408  0CD1  11D8               	bcf	_angleChanged/(0+8),_angleChanged& (0+7)
  9409  0CD2  2B9E               	goto	l6557
  9410  0CD3                     l507:	
  9411                           
  9412                           ;Automated Solar Panel Orientation Setter.c: 267: }
  9413                           ;Automated Solar Panel Orientation Setter.c: 268: }
  9414                           ;Automated Solar Panel Orientation Setter.c: 269: }
  9415                           ;Automated Solar Panel Orientation Setter.c: 270: }
  9416                           ;Automated Solar Panel Orientation Setter.c: 271: }
  9417                           ;Automated Solar Panel Orientation Setter.c: 272: angleChanged = 1;
  9418  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  9419  0CD4  15D8               	bsf	_angleChanged/(0+8),_angleChanged& (0+7)
  9420  0CD5  2B15               	goto	l6591
  9421                           
  9422                           	psect	maintext_split_2
  9423  1E02                     l516:	
  9424                           
  9425                           ;Automated Solar Panel Orientation Setter.c: 273: }
  9426                           ;Automated Solar Panel Orientation Setter.c: 275: state = 1;
  9427  1E02  1283               	bcf	3,5	;RP0=0, select bank0
  9428  1E03  01D7               	clrf	_state
  9429  1E04  0AD7               	incf	_state,f
  9430                           
  9431                           ;Automated Solar Panel Orientation Setter.c: 276: TimeBlink_on = 1;
  9432  1E05  1558               	bsf	_TimeBlink_on/(0+8),_TimeBlink_on& (0+7)
  9433  1E06                     L42:	
  9434                           
  9435                           ;Automated Solar Panel Orientation Setter.c: 277: break;
  9436  1E06  120A  118A  2DDE   	goto	l6933
  9437  1E09                     l6593:	
  9438  1E09  3001               	movlw	1
  9439                           
  9440                           ;Automated Solar Panel Orientation Setter.c: 282: position(1,1);
  9441  1E0A  01A6               	clrf	position@collum
  9442  1E0B  0AA6               	incf	position@collum,f
  9443  1E0C  120A  158A  221A  160A  158A  	fcall	_position
  9444                           
  9445                           ;Automated Solar Panel Orientation Setter.c: 283: printf("MODE1,000D,00:00");
  9446  1E11  306A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  9447  1E12  120A  158A  201B  160A  158A  	fcall	_printf
  9448  1E17  3002               	movlw	2
  9449                           
  9450                           ;Automated Solar Panel Orientation Setter.c: 284: position(2,1);
  9451  1E18  01A6               	clrf	position@collum
  9452  1E19  0AA6               	incf	position@collum,f
  9453  1E1A  120A  158A  221A  160A  158A  	fcall	_position
  9454                           
  9455                           ;Automated Solar Panel Orientation Setter.c: 285: printf("00.0V,0.0A,00.0W");
  9456  1E1F  309D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  9457  1E20  120A  158A  201B  160A  158A  	fcall	_printf
  9458                           
  9459                           ;Automated Solar Panel Orientation Setter.c: 286: LCDTimeUpdate();
  9460  1E25  120A  158A  2062  160A  158A  	fcall	_LCDTimeUpdate
  9461                           
  9462                           ;Automated Solar Panel Orientation Setter.c: 289: state = 10;
  9463  1E2A  300A               	movlw	10
  9464  1E2B  120A  118A  2CC8   	goto	L4
  9465  1E2E                     l6603:	
  9466                           ;Automated Solar Panel Orientation Setter.c: 290: break;
  9467                           
  9468                           
  9469                           ;Automated Solar Panel Orientation Setter.c: 293: a2d_read();
  9470  1E2E  160A  118A  2605  160A  158A  	fcall	_a2d_read
  9471                           
  9472                           ;Automated Solar Panel Orientation Setter.c: 295: Serial_Print_Int(ldr1);
  9473  1E33  1683               	bsf	3,5	;RP0=1, select bank1
  9474  1E34  083C               	movf	(_ldr1+1)^(0+128),w
  9475  1E35  1283               	bcf	3,5	;RP0=0, select bank0
  9476  1E36  00B4               	movwf	Serial_Print_Int@val+1
  9477  1E37  1683               	bsf	3,5	;RP0=1, select bank1
  9478  1E38  083B               	movf	_ldr1^(0+128),w
  9479  1E39  1283               	bcf	3,5	;RP0=0, select bank0
  9480  1E3A  00B3               	movwf	Serial_Print_Int@val
  9481  1E3B  120A  158A  24D6  160A  158A  	fcall	_Serial_Print_Int
  9482                           
  9483                           ;Automated Solar Panel Orientation Setter.c: 296: Serial_Print(", ");
  9484  1E40  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9485  1E41  160A  118A  2312  160A  158A  	fcall	_Serial_Print
  9486                           
  9487                           ;Automated Solar Panel Orientation Setter.c: 297: Serial_Print_Int(ldr2);
  9488  1E46  0854               	movf	_ldr2+1,w
  9489  1E47  00B4               	movwf	Serial_Print_Int@val+1
  9490  1E48  0853               	movf	_ldr2,w
  9491  1E49  00B3               	movwf	Serial_Print_Int@val
  9492  1E4A  120A  158A  24D6  160A  158A  	fcall	_Serial_Print_Int
  9493                           
  9494                           ;Automated Solar Panel Orientation Setter.c: 298: Serial_Print(", ");
  9495  1E4F  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9496  1E50  160A  118A  2312  160A  158A  	fcall	_Serial_Print
  9497                           
  9498                           ;Automated Solar Panel Orientation Setter.c: 299: Serial_Print_Int(V_Bat);
  9499  1E55  1683               	bsf	3,5	;RP0=1, select bank1
  9500  1E56  0849               	movf	(_V_Bat+1)^(0+128),w
  9501  1E57  1283               	bcf	3,5	;RP0=0, select bank0
  9502  1E58  00B4               	movwf	Serial_Print_Int@val+1
  9503  1E59  1683               	bsf	3,5	;RP0=1, select bank1
  9504  1E5A  0848               	movf	_V_Bat^(0+128),w
  9505  1E5B  1283               	bcf	3,5	;RP0=0, select bank0
  9506  1E5C  00B3               	movwf	Serial_Print_Int@val
  9507  1E5D  120A  158A  24D6  160A  158A  	fcall	_Serial_Print_Int
  9508                           
  9509                           ;Automated Solar Panel Orientation Setter.c: 300: Serial_Print(", ");
  9510  1E62  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9511  1E63  160A  118A  2312  160A  158A  	fcall	_Serial_Print
  9512                           
  9513                           ;Automated Solar Panel Orientation Setter.c: 301: Serial_Print_Int(C_Bat);
  9514  1E68  1683               	bsf	3,5	;RP0=1, select bank1
  9515  1E69  0847               	movf	(_C_Bat+1)^(0+128),w
  9516  1E6A  1283               	bcf	3,5	;RP0=0, select bank0
  9517  1E6B  00B4               	movwf	Serial_Print_Int@val+1
  9518  1E6C  1683               	bsf	3,5	;RP0=1, select bank1
  9519  1E6D  0846               	movf	_C_Bat^(0+128),w
  9520  1E6E  1283               	bcf	3,5	;RP0=0, select bank0
  9521  1E6F  00B3               	movwf	Serial_Print_Int@val
  9522  1E70  120A  158A  24D6  160A  158A  	fcall	_Serial_Print_Int
  9523                           
  9524                           ;Automated Solar Panel Orientation Setter.c: 302: Serial_Print(", ");
  9525  1E75  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9526  1E76  160A  118A  2312  160A  158A  	fcall	_Serial_Print
  9527                           
  9528                           ;Automated Solar Panel Orientation Setter.c: 303: Serial_NewLine();
  9529  1E7B  160A  158A  23FE  160A  158A  	fcall	_Serial_NewLine
  9530                           
  9531                           ;Automated Solar Panel Orientation Setter.c: 304: _delay((unsigned long)((50)*(4000000/4
      +                          000.0)));
  9532  1E80  3041               	movlw	65
  9533  1E81  1283               	bcf	3,5	;RP0=0, select bank0
  9534  1E82  1303               	bcf	3,6	;RP1=0, select bank0
  9535  1E83  00CF               	movwf	??_main+1
  9536  1E84  30EE               	movlw	238
  9537  1E85  00CE               	movwf	??_main
  9538  1E86                     u8587:	
  9539  1E86  0BCE               	decfsz	??_main,f
  9540  1E87  2E86               	goto	u8587
  9541  1E88  0BCF               	decfsz	??_main+1,f
  9542  1E89  2E86               	goto	u8587
  9543  1E8A  0000               	nop
  9544                           
  9545                           ;Automated Solar Panel Orientation Setter.c: 305: nop();
  9546  1E8B  160A  118A  216D  160A  158A  	fcall	_nop
  9547                           
  9548                           ;Automated Solar Panel Orientation Setter.c: 308: double tmp_angle_display = (double)(st
      +                          erpper_counts/0.55);
  9549  1E90  30CD               	movlw	205
  9550  1E91  00B0               	movwf	___ftdiv@f2
  9551  1E92  300C               	movlw	12
  9552  1E93  00B1               	movwf	___ftdiv@f2+1
  9553  1E94  303F               	movlw	63
  9554  1E95  00B2               	movwf	___ftdiv@f2+2
  9555  1E96  1683               	bsf	3,5	;RP0=1, select bank1
  9556  1E97  0844               	movf	(_sterpper_counts+1)^(0+128),w
  9557  1E98  1283               	bcf	3,5	;RP0=0, select bank0
  9558  1E99  00AE               	movwf	___lwtoft@c+1
  9559  1E9A  1683               	bsf	3,5	;RP0=1, select bank1
  9560  1E9B  0843               	movf	_sterpper_counts^(0+128),w
  9561  1E9C  1283               	bcf	3,5	;RP0=0, select bank0
  9562  1E9D  00AD               	movwf	___lwtoft@c
  9563  1E9E  160A  118A  27A7  160A  158A  	fcall	___lwtoft
  9564  1EA3  082D               	movf	?___lwtoft,w
  9565  1EA4  00B3               	movwf	___ftdiv@f1
  9566  1EA5  082E               	movf	?___lwtoft+1,w
  9567  1EA6  00B4               	movwf	___ftdiv@f1+1
  9568  1EA7  082F               	movf	?___lwtoft+2,w
  9569  1EA8  00B5               	movwf	___ftdiv@f1+2
  9570  1EA9  160A  118A  259D  160A  158A  	fcall	___ftdiv
  9571  1EAE  0830               	movf	?___ftdiv,w
  9572  1EAF  1683               	bsf	3,5	;RP0=1, select bank1
  9573  1EB0  00D3               	movwf	main@tmp_angle_display^(0+128)
  9574  1EB1  1283               	bcf	3,5	;RP0=0, select bank0
  9575  1EB2  0831               	movf	?___ftdiv+1,w
  9576  1EB3  1683               	bsf	3,5	;RP0=1, select bank1
  9577  1EB4  00D4               	movwf	(main@tmp_angle_display+1)^(0+128)
  9578  1EB5  1283               	bcf	3,5	;RP0=0, select bank0
  9579  1EB6  0832               	movf	?___ftdiv+2,w
  9580  1EB7  1683               	bsf	3,5	;RP0=1, select bank1
  9581  1EB8  00D5               	movwf	(main@tmp_angle_display+2)^(0+128)
  9582                           
  9583                           ;Automated Solar Panel Orientation Setter.c: 309: int angle_display = (int)tmp_angle_dis
      +                          play;
  9584  1EB9  0853               	movf	main@tmp_angle_display^(0+128),w
  9585  1EBA  1283               	bcf	3,5	;RP0=0, select bank0
  9586  1EBB  00C1               	movwf	___fttol@f1
  9587  1EBC  1683               	bsf	3,5	;RP0=1, select bank1
  9588  1EBD  0854               	movf	(main@tmp_angle_display+1)^(0+128),w
  9589  1EBE  1283               	bcf	3,5	;RP0=0, select bank0
  9590  1EBF  00C2               	movwf	___fttol@f1+1
  9591  1EC0  1683               	bsf	3,5	;RP0=1, select bank1
  9592  1EC1  0855               	movf	(main@tmp_angle_display+2)^(0+128),w
  9593  1EC2  1283               	bcf	3,5	;RP0=0, select bank0
  9594  1EC3  00C3               	movwf	___fttol@f1+2
  9595  1EC4  160A  118A  274C  160A  158A  	fcall	___fttol
  9596  1EC9  0842               	movf	?___fttol+1,w
  9597  1ECA  1683               	bsf	3,5	;RP0=1, select bank1
  9598  1ECB  00DF               	movwf	(main@angle_display+1)^(0+128)
  9599  1ECC  1283               	bcf	3,5	;RP0=0, select bank0
  9600  1ECD  0841               	movf	?___fttol,w
  9601  1ECE  1683               	bsf	3,5	;RP0=1, select bank1
  9602  1ECF  00DE               	movwf	main@angle_display^(0+128)
  9603                           
  9604                           ;Automated Solar Panel Orientation Setter.c: 311: LCD_print_char(1,7,angle_display/100+4
      +                          8);
  9605  1ED0  1283               	bcf	3,5	;RP0=0, select bank0
  9606  1ED1  3007               	movlw	7
  9607  1ED2  01B3               	clrf	LCD_print_char@row
  9608  1ED3  0AB3               	incf	LCD_print_char@row,f
  9609  1ED4  01B4               	clrf	LCD_print_char@row+1
  9610  1ED5  00B5               	movwf	LCD_print_char@column
  9611  1ED6  3064               	movlw	100
  9612  1ED7  01B6               	clrf	LCD_print_char@column+1
  9613  1ED8  00AB               	movwf	___awdiv@divisor
  9614  1ED9  01AC               	clrf	___awdiv@divisor+1
  9615  1EDA  1683               	bsf	3,5	;RP0=1, select bank1
  9616  1EDB  085F               	movf	(main@angle_display+1)^(0+128),w
  9617  1EDC  1283               	bcf	3,5	;RP0=0, select bank0
  9618  1EDD  00AE               	movwf	___awdiv@dividend+1
  9619  1EDE  1683               	bsf	3,5	;RP0=1, select bank1
  9620  1EDF  085E               	movf	main@angle_display^(0+128),w
  9621  1EE0  1283               	bcf	3,5	;RP0=0, select bank0
  9622  1EE1  00AD               	movwf	___awdiv@dividend
  9623  1EE2  120A  158A  271E  160A  158A  	fcall	___awdiv
  9624  1EE7  082B               	movf	?___awdiv,w
  9625  1EE8  3E30               	addlw	48
  9626  1EE9  00B7               	movwf	LCD_print_char@print_value
  9627  1EEA  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9628                           
  9629                           ;Automated Solar Panel Orientation Setter.c: 312: LCD_print_char(1,8,angle_display%100/1
      +                          0+48);
  9630  1EEF  1283               	bcf	3,5	;RP0=0, select bank0
  9631  1EF0  1303               	bcf	3,6	;RP1=0, select bank0
  9632  1EF1  3008               	movlw	8
  9633  1EF2  01B3               	clrf	LCD_print_char@row
  9634  1EF3  0AB3               	incf	LCD_print_char@row,f
  9635  1EF4  01B4               	clrf	LCD_print_char@row+1
  9636  1EF5  00B5               	movwf	LCD_print_char@column
  9637  1EF6  300A               	movlw	10
  9638  1EF7  01B6               	clrf	LCD_print_char@column+1
  9639  1EF8  00AB               	movwf	___awdiv@divisor
  9640  1EF9  01AC               	clrf	___awdiv@divisor+1
  9641  1EFA  1683               	bsf	3,5	;RP0=1, select bank1
  9642  1EFB  085F               	movf	(main@angle_display+1)^(0+128),w
  9643  1EFC  1283               	bcf	3,5	;RP0=0, select bank0
  9644  1EFD  00A8               	movwf	___awmod@dividend+1
  9645  1EFE  1683               	bsf	3,5	;RP0=1, select bank1
  9646  1EFF  085E               	movf	main@angle_display^(0+128),w
  9647  1F00  1283               	bcf	3,5	;RP0=0, select bank0
  9648  1F01  00A7               	movwf	___awmod@dividend
  9649  1F02  3064               	movlw	100
  9650  1F03  00A5               	movwf	___awmod@divisor
  9651  1F04  01A6               	clrf	___awmod@divisor+1
  9652  1F05  120A  158A  2763  160A  158A  	fcall	___awmod
  9653  1F0A  0826               	movf	?___awmod+1,w
  9654  1F0B  00AE               	movwf	___awdiv@dividend+1
  9655  1F0C  0825               	movf	?___awmod,w
  9656  1F0D  00AD               	movwf	___awdiv@dividend
  9657  1F0E  120A  158A  271E  160A  158A  	fcall	___awdiv
  9658  1F13  082B               	movf	?___awdiv,w
  9659  1F14  3E30               	addlw	48
  9660  1F15  00B7               	movwf	LCD_print_char@print_value
  9661  1F16  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9662                           
  9663                           ;Automated Solar Panel Orientation Setter.c: 313: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
  9664  1F1B  1683               	bsf	3,5	;RP0=1, select bank1
  9665  1F1C  1303               	bcf	3,6	;RP1=0, select bank1
  9666  1F1D  085F               	movf	(main@angle_display+1)^(0+128),w
  9667  1F1E  1283               	bcf	3,5	;RP0=0, select bank0
  9668  1F1F  00A8               	movwf	___awmod@dividend+1
  9669  1F20  1683               	bsf	3,5	;RP0=1, select bank1
  9670  1F21  085E               	movf	main@angle_display^(0+128),w
  9671  1F22  1283               	bcf	3,5	;RP0=0, select bank0
  9672  1F23  00A7               	movwf	___awmod@dividend
  9673  1F24  3064               	movlw	100
  9674  1F25  00A5               	movwf	___awmod@divisor
  9675  1F26  01A6               	clrf	___awmod@divisor+1
  9676  1F27  120A  158A  2763  160A  158A  	fcall	___awmod
  9677  1F2C  0826               	movf	?___awmod+1,w
  9678  1F2D  1683               	bsf	3,5	;RP0=1, select bank1
  9679  1F2E  00DB               	movwf	(_main$814+1)^(0+128)
  9680  1F2F  1283               	bcf	3,5	;RP0=0, select bank0
  9681  1F30  0825               	movf	?___awmod,w
  9682  1F31  1683               	bsf	3,5	;RP0=1, select bank1
  9683  1F32  00DA               	movwf	_main$814^(0+128)
  9684                           
  9685                           ;Automated Solar Panel Orientation Setter.c: 313: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
  9686  1F33  1283               	bcf	3,5	;RP0=0, select bank0
  9687  1F34  3009               	movlw	9
  9688  1F35  01B3               	clrf	LCD_print_char@row
  9689  1F36  0AB3               	incf	LCD_print_char@row,f
  9690  1F37  01B4               	clrf	LCD_print_char@row+1
  9691  1F38  00B5               	movwf	LCD_print_char@column
  9692  1F39  300A               	movlw	10
  9693  1F3A  01B6               	clrf	LCD_print_char@column+1
  9694  1F3B  00A5               	movwf	___awmod@divisor
  9695  1F3C  01A6               	clrf	___awmod@divisor+1
  9696  1F3D  1683               	bsf	3,5	;RP0=1, select bank1
  9697  1F3E  085B               	movf	(_main$814+1)^(0+128),w
  9698  1F3F  1283               	bcf	3,5	;RP0=0, select bank0
  9699  1F40  00A8               	movwf	___awmod@dividend+1
  9700  1F41  1683               	bsf	3,5	;RP0=1, select bank1
  9701  1F42  085A               	movf	_main$814^(0+128),w
  9702  1F43  1283               	bcf	3,5	;RP0=0, select bank0
  9703  1F44  00A7               	movwf	___awmod@dividend
  9704  1F45  120A  158A  2763  160A  158A  	fcall	___awmod
  9705  1F4A  0825               	movf	?___awmod,w
  9706  1F4B  3E30               	addlw	48
  9707  1F4C  00B7               	movwf	LCD_print_char@print_value
  9708  1F4D  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9709                           
  9710                           ;Automated Solar Panel Orientation Setter.c: 316: LCD_print_char(2,1,V_Bat2/10+48);
  9711  1F52  3002               	movlw	2
  9712  1F53  1283               	bcf	3,5	;RP0=0, select bank0
  9713  1F54  1303               	bcf	3,6	;RP1=0, select bank0
  9714  1F55  00B3               	movwf	LCD_print_char@row
  9715  1F56  300A               	movlw	10
  9716  1F57  01B4               	clrf	LCD_print_char@row+1
  9717  1F58  01B5               	clrf	LCD_print_char@column
  9718  1F59  0AB5               	incf	LCD_print_char@column,f
  9719  1F5A  01B6               	clrf	LCD_print_char@column+1
  9720  1F5B  00A5               	movwf	___ltdiv@divisor
  9721  1F5C  01A6               	clrf	___ltdiv@divisor+1
  9722  1F5D  01A7               	clrf	___ltdiv@divisor+2
  9723  1F5E  1683               	bsf	3,5	;RP0=1, select bank1
  9724  1F5F  0834               	movf	_V_Bat2^(0+128),w
  9725  1F60  1283               	bcf	3,5	;RP0=0, select bank0
  9726  1F61  00A8               	movwf	___ltdiv@dividend
  9727  1F62  1683               	bsf	3,5	;RP0=1, select bank1
  9728  1F63  0835               	movf	(_V_Bat2+1)^(0+128),w
  9729  1F64  1283               	bcf	3,5	;RP0=0, select bank0
  9730  1F65  00A9               	movwf	___ltdiv@dividend+1
  9731  1F66  1683               	bsf	3,5	;RP0=1, select bank1
  9732  1F67  0836               	movf	(_V_Bat2+2)^(0+128),w
  9733  1F68  1283               	bcf	3,5	;RP0=0, select bank0
  9734  1F69  00AA               	movwf	___ltdiv@dividend+2
  9735  1F6A  160A  158A  2462  160A  158A  	fcall	___ltdiv
  9736  1F6F  0825               	movf	?___ltdiv,w
  9737  1F70  3E30               	addlw	48
  9738  1F71  00B7               	movwf	LCD_print_char@print_value
  9739  1F72  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9740                           
  9741                           ;Automated Solar Panel Orientation Setter.c: 317: LCD_print_char(2,2,V_Bat2%10+48);
  9742  1F77  3002               	movlw	2
  9743  1F78  1283               	bcf	3,5	;RP0=0, select bank0
  9744  1F79  1303               	bcf	3,6	;RP1=0, select bank0
  9745  1F7A  00B3               	movwf	LCD_print_char@row
  9746  1F7B  01B4               	clrf	LCD_print_char@row+1
  9747  1F7C  00B5               	movwf	LCD_print_char@column
  9748  1F7D  300A               	movlw	10
  9749  1F7E  01B6               	clrf	LCD_print_char@column+1
  9750  1F7F  00A5               	movwf	___ltmod@divisor
  9751  1F80  01A6               	clrf	___ltmod@divisor+1
  9752  1F81  01A7               	clrf	___ltmod@divisor+2
  9753  1F82  1683               	bsf	3,5	;RP0=1, select bank1
  9754  1F83  0834               	movf	_V_Bat2^(0+128),w
  9755  1F84  1283               	bcf	3,5	;RP0=0, select bank0
  9756  1F85  00A8               	movwf	___ltmod@dividend
  9757  1F86  1683               	bsf	3,5	;RP0=1, select bank1
  9758  1F87  0835               	movf	(_V_Bat2+1)^(0+128),w
  9759  1F88  1283               	bcf	3,5	;RP0=0, select bank0
  9760  1F89  00A9               	movwf	___ltmod@dividend+1
  9761  1F8A  1683               	bsf	3,5	;RP0=1, select bank1
  9762  1F8B  0836               	movf	(_V_Bat2+2)^(0+128),w
  9763  1F8C  1283               	bcf	3,5	;RP0=0, select bank0
  9764  1F8D  00AA               	movwf	___ltmod@dividend+2
  9765  1F8E  160A  158A  2431  160A  158A  	fcall	___ltmod
  9766  1F93  0825               	movf	?___ltmod,w
  9767  1F94  3E30               	addlw	48
  9768  1F95  00B7               	movwf	LCD_print_char@print_value
  9769  1F96  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9770                           
  9771                           ;Automated Solar Panel Orientation Setter.c: 318: LCD_print_char(2,4,'0');
  9772  1F9B  3002               	movlw	2
  9773  1F9C  1283               	bcf	3,5	;RP0=0, select bank0
  9774  1F9D  1303               	bcf	3,6	;RP1=0, select bank0
  9775  1F9E  00B3               	movwf	LCD_print_char@row
  9776  1F9F  3004               	movlw	4
  9777  1FA0  01B4               	clrf	LCD_print_char@row+1
  9778  1FA1  00B5               	movwf	LCD_print_char@column
  9779  1FA2  3030               	movlw	48
  9780  1FA3  01B6               	clrf	LCD_print_char@column+1
  9781  1FA4  00B7               	movwf	LCD_print_char@print_value
  9782  1FA5  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9783                           
  9784                           ;Automated Solar Panel Orientation Setter.c: 321: LCD_print_char(2,7,'0');
  9785  1FAA  3002               	movlw	2
  9786  1FAB  1283               	bcf	3,5	;RP0=0, select bank0
  9787  1FAC  1303               	bcf	3,6	;RP1=0, select bank0
  9788  1FAD  00B3               	movwf	LCD_print_char@row
  9789  1FAE  3007               	movlw	7
  9790  1FAF  01B4               	clrf	LCD_print_char@row+1
  9791  1FB0  00B5               	movwf	LCD_print_char@column
  9792  1FB1  3030               	movlw	48
  9793  1FB2  01B6               	clrf	LCD_print_char@column+1
  9794  1FB3  00B7               	movwf	LCD_print_char@print_value
  9795  1FB4  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9796                           
  9797                           ;Automated Solar Panel Orientation Setter.c: 322: LCD_print_char(2,9,'0');
  9798  1FB9  3002               	movlw	2
  9799  1FBA  1283               	bcf	3,5	;RP0=0, select bank0
  9800  1FBB  1303               	bcf	3,6	;RP1=0, select bank0
  9801  1FBC  00B3               	movwf	LCD_print_char@row
  9802  1FBD  3009               	movlw	9
  9803  1FBE  01B4               	clrf	LCD_print_char@row+1
  9804  1FBF  00B5               	movwf	LCD_print_char@column
  9805  1FC0  3030               	movlw	48
  9806  1FC1  01B6               	clrf	LCD_print_char@column+1
  9807  1FC2  00B7               	movwf	LCD_print_char@print_value
  9808  1FC3  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9809                           
  9810                           ;Automated Solar Panel Orientation Setter.c: 325: LCD_print_char(2,12,'0');
  9811  1FC8  3002               	movlw	2
  9812  1FC9  1283               	bcf	3,5	;RP0=0, select bank0
  9813  1FCA  1303               	bcf	3,6	;RP1=0, select bank0
  9814  1FCB  00B3               	movwf	LCD_print_char@row
  9815  1FCC  300C               	movlw	12
  9816  1FCD  01B4               	clrf	LCD_print_char@row+1
  9817  1FCE  00B5               	movwf	LCD_print_char@column
  9818  1FCF  3030               	movlw	48
  9819  1FD0  01B6               	clrf	LCD_print_char@column+1
  9820  1FD1  00B7               	movwf	LCD_print_char@print_value
  9821  1FD2  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9822                           
  9823                           ;Automated Solar Panel Orientation Setter.c: 326: LCD_print_char(2,13,'0');
  9824  1FD7  3002               	movlw	2
  9825  1FD8  1283               	bcf	3,5	;RP0=0, select bank0
  9826  1FD9  1303               	bcf	3,6	;RP1=0, select bank0
  9827  1FDA  00B3               	movwf	LCD_print_char@row
  9828  1FDB  300D               	movlw	13
  9829  1FDC  01B4               	clrf	LCD_print_char@row+1
  9830  1FDD  00B5               	movwf	LCD_print_char@column
  9831  1FDE  3030               	movlw	48
  9832  1FDF  01B6               	clrf	LCD_print_char@column+1
  9833  1FE0  00B7               	movwf	LCD_print_char@print_value
  9834  1FE1  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9835                           
  9836                           ;Automated Solar Panel Orientation Setter.c: 327: LCD_print_char(2,15,'0');
  9837  1FE6  3002               	movlw	2
  9838  1FE7  1283               	bcf	3,5	;RP0=0, select bank0
  9839  1FE8  1303               	bcf	3,6	;RP1=0, select bank0
  9840  1FE9  00B3               	movwf	LCD_print_char@row
  9841  1FEA  300F               	movlw	15
  9842  1FEB  01B4               	clrf	LCD_print_char@row+1
  9843  1FEC  00B5               	movwf	LCD_print_char@column
  9844  1FED  3030               	movlw	48
  9845  1FEE  01B6               	clrf	LCD_print_char@column+1
  9846  1FEF  00B7               	movwf	LCD_print_char@print_value
  9847  1FF0  120A  158A  20F5  160A  158A  	fcall	_LCD_print_char
  9848                           
  9849                           ;Automated Solar Panel Orientation Setter.c: 332: CheckMode();
  9850  1FF5  160A  118A  20DD  160A  158A  	fcall	_CheckMode
  9851                           
  9852                           ;Automated Solar Panel Orientation Setter.c: 334: Calculate();
  9853  1FFA  160A  158A  24FF  160A  158A  	fcall	_Calculate
  9854                           
  9855                           ;Automated Solar Panel Orientation Setter.c: 336: break;
  9856  1FFF  2E06               	goto	L42
  9857                           
  9858                           	psect	maintext_split_3
  9859  002A                     l6657:	
  9860                           
  9861                           ;Automated Solar Panel Orientation Setter.c: 342: a2d_read();
  9862  002A  160A  118A  2605  120A  118A  	fcall	_a2d_read
  9863  002F  3001               	movlw	1
  9864                           
  9865                           ;Automated Solar Panel Orientation Setter.c: 343: position(1,1);
  9866  0030  01A6               	clrf	position@collum
  9867  0031  0AA6               	incf	position@collum,f
  9868  0032  120A  158A  221A  120A  118A  	fcall	_position
  9869                           
  9870                           ;Automated Solar Panel Orientation Setter.c: 344: printf("MODE2,000D,00:00");
  9871  0037  307B               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  9872  0038  120A  158A  201B  120A  118A  	fcall	_printf
  9873  003D  3002               	movlw	2
  9874                           
  9875                           ;Automated Solar Panel Orientation Setter.c: 345: position(2,1);
  9876  003E  01A6               	clrf	position@collum
  9877  003F  0AA6               	incf	position@collum,f
  9878  0040  120A  158A  221A  120A  118A  	fcall	_position
  9879                           
  9880                           ;Automated Solar Panel Orientation Setter.c: 346: printf("00.0V,0.0A,00.0W");
  9881  0045  309D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  9882  0046  120A  158A  201B  120A  118A  	fcall	_printf
  9883                           
  9884                           ;Automated Solar Panel Orientation Setter.c: 347: LCDTimeUpdate();
  9885  004B  120A  158A  2062  120A  118A  	fcall	_LCDTimeUpdate
  9886                           
  9887                           ;Automated Solar Panel Orientation Setter.c: 349: state = 20;
  9888  0050  3014               	movlw	20
  9889  0051  2CC8               	goto	L4
  9890  0052                     l6667:	
  9891                           ;Automated Solar Panel Orientation Setter.c: 350: break;
  9892                           
  9893  0052  160A  118A  2605  120A  118A  	fcall	_a2d_read
  9894                           
  9895                           ;Automated Solar Panel Orientation Setter.c: 353: Serial_Print_Int(ldr1);
  9896  0057  1683               	bsf	3,5	;RP0=1, select bank1
  9897  0058  083C               	movf	(_ldr1+1)^(0+128),w
  9898  0059  1283               	bcf	3,5	;RP0=0, select bank0
  9899  005A  00B4               	movwf	Serial_Print_Int@val+1
  9900  005B  1683               	bsf	3,5	;RP0=1, select bank1
  9901  005C  083B               	movf	_ldr1^(0+128),w
  9902  005D  1283               	bcf	3,5	;RP0=0, select bank0
  9903  005E  00B3               	movwf	Serial_Print_Int@val
  9904  005F  120A  158A  24D6  120A  118A  	fcall	_Serial_Print_Int
  9905                           
  9906                           ;Automated Solar Panel Orientation Setter.c: 354: Serial_Print(", ");
  9907  0064  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9908  0065  160A  118A  2312  120A  118A  	fcall	_Serial_Print
  9909                           
  9910                           ;Automated Solar Panel Orientation Setter.c: 355: Serial_Print_Int(ldr2);
  9911  006A  0854               	movf	_ldr2+1,w
  9912  006B  00B4               	movwf	Serial_Print_Int@val+1
  9913  006C  0853               	movf	_ldr2,w
  9914  006D  00B3               	movwf	Serial_Print_Int@val
  9915  006E  120A  158A  24D6  120A  118A  	fcall	_Serial_Print_Int
  9916                           
  9917                           ;Automated Solar Panel Orientation Setter.c: 356: Serial_Print(", ");
  9918  0073  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9919  0074  160A  118A  2312  120A  118A  	fcall	_Serial_Print
  9920                           
  9921                           ;Automated Solar Panel Orientation Setter.c: 357: Serial_Print_Int(V_Bat);
  9922  0079  1683               	bsf	3,5	;RP0=1, select bank1
  9923  007A  0849               	movf	(_V_Bat+1)^(0+128),w
  9924  007B  1283               	bcf	3,5	;RP0=0, select bank0
  9925  007C  00B4               	movwf	Serial_Print_Int@val+1
  9926  007D  1683               	bsf	3,5	;RP0=1, select bank1
  9927  007E  0848               	movf	_V_Bat^(0+128),w
  9928  007F  1283               	bcf	3,5	;RP0=0, select bank0
  9929  0080  00B3               	movwf	Serial_Print_Int@val
  9930  0081  120A  158A  24D6  120A  118A  	fcall	_Serial_Print_Int
  9931                           
  9932                           ;Automated Solar Panel Orientation Setter.c: 358: Serial_Print(", ");
  9933  0086  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9934  0087  160A  118A  2312  120A  118A  	fcall	_Serial_Print
  9935                           
  9936                           ;Automated Solar Panel Orientation Setter.c: 359: Serial_Print_Int(C_Bat);
  9937  008C  1683               	bsf	3,5	;RP0=1, select bank1
  9938  008D  0847               	movf	(_C_Bat+1)^(0+128),w
  9939  008E  1283               	bcf	3,5	;RP0=0, select bank0
  9940  008F  00B4               	movwf	Serial_Print_Int@val+1
  9941  0090  1683               	bsf	3,5	;RP0=1, select bank1
  9942  0091  0846               	movf	_C_Bat^(0+128),w
  9943  0092  1283               	bcf	3,5	;RP0=0, select bank0
  9944  0093  00B3               	movwf	Serial_Print_Int@val
  9945  0094  120A  158A  24D6  120A  118A  	fcall	_Serial_Print_Int
  9946                           
  9947                           ;Automated Solar Panel Orientation Setter.c: 360: Serial_Print(", ");
  9948  0099  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  9949  009A  160A  118A  2312  120A  118A  	fcall	_Serial_Print
  9950                           
  9951                           ;Automated Solar Panel Orientation Setter.c: 361: Serial_NewLine();
  9952  009F  160A  158A  23FE  120A  118A  	fcall	_Serial_NewLine
  9953                           
  9954                           ;Automated Solar Panel Orientation Setter.c: 362: _delay((unsigned long)((50)*(4000000/4
      +                          000.0)));
  9955  00A4  3041               	movlw	65
  9956  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  9957  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  9958  00A7  00CF               	movwf	??_main+1
  9959  00A8  30EE               	movlw	238
  9960  00A9  00CE               	movwf	??_main
  9961  00AA                     u8597:	
  9962  00AA  0BCE               	decfsz	??_main,f
  9963  00AB  28AA               	goto	u8597
  9964  00AC  0BCF               	decfsz	??_main+1,f
  9965  00AD  28AA               	goto	u8597
  9966  00AE  0000               	nop
  9967                           
  9968                           ;Automated Solar Panel Orientation Setter.c: 363: nop();
  9969  00AF  160A  118A  216D  120A  118A  	fcall	_nop
  9970                           
  9971                           ;Automated Solar Panel Orientation Setter.c: 366: double tmp_angle_display = (double)(st
      +                          erpper_counts/0.55);
  9972  00B4  30CD               	movlw	205
  9973  00B5  00B0               	movwf	___ftdiv@f2
  9974  00B6  300C               	movlw	12
  9975  00B7  00B1               	movwf	___ftdiv@f2+1
  9976  00B8  303F               	movlw	63
  9977  00B9  00B2               	movwf	___ftdiv@f2+2
  9978  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  9979  00BB  0844               	movf	(_sterpper_counts+1)^(0+128),w
  9980  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  9981  00BD  00AE               	movwf	___lwtoft@c+1
  9982  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  9983  00BF  0843               	movf	_sterpper_counts^(0+128),w
  9984  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  9985  00C1  00AD               	movwf	___lwtoft@c
  9986  00C2  160A  118A  27A7  120A  118A  	fcall	___lwtoft
  9987  00C7  082D               	movf	?___lwtoft,w
  9988  00C8  00B3               	movwf	___ftdiv@f1
  9989  00C9  082E               	movf	?___lwtoft+1,w
  9990  00CA  00B4               	movwf	___ftdiv@f1+1
  9991  00CB  082F               	movf	?___lwtoft+2,w
  9992  00CC  00B5               	movwf	___ftdiv@f1+2
  9993  00CD  160A  118A  259D  120A  118A  	fcall	___ftdiv
  9994  00D2  0830               	movf	?___ftdiv,w
  9995  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  9996  00D4  00D3               	movwf	main@tmp_angle_display^(0+128)
  9997  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  9998  00D6  0831               	movf	?___ftdiv+1,w
  9999  00D7  1683               	bsf	3,5	;RP0=1, select bank1
 10000  00D8  00D4               	movwf	(main@tmp_angle_display+1)^(0+128)
 10001  00D9  1283               	bcf	3,5	;RP0=0, select bank0
 10002  00DA  0832               	movf	?___ftdiv+2,w
 10003  00DB  1683               	bsf	3,5	;RP0=1, select bank1
 10004  00DC  00D5               	movwf	(main@tmp_angle_display+2)^(0+128)
 10005                           
 10006                           ;Automated Solar Panel Orientation Setter.c: 367: int angle_display = (int)tmp_angle_dis
      +                          play;
 10007  00DD  0853               	movf	main@tmp_angle_display^(0+128),w
 10008  00DE  1283               	bcf	3,5	;RP0=0, select bank0
 10009  00DF  00C1               	movwf	___fttol@f1
 10010  00E0  1683               	bsf	3,5	;RP0=1, select bank1
 10011  00E1  0854               	movf	(main@tmp_angle_display+1)^(0+128),w
 10012  00E2  1283               	bcf	3,5	;RP0=0, select bank0
 10013  00E3  00C2               	movwf	___fttol@f1+1
 10014  00E4  1683               	bsf	3,5	;RP0=1, select bank1
 10015  00E5  0855               	movf	(main@tmp_angle_display+2)^(0+128),w
 10016  00E6  1283               	bcf	3,5	;RP0=0, select bank0
 10017  00E7  00C3               	movwf	___fttol@f1+2
 10018  00E8  160A  118A  274C  120A  118A  	fcall	___fttol
 10019  00ED  0842               	movf	?___fttol+1,w
 10020  00EE  1683               	bsf	3,5	;RP0=1, select bank1
 10021  00EF  00DF               	movwf	(main@angle_display+1)^(0+128)
 10022  00F0  1283               	bcf	3,5	;RP0=0, select bank0
 10023  00F1  0841               	movf	?___fttol,w
 10024  00F2  1683               	bsf	3,5	;RP0=1, select bank1
 10025  00F3  00DE               	movwf	main@angle_display^(0+128)
 10026                           
 10027                           ;Automated Solar Panel Orientation Setter.c: 369: LCD_print_char(1,7,angle_display/100+4
      +                          8);
 10028  00F4  1283               	bcf	3,5	;RP0=0, select bank0
 10029  00F5  3007               	movlw	7
 10030  00F6  01B3               	clrf	LCD_print_char@row
 10031  00F7  0AB3               	incf	LCD_print_char@row,f
 10032  00F8  01B4               	clrf	LCD_print_char@row+1
 10033  00F9  00B5               	movwf	LCD_print_char@column
 10034  00FA  3064               	movlw	100
 10035  00FB  01B6               	clrf	LCD_print_char@column+1
 10036  00FC  00AB               	movwf	___awdiv@divisor
 10037  00FD  01AC               	clrf	___awdiv@divisor+1
 10038  00FE  1683               	bsf	3,5	;RP0=1, select bank1
 10039  00FF  085F               	movf	(main@angle_display+1)^(0+128),w
 10040  0100  1283               	bcf	3,5	;RP0=0, select bank0
 10041  0101  00AE               	movwf	___awdiv@dividend+1
 10042  0102  1683               	bsf	3,5	;RP0=1, select bank1
 10043  0103  085E               	movf	main@angle_display^(0+128),w
 10044  0104  1283               	bcf	3,5	;RP0=0, select bank0
 10045  0105  00AD               	movwf	___awdiv@dividend
 10046  0106  120A  158A  271E  120A  118A  	fcall	___awdiv
 10047  010B  082B               	movf	?___awdiv,w
 10048  010C  3E30               	addlw	48
 10049  010D  00B7               	movwf	LCD_print_char@print_value
 10050  010E  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10051                           
 10052                           ;Automated Solar Panel Orientation Setter.c: 370: LCD_print_char(1,8,angle_display%100/1
      +                          0+48);
 10053  0113  1283               	bcf	3,5	;RP0=0, select bank0
 10054  0114  1303               	bcf	3,6	;RP1=0, select bank0
 10055  0115  3008               	movlw	8
 10056  0116  01B3               	clrf	LCD_print_char@row
 10057  0117  0AB3               	incf	LCD_print_char@row,f
 10058  0118  01B4               	clrf	LCD_print_char@row+1
 10059  0119  00B5               	movwf	LCD_print_char@column
 10060  011A  300A               	movlw	10
 10061  011B  01B6               	clrf	LCD_print_char@column+1
 10062  011C  00AB               	movwf	___awdiv@divisor
 10063  011D  01AC               	clrf	___awdiv@divisor+1
 10064  011E  1683               	bsf	3,5	;RP0=1, select bank1
 10065  011F  085F               	movf	(main@angle_display+1)^(0+128),w
 10066  0120  1283               	bcf	3,5	;RP0=0, select bank0
 10067  0121  00A8               	movwf	___awmod@dividend+1
 10068  0122  1683               	bsf	3,5	;RP0=1, select bank1
 10069  0123  085E               	movf	main@angle_display^(0+128),w
 10070  0124  1283               	bcf	3,5	;RP0=0, select bank0
 10071  0125  00A7               	movwf	___awmod@dividend
 10072  0126  3064               	movlw	100
 10073  0127  00A5               	movwf	___awmod@divisor
 10074  0128  01A6               	clrf	___awmod@divisor+1
 10075  0129  120A  158A  2763  120A  118A  	fcall	___awmod
 10076  012E  0826               	movf	?___awmod+1,w
 10077  012F  00AE               	movwf	___awdiv@dividend+1
 10078  0130  0825               	movf	?___awmod,w
 10079  0131  00AD               	movwf	___awdiv@dividend
 10080  0132  120A  158A  271E  120A  118A  	fcall	___awdiv
 10081  0137  082B               	movf	?___awdiv,w
 10082  0138  3E30               	addlw	48
 10083  0139  00B7               	movwf	LCD_print_char@print_value
 10084  013A  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10085                           
 10086                           ;Automated Solar Panel Orientation Setter.c: 371: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
 10087  013F  1683               	bsf	3,5	;RP0=1, select bank1
 10088  0140  1303               	bcf	3,6	;RP1=0, select bank1
 10089  0141  085F               	movf	(main@angle_display+1)^(0+128),w
 10090  0142  1283               	bcf	3,5	;RP0=0, select bank0
 10091  0143  00A8               	movwf	___awmod@dividend+1
 10092  0144  1683               	bsf	3,5	;RP0=1, select bank1
 10093  0145  085E               	movf	main@angle_display^(0+128),w
 10094  0146  1283               	bcf	3,5	;RP0=0, select bank0
 10095  0147  00A7               	movwf	___awmod@dividend
 10096  0148  3064               	movlw	100
 10097  0149  00A5               	movwf	___awmod@divisor
 10098  014A  01A6               	clrf	___awmod@divisor+1
 10099  014B  120A  158A  2763  120A  118A  	fcall	___awmod
 10100  0150  0826               	movf	?___awmod+1,w
 10101  0151  1683               	bsf	3,5	;RP0=1, select bank1
 10102  0152  00DB               	movwf	(_main$814+1)^(0+128)
 10103  0153  1283               	bcf	3,5	;RP0=0, select bank0
 10104  0154  0825               	movf	?___awmod,w
 10105  0155  1683               	bsf	3,5	;RP0=1, select bank1
 10106  0156  00DA               	movwf	_main$814^(0+128)
 10107                           
 10108                           ;Automated Solar Panel Orientation Setter.c: 371: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
 10109  0157  1283               	bcf	3,5	;RP0=0, select bank0
 10110  0158  3009               	movlw	9
 10111  0159  01B3               	clrf	LCD_print_char@row
 10112  015A  0AB3               	incf	LCD_print_char@row,f
 10113  015B  01B4               	clrf	LCD_print_char@row+1
 10114  015C  00B5               	movwf	LCD_print_char@column
 10115  015D  300A               	movlw	10
 10116  015E  01B6               	clrf	LCD_print_char@column+1
 10117  015F  00A5               	movwf	___awmod@divisor
 10118  0160  01A6               	clrf	___awmod@divisor+1
 10119  0161  1683               	bsf	3,5	;RP0=1, select bank1
 10120  0162  085B               	movf	(_main$814+1)^(0+128),w
 10121  0163  1283               	bcf	3,5	;RP0=0, select bank0
 10122  0164  00A8               	movwf	___awmod@dividend+1
 10123  0165  1683               	bsf	3,5	;RP0=1, select bank1
 10124  0166  085A               	movf	_main$814^(0+128),w
 10125  0167  1283               	bcf	3,5	;RP0=0, select bank0
 10126  0168  00A7               	movwf	___awmod@dividend
 10127  0169  120A  158A  2763  120A  118A  	fcall	___awmod
 10128  016E  0825               	movf	?___awmod,w
 10129  016F  3E30               	addlw	48
 10130  0170  00B7               	movwf	LCD_print_char@print_value
 10131  0171  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10132                           
 10133                           ;Automated Solar Panel Orientation Setter.c: 374: LCD_print_char(2,1,V_Bat2/10+48);
 10134  0176  3002               	movlw	2
 10135  0177  1283               	bcf	3,5	;RP0=0, select bank0
 10136  0178  1303               	bcf	3,6	;RP1=0, select bank0
 10137  0179  00B3               	movwf	LCD_print_char@row
 10138  017A  300A               	movlw	10
 10139  017B  01B4               	clrf	LCD_print_char@row+1
 10140  017C  01B5               	clrf	LCD_print_char@column
 10141  017D  0AB5               	incf	LCD_print_char@column,f
 10142  017E  01B6               	clrf	LCD_print_char@column+1
 10143  017F  00A5               	movwf	___ltdiv@divisor
 10144  0180  01A6               	clrf	___ltdiv@divisor+1
 10145  0181  01A7               	clrf	___ltdiv@divisor+2
 10146  0182  1683               	bsf	3,5	;RP0=1, select bank1
 10147  0183  0834               	movf	_V_Bat2^(0+128),w
 10148  0184  1283               	bcf	3,5	;RP0=0, select bank0
 10149  0185  00A8               	movwf	___ltdiv@dividend
 10150  0186  1683               	bsf	3,5	;RP0=1, select bank1
 10151  0187  0835               	movf	(_V_Bat2+1)^(0+128),w
 10152  0188  1283               	bcf	3,5	;RP0=0, select bank0
 10153  0189  00A9               	movwf	___ltdiv@dividend+1
 10154  018A  1683               	bsf	3,5	;RP0=1, select bank1
 10155  018B  0836               	movf	(_V_Bat2+2)^(0+128),w
 10156  018C  1283               	bcf	3,5	;RP0=0, select bank0
 10157  018D  00AA               	movwf	___ltdiv@dividend+2
 10158  018E  160A  158A  2462  120A  118A  	fcall	___ltdiv
 10159  0193  0825               	movf	?___ltdiv,w
 10160  0194  3E30               	addlw	48
 10161  0195  00B7               	movwf	LCD_print_char@print_value
 10162  0196  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10163                           
 10164                           ;Automated Solar Panel Orientation Setter.c: 375: LCD_print_char(2,2,V_Bat2%10+48);
 10165  019B  3002               	movlw	2
 10166  019C  1283               	bcf	3,5	;RP0=0, select bank0
 10167  019D  1303               	bcf	3,6	;RP1=0, select bank0
 10168  019E  00B3               	movwf	LCD_print_char@row
 10169  019F  01B4               	clrf	LCD_print_char@row+1
 10170  01A0  00B5               	movwf	LCD_print_char@column
 10171  01A1  300A               	movlw	10
 10172  01A2  01B6               	clrf	LCD_print_char@column+1
 10173  01A3  00A5               	movwf	___ltmod@divisor
 10174  01A4  01A6               	clrf	___ltmod@divisor+1
 10175  01A5  01A7               	clrf	___ltmod@divisor+2
 10176  01A6  1683               	bsf	3,5	;RP0=1, select bank1
 10177  01A7  0834               	movf	_V_Bat2^(0+128),w
 10178  01A8  1283               	bcf	3,5	;RP0=0, select bank0
 10179  01A9  00A8               	movwf	___ltmod@dividend
 10180  01AA  1683               	bsf	3,5	;RP0=1, select bank1
 10181  01AB  0835               	movf	(_V_Bat2+1)^(0+128),w
 10182  01AC  1283               	bcf	3,5	;RP0=0, select bank0
 10183  01AD  00A9               	movwf	___ltmod@dividend+1
 10184  01AE  1683               	bsf	3,5	;RP0=1, select bank1
 10185  01AF  0836               	movf	(_V_Bat2+2)^(0+128),w
 10186  01B0  1283               	bcf	3,5	;RP0=0, select bank0
 10187  01B1  00AA               	movwf	___ltmod@dividend+2
 10188  01B2  160A  158A  2431  120A  118A  	fcall	___ltmod
 10189  01B7  0825               	movf	?___ltmod,w
 10190  01B8  3E30               	addlw	48
 10191  01B9  00B7               	movwf	LCD_print_char@print_value
 10192  01BA  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10193                           
 10194                           ;Automated Solar Panel Orientation Setter.c: 376: LCD_print_char(2,4,'0');
 10195  01BF  3002               	movlw	2
 10196  01C0  1283               	bcf	3,5	;RP0=0, select bank0
 10197  01C1  1303               	bcf	3,6	;RP1=0, select bank0
 10198  01C2  00B3               	movwf	LCD_print_char@row
 10199  01C3  3004               	movlw	4
 10200  01C4  01B4               	clrf	LCD_print_char@row+1
 10201  01C5  00B5               	movwf	LCD_print_char@column
 10202  01C6  3030               	movlw	48
 10203  01C7  01B6               	clrf	LCD_print_char@column+1
 10204  01C8  00B7               	movwf	LCD_print_char@print_value
 10205  01C9  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10206                           
 10207                           ;Automated Solar Panel Orientation Setter.c: 379: LCD_print_char(2,7,'0');
 10208  01CE  3002               	movlw	2
 10209  01CF  1283               	bcf	3,5	;RP0=0, select bank0
 10210  01D0  1303               	bcf	3,6	;RP1=0, select bank0
 10211  01D1  00B3               	movwf	LCD_print_char@row
 10212  01D2  3007               	movlw	7
 10213  01D3  01B4               	clrf	LCD_print_char@row+1
 10214  01D4  00B5               	movwf	LCD_print_char@column
 10215  01D5  3030               	movlw	48
 10216  01D6  01B6               	clrf	LCD_print_char@column+1
 10217  01D7  00B7               	movwf	LCD_print_char@print_value
 10218  01D8  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10219                           
 10220                           ;Automated Solar Panel Orientation Setter.c: 380: LCD_print_char(2,9,'0');
 10221  01DD  3002               	movlw	2
 10222  01DE  1283               	bcf	3,5	;RP0=0, select bank0
 10223  01DF  1303               	bcf	3,6	;RP1=0, select bank0
 10224  01E0  00B3               	movwf	LCD_print_char@row
 10225  01E1  3009               	movlw	9
 10226  01E2  01B4               	clrf	LCD_print_char@row+1
 10227  01E3  00B5               	movwf	LCD_print_char@column
 10228  01E4  3030               	movlw	48
 10229  01E5  01B6               	clrf	LCD_print_char@column+1
 10230  01E6  00B7               	movwf	LCD_print_char@print_value
 10231  01E7  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10232                           
 10233                           ;Automated Solar Panel Orientation Setter.c: 383: LCD_print_char(2,12,'0');
 10234  01EC  3002               	movlw	2
 10235  01ED  1283               	bcf	3,5	;RP0=0, select bank0
 10236  01EE  1303               	bcf	3,6	;RP1=0, select bank0
 10237  01EF  00B3               	movwf	LCD_print_char@row
 10238  01F0  300C               	movlw	12
 10239  01F1  01B4               	clrf	LCD_print_char@row+1
 10240  01F2  00B5               	movwf	LCD_print_char@column
 10241  01F3  3030               	movlw	48
 10242  01F4  01B6               	clrf	LCD_print_char@column+1
 10243  01F5  00B7               	movwf	LCD_print_char@print_value
 10244  01F6  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10245                           
 10246                           ;Automated Solar Panel Orientation Setter.c: 384: LCD_print_char(2,13,'0');
 10247  01FB  3002               	movlw	2
 10248  01FC  1283               	bcf	3,5	;RP0=0, select bank0
 10249  01FD  1303               	bcf	3,6	;RP1=0, select bank0
 10250  01FE  00B3               	movwf	LCD_print_char@row
 10251  01FF  300D               	movlw	13
 10252  0200  01B4               	clrf	LCD_print_char@row+1
 10253  0201  00B5               	movwf	LCD_print_char@column
 10254  0202  3030               	movlw	48
 10255  0203  01B6               	clrf	LCD_print_char@column+1
 10256  0204  00B7               	movwf	LCD_print_char@print_value
 10257  0205  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10258                           
 10259                           ;Automated Solar Panel Orientation Setter.c: 385: LCD_print_char(2,15,'0');
 10260  020A  3002               	movlw	2
 10261  020B  1283               	bcf	3,5	;RP0=0, select bank0
 10262  020C  1303               	bcf	3,6	;RP1=0, select bank0
 10263  020D  00B3               	movwf	LCD_print_char@row
 10264  020E  300F               	movlw	15
 10265  020F  01B4               	clrf	LCD_print_char@row+1
 10266  0210  00B5               	movwf	LCD_print_char@column
 10267  0211  3030               	movlw	48
 10268  0212  01B6               	clrf	LCD_print_char@column+1
 10269  0213  00B7               	movwf	LCD_print_char@print_value
 10270  0214  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10271                           
 10272                           ;Automated Solar Panel Orientation Setter.c: 388: if(hour >= 6 && hour <=18 ){
 10273  0219  3000               	movlw	0
 10274  021A  1283               	bcf	3,5	;RP0=0, select bank0
 10275  021B  1303               	bcf	3,6	;RP1=0, select bank0
 10276  021C  0252               	subwf	_hour+1,w
 10277  021D  3006               	movlw	6
 10278  021E  1903               	skipnz
 10279  021F  0251               	subwf	_hour,w
 10280  0220  1C03               	skipc
 10281  0221  2A8D               	goto	l6729
 10282  0222  3000               	movlw	0
 10283  0223  0252               	subwf	_hour+1,w
 10284  0224  3013               	movlw	19
 10285  0225  1903               	skipnz
 10286  0226  0251               	subwf	_hour,w
 10287  0227  1803               	skipnc
 10288  0228  2A8D               	goto	l6729
 10289                           
 10290                           ;Automated Solar Panel Orientation Setter.c: 390: double tmp_stepsto_turn =(eeprom_read(
      +                           hour-6 )*0.56;
 10291  0229  305C               	movlw	92
 10292  022A  00B2               	movwf	___ftmul@f1
 10293  022B  300F               	movlw	15
 10294  022C  00B3               	movwf	___ftmul@f1+1
 10295  022D  303F               	movlw	63
 10296  022E  00B4               	movwf	___ftmul@f1+2
 10297  022F  0851               	movf	_hour,w
 10298  0230  3EFA               	addlw	250
 10299  0231  120A  158A  2000  120A  118A  	fcall	_eeprom_read
 10300  0236  160A  118A  258D  120A  118A  	fcall	___lbtoft
 10301  023B  082D               	movf	?___lbtoft,w
 10302  023C  00B5               	movwf	___ftmul@f2
 10303  023D  082E               	movf	?___lbtoft+1,w
 10304  023E  00B6               	movwf	___ftmul@f2+1
 10305  023F  082F               	movf	?___lbtoft+2,w
 10306  0240  00B7               	movwf	___ftmul@f2+2
 10307  0241  160A  118A  26D1  120A  118A  	fcall	___ftmul
 10308  0246  0832               	movf	?___ftmul,w
 10309  0247  1683               	bsf	3,5	;RP0=1, select bank1
 10310  0248  00CA               	movwf	main@tmp_stepsto_turn^(0+128)
 10311  0249  1283               	bcf	3,5	;RP0=0, select bank0
 10312  024A  0833               	movf	?___ftmul+1,w
 10313  024B  1683               	bsf	3,5	;RP0=1, select bank1
 10314  024C  00CB               	movwf	(main@tmp_stepsto_turn+1)^(0+128)
 10315  024D  1283               	bcf	3,5	;RP0=0, select bank0
 10316  024E  0834               	movf	?___ftmul+2,w
 10317  024F  1683               	bsf	3,5	;RP0=1, select bank1
 10318  0250  00CC               	movwf	(main@tmp_stepsto_turn+2)^(0+128)
 10319                           
 10320                           ;Automated Solar Panel Orientation Setter.c: 391: int stepsto_turn = (int)tmp_stepsto_tu
      +                          rn;
 10321  0251  084A               	movf	main@tmp_stepsto_turn^(0+128),w
 10322  0252  1283               	bcf	3,5	;RP0=0, select bank0
 10323  0253  00C1               	movwf	___fttol@f1
 10324  0254  1683               	bsf	3,5	;RP0=1, select bank1
 10325  0255  084B               	movf	(main@tmp_stepsto_turn+1)^(0+128),w
 10326  0256  1283               	bcf	3,5	;RP0=0, select bank0
 10327  0257  00C2               	movwf	___fttol@f1+1
 10328  0258  1683               	bsf	3,5	;RP0=1, select bank1
 10329  0259  084C               	movf	(main@tmp_stepsto_turn+2)^(0+128),w
 10330  025A  1283               	bcf	3,5	;RP0=0, select bank0
 10331  025B  00C3               	movwf	___fttol@f1+2
 10332  025C  160A  118A  274C  120A  118A  	fcall	___fttol
 10333  0261  0842               	movf	?___fttol+1,w
 10334  0262  1683               	bsf	3,5	;RP0=1, select bank1
 10335  0263  00CE               	movwf	(main@stepsto_turn+1)^(0+128)
 10336  0264  1283               	bcf	3,5	;RP0=0, select bank0
 10337  0265  0841               	movf	?___fttol,w
 10338  0266  1683               	bsf	3,5	;RP0=1, select bank1
 10339  0267  00CD               	movwf	main@stepsto_turn^(0+128)
 10340  0268                     l6727:	
 10341                           ;Automated Solar Panel Orientation Setter.c: 392: while( !(sterpper_counts == stepsto_tu
      +                          rn)){
 10342                           
 10343  0268  1683               	bsf	3,5	;RP0=1, select bank1
 10344  0269  0844               	movf	(_sterpper_counts+1)^(0+128),w
 10345  026A  064E               	xorwf	(main@stepsto_turn+1)^(0+128),w
 10346  026B  1D03               	skipz
 10347  026C  2A6F               	goto	u8495
 10348  026D  0843               	movf	_sterpper_counts^(0+128),w
 10349  026E  064D               	xorwf	main@stepsto_turn^(0+128),w
 10350  026F                     u8495:	
 10351  026F  1903               	btfsc	3,2
 10352  0270  2A8D               	goto	l6729
 10353                           
 10354                           ;Automated Solar Panel Orientation Setter.c: 393: if( stepsto_turn > sterpper_counts ){
 10355  0271  084E               	movf	(main@stepsto_turn+1)^(0+128),w
 10356  0272  0244               	subwf	(_sterpper_counts+1)^(0+128),w
 10357  0273  1D03               	skipz
 10358  0274  2A77               	goto	u8485
 10359  0275  084D               	movf	main@stepsto_turn^(0+128),w
 10360  0276  0243               	subwf	_sterpper_counts^(0+128),w
 10361  0277                     u8485:	
 10362  0277  1803               	skipnc
 10363  0278  2A83               	goto	l6725
 10364                           
 10365                           ;Automated Solar Panel Orientation Setter.c: 394: RotateMotorLeft(1);
 10366  0279  1283               	bcf	3,5	;RP0=0, select bank0
 10367  027A  01A5               	clrf	RotateMotorLeft@value
 10368  027B  0AA5               	incf	RotateMotorLeft@value,f
 10369  027C  01A6               	clrf	RotateMotorLeft@value+1
 10370  027D  160A  158A  2543  120A  118A  	fcall	_RotateMotorLeft
 10371                           
 10372                           ;Automated Solar Panel Orientation Setter.c: 395: }
 10373  0282  2A68               	goto	l6727
 10374  0283                     l6725:	
 10375                           
 10376                           ;Automated Solar Panel Orientation Setter.c: 396: else{
 10377                           ;Automated Solar Panel Orientation Setter.c: 397: RotateMotorRight(1);
 10378  0283  1283               	bcf	3,5	;RP0=0, select bank0
 10379  0284  01A5               	clrf	RotateMotorRight@value
 10380  0285  0AA5               	incf	RotateMotorRight@value,f
 10381  0286  01A6               	clrf	RotateMotorRight@value+1
 10382  0287  160A  158A  258F  120A  118A  	fcall	_RotateMotorRight
 10383  028C  2A68               	goto	l6727
 10384  028D                     l6729:	
 10385                           
 10386                           ;Automated Solar Panel Orientation Setter.c: 398: }
 10387                           ;Automated Solar Panel Orientation Setter.c: 399: }
 10388                           ;Automated Solar Panel Orientation Setter.c: 400: }
 10389                           ;Automated Solar Panel Orientation Setter.c: 406: CheckMode();
 10390  028D  160A  118A  20DD  120A  118A  	fcall	_CheckMode
 10391                           
 10392                           ;Automated Solar Panel Orientation Setter.c: 410: break;
 10393  0292  2DDE               	goto	l6933
 10394  0293                     l6731:	
 10395  0293  3001               	movlw	1
 10396                           
 10397                           ;Automated Solar Panel Orientation Setter.c: 414: position(1,1);
 10398  0294  01A6               	clrf	position@collum
 10399  0295  0AA6               	incf	position@collum,f
 10400  0296  120A  158A  221A  120A  118A  	fcall	_position
 10401                           
 10402                           ;Automated Solar Panel Orientation Setter.c: 415: printf("MODE3,000D,00:00");
 10403  029B  308C               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
 10404  029C  120A  158A  201B  120A  118A  	fcall	_printf
 10405  02A1  3002               	movlw	2
 10406                           
 10407                           ;Automated Solar Panel Orientation Setter.c: 416: position(2,1);
 10408  02A2  01A6               	clrf	position@collum
 10409  02A3  0AA6               	incf	position@collum,f
 10410  02A4  120A  158A  221A  120A  118A  	fcall	_position
 10411                           
 10412                           ;Automated Solar Panel Orientation Setter.c: 417: printf("00.0V,0.0A,00.0W");
 10413  02A9  309D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
 10414  02AA  120A  158A  201B  120A  118A  	fcall	_printf
 10415                           
 10416                           ;Automated Solar Panel Orientation Setter.c: 418: LCDTimeUpdate();
 10417  02AF  120A  158A  2062  120A  118A  	fcall	_LCDTimeUpdate
 10418                           
 10419                           ;Automated Solar Panel Orientation Setter.c: 422: state = 30;
 10420  02B4  301E               	movlw	30
 10421  02B5  2CC8               	goto	L4
 10422  02B6                     l6741:	
 10423                           ;Automated Solar Panel Orientation Setter.c: 423: break;
 10424                           
 10425                           
 10426                           ;Automated Solar Panel Orientation Setter.c: 426: a2d_read();
 10427  02B6  160A  118A  2605  120A  118A  	fcall	_a2d_read
 10428                           
 10429                           ;Automated Solar Panel Orientation Setter.c: 427: Serial_Print_Int(ldr1);
 10430  02BB  1683               	bsf	3,5	;RP0=1, select bank1
 10431  02BC  083C               	movf	(_ldr1+1)^(0+128),w
 10432  02BD  1283               	bcf	3,5	;RP0=0, select bank0
 10433  02BE  00B4               	movwf	Serial_Print_Int@val+1
 10434  02BF  1683               	bsf	3,5	;RP0=1, select bank1
 10435  02C0  083B               	movf	_ldr1^(0+128),w
 10436  02C1  1283               	bcf	3,5	;RP0=0, select bank0
 10437  02C2  00B3               	movwf	Serial_Print_Int@val
 10438  02C3  120A  158A  24D6  120A  118A  	fcall	_Serial_Print_Int
 10439                           
 10440                           ;Automated Solar Panel Orientation Setter.c: 428: Serial_Print(", ");
 10441  02C8  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10442  02C9  160A  118A  2312  120A  118A  	fcall	_Serial_Print
 10443                           
 10444                           ;Automated Solar Panel Orientation Setter.c: 429: Serial_Print_Int(ldr2);
 10445  02CE  0854               	movf	_ldr2+1,w
 10446  02CF  00B4               	movwf	Serial_Print_Int@val+1
 10447  02D0  0853               	movf	_ldr2,w
 10448  02D1  00B3               	movwf	Serial_Print_Int@val
 10449  02D2  120A  158A  24D6  120A  118A  	fcall	_Serial_Print_Int
 10450                           
 10451                           ;Automated Solar Panel Orientation Setter.c: 430: Serial_Print(", ");
 10452  02D7  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10453  02D8  160A  118A  2312  120A  118A  	fcall	_Serial_Print
 10454                           
 10455                           ;Automated Solar Panel Orientation Setter.c: 431: Serial_Print_Int(V_Bat);
 10456  02DD  1683               	bsf	3,5	;RP0=1, select bank1
 10457  02DE  0849               	movf	(_V_Bat+1)^(0+128),w
 10458  02DF  1283               	bcf	3,5	;RP0=0, select bank0
 10459  02E0  00B4               	movwf	Serial_Print_Int@val+1
 10460  02E1  1683               	bsf	3,5	;RP0=1, select bank1
 10461  02E2  0848               	movf	_V_Bat^(0+128),w
 10462  02E3  1283               	bcf	3,5	;RP0=0, select bank0
 10463  02E4  00B3               	movwf	Serial_Print_Int@val
 10464  02E5  120A  158A  24D6  120A  118A  	fcall	_Serial_Print_Int
 10465                           
 10466                           ;Automated Solar Panel Orientation Setter.c: 432: Serial_Print(", ");
 10467  02EA  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10468  02EB  160A  118A  2312  120A  118A  	fcall	_Serial_Print
 10469                           
 10470                           ;Automated Solar Panel Orientation Setter.c: 433: Serial_Print_Int(C_Bat);
 10471  02F0  1683               	bsf	3,5	;RP0=1, select bank1
 10472  02F1  0847               	movf	(_C_Bat+1)^(0+128),w
 10473  02F2  1283               	bcf	3,5	;RP0=0, select bank0
 10474  02F3  00B4               	movwf	Serial_Print_Int@val+1
 10475  02F4  1683               	bsf	3,5	;RP0=1, select bank1
 10476  02F5  0846               	movf	_C_Bat^(0+128),w
 10477  02F6  1283               	bcf	3,5	;RP0=0, select bank0
 10478  02F7  00B3               	movwf	Serial_Print_Int@val
 10479  02F8  120A  158A  24D6  120A  118A  	fcall	_Serial_Print_Int
 10480                           
 10481                           ;Automated Solar Panel Orientation Setter.c: 434: Serial_Print(", ");
 10482  02FD  30AE               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
 10483  02FE  160A  118A  2312  120A  118A  	fcall	_Serial_Print
 10484                           
 10485                           ;Automated Solar Panel Orientation Setter.c: 435: Serial_NewLine();
 10486  0303  160A  158A  23FE  120A  118A  	fcall	_Serial_NewLine
 10487                           
 10488                           ;Automated Solar Panel Orientation Setter.c: 436: _delay((unsigned long)((50)*(4000000/4
      +                          000.0)));
 10489  0308  3041               	movlw	65
 10490  0309  1283               	bcf	3,5	;RP0=0, select bank0
 10491  030A  1303               	bcf	3,6	;RP1=0, select bank0
 10492  030B  00CF               	movwf	??_main+1
 10493  030C  30EE               	movlw	238
 10494  030D  00CE               	movwf	??_main
 10495  030E                     u8607:	
 10496  030E  0BCE               	decfsz	??_main,f
 10497  030F  2B0E               	goto	u8607
 10498  0310  0BCF               	decfsz	??_main+1,f
 10499  0311  2B0E               	goto	u8607
 10500  0312  0000               	nop
 10501                           
 10502                           ;Automated Solar Panel Orientation Setter.c: 437: nop();
 10503  0313  160A  118A  216D  120A  118A  	fcall	_nop
 10504                           
 10505                           ;Automated Solar Panel Orientation Setter.c: 440: double tmp_angle_display = (double)(st
      +                          erpper_counts/0.55);
 10506  0318  30CD               	movlw	205
 10507  0319  00B0               	movwf	___ftdiv@f2
 10508  031A  300C               	movlw	12
 10509  031B  00B1               	movwf	___ftdiv@f2+1
 10510  031C  303F               	movlw	63
 10511  031D  00B2               	movwf	___ftdiv@f2+2
 10512  031E  1683               	bsf	3,5	;RP0=1, select bank1
 10513  031F  0844               	movf	(_sterpper_counts+1)^(0+128),w
 10514  0320  1283               	bcf	3,5	;RP0=0, select bank0
 10515  0321  00AE               	movwf	___lwtoft@c+1
 10516  0322  1683               	bsf	3,5	;RP0=1, select bank1
 10517  0323  0843               	movf	_sterpper_counts^(0+128),w
 10518  0324  1283               	bcf	3,5	;RP0=0, select bank0
 10519  0325  00AD               	movwf	___lwtoft@c
 10520  0326  160A  118A  27A7  120A  118A  	fcall	___lwtoft
 10521  032B  082D               	movf	?___lwtoft,w
 10522  032C  00B3               	movwf	___ftdiv@f1
 10523  032D  082E               	movf	?___lwtoft+1,w
 10524  032E  00B4               	movwf	___ftdiv@f1+1
 10525  032F  082F               	movf	?___lwtoft+2,w
 10526  0330  00B5               	movwf	___ftdiv@f1+2
 10527  0331  160A  118A  259D  120A  118A  	fcall	___ftdiv
 10528  0336  0830               	movf	?___ftdiv,w
 10529  0337  1683               	bsf	3,5	;RP0=1, select bank1
 10530  0338  00D3               	movwf	main@tmp_angle_display^(0+128)
 10531  0339  1283               	bcf	3,5	;RP0=0, select bank0
 10532  033A  0831               	movf	?___ftdiv+1,w
 10533  033B  1683               	bsf	3,5	;RP0=1, select bank1
 10534  033C  00D4               	movwf	(main@tmp_angle_display+1)^(0+128)
 10535  033D  1283               	bcf	3,5	;RP0=0, select bank0
 10536  033E  0832               	movf	?___ftdiv+2,w
 10537  033F  1683               	bsf	3,5	;RP0=1, select bank1
 10538  0340  00D5               	movwf	(main@tmp_angle_display+2)^(0+128)
 10539                           
 10540                           ;Automated Solar Panel Orientation Setter.c: 441: int angle_display = (int)tmp_angle_dis
      +                          play;
 10541  0341  0853               	movf	main@tmp_angle_display^(0+128),w
 10542  0342  1283               	bcf	3,5	;RP0=0, select bank0
 10543  0343  00C1               	movwf	___fttol@f1
 10544  0344  1683               	bsf	3,5	;RP0=1, select bank1
 10545  0345  0854               	movf	(main@tmp_angle_display+1)^(0+128),w
 10546  0346  1283               	bcf	3,5	;RP0=0, select bank0
 10547  0347  00C2               	movwf	___fttol@f1+1
 10548  0348  1683               	bsf	3,5	;RP0=1, select bank1
 10549  0349  0855               	movf	(main@tmp_angle_display+2)^(0+128),w
 10550  034A  1283               	bcf	3,5	;RP0=0, select bank0
 10551  034B  00C3               	movwf	___fttol@f1+2
 10552  034C  160A  118A  274C  120A  118A  	fcall	___fttol
 10553  0351  0842               	movf	?___fttol+1,w
 10554  0352  1683               	bsf	3,5	;RP0=1, select bank1
 10555  0353  00DF               	movwf	(main@angle_display+1)^(0+128)
 10556  0354  1283               	bcf	3,5	;RP0=0, select bank0
 10557  0355  0841               	movf	?___fttol,w
 10558  0356  1683               	bsf	3,5	;RP0=1, select bank1
 10559  0357  00DE               	movwf	main@angle_display^(0+128)
 10560                           
 10561                           ;Automated Solar Panel Orientation Setter.c: 443: LCD_print_char(1,7,angle_display/100+4
      +                          8);
 10562  0358  1283               	bcf	3,5	;RP0=0, select bank0
 10563  0359  3007               	movlw	7
 10564  035A  01B3               	clrf	LCD_print_char@row
 10565  035B  0AB3               	incf	LCD_print_char@row,f
 10566  035C  01B4               	clrf	LCD_print_char@row+1
 10567  035D  00B5               	movwf	LCD_print_char@column
 10568  035E  3064               	movlw	100
 10569  035F  01B6               	clrf	LCD_print_char@column+1
 10570  0360  00AB               	movwf	___awdiv@divisor
 10571  0361  01AC               	clrf	___awdiv@divisor+1
 10572  0362  1683               	bsf	3,5	;RP0=1, select bank1
 10573  0363  085F               	movf	(main@angle_display+1)^(0+128),w
 10574  0364  1283               	bcf	3,5	;RP0=0, select bank0
 10575  0365  00AE               	movwf	___awdiv@dividend+1
 10576  0366  1683               	bsf	3,5	;RP0=1, select bank1
 10577  0367  085E               	movf	main@angle_display^(0+128),w
 10578  0368  1283               	bcf	3,5	;RP0=0, select bank0
 10579  0369  00AD               	movwf	___awdiv@dividend
 10580  036A  120A  158A  271E  120A  118A  	fcall	___awdiv
 10581  036F  082B               	movf	?___awdiv,w
 10582  0370  3E30               	addlw	48
 10583  0371  00B7               	movwf	LCD_print_char@print_value
 10584  0372  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10585                           
 10586                           ;Automated Solar Panel Orientation Setter.c: 444: LCD_print_char(1,8,angle_display%100/1
      +                          0+48);
 10587  0377  1283               	bcf	3,5	;RP0=0, select bank0
 10588  0378  1303               	bcf	3,6	;RP1=0, select bank0
 10589  0379  3008               	movlw	8
 10590  037A  01B3               	clrf	LCD_print_char@row
 10591  037B  0AB3               	incf	LCD_print_char@row,f
 10592  037C  01B4               	clrf	LCD_print_char@row+1
 10593  037D  00B5               	movwf	LCD_print_char@column
 10594  037E  300A               	movlw	10
 10595  037F  01B6               	clrf	LCD_print_char@column+1
 10596  0380  00AB               	movwf	___awdiv@divisor
 10597  0381  01AC               	clrf	___awdiv@divisor+1
 10598  0382  1683               	bsf	3,5	;RP0=1, select bank1
 10599  0383  085F               	movf	(main@angle_display+1)^(0+128),w
 10600  0384  1283               	bcf	3,5	;RP0=0, select bank0
 10601  0385  00A8               	movwf	___awmod@dividend+1
 10602  0386  1683               	bsf	3,5	;RP0=1, select bank1
 10603  0387  085E               	movf	main@angle_display^(0+128),w
 10604  0388  1283               	bcf	3,5	;RP0=0, select bank0
 10605  0389  00A7               	movwf	___awmod@dividend
 10606  038A  3064               	movlw	100
 10607  038B  00A5               	movwf	___awmod@divisor
 10608  038C  01A6               	clrf	___awmod@divisor+1
 10609  038D  120A  158A  2763  120A  118A  	fcall	___awmod
 10610  0392  0826               	movf	?___awmod+1,w
 10611  0393  00AE               	movwf	___awdiv@dividend+1
 10612  0394  0825               	movf	?___awmod,w
 10613  0395  00AD               	movwf	___awdiv@dividend
 10614  0396  120A  158A  271E  120A  118A  	fcall	___awdiv
 10615  039B  082B               	movf	?___awdiv,w
 10616  039C  3E30               	addlw	48
 10617  039D  00B7               	movwf	LCD_print_char@print_value
 10618  039E  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10619                           
 10620                           ;Automated Solar Panel Orientation Setter.c: 445: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
 10621  03A3  1683               	bsf	3,5	;RP0=1, select bank1
 10622  03A4  1303               	bcf	3,6	;RP1=0, select bank1
 10623  03A5  085F               	movf	(main@angle_display+1)^(0+128),w
 10624  03A6  1283               	bcf	3,5	;RP0=0, select bank0
 10625  03A7  00A8               	movwf	___awmod@dividend+1
 10626  03A8  1683               	bsf	3,5	;RP0=1, select bank1
 10627  03A9  085E               	movf	main@angle_display^(0+128),w
 10628  03AA  1283               	bcf	3,5	;RP0=0, select bank0
 10629  03AB  00A7               	movwf	___awmod@dividend
 10630  03AC  3064               	movlw	100
 10631  03AD  00A5               	movwf	___awmod@divisor
 10632  03AE  01A6               	clrf	___awmod@divisor+1
 10633  03AF  120A  158A  2763  120A  118A  	fcall	___awmod
 10634  03B4  0826               	movf	?___awmod+1,w
 10635  03B5  1683               	bsf	3,5	;RP0=1, select bank1
 10636  03B6  00DB               	movwf	(_main$814+1)^(0+128)
 10637  03B7  1283               	bcf	3,5	;RP0=0, select bank0
 10638  03B8  0825               	movf	?___awmod,w
 10639  03B9  1683               	bsf	3,5	;RP0=1, select bank1
 10640  03BA  00DA               	movwf	_main$814^(0+128)
 10641                           
 10642                           ;Automated Solar Panel Orientation Setter.c: 445: LCD_print_char(1,9,angle_display%100%1
      +                          0+48);
 10643  03BB  1283               	bcf	3,5	;RP0=0, select bank0
 10644  03BC  3009               	movlw	9
 10645  03BD  01B3               	clrf	LCD_print_char@row
 10646  03BE  0AB3               	incf	LCD_print_char@row,f
 10647  03BF  01B4               	clrf	LCD_print_char@row+1
 10648  03C0  00B5               	movwf	LCD_print_char@column
 10649  03C1  300A               	movlw	10
 10650  03C2  01B6               	clrf	LCD_print_char@column+1
 10651  03C3  00A5               	movwf	___awmod@divisor
 10652  03C4  01A6               	clrf	___awmod@divisor+1
 10653  03C5  1683               	bsf	3,5	;RP0=1, select bank1
 10654  03C6  085B               	movf	(_main$814+1)^(0+128),w
 10655  03C7  1283               	bcf	3,5	;RP0=0, select bank0
 10656  03C8  00A8               	movwf	___awmod@dividend+1
 10657  03C9  1683               	bsf	3,5	;RP0=1, select bank1
 10658  03CA  085A               	movf	_main$814^(0+128),w
 10659  03CB  1283               	bcf	3,5	;RP0=0, select bank0
 10660  03CC  00A7               	movwf	___awmod@dividend
 10661  03CD  120A  158A  2763  120A  118A  	fcall	___awmod
 10662  03D2  0825               	movf	?___awmod,w
 10663  03D3  3E30               	addlw	48
 10664  03D4  00B7               	movwf	LCD_print_char@print_value
 10665  03D5  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10666                           
 10667                           ;Automated Solar Panel Orientation Setter.c: 448: LCD_print_char(2,1,V_Bat2/10+48);
 10668  03DA  3002               	movlw	2
 10669  03DB  1283               	bcf	3,5	;RP0=0, select bank0
 10670  03DC  1303               	bcf	3,6	;RP1=0, select bank0
 10671  03DD  00B3               	movwf	LCD_print_char@row
 10672  03DE  300A               	movlw	10
 10673  03DF  01B4               	clrf	LCD_print_char@row+1
 10674  03E0  01B5               	clrf	LCD_print_char@column
 10675  03E1  0AB5               	incf	LCD_print_char@column,f
 10676  03E2  01B6               	clrf	LCD_print_char@column+1
 10677  03E3  00A5               	movwf	___ltdiv@divisor
 10678  03E4  01A6               	clrf	___ltdiv@divisor+1
 10679  03E5  01A7               	clrf	___ltdiv@divisor+2
 10680  03E6  1683               	bsf	3,5	;RP0=1, select bank1
 10681  03E7  0834               	movf	_V_Bat2^(0+128),w
 10682  03E8  1283               	bcf	3,5	;RP0=0, select bank0
 10683  03E9  00A8               	movwf	___ltdiv@dividend
 10684  03EA  1683               	bsf	3,5	;RP0=1, select bank1
 10685  03EB  0835               	movf	(_V_Bat2+1)^(0+128),w
 10686  03EC  1283               	bcf	3,5	;RP0=0, select bank0
 10687  03ED  00A9               	movwf	___ltdiv@dividend+1
 10688  03EE  1683               	bsf	3,5	;RP0=1, select bank1
 10689  03EF  0836               	movf	(_V_Bat2+2)^(0+128),w
 10690  03F0  1283               	bcf	3,5	;RP0=0, select bank0
 10691  03F1  00AA               	movwf	___ltdiv@dividend+2
 10692  03F2  160A  158A  2462  120A  118A  	fcall	___ltdiv
 10693  03F7  0825               	movf	?___ltdiv,w
 10694  03F8  3E30               	addlw	48
 10695  03F9  00B7               	movwf	LCD_print_char@print_value
 10696  03FA  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10697                           
 10698                           ;Automated Solar Panel Orientation Setter.c: 449: LCD_print_char(2,2,V_Bat2%10+48);
 10699  03FF  3002               	movlw	2
 10700  0400  1283               	bcf	3,5	;RP0=0, select bank0
 10701  0401  1303               	bcf	3,6	;RP1=0, select bank0
 10702  0402  00B3               	movwf	LCD_print_char@row
 10703  0403  01B4               	clrf	LCD_print_char@row+1
 10704  0404  00B5               	movwf	LCD_print_char@column
 10705  0405  300A               	movlw	10
 10706  0406  01B6               	clrf	LCD_print_char@column+1
 10707  0407  00A5               	movwf	___ltmod@divisor
 10708  0408  01A6               	clrf	___ltmod@divisor+1
 10709  0409  01A7               	clrf	___ltmod@divisor+2
 10710  040A  1683               	bsf	3,5	;RP0=1, select bank1
 10711  040B  0834               	movf	_V_Bat2^(0+128),w
 10712  040C  1283               	bcf	3,5	;RP0=0, select bank0
 10713  040D  00A8               	movwf	___ltmod@dividend
 10714  040E  1683               	bsf	3,5	;RP0=1, select bank1
 10715  040F  0835               	movf	(_V_Bat2+1)^(0+128),w
 10716  0410  1283               	bcf	3,5	;RP0=0, select bank0
 10717  0411  00A9               	movwf	___ltmod@dividend+1
 10718  0412  1683               	bsf	3,5	;RP0=1, select bank1
 10719  0413  0836               	movf	(_V_Bat2+2)^(0+128),w
 10720  0414  1283               	bcf	3,5	;RP0=0, select bank0
 10721  0415  00AA               	movwf	___ltmod@dividend+2
 10722  0416  160A  158A  2431  120A  118A  	fcall	___ltmod
 10723  041B  0825               	movf	?___ltmod,w
 10724  041C  3E30               	addlw	48
 10725  041D  00B7               	movwf	LCD_print_char@print_value
 10726  041E  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10727                           
 10728                           ;Automated Solar Panel Orientation Setter.c: 450: LCD_print_char(2,4,'0');
 10729  0423  3002               	movlw	2
 10730  0424  1283               	bcf	3,5	;RP0=0, select bank0
 10731  0425  1303               	bcf	3,6	;RP1=0, select bank0
 10732  0426  00B3               	movwf	LCD_print_char@row
 10733  0427  3004               	movlw	4
 10734  0428  01B4               	clrf	LCD_print_char@row+1
 10735  0429  00B5               	movwf	LCD_print_char@column
 10736  042A  3030               	movlw	48
 10737  042B  01B6               	clrf	LCD_print_char@column+1
 10738  042C  00B7               	movwf	LCD_print_char@print_value
 10739  042D  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10740                           
 10741                           ;Automated Solar Panel Orientation Setter.c: 453: LCD_print_char(2,7,'0');
 10742  0432  3002               	movlw	2
 10743  0433  1283               	bcf	3,5	;RP0=0, select bank0
 10744  0434  1303               	bcf	3,6	;RP1=0, select bank0
 10745  0435  00B3               	movwf	LCD_print_char@row
 10746  0436  3007               	movlw	7
 10747  0437  01B4               	clrf	LCD_print_char@row+1
 10748  0438  00B5               	movwf	LCD_print_char@column
 10749  0439  3030               	movlw	48
 10750  043A  01B6               	clrf	LCD_print_char@column+1
 10751  043B  00B7               	movwf	LCD_print_char@print_value
 10752  043C  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10753                           
 10754                           ;Automated Solar Panel Orientation Setter.c: 454: LCD_print_char(2,9,'0');
 10755  0441  3002               	movlw	2
 10756  0442  1283               	bcf	3,5	;RP0=0, select bank0
 10757  0443  1303               	bcf	3,6	;RP1=0, select bank0
 10758  0444  00B3               	movwf	LCD_print_char@row
 10759  0445  3009               	movlw	9
 10760  0446  01B4               	clrf	LCD_print_char@row+1
 10761  0447  00B5               	movwf	LCD_print_char@column
 10762  0448  3030               	movlw	48
 10763  0449  01B6               	clrf	LCD_print_char@column+1
 10764  044A  00B7               	movwf	LCD_print_char@print_value
 10765  044B  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10766                           
 10767                           ;Automated Solar Panel Orientation Setter.c: 457: LCD_print_char(2,12,'0');
 10768  0450  3002               	movlw	2
 10769  0451  1283               	bcf	3,5	;RP0=0, select bank0
 10770  0452  1303               	bcf	3,6	;RP1=0, select bank0
 10771  0453  00B3               	movwf	LCD_print_char@row
 10772  0454  300C               	movlw	12
 10773  0455  01B4               	clrf	LCD_print_char@row+1
 10774  0456  00B5               	movwf	LCD_print_char@column
 10775  0457  3030               	movlw	48
 10776  0458  01B6               	clrf	LCD_print_char@column+1
 10777  0459  00B7               	movwf	LCD_print_char@print_value
 10778  045A  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10779                           
 10780                           ;Automated Solar Panel Orientation Setter.c: 458: LCD_print_char(2,13,'0');
 10781  045F  3002               	movlw	2
 10782  0460  1283               	bcf	3,5	;RP0=0, select bank0
 10783  0461  1303               	bcf	3,6	;RP1=0, select bank0
 10784  0462  00B3               	movwf	LCD_print_char@row
 10785  0463  300D               	movlw	13
 10786  0464  01B4               	clrf	LCD_print_char@row+1
 10787  0465  00B5               	movwf	LCD_print_char@column
 10788  0466  3030               	movlw	48
 10789  0467  01B6               	clrf	LCD_print_char@column+1
 10790  0468  00B7               	movwf	LCD_print_char@print_value
 10791  0469  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10792                           
 10793                           ;Automated Solar Panel Orientation Setter.c: 459: LCD_print_char(2,15,'0');
 10794  046E  3002               	movlw	2
 10795  046F  1283               	bcf	3,5	;RP0=0, select bank0
 10796  0470  1303               	bcf	3,6	;RP1=0, select bank0
 10797  0471  00B3               	movwf	LCD_print_char@row
 10798  0472  300F               	movlw	15
 10799  0473  01B4               	clrf	LCD_print_char@row+1
 10800  0474  00B5               	movwf	LCD_print_char@column
 10801  0475  3030               	movlw	48
 10802  0476  01B6               	clrf	LCD_print_char@column+1
 10803  0477  00B7               	movwf	LCD_print_char@print_value
 10804  0478  120A  158A  20F5  120A  118A  	fcall	_LCD_print_char
 10805                           
 10806                           ;Automated Solar Panel Orientation Setter.c: 467: pressedKey = CheckKeyPad();
 10807  047D  160A  118A  2172  120A  118A  	fcall	_CheckKeyPad
 10808  0482  1683               	bsf	3,5	;RP0=1, select bank1
 10809  0483  00E0               	movwf	main@pressedKey^(0+128)
 10810                           
 10811                           ;Automated Solar Panel Orientation Setter.c: 468: if(pressedKey == 'A'){
 10812  0484  3A41               	xorlw	65
 10813  0485  1D03               	btfss	3,2
 10814  0486  2C91               	goto	l6797
 10815                           
 10816                           ;Automated Solar Panel Orientation Setter.c: 469: RotateMotorLeft(1);
 10817  0487  1283               	bcf	3,5	;RP0=0, select bank0
 10818  0488  01A5               	clrf	RotateMotorLeft@value
 10819  0489  0AA5               	incf	RotateMotorLeft@value,f
 10820  048A  01A6               	clrf	RotateMotorLeft@value+1
 10821  048B  160A  158A  2543  120A  118A  	fcall	_RotateMotorLeft
 10822                           
 10823                           ;Automated Solar Panel Orientation Setter.c: 470: }
 10824  0490  2DDE               	goto	l6933
 10825  0491                     l6797:	
 10826                           
 10827                           ;Automated Solar Panel Orientation Setter.c: 471: else if(pressedKey == 'B'){
 10828  0491  3042               	movlw	66
 10829  0492  0660               	xorwf	main@pressedKey^(0+128),w
 10830  0493  1D03               	btfss	3,2
 10831  0494  2C9F               	goto	l6801
 10832                           
 10833                           ;Automated Solar Panel Orientation Setter.c: 472: RotateMotorRight(1);
 10834  0495  1283               	bcf	3,5	;RP0=0, select bank0
 10835  0496  01A5               	clrf	RotateMotorRight@value
 10836  0497  0AA5               	incf	RotateMotorRight@value,f
 10837  0498  01A6               	clrf	RotateMotorRight@value+1
 10838  0499  160A  158A  258F  120A  118A  	fcall	_RotateMotorRight
 10839                           
 10840                           ;Automated Solar Panel Orientation Setter.c: 473: }
 10841  049E  2DDE               	goto	l6933
 10842  049F                     l6801:	
 10843                           
 10844                           ;Automated Solar Panel Orientation Setter.c: 474: else if (pressedKey == '*'){
 10845  049F  302A               	movlw	42
 10846  04A0  0660               	xorwf	main@pressedKey^(0+128),w
 10847  04A1  1D03               	btfss	3,2
 10848  04A2  2DDE               	goto	l6933
 10849                           
 10850                           ;Automated Solar Panel Orientation Setter.c: 475: state = 4;
 10851  04A3  3004               	movlw	4
 10852  04A4  1283               	bcf	3,5	;RP0=0, select bank0
 10853  04A5  2DDD               	goto	L1
 10854  04A6                     l6805:	
 10855  04A6  3001               	movlw	1
 10856                           
 10857                           ;Automated Solar Panel Orientation Setter.c: 484: position(1,1);
 10858  04A7  01A6               	clrf	position@collum
 10859  04A8  0AA6               	incf	position@collum,f
 10860  04A9  120A  158A  221A  120A  118A  	fcall	_position
 10861                           
 10862                           ;Automated Solar Panel Orientation Setter.c: 485: printf("MODE*,000D,00:00");
 10863  04AE  3059               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
 10864  04AF  120A  158A  201B  120A  118A  	fcall	_printf
 10865  04B4  3002               	movlw	2
 10866                           
 10867                           ;Automated Solar Panel Orientation Setter.c: 486: position(2,1);
 10868  04B5  01A6               	clrf	position@collum
 10869  04B6  0AA6               	incf	position@collum,f
 10870  04B7  120A  158A  221A  120A  118A  	fcall	_position
 10871                           
 10872                           ;Automated Solar Panel Orientation Setter.c: 487: printf("00.0V,0.0A,00.0W");
 10873  04BC  309D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
 10874  04BD  120A  158A  201B  120A  118A  	fcall	_printf
 10875                           
 10876                           ;Automated Solar Panel Orientation Setter.c: 488: LCDTimeUpdate();
 10877  04C2  120A  158A  2062  120A  118A  	fcall	_LCDTimeUpdate
 10878                           
 10879                           ;Automated Solar Panel Orientation Setter.c: 489: state = 40;
 10880  04C7  3028               	movlw	40
 10881  04C8                     L4:	
 10882  04C8  1283               	bcf	3,5	;RP0=0, select bank0
 10883  04C9  1303               	bcf	3,6	;RP1=0, select bank0
 10884  04CA  2DDD               	goto	L1
 10885  04CB                     l6815:	
 10886                           ;Automated Solar Panel Orientation Setter.c: 490: break;
 10887                           
 10888                           
 10889                           ;Automated Solar Panel Orientation Setter.c: 493: pressedKey = CheckKeyPad();
 10890  04CB  160A  118A  2172  120A  118A  	fcall	_CheckKeyPad
 10891  04D0  1683               	bsf	3,5	;RP0=1, select bank1
 10892  04D1  00E0               	movwf	main@pressedKey^(0+128)
 10893                           
 10894                           ;Automated Solar Panel Orientation Setter.c: 494: if( pressedKey=='*' ){
 10895  04D2  3A2A               	xorlw	42
 10896  04D3  1D03               	btfss	3,2
 10897  04D4  2DAC               	goto	l6907
 10898                           
 10899                           ;Automated Solar Panel Orientation Setter.c: 495: currentMode++;
 10900  04D5  0AB9               	incf	_currentMode^(0+128),f
 10901  04D6  1903               	skipnz
 10902  04D7  0ABA               	incf	(_currentMode+1)^(0+128),f
 10903                           
 10904                           ;Automated Solar Panel Orientation Setter.c: 496: if (currentMode>4) currentMode = 1;
 10905  04D8  3000               	movlw	0
 10906  04D9  023A               	subwf	(_currentMode+1)^(0+128),w
 10907  04DA  3005               	movlw	5
 10908  04DB  1903               	skipnz
 10909  04DC  0239               	subwf	_currentMode^(0+128),w
 10910  04DD  1C03               	skipc
 10911  04DE  2CE2               	goto	l6825
 10912  04DF  01B9               	clrf	_currentMode^(0+128)
 10913  04E0  0AB9               	incf	_currentMode^(0+128),f
 10914  04E1  01BA               	clrf	(_currentMode+1)^(0+128)
 10915  04E2                     l6825:	
 10916                           
 10917                           ;Automated Solar Panel Orientation Setter.c: 497: state = currentMode;
 10918  04E2  0839               	movf	_currentMode^(0+128),w
 10919  04E3  1283               	bcf	3,5	;RP0=0, select bank0
 10920  04E4  00D7               	movwf	_state
 10921                           
 10922                           ;Automated Solar Panel Orientation Setter.c: 499: RC1 = 1;
 10923  04E5  1487               	bsf	7,1	;volatile
 10924                           
 10925                           ;Automated Solar Panel Orientation Setter.c: 500: Serial_Print("Switched to Mode : ");
 10926  04E6  3001               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
 10927  04E7  160A  118A  2312  120A  118A  	fcall	_Serial_Print
 10928                           
 10929                           ;Automated Solar Panel Orientation Setter.c: 501: Serial_Println_Int((int)state);
 10930  04EC  0857               	movf	_state,w
 10931  04ED  00B3               	movwf	Serial_Println_Int@val
 10932  04EE  01B4               	clrf	Serial_Println_Int@val+1
 10933  04EF  120A  158A  25EF  120A  118A  	fcall	_Serial_Println_Int
 10934                           
 10935                           ;Automated Solar Panel Orientation Setter.c: 502: RC1 = 0;
 10936  04F4  1283               	bcf	3,5	;RP0=0, select bank0
 10937  04F5  1303               	bcf	3,6	;RP1=0, select bank0
 10938  04F6  1087               	bcf	7,1	;volatile
 10939                           
 10940                           ;Automated Solar Panel Orientation Setter.c: 504: ; nop();nop();nop();nop();nop();nop();
      +                          nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop(
      +                          );nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();nop();no
      +                          p();;
 10941  04F7  160A  118A  216D  120A  118A  	fcall	_nop
 10942  04FC  160A  118A  216D  120A  118A  	fcall	_nop
 10943  0501  160A  118A  216D  120A  118A  	fcall	_nop
 10944  0506  160A  118A  216D  120A  118A  	fcall	_nop
 10945  050B  160A  118A  216D  120A  118A  	fcall	_nop
 10946  0510  160A  118A  216D  120A  118A  	fcall	_nop
 10947  0515  160A  118A  216D  120A  118A  	fcall	_nop
 10948  051A  160A  118A  216D  120A  118A  	fcall	_nop
 10949  051F  160A  118A  216D  120A  118A  	fcall	_nop
 10950  0524  160A  118A  216D  120A  118A  	fcall	_nop
 10951  0529  160A  118A  216D  120A  118A  	fcall	_nop
 10952  052E  160A  118A  216D  120A  118A  	fcall	_nop
 10953  0533  160A  118A  216D  120A  118A  	fcall	_nop
 10954  0538  160A  118A  216D  120A  118A  	fcall	_nop
 10955  053D  160A  118A  216D  120A  118A  	fcall	_nop
 10956  0542  160A  118A  216D  120A  118A  	fcall	_nop
 10957  0547  160A  118A  216D  120A  118A  	fcall	_nop
 10958  054C  160A  118A  216D  120A  118A  	fcall	_nop
 10959  0551  160A  118A  216D  120A  118A  	fcall	_nop
 10960  0556  160A  118A  216D  120A  118A  	fcall	_nop
 10961  055B  160A  118A  216D  120A  118A  	fcall	_nop
 10962  0560  160A  118A  216D  120A  118A  	fcall	_nop
 10963  0565  160A  118A  216D  120A  118A  	fcall	_nop
 10964  056A  160A  118A  216D  120A  118A  	fcall	_nop
 10965  056F  160A  118A  216D  120A  118A  	fcall	_nop
 10966  0574  160A  118A  216D  120A  118A  	fcall	_nop
 10967  0579  160A  118A  216D  120A  118A  	fcall	_nop
 10968  057E  160A  118A  216D  120A  118A  	fcall	_nop
 10969  0583  160A  118A  216D  120A  118A  	fcall	_nop
 10970  0588  160A  118A  216D  120A  118A  	fcall	_nop
 10971  058D  160A  118A  216D  120A  118A  	fcall	_nop
 10972  0592  160A  118A  216D  120A  118A  	fcall	_nop
 10973  0597  160A  118A  216D  120A  118A  	fcall	_nop
 10974  059C  160A  118A  216D  120A  118A  	fcall	_nop
 10975  05A1  160A  118A  216D  120A  118A  	fcall	_nop
 10976  05A6  160A  118A  216D  120A  118A  	fcall	_nop
 10977                           
 10978                           ;Automated Solar Panel Orientation Setter.c: 505: }
 10979  05AB  2DDE               	goto	l6933
 10980  05AC                     l6907:	
 10981                           
 10982                           ;Automated Solar Panel Orientation Setter.c: 509: else if(pressedKey=='C'){
 10983  05AC  3043               	movlw	67
 10984  05AD  0660               	xorwf	main@pressedKey^(0+128),w
 10985  05AE  1D03               	btfss	3,2
 10986  05AF  2DC5               	goto	l6919
 10987                           
 10988                           ;Automated Solar Panel Orientation Setter.c: 511: RC1 = 1;
 10989  05B0  1283               	bcf	3,5	;RP0=0, select bank0
 10990  05B1  1487               	bsf	7,1	;volatile
 10991                           
 10992                           ;Automated Solar Panel Orientation Setter.c: 512: Serial_Print("Switched to Mode : ");
 10993  05B2  3001               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
 10994  05B3  160A  118A  2312  120A  118A  	fcall	_Serial_Print
 10995                           
 10996                           ;Automated Solar Panel Orientation Setter.c: 513: Serial_Println_Int((int)state);
 10997  05B8  0857               	movf	_state,w
 10998  05B9  00B3               	movwf	Serial_Println_Int@val
 10999  05BA  01B4               	clrf	Serial_Println_Int@val+1
 11000  05BB  120A  158A  25EF  120A  118A  	fcall	_Serial_Println_Int
 11001                           
 11002                           ;Automated Solar Panel Orientation Setter.c: 514: RC1 = 0;
 11003  05C0  1283               	bcf	3,5	;RP0=0, select bank0
 11004  05C1  1303               	bcf	3,6	;RP1=0, select bank0
 11005  05C2  1087               	bcf	7,1	;volatile
 11006                           
 11007                           ;Automated Solar Panel Orientation Setter.c: 516: state = 96;
 11008  05C3  3060               	movlw	96
 11009  05C4  2DDD               	goto	L1
 11010  05C5                     l6919:	
 11011                           ;Automated Solar Panel Orientation Setter.c: 517: }
 11012                           
 11013                           
 11014                           ;Automated Solar Panel Orientation Setter.c: 521: else if(pressedKey=='D'){
 11015  05C5  3044               	movlw	68
 11016  05C6  0660               	xorwf	main@pressedKey^(0+128),w
 11017  05C7  1D03               	btfss	3,2
 11018  05C8  2DDE               	goto	l6933
 11019                           
 11020                           ;Automated Solar Panel Orientation Setter.c: 523: RC1 = 1;
 11021  05C9  1283               	bcf	3,5	;RP0=0, select bank0
 11022  05CA  1487               	bsf	7,1	;volatile
 11023                           
 11024                           ;Automated Solar Panel Orientation Setter.c: 524: Serial_Print("Switched to Mode : ");
 11025  05CB  3001               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
 11026  05CC  160A  118A  2312  120A  118A  	fcall	_Serial_Print
 11027                           
 11028                           ;Automated Solar Panel Orientation Setter.c: 525: Serial_Println_Int((int)state);
 11029  05D1  0857               	movf	_state,w
 11030  05D2  00B3               	movwf	Serial_Println_Int@val
 11031  05D3  01B4               	clrf	Serial_Println_Int@val+1
 11032  05D4  120A  158A  25EF  120A  118A  	fcall	_Serial_Println_Int
 11033                           
 11034                           ;Automated Solar Panel Orientation Setter.c: 526: RC1 = 0;
 11035  05D9  1283               	bcf	3,5	;RP0=0, select bank0
 11036  05DA  1303               	bcf	3,6	;RP1=0, select bank0
 11037  05DB  1087               	bcf	7,1	;volatile
 11038                           
 11039                           ;Automated Solar Panel Orientation Setter.c: 528: state = 95;
 11040  05DC  305F               	movlw	95
 11041  05DD                     L1:	
 11042  05DD  00D7               	movwf	_state
 11043  05DE                     l6933:	
 11044  05DE  1283               	bcf	3,5	;RP0=0, select bank0
 11045  05DF  1303               	bcf	3,6	;RP1=0, select bank0
 11046  05E0  0857               	movf	_state,w
 11047                           
 11048                           ; Switch size 1, requested type "space"
 11049                           ; Number of cases is 18, Range of values is 0 to 96
 11050                           ; switch strategies available:
 11051                           ; Name         Instructions Cycles
 11052                           ; simple_byte           55    28 (average)
 11053                           ; jumptable            260     6 (fixed)
 11054                           ;	Chosen strategy is simple_byte
 11055  05E1  3A00               	xorlw	0	; case 0
 11056  05E2  1903               	skipnz
 11057  05E3  2DDE               	goto	l6933
 11058  05E4  3A01               	xorlw	1	; case 1
 11059  05E5  120A  118A  1903   	skipnz
 11060  05E8  2EBA  120A  118A   	goto	l6443
 11061  05EB  3A03               	xorlw	3	; case 2
 11062  05EC  1903               	skipnz
 11063  05ED  2E31               	goto	L44
 11064  05EE  3A01               	xorlw	1	; case 3
 11065  05EF  1903               	skipnz
 11066  05F0  2E28               	goto	L37
 11067  05F1  3A07               	xorlw	7	; case 4
 11068  05F2  1903               	skipnz
 11069  05F3  2E1F               	goto	L31
 11070  05F4  3A0E               	xorlw	14	; case 10
 11071  05F5  1903               	skipnz
 11072  05F6  2E34               	goto	L46
 11073  05F7  3A1E               	xorlw	30	; case 20
 11074  05F8  1903               	skipnz
 11075  05F9  2852               	goto	l6667
 11076  05FA  3A0A               	xorlw	10	; case 30
 11077  05FB  1903               	skipnz
 11078  05FC  2AB6               	goto	l6741
 11079  05FD  3A36               	xorlw	54	; case 40
 11080  05FE  1903               	skipnz
 11081  05FF  2CCB               	goto	l6815
 11082  0600  3A01               	xorlw	1	; case 41
 11083  0601  1903               	skipnz
 11084  0602  2E22               	goto	L33
 11085  0603  3A03               	xorlw	3	; case 42
 11086  0604  1903               	skipnz
 11087  0605  2E2B               	goto	L39
 11088  0606  3A70               	xorlw	112	; case 90
 11089  0607  1903               	skipnz
 11090  0608  2DDE               	goto	l6933
 11091  0609  3A01               	xorlw	1	; case 91
 11092  060A  1903               	skipnz
 11093  060B  2E37               	goto	L48
 11094  060C  3A07               	xorlw	7	; case 92
 11095  060D  1903               	skipnz
 11096  060E  282A               	goto	l6657
 11097  060F  3A01               	xorlw	1	; case 93
 11098  0610  1903               	skipnz
 11099  0611  2A93               	goto	l6731
 11100  0612  3A03               	xorlw	3	; case 94
 11101  0613  1903               	skipnz
 11102  0614  2CA6               	goto	l6805
 11103  0615  3A01               	xorlw	1	; case 95
 11104  0616  1903               	skipnz
 11105  0617  2E25               	goto	L35
 11106  0618  3A3F               	xorlw	63	; case 96
 11107  0619  1903               	skipnz
 11108  061A  2E2E               	goto	L41
 11109  061B  2DDE               	goto	l6933
 11110  061C  120A  118A  2810   	ljmp	start
 11111  061F                     L31:	
 11112  061F                     __end_of_main:	
 11113  061F  120A  118A  2EC2   	ljmp	l6449
 11114  0622                     L33:	
 11115  0622  120A  118A  2EE8   	ljmp	l486
 11116  0625                     L35:	
 11117  0625  120A  118A  2EC4   	ljmp	l6451
 11118  0628                     L37:	
 11119  0628  120A  118A  2EC0   	ljmp	l6447
 11120  062B                     L39:	
 11121  062B  120A  158A  2A81   	ljmp	l504
 11122  062E                     L41:	
 11123  062E  120A  158A  2A5B   	ljmp	l6515
 11124  0631                     L44:	
 11125  0631  120A  118A  2EBE   	ljmp	l6445
 11126  0634                     L46:	
 11127  0634  160A  158A  2E2E   	ljmp	l6603
 11128  0637                     L48:	
 11129  0637  160A  158A  2E09   	ljmp	l6593


Data Sizes:
    Strings     176
    Constant    0
    Data        1
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     49      57
    BANK1            80     23      66
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_24(CODE[17]), STR_23(CODE[17]), STR_18(CODE[17]), STR_17(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    Serial_Print@a	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_28(CODE[20]), STR_27(CODE[20]), STR_26(CODE[20]), STR_25(CODE[20]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_LCD_print_char
    i1_LCDTimeUpdate->i1_LCD_print_char
    i1_LCD_print_char->i1___lwdiv
    i1_position->i1_lcd_add

Critical Paths under _main in BANK0

    _main->___fttol
    _printf->_putch
    _putch->_lcd_add
    _eeprom_write->___bmul
    _clr_display->_lcd_add
    _a2d_read->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    ___lbtoft->___ftpack
    ___ftdiv->___lwtoft
    _Serial_Print_Int->___awdiv
    _LCDTimeUpdate->_LCD_print_char
    _LCD_print_char->___awdiv
    _position->_lcd_add
    _CheckMode->_Serial_Println_Int
    _Serial_Println_Int->___awdiv
    ___awdiv->___awmod
    ___awdiv->___wmul
    _CheckKeyPad->_RowNo
    _Calculate->_RotateMotorRight

Critical Paths under _isr in BANK0

    _isr->i1_LCDTimeUpdate

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0  102975
                                             46 BANK0      3     3      0
                                              0 BANK1     23    23      0
                          _Calculate
                        _CheckKeyPad
                          _CheckMode
                      _LCDTimeUpdate
                     _LCD_print_char
                    _RotateMotorLeft
                   _RotateMotorRight
                        _Serial_Init
                     _Serial_NewLine
                       _Serial_Print
                   _Serial_Print_Int
                 _Serial_Println_Int
                      _Setup_IOports
                        _Timer1_Init
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
                            ___ltdiv
                            ___ltmod
                           ___lwtoft
                             ___wmul
                           _a2d_read
                          _atod_init
                        _clr_display
                        _eeprom_read
                       _eeprom_write
                    _enableInterrupt
                           _lcd_init
                                _nop
                           _position
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              15    15      0     456
                                              8 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      31
                                              6 BANK0      2     2      0
                            _lcd_add
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     340
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _enableInterrupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         2     1      1     192
                                              8 BANK0      2     1      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _clr_display                                          2     2      0       0
                                              6 BANK0      2     2      0
                            _lcd_add
 ---------------------------------------------------------------------------------
 (1) _atod_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _a2d_read                                             0     0      0   11726
                            ___awdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                             ___wmul
                     _read_a2d_value
 ---------------------------------------------------------------------------------
 (2) _read_a2d_value                                       6     4      2      74
                                              5 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1009
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2359
                                             13 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     696
                                             33 BANK0     13     9      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2822
                                             18 BANK0     15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                        _eeprom_read (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ltmod                                              7     1      6     622
                                              5 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) ___ltdiv                                             10     4      6     631
                                              5 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             5     1      4    2099
                                             13 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2884
                                             16 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                              5 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               3     2      1     201
                                              5 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Setup_IOports                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Serial_Print_Int                                     3     1      2   11560
                                             19 BANK0      3     1      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Serial_NewLine                                       1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serial_Init                                          3     3      0       0
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCDTimeUpdate                                        2     2      0   12481
                                             25 BANK0      2     2      0
                     _LCD_print_char
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     552
                                              5 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              5 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCD_print_char                                       6     1      5   11428
                                             19 BANK0      6     1      5
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ltdiv (ARG)
                            ___ltmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                            _lcd_add
                           _position
 ---------------------------------------------------------------------------------
 (1) _position                                             5     4      1    1015
                                              6 BANK0      5     4      1
                            _lcd_add
 ---------------------------------------------------------------------------------
 (3) _lcd_add                                              1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckMode                                            1     1      0   13126
                                             22 BANK0      1     1      0
                        _CheckKeyPad
                       _Serial_Print
                 _Serial_Println_Int
                                _nop
 ---------------------------------------------------------------------------------
 (1) _nop                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Serial_Println_Int                                   3     1      2   11040
                                             19 BANK0      3     1      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4    5144
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    4766
                                             11 BANK0      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Serial_Print                                         2     2      0     545
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyPad                                          5     5      0    1507
                                              9 BANK0      5     5      0
                           _ColomnNo
                              _RowNo
 ---------------------------------------------------------------------------------
 (3) _RowNo                                                4     2      2      46
                                              5 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _ColomnNo                                             2     0      2     189
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Calculate                                            2     2      0     647
                                             11 BANK0      2     2      0
                    _RotateMotorLeft
                   _RotateMotorRight
 ---------------------------------------------------------------------------------
 (1) _RotateMotorRight                                     6     4      2     376
                                              5 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _RotateMotorLeft                                      4     2      2     271
                                              5 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  3     3      0    2246
                                              2 BANK0      3     3      0
                    i1_LCDTimeUpdate
                   i1_LCD_print_char
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (6) i1_LCDTimeUpdate                                      2     2      0    1256
                                              0 BANK0      2     2      0
                   i1_LCD_print_char
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (6) i1___lwmod                                            5     1      4     315
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (7) i1___lwdiv                                            7     3      4     266
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (6) i1_LCD_print_char                                     6     1      5     675
                                              7 COMMON     6     1      5
                          i1___lwdiv (ARG)
                          i1___lwmod (ARG)
                          i1_lcd_add
                         i1_position
 ---------------------------------------------------------------------------------
 (7) i1_position                                           5     4      1     141
                                              1 COMMON     5     4      1
                          i1_lcd_add
 ---------------------------------------------------------------------------------
 (8) i1_lcd_add                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Calculate
     _RotateMotorLeft
     _RotateMotorRight
   _CheckKeyPad
     _ColomnNo
     _RowNo
   _CheckMode
     _CheckKeyPad
       _ColomnNo
       _RowNo
     _Serial_Print
     _Serial_Println_Int
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod
     _nop
   _LCDTimeUpdate
     _LCD_print_char
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___ltdiv (ARG)
       ___ltmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
       _lcd_add (ARG)
       _position (ARG)
         _lcd_add
     ___lwdiv
     ___lwmod
   _LCD_print_char
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod (ARG)
     ___ltdiv (ARG)
     ___ltmod (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
     _lcd_add (ARG)
     _position (ARG)
       _lcd_add
   _RotateMotorLeft
   _RotateMotorRight
   _Serial_Init
   _Serial_NewLine
   _Serial_Print
   _Serial_Print_Int
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _Serial_Println_Int
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod
   _Setup_IOports
   _Timer1_Init
   ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
   ___awmod
   ___bmul
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _eeprom_read (ARG)
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _eeprom_read (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lbtoft
     ___ftpack
   ___ltdiv
   ___ltmod
   ___lwtoft
     ___ftpack
   ___wmul
   _a2d_read
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _eeprom_read (ARG)
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _eeprom_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     ___wmul
     _read_a2d_value
   _atod_init
   _clr_display
     _lcd_add
   _eeprom_read
   _eeprom_write
     ___bmul (ARG)
   _enableInterrupt
   _lcd_init
   _nop
   _position
     _lcd_add
   _printf
     _putch
       _lcd_add

 _isr (ROOT)
   i1_LCDTimeUpdate
     i1_LCD_print_char
       i1___lwdiv (ARG)
       i1___lwmod (ARG)
       i1_lcd_add (ARG)
       i1_position (ARG)
         i1_lcd_add
     i1___lwdiv
     i1___lwmod
   i1_LCD_print_char
     i1___lwdiv (ARG)
     i1___lwmod (ARG)
     i1_lcd_add (ARG)
     i1_position (ARG)
       i1_lcd_add
   i1___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     17      42       7       82.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     31      39       5       71.3%
BITBANK0            50      0       1       4        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      89      12        0.0%
ABS                  0      0      89       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Mar 20 01:50:42 2016

          ?_Serial_Print_Int 0033                            _i 00E1                            _j 0055  
                          _x 00C5                            pc 0002               ___bmul@product 0026  
                __CFG_CP$OFF 0000                           PL2 1CE5                           PL4 0FA0  
                         PL6 0FA9                           PL8 1CF9                           _GO 00FA  
                         _RD 0C60                           _WR 0C61                 ___awdiv@sign 0030  
                         fsr 0004           ??_Serial_Print_Int 0035          ___wmul@multiplicand 0027  
                        PL10 0FB2                          PL20 0FE0                          PL12 0FBD  
                        PL30 1DED                          PL22 1DDF                          PL14 0FC5  
                        PL32 17F9                          PL24 0FE9                          PL16 0FCD  
                        PL34 0FF9                          PL26 0FF1                          PL18 0FD7  
                        PL36 1DF4                          PL28 1DE6                          PL38 1DFB  
                        l300 0DF1                          l310 0E49                          l304 0E0B  
                        l321 0EAB                          l313 0E63           _Serial_Println_Int 0DEF  
                        l307 0E2F                          l332 0EED                          l324 0EC5  
                        l340 0EFE                          l318 0E8F                          l343 0F09  
                        l263 16A6                          l504 0A81                          l601 1261  
                        l337 0EF9                          l329 0ED1                          l281 1BFE  
                        l274 131F                          l346 0F13                          l363 0CF2  
                        l507 0CD3                          l284 1C09                          l380 0D90  
                        l372 0D49                          l516 1E02                          l508 0B57  
                        l613 127F                          l606 1269                          l366 0D16  
                        l615 1289                          l391 0DD2                          l383 0DAA  
                        l359 0CD8                          l616 1293                          l640 1302  
                        l377 0D75                          l369 0D2F                          l642 1306  
                        l490 0725                          l396 0DDE                          l388 0DB6  
                        l733 0805                          l493 0761                          l654 1D8E  
                        l638 12FE                          l486 06E8                          l655 1D4C  
                        l591 1251                          l399 0DE3                          l487 06EA  
                        l665 1DDE                          l755 07DC                          l596 1259  
                        _GIE 005F                          _RC0 0038                          _RB2 0032  
                        _RA4 002C                          _RC1 0039                          _RB3 0033  
                        _RD0 0040                          _RC2 003A                          _RB4 0034  
                        _RD1 0041                          _RC3 003B                          _RB5 0035  
                        _RD2 0042                          _RC4 003C                          _RD3 0043  
                        _RC5 003D                          _RD4 0044                          _RD5 0045  
                        _RD6 0046                          _RD7 0047                 __CFG_CPD$OFF 0000  
                        _RX9 00C6                          _TX9 04C6                _LCDTimeUpdate 0862  
                        _Nop 02C1                          _isr 1331                          _nop 116D  
                        fsr0 0004                          indf 0000                 ___awmod@sign 002A  
               __CFG_FOSC$HS 0000          ?_Serial_Println_Int 0033                 __CFG_LVP$OFF 0000  
               ___ftdiv@cntr 0039                 ___ftdiv@sign 003E                         l1001 17BF  
                       l1013 17E7                         l1055 15BF                         l5211 0A02  
                       l5213 0A0B                         l5303 12BB                         l5215 0A14  
                       l5209 09F9                         l5225 0A1F                         l6017 1CDD  
                       l5323 12D9                         l5411 0F5E                         l6203 10F2  
                       l5229 0A25                         l6125 0DD5                         l6109 0DAD  
                       l5343 12F6                         l5271 1285                         l5255 130B  
                       l5407 0F56                         l5423 0F6D                         l5503 0E00  
                       l5191 09DA                         l5351 17C3                         l5193 09E3  
                       l6081 0D4B                         l5361 17E5                         l5353 17C8  
                       l5275 128F                         l5267 127B                         l5283 129D  
                       l5371 0F1E                         l5435 0F80                         l5443 0F93  
                       l5427 0F74                         l5531 0E82                         l5451 116D  
                       l5187 09C8                         l6059 0CE7                         l5363 17DC  
                       l5355 17CD                         l6315 15AE                         l5525 0E65  
                       l5189 09D1                         l5357 17D7                         l6413 0669  
                       l5623 1D97                         l5279 1299                         l5711 1210  
                       l5447 0F9B                         l6087 0D68                         l6415 0679  
                       l5705 1204                         l5385 0F31                         l5553 0EC8  
                       l6337 15D2                         l6185 081E                         l6505 079E  
                       l6433 0695                         l6291 1D22                         l5723 1227  
                       l5651 119D                         l5395 0F3F                         l5379 0F28  
                       l5803 16C2                         l6603 1E2E                         l6515 0A5B  
                       l6507 0A42                         l6451 06C4                         l6443 06BA  
                       l5741 124B                         l5717 121C                         l5493 1315  
                       l6365 1C73                         l5821 16F3                         l5901 179E  
                       l6445 06BE                         l5591 1D8F                         l5751 125C  
                       l5735 123F                         l5663 11B3                         l5743 124D  
                       l6447 06C0                         _ADIE 0466                         l5729 1233  
                       l5681 11D5                         l5657 11A8                         l5569 0EF0  
                       l6377 1C94                         l5817 16E2                         l6801 049F  
                       l6449 06C2                         l5763 1D43                         l5755 1264  
                       l5747 1254                         l5675 11C9                         l5915 091F  
                       l6299 1BE1                         l5851 1720                         l5843 1714  
                       l6731 0293                         ?_isr 0070                         l5693 11ED  
                       l5669 11BE                         l6389 1C3F                         l6397 1C5B  
                       l6805 04A6                         l6741 02B6                         l6725 0283  
                       l6557 0B9E                         l5759 126B                         l5687 11E1  
                       l5927 0936                         l5855 1730                         l5839 1704  
                       l6815 04CB                         l6727 0268                         l6591 0B15  
                       l6825 04E2                         l6729 028D                         l6657 002A  
                       l6593 1E09                         l6489 079A                         l5699 11F8  
                       l5939 0947                         l5947 095A                         l5867 1756  
                       l6907 05AC                         l6667 0052                         l5885 177A  
                       l5869 175B                         l6589 0BA1                         l6933 05DE  
                       ?_nop 0070                         l5895 1786                         l5799 16BA  
                       l6919 05C5                         l5897 1790                         l5889 1782  
                       l5977 1CEB                         _ADON 00F8                         l5997 1CBE  
                       l6797 0491                         _EEIE 046C                         STR_1 102B  
                       STR_2 101A                         STR_3 104D                         STR_4 103C  
                       STR_5 106F                         STR_6 10A2                         STR_7 10B3  
                       STR_8 10B3                         STR_9 10B3                         _BRGH 04C2  
                       _T0IE 005D                         _CREN 00C4                         _FERR 00C2  
                       u6210 09D7                         u6115 0995                         _PEIE 005E  
                       _INTE 005C                         u6310 0A11                         u6230 09E0  
                       u6135 09A2                         _RBIE 005B                         u6250 09F6  
                       u6170 09C5                         u6155 09AF                         _RCIE 0465  
                       _RCIF 0065                         u7045 1DA1                         u8021 0803  
                       u6270 09FF                         u6190 09CE                         u6095 0988  
                       u6290 0A08                         u9007 1DC2                         u8055 1D09  
                       u8135 15E0                         u8215 1C49                         u9017 1DCE  
                       _OERR 00C1                         u9027 1D5E                         u8075 1D2B  
                       u6715 0F48                         u9037 1D6A                         u8245 069E  
                       u9047 1D76                         u8175 1C81                         u9057 1D82  
                       u7475 1D55                         u6915 0E8D                         u7725 094D  
                       u8607 030E                         u6785 0F86                         u6865 0E09  
                       u8617 0835                         u6955 0ECF                         u8707 0D5A  
                       u7835 0CF0                         u7595 175F                         u8627 0843  
                       u7685 0928                         u7925 0DB4                         u8717 0D84  
                       u8637 0849                         u8485 0277                         u8807 08C8  
                       u8727 0D9D                         u8647 0859                         u8495 026F  
                       u6985 0EF7                         u8817 08EF                         u8737 0DC5  
                       u8657 16A0                         u8577 0C15                         u8907 0E74  
                       u8827 0900                         u8747 0DEC                         u7955 0DDC  
                       u8667 0CDE                         u8587 1E86                         u8917 0E9E  
                       u8837 090E                         u8757 1C04                         u7885 0D73  
                       u8677 0D06                         u8597 00AA                         u8927 0EB8  
                       u8847 0A2C                         u8767 1C11                         u8687 0D23  
                       u8937 0EE0                         u8857 0A3C                         u8777 10D5  
                       u8697 0D3C                         u8947 0F07                         u8867 0DF7  
                       u8787 087E                         u8957 0F11                         u8877 0E1F  
                       u8797 08A1                         u8967 0F1B                         u8887 0E3C  
                       u8977 132B                         u8897 0E56                         u8987 1DAA  
                       u8997 1DB6                         _SPEN 00C7                         _TXIE 0464  
                       _WREN 0C62                         _TXEN 04C5                         _TXIF 0064  
                       _SYNC 04C4               ??_eeprom_write 0029                 __CFG_WRT$OFF 0000  
                       _bit0 03E8                         _bit1 03E9                         _bit2 03EA  
                       _bit3 03EB                         _bit4 03EC                         _bit5 03ED  
                       _bit6 03EE                         _bit7 02C4                         _ldr1 00BB  
                       _ldr2 0053                         _main 063A                 ___ftpack@arg 0025  
                       _hour 0051                 ___ftpack@exp 0028                         btemp 007E  
                       ltemp 007E              _enableInterrupt 1BED     __size_of_RotateMotorLeft 004C  
                       start 0010                         ttemp 007E                         wtemp 007E  
          ___bmul@multiplier 0027                   i1_position 1566                 ___ftmul@cntr 003F  
               ___ftmul@sign 0040         ??_Serial_Println_Int 0035                  _CheckKeyPad 1172  
               ___fttol@exp1 004D                 ___fttol@lval 0049                        ??_isr 0022  
                      ??_nop 0025                        _ADDEN 00C3                        ?_main 0070  
                      _BCLIE 046B              __end_of___awdiv 0F63                        _EEADR 010D  
                      STR_10 10B3                        STR_11 1080                        STR_20 10B3  
                      STR_12 10A2                        STR_21 10B3                        STR_13 10B3  
                      STR_22 10B3                        STR_14 10B3                        STR_15 10B3  
                      STR_23 105E                        STR_16 10B3                        STR_24 10A2  
                      STR_17 1091                        STR_25 1006                __CFG_WDTE$OFF 0000  
                      STR_26 1006                        STR_18 10A2                        STR_19 10B3  
                      STR_27 1006                        STR_28 1006              __end_of___awmod 0FA0  
             ?_LCDTimeUpdate 0070                        _CARRY 0018              __end_of___ftdiv 1605  
            __end_of___ftmul 174C              ___awdiv@divisor 002B              __end_of___fttol 17A7  
            __end_of___ltdiv 1C9B              __end_of___lwdiv 093B              __end_of___ltmod 1C62  
            __end_of___lwmod 095F                        i1l681 1384                        i1l690 13A1  
                      i1l696 13AD              ___awdiv@counter 002F                        _RCREG 001A  
                      _C_Bat 00C6                        _TMR1H 000F                        _TMR1L 000E  
                      _SPBRG 0099                        _PORTA 0005                        _PORTB 0006  
                      _PORTC 0007                        _PORTD 0008                        _PORTE 0009  
                      _PSPIE 0467                i1position@row 0075                        _TRISA 0085  
                      _TRISB 0086                        _TRISC 0087                        _TRISD 0088  
                      _SSPIE 0463                        _TRISE 0089                        _TXREG 0019  
                      _V_Bat 00C8              __end_of_lcd_add 0A1A                        _RowNo 12F9  
         i1___lwmod@dividend 0072                ___ftpack@sign 0029                        _state 0057  
                      _putch 0831                 position@post 0029               __pbitbssCOMMON 03E8  
             __CFG_BOREN$OFF 0000                        pclath 000A                        ltemp0 007E  
                      ltemp1 0082                        ltemp2 0086                        ltemp3 0080  
             _Serial_NewLine 1BFE                        ttemp0 007E                        ttemp1 0081  
                      ttemp2 0084                        ttemp3 0087                        ttemp4 007F  
                      status 0003                        wtemp0 007E                        wtemp1 0080  
                      wtemp2 0082                        wtemp3 0084                        wtemp4 0086  
                      wtemp5 0088                        wtemp6 007F           __size_ofi1___lwdiv 002A  
         __size_ofi1___lwmod 0024             __end_of_a2d_read 1692              __initialization 0013  
         __size_ofi1_lcd_add 00BB             __end_of_ColomnNo 12F9           __size_of_Calculate 0044  
               __end_of_main 061F           __size_of_CheckMode 0090     __end_of_RotateMotorRight 1DDF  
              main@angle_old 00DC            ?i1_LCD_print_char 0077                       ??_main 004E  
              ___fttol@sign1 0048      __size_of_LCD_print_char 001C           ??i1_LCD_print_char 007C  
                     ?_RowNo 0025                       _ADCON0 001F                       _ADCON1 009F  
            i1_LCDTimeUpdate 13B6                       _CCP1IE 0462                       _CCP2IE 0468  
                     _ADRESH 001E                       _ADRESL 009E                       _EEDATA 010C  
                     _EECON1 018C                       _EECON2 018D       __end_of_Serial_NewLine 1C17  
    __end_of_enableInterrupt 1BFE             ___awdiv@dividend 002D                       ?_putch 0070  
           __end_of___ftpack 17F9             __end_of___lbtoft 159D                       i1l4103 14A6  
                     i1l3261 151D                       i1l3263 1526                       i1l4071 146B  
                     i1l3281 1545                       i1l3265 152F                       i1l5113 134B  
                     i1l3283 154E                       i1l3259 1514                       i1l3531 1571  
                     i1l4083 1482                       i1l3285 1557                       i1l5117 135D  
                     i1l5141 138A                       i1l3287 1560                       i1l3527 156B  
                     i1l4095 1493                       i1l5153 1398                       i1l5163 13A6  
                     i1l5155 1399                       i1l5165 13A7                       u341_25 14FB  
                     u351_20 1542                       u343_20 1511                       u335_25 14D4  
                     u504_25 1474                       u353_20 154B                       u345_20 151A  
                     u337_25 14E1             __end_of___lwtoft 17B7                       u355_20 1554  
                     u347_20 1523                       u339_25 14EE                       u508_25 1499  
                     u357_20 155D                       u349_20 152C                       u910_27 144E  
                     u911_27 145A                       u912_27 1579                       u913_27 1587  
                     u906_27 13D4                       u907_27 13F7                       u908_27 141A  
                     _TMR1IE 0460                       _TMR1IF 0060                       _TMR1CS 0081  
                     u909_27 143D                       _TMR2IE 0461                       _TMR1ON 0080  
       __size_of_clr_display 001C               i1position@post 0074                ??_Serial_Init 0025  
              main@newTimeHr 00CF                       _V_Bat2 00B4               __CFG_PWRTE$OFF 0000  
              ??_Timer1_Init 0025                  ?i1_position 0071         __size_of_eeprom_read 001B  
           __end_of_lcd_init 1CE5                       ___bmul 1BDE                       ___wmul 16B8  
                  ??___awdiv 002F                    ??___awmod 0029                    ??___ftdiv 0036  
                  ??___ftmul 0038                    ??___fttol 0045                    ??___ltdiv 002B  
          ??_RotateMotorLeft 0027                    ??___lwdiv 0029                    ??___ltmod 002B  
                  ??___lwmod 0029                       _buffer 00A0              ??_LCDTimeUpdate 0039  
           ___awdiv@quotient 0031                       _minute 00BD                       _second 00C1  
            ___awmod@divisor 0025         __end_of_eeprom_write 07FA              ___awmod@counter 0029  
                     _printf 081B                    ??_lcd_add 0025        ___ftmul@f3_as_product 003C  
  LCD_print_char@print_value 0037            __end_ofi1___lwdiv 1487            __end_ofi1___lwmod 14AB  
                     saved_w 007E             __end_of_position 0A42            __end_ofi1_lcd_add 1566  
          __end_of_Calculate 1D43            __end_of_CheckMode 116D        __end_of_Setup_IOports 1C31  
            ?_Serial_NewLine 0070        main@tmp_angle_display 00D3      __end_of__initialization 0026  
            eeprom_read@addr 0025                   ___ftdiv@f1 0033                   ___ftdiv@f2 0030  
                 ___ftdiv@f3 003A                   ___lbtoft@c 0031          ___bmul@multiplicand 0025  
                 ___ftmul@f1 0032                   ___ftmul@f2 0035                   ___fttol@f1 0041  
             __pcstackCOMMON 0070                __end_of_RowNo 1312          __end_of_Serial_Init 10DD  
               __pidataBANK1 0000                __end_of_putch 0846        RotateMotorRight@value 0025  
        __end_of_Timer1_Init 1BDE                   __end_ofPL2 1CF9                   __end_ofPL4 0FA9  
                 __end_ofPL6 0FB2                   __end_ofPL8 1CFF                   ___lwtoft@c 002D  
    __end_ofi1_LCDTimeUpdate 1443          i1LCD_print_char@row 0077                    ?_a2d_read 0070  
          eeprom_write@value 0028                      ??_RowNo 0027                 _angleChanged 02C3  
         __size_of_atod_init 0006    __size_of_Serial_Print_Int 0119          __size_ofi1_position 0027  
                  ?_ColomnNo 0025                      ??_putch 0026             ?_enableInterrupt 0070  
                 __pbssBANK0 0051                   __pbssBANK1 00A0                ?_Serial_Print 0070  
        Serial_Print_Int@val 0033      __size_of_read_a2d_value 0026  i1LCD_print_char@print_value 007B  
                 _angleCount 00B7                   __pmaintext 063A                      ?___bmul 0025  
                    ?___wmul 0025                 ?_CheckKeyPad 0070                   __pintentry 0004  
                  ?___ftpack 0025                    ?___lbtoft 002D               _LCD_print_char 08F5  
                    ?_printf 0070                      _T1CKPS0 0084                      _T1CKPS1 0085  
                  ?___lwtoft 002D                      _T1OSCEN 0083                   ??_a2d_read 004E  
                  ?_lcd_init 0070                   ??_ColomnNo 0027               ??_Serial_Print 0025  
                 __stringtab 1000       i1LCD_print_char@column 0079               main@newTimeMin 00D1  
                _Serial_Init 10C1         main@tmp_stepsto_turn 00CA            main@angle_display 00DE  
              Serial_Print@a 0026                  _Timer1_Init 1BD0        __size_of_eeprom_write 0020  
          __end_of_atod_init 0800  __size_of_Serial_Println_Int 012F              __size_of___bmul 000F  
                    ___awdiv 0F1E                      ___awmod 0F63                    ?_position 0026  
                    ___ftdiv 159D              __size_of___wmul 0019                      ___ftmul 16D1  
                    ___fttol 174C                      ___ltdiv 1C62       __end_of_LCD_print_char 0911  
                    ___lwdiv 0911                      ___ltmod 1C31                      ___lwmod 093B  
          ?_RotateMotorRight 0025                   ??___ftpack 002A                   ??___lbtoft 0031  
                    __ptext1 081B                      __ptext2 0831                      __ptext3 1C9B  
                    __ptext4 1BED                      __ptext5 07DA                      __ptext6 0800  
                    __ptext7 0846                      __ptext8 07FA                      __ptext9 1605  
                    _lcd_add 095F              __size_of_printf 0016           ??_RotateMotorRight 0027  
                 ??___lwtoft 0030             ?i1_LCDTimeUpdate 0070            i1___lwdiv@divisor 0070  
               __size_of_isr 0085                 __size_of_nop 0005            i1___lwdiv@counter 0076  
           ___awmod@dividend 0027                      _msecond 00BF               position@collum 0026  
                    clrloop0 10BA                      main@tmp 00D8                   ??_lcd_init 0025  
       end_of_initialization 0026    __size_ofi1_LCD_print_char 001A         LCD_print_char@column 0035  
             main@pressedKey 00E0                 _eeprom_write 07DA              _RotateMotorLeft 1D43  
        CheckMode@pressedKey 0036             ___ltdiv@dividend 0028                 ??i1_position 0072  
                    printf@c 0028                      printf@f 0029                      psplit$0 E0043  
                    psplit$1 430044                      psplit$2 440045                   ??_position 0027  
            ?_LCD_print_char 0033        Serial_Println_Int@val 0033             ??_Serial_NewLine 0025  
           ___ltdiv@quotient 002B             _Serial_Print_Int 0CD6         pnum$maintext_split_1 0043  
       pnum$maintext_split_2 0044         pnum$maintext_split_3 0045                    i1___lwdiv 145D  
                  i1___lwmod 1487                ??_clr_display 0026           __end_ofi1_position 158D  
        CheckKeyPad@colomnNo 002A                    i1_lcd_add 14AB             putch@print_value 0027  
             _read_a2d_value 1692                    _Calculate 1CFF                    _CheckMode 10DD  
                ___ftdiv@exp 003D                ??_eeprom_read 0025                  ___ftmul@exp 003B  
             __end_of___bmul 1BED         __end_of_Serial_Print 1331               __end_of___wmul 16D1  
       __size_of_CheckKeyPad 00FB            i1___lwmod@divisor 0070                __pbitbssBANK0 02C0  
      __end_of_LCDTimeUpdate 08F5            i1___lwmod@counter 0074                  position@row 002A  
             __end_of_printf 0831                  __end_ofPL10 0FBD                  __end_ofPL20 0FE9  
                __end_ofPL12 0FC5                  __end_ofPL30 1DF4                  __end_ofPL22 1DE6  
                __end_ofPL14 0FCD                  __end_ofPL32 1800                  __end_ofPL24 0FF1  
                __end_ofPL16 0FD7                  __end_ofPL34 1000                  __end_ofPL26 0FF9  
                __end_ofPL18 0FE0                  __end_ofPL36 1DFB                  __end_ofPL28 1DED  
                __end_ofPL38 1E02          start_initialization 0013         RotateMotorLeft@value 0025  
                __end_of_isr 13B6                  __end_of_nop 1172      __end_of_RotateMotorLeft 1D8F  
                 ?i1___lwdiv 0070                   ?i1___lwmod 0070            __size_of_a2d_read 008D  
     __end_of_read_a2d_value 16B8                   ?i1_lcd_add 0070                   ?_Calculate 0070  
          __size_of_ColomnNo 008C                   ?_CheckMode 0070          __end_of_clr_display 0862  
                   ??___bmul 0026                     ??___wmul 0029          __end_of_eeprom_read 081B  
                __pdataBANK1 00E1       __size_of_Setup_IOports 001A                     ??_printf 0028  
          __size_of___ftpack 0042            __size_of___lbtoft 0010                    ___latbits 0002  
          __size_of___lwtoft 0010                __pcstackBANK0 0020                __pcstackBANK1 00CA  
            ?_read_a2d_value 0025             i1_LCD_print_char 1443             eeprom_write@addr 0029  
          __size_of_lcd_init 004A                 ?_Serial_Init 0070     __size_of_enableInterrupt 0011  
               ?_Timer1_Init 0070             ___lwdiv@dividend 0027      read_a2d_value@a2d_value 0029  
                   ?___awdiv 002B                     ?___awmod 0025                     ?___ftdiv 0030  
                   ?___ftmul 0032                     ?___fttol 0041                     ?___ltdiv 0025  
                   ?___lwdiv 0025                     ?___ltmod 0025                     ?___lwmod 0025  
                  _atod_init 07FA            __size_of_position 0028                    __pstrings 1000  
                   ?_lcd_add 0070        read_a2d_value@channel 0028               __size_of_RowNo 0019  
           ___lwdiv@quotient 002A                  ??i1___lwdiv 0074             ?_RotateMotorLeft 0025  
                ??i1___lwmod 0074    __size_of_RotateMotorRight 0050                  _clr_display 0846  
             __size_of_putch 0015                _Setup_IOports 1C17                  ??i1_lcd_add 0070  
           ___ltmod@dividend 0028                  ??_Calculate 002B            interrupt_function 0004  
                ??_CheckMode 0036               ___wmul@product 0029                    clear_ram0 10B9  
                _eeprom_read 0800             ??_LCD_print_char 0038   __end_of_Serial_Println_Int 0F1E  
            ___ltdiv@divisor 0025        __size_of_Serial_Print 001F              ___ltdiv@counter 002E  
           i1position@collum 0071     __end_of_Serial_Print_Int 0DEF              _sterpper_counts 00C3  
                 ?_atod_init 0070                  __stringbase 1005            ___wmul@multiplier 0025  
                  main@angle 00D6                     _BlinkDet 02C0                     _a2d_read 1605  
               _TimeBlink_on 02C2               ?_Setup_IOports 0070                     _ColomnNo 126D  
   __size_ofi1_LCDTimeUpdate 008D                 _Serial_Print 1312                     RowNo@row 0027  
           lcd_init@DelayLCD 0025                 pnum$maintext 000E             __size_of___awdiv 0045  
           __size_of___awmod 003D             __size_of___ftdiv 0068             __size_of___ftmul 007B  
           __size_of___fttol 005B            ??_enableInterrupt 0025             __size_of___ltdiv 0039  
           __size_of___lwdiv 002A             __size_of___ltmod 0031             __size_of___lwmod 0024  
                   ___ftpack 17B7                     ___lbtoft 158D           __end_of__stringtab 1006  
                   ___lwtoft 17A7             __size_of_lcd_add 00BB                  _currentMode 00B9  
                   _main$814 00DA              ___lwdiv@divisor 0025              ___lwdiv@counter 0029  
                   __ptext10 1692                     __ptext11 16B8                     __ptext20 1BDE  
                   __ptext12 17A7                     __ptext21 1BD0                     __ptext13 174C  
                   __ptext30 0A1A                     __ptext22 1C17                     __ptext14 16D1  
                   __ptext31 095F                     __ptext23 0CD6                     __ptext15 1C31  
                   __ptext40 126D                     __ptext32 10DD                     __ptext24 1BFE  
                   __ptext16 1C62                     __ptext41 1CFF                     __ptext33 116D  
                   __ptext25 10C1                     __ptext17 158D                     __ptext50 14AB  
                   __ptext42 1D8F                     __ptext34 0DEF                     __ptext26 0862  
                   __ptext18 159D                     __ptext43 1D43                     __ptext35 0F63  
                   __ptext27 093B                     __ptext19 17B7                     __ptext44 1331  
                   __ptext36 0F1E                     __ptext28 0911                     __ptext45 13B6  
                   __ptext37 1312                     __ptext29 08F5                     __ptext46 1487  
                   __ptext38 1172                     __ptext47 145D                     __ptext39 12F9  
                   __ptext48 1443                     __ptext49 1566                     _lcd_data 0056  
                   _lcd_init 1C9B           i1___lwdiv@dividend 0072                __size_of_main FFE5  
            ___ltmod@divisor 0025              ___ltmod@counter 002B         __size_of_Serial_Init 001C  
              ??_CheckKeyPad 0029         __size_of_Timer1_Init 000E                     _position 0A1A  
   __end_ofi1_LCD_print_char 145D                  ??_atod_init 0025                ColomnNo@rowNo 0025  
         i1___lwdiv@quotient 0074             ??_read_a2d_value 0027              ??_Setup_IOports 0025  
           _RotateMotorRight 1D8F                     intlevel1 0000      __size_of_Serial_NewLine 0019  
           ___lwmod@dividend 0027                  _timeChanged 02C5       __size_of_LCDTimeUpdate 0093  
          ??i1_LCDTimeUpdate 0020                    stringcode 1000            LCD_print_char@row 0033  
           CheckKeyPad@rowNo 002C            RotateMotorRight@i 0029          __end_of_CheckKeyPad 126D  
            ___lwmod@divisor 0025              ___lwmod@counter 0029             main@stepsto_turn 00CD  
                   stringdir 1000                     stringtab 1000                 ?_clr_display 0070  
              ?_eeprom_write 0028                 ?_eeprom_read 0070         CheckKeyPad@charactor 0029  
